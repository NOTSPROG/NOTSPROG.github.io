<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NX の 博客</title>
  <icon>https://www.nickxu.top/static/favicon.jpg</icon>
  
  <link href="https://www.nickxu.top/atom.xml" rel="self"/>
  
  <link href="https://www.nickxu.top/"/>
  <updated>2023-06-17T14:16:02.922Z</updated>
  <id>https://www.nickxu.top/</id>
  
  <author>
    <name>Nick Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>『算法拾遗』二叉树（Binary Tree）</title>
    <link href="https://www.nickxu.top/posts/281.html"/>
    <id>https://www.nickxu.top/posts/281.html</id>
    <published>2023-06-17T14:13:47.000Z</published>
    <updated>2023-06-17T14:16:02.922Z</updated>
    
    <content type="html"><![CDATA[<p>大概复习了一遍</p><p>只能等期末考试后再好好整理了（</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大概复习了一遍&lt;/p&gt;
&lt;p&gt;只能等期末考试后再好好整理了（&lt;/p&gt;
</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://www.nickxu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="算法拾遗" scheme="https://www.nickxu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97/"/>
    
    <category term="二叉树" scheme="https://www.nickxu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    
    <category term="树" scheme="https://www.nickxu.top/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>『算法拾遗』跳表（Skip List）</title>
    <link href="https://www.nickxu.top/posts/280.html"/>
    <id>https://www.nickxu.top/posts/280.html</id>
    <published>2023-06-13T16:54:15.000Z</published>
    <updated>2023-06-17T14:14:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>别急，这周内会写</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;别急，这周内会写&lt;/p&gt;
</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://www.nickxu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="算法拾遗" scheme="https://www.nickxu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97/"/>
    
    <category term="跳表" scheme="https://www.nickxu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97/%E8%B7%B3%E8%A1%A8/"/>
    
    
    <category term="跳表" scheme="https://www.nickxu.top/tags/%E8%B7%B3%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>『算法拾遗』重学主流排序算法</title>
    <link href="https://www.nickxu.top/posts/279.html"/>
    <id>https://www.nickxu.top/posts/279.html</id>
    <published>2023-06-13T04:21:54.000Z</published>
    <updated>2023-06-13T04:22:56.547Z</updated>
    
    
    
    
    <category term="数据结构与算法" scheme="https://www.nickxu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="算法拾遗" scheme="https://www.nickxu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97/"/>
    
    <category term="排序" scheme="https://www.nickxu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97/%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>直观理解前后端概念 —— 以逆向学院教评系统为例</title>
    <link href="https://www.nickxu.top/posts/279.html"/>
    <id>https://www.nickxu.top/posts/279.html</id>
    <published>2023-06-04T05:29:53.000Z</published>
    <updated>2023-06-04T06:49:04.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念理解">概念理解</h1><h2 id="前端概念">前端概念</h2><p>给用户画画，呈现界面</p><ul><li>html 有什么</li><li>css 长什么样</li><li>js 交互逻辑、与后端交互</li></ul><h2 id="后端概念">后端概念</h2><p>提供接口给前端调用</p><p>响应前端请求，获取数据</p><hr><h1 id="实操">实操</h1><p><a href="http://www.teachingevaluationsystem.cn:8088/#/login">http://www.teachingevaluationsystem.cn:8088/#/login</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念理解&quot;&gt;概念理解&lt;/h1&gt;
&lt;h2 id=&quot;前端概念&quot;&gt;前端概念&lt;/h2&gt;
&lt;p&gt;给用户画画，呈现界面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;html 有什么&lt;/li&gt;
&lt;li&gt;css 长什么样&lt;/li&gt;
&lt;li&gt;js 交互逻辑、与后端交互&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>后端层与层传递结构体时自动转换类型</title>
    <link href="https://www.nickxu.top/posts/278.html"/>
    <id>https://www.nickxu.top/posts/278.html</id>
    <published>2023-06-02T14:41:24.000Z</published>
    <updated>2023-06-02T14:44:50.841Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>未完成</p></blockquote><p>model 的 time.time</p><p>传到下一层 int64</p><p>使用 jinzhu 的 copy.copy() 自动转</p><p>（自己写一个 gorm.model，对那个字段实现转换的方法）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;未完成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;model 的 time.time&lt;/p&gt;
&lt;p&gt;传到下一层 int64&lt;/p&gt;
&lt;p&gt;使用 jinzhu 的 copy.copy() 自动转&lt;/p&gt;
&lt;p&gt;（自己写一个 gorm.model，对那</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>后端发送 lua 脚本给 Redis 执行</title>
    <link href="https://www.nickxu.top/posts/277.html"/>
    <id>https://www.nickxu.top/posts/277.html</id>
    <published>2023-06-02T14:33:17.000Z</published>
    <updated>2023-06-02T14:44:32.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>未完成</p></blockquote><p><a href="https://chat.openai.com/share/b589c637-0b1c-4ac4-83e2-d5a6a84e0d37">https://chat.openai.com/share/b589c637-0b1c-4ac4-83e2-d5a6a84e0d37</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;未完成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://chat.openai.com/share/b589c637-0b1c-4ac4-83e2-d5a6a84e0d37&quot;&gt;https://chat.openai.co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何在一个仓库中同时开发前后端项目</title>
    <link href="https://www.nickxu.top/posts/276.html"/>
    <id>https://www.nickxu.top/posts/276.html</id>
    <published>2023-06-01T09:31:30.000Z</published>
    <updated>2023-06-02T02:43:37.751Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202306011733625.png" alt="image-20230601下午53301310"></p><blockquote><p>如图，今天在群里问了个小问题</p></blockquote><p>TLDR; 直接说结论吧</p><ul><li><p>小项目直接开子目录，然后可以分别独立打包或者使用 <code>go embed</code></p></li><li><p>不同分支的方法应该没必要用</p><p>如果想做成两个独立项目就用 submodule</p><details class="toggle" ><summary class="toggle-button" style="">gpt 对 submodule 的介绍</summary><div class="toggle-content"><p>Git 的 Submodule 是一种在一个 Git 仓库中嵌套使用另一个 Git 仓库的机制。它允许你将一个 Git 仓库作为子项目嵌入到另一个 Git 仓库中，并且能够独立地管理子项目的版本和提交历史。</p><p>使用 Git Submodule 的主要目的是在一个项目中使用外部依赖，而不是将它们直接复制到项目目录中。这样做的好处是可以方便地更新和维护外部依赖，并且可以保持项目的独立性。</p><p>下面是使用 Git Submodule 的基本工作流程：</p><ol><li><p>添加 Submodule：在主项目的仓库中，使用 <code>git submodule add</code> 命令添加一个子项目作为 Submodule。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add &lt;URL to submodule&gt; &lt;submodule path&gt;</span><br></pre></td></tr></table></figure><p>这将在主项目中添加一个 Submodule，并将其克隆到指定的子目录中。</p></li><li><p>初始化和更新 Submodule：在主项目的仓库中，可以使用以下命令来初始化和更新 Submodule：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule init    # 初始化 Submodule，只需执行一次</span><br><span class="line">git submodule update  # 更新 Submodule，每次子项目发生变化时执行</span><br></pre></td></tr></table></figure><p><code>git submodule init</code> 命令会初始化 Submodule 并将其连接到指定的提交。<code>git submodule update</code> 命令会更新 Submodule 的代码，可以在每次子项目发生变化时执行该命令。</p></li><li><p>切换 Submodule 版本：在主项目中，你可以使用 <code>cd</code> 命令切换到 Submodule 的目录中，然后像在独立的 Git 仓库中一样执行各种 Git 操作，例如切换分支、提交变更等。</p></li><li><p>提交和更新 Submodule：当 Submodule 中发生变化并且需要将这些变化应用到主项目中时，需要先切换到主项目的根目录，然后使用以下命令进行提交和更新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;submodule path&gt;</span><br><span class="line">git commit -m &quot;Update submodule&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol><p>需要注意的是，当其他开发者克隆主项目时，Submodule 的代码不会自动获取。他们需要执行 <code>git submodule init</code> 和 <code>git submodule update</code> 命令来获取和更新 Submodule 的代码。</p><p>使用 Git Submodule 需要注意以下几点：</p><ul><li>Submodule 是一个独立的 Git 仓库，具有自己的提交历史和版本管理。</li><li>主项目只保存 Submodule 的元数据和连接信息，而不会包含 Submodule 的实际代码。</li><li>主项目和 Submodule 是两个独立的仓库，需要分别进行操作和管理。</li><li>Submodule 可以是公共的仓库（如 GitHub 上的仓库）或者是私有的仓库。</li></ul><p>Git Submodule 是一种强大的工具，可以帮助你管理项目中的外部</p><p>依赖，并与主项目保持独立和可维护。但同时也需要注意它的复杂性和正确的使用方式，以避免出现问题。</p></div></details><p>submodule有个好处是子模块也是个仓库 比如博客主题这种就可以主题一个仓库 然后demo仓库引用主题的仓库这样同步</p></li><li><p>类似的玩法还有 monorepo ，不过前端和后端go没啥基础设施共享 没有monrepo的场景</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202306011733625.png&quot; alt=&quot;image-20230601下午53301310&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如图，今天在</summary>
      
    
    
    
    <category term="新技能 Got" scheme="https://www.nickxu.top/categories/%E6%96%B0%E6%8A%80%E8%83%BD-Got/"/>
    
    
    <category term="git" scheme="https://www.nickxu.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>『算法拾遗』链表（Linked List）</title>
    <link href="https://www.nickxu.top/posts/275.html"/>
    <id>https://www.nickxu.top/posts/275.html</id>
    <published>2023-05-31T12:59:45.000Z</published>
    <updated>2023-06-04T03:33:39.762Z</updated>
    
    <content type="html"><![CDATA[<p>这两天在复习链表，我一想，这链表这么简单的东西还有什么复习的，简单过一遍不就行了</p><p>然而马上打脸，有些题目我居然还写不出来（乐</p><hr><h1 id="理论基础">理论基础</h1><p>先来点你肯定知道的东西，简单过一遍</p><h2 id="是什么">是什么</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202306021230054.png" alt="image-20230602下午123049988"></p><p>如图所示，链表是一种链式结构，以最简单的单链表为例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    Val  <span class="type">int</span></span><br><span class="line">    Next *ListNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是头节点指向下一个节点，然后下一个节点再指向下一个节点，如果是尾节点就指向 <code>NULL</code> （或者说是 Golang 里的 <code>nil</code> ）</p><h2 id="基本操作">基本操作</h2><h3 id="删除节点">删除节点</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202306021253830.png" alt="image-20230602下午125326797"></p><p>让前面节点认为它的后面是后面的节点</p><p>删除的节点让 GC 自动回收掉即可</p><h3 id="添加节点">添加节点</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202306021302406.png" alt="image-20230602下午10229378"></p><p>让新节点指向后面节点，让前面节点指向新节点</p><h2 id="链表的几种变体">链表的几种变体</h2><h3 id="有头链表">有头链表</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202306021338969.png" alt="image-20230602下午13821938"></p><p>减少对头节点的特殊处理</p><h3 id="双向链表">双向链表</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202306021343996.png" alt="image-20230602下午14306969"></p><p>可以方便地找到前驱节点</p><p>对于一个有序链表，双向链表的按值查询效率要比单链表高一些。因为我们可以记录上次查找的位置p，每一次查询时，根据要查找的值与p的大小关系，决定是往前还是往后查找，所以平均只需要查找一半的数据。</p><h3 id="循环链表">循环链表</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202306021346003.png" alt="image-20230602下午14652973"></p><p>能解决约瑟夫问题</p><h3 id="有头双向循环链表"><s>有头双向循环链表</s></h3><p>buff 叠满，请见 <a href="https://www.bilibili.com/video/BV1xN4y1L7TQ/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">【有头双向循环链表之美，这个数据结构简单又优雅，学会了不亏】</a></p><h2 id="链表-vs-数组">链表 vs 数组</h2><table><thead><tr><th></th><th>插入删除</th><th>随机访问</th></tr></thead><tbody><tr><td>数组</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td></tr><tr><td>链表</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td></tr></tbody></table><hr><h1 id="必知必会的题目">必知必会的题目</h1><h2 id="707-设计链表"><a href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表</a></h2><p>实现一个链表，这里就以带头单链表为例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyLinkedList <span class="keyword">struct</span> &#123;</span><br><span class="line">head *ListNode</span><br><span class="line">size <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">val  <span class="type">int</span></span><br><span class="line">next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructor 初始化 MyLinkedList 对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> MyLinkedList &#123;</span><br><span class="line">dummyHead := &amp;ListNode&#123;&#125;</span><br><span class="line"><span class="keyword">return</span> MyLinkedList&#123;</span><br><span class="line">head: dummyHead,</span><br><span class="line">size: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取链表中下标为 index 的节点的值。如果下标无效，则返回 -1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> Get(index <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= this.size &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">cur := this.head.next</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; index; i++ &#123;</span><br><span class="line">cur = cur.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cur.val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddAtHead 将一个值为 val 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> AddAtHead(val <span class="type">int</span>) &#123;</span><br><span class="line">newNode := &amp;ListNode&#123;val: val&#125;</span><br><span class="line">newNode.next = this.head.next</span><br><span class="line">this.head.next = newNode</span><br><span class="line">this.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddAtTail 将一个值为 val 的节点追加到链表中作为链表的最后一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> AddAtTail(val <span class="type">int</span>) &#123;</span><br><span class="line">newNode := &amp;ListNode&#123;val: val&#125;</span><br><span class="line">cur := this.head</span><br><span class="line"><span class="keyword">for</span> cur.next != <span class="literal">nil</span> &#123;</span><br><span class="line">cur = cur.next</span><br><span class="line">&#125;</span><br><span class="line">cur.next = newNode</span><br><span class="line">this.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddAtIndex 将一个值为 val 的节点插入到链表中下标为 index 的节点之前。</span></span><br><span class="line"><span class="comment">// 如果 index 等于链表的长度，那么该节点会被追加到链表的末尾。</span></span><br><span class="line"><span class="comment">// 如果 index 比长度更大，该节点将 不会插入 到链表中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> AddAtIndex(index <span class="type">int</span>, val <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt; this.size &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> index == this.size &#123;</span><br><span class="line">this.AddAtTail(val)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">cur := this.head</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; index; i++ &#123;</span><br><span class="line">cur = cur.next</span><br><span class="line">&#125;</span><br><span class="line">newNode := &amp;ListNode&#123;val: val&#125;</span><br><span class="line">newNode.next = cur.next</span><br><span class="line">cur.next = newNode</span><br><span class="line">this.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeleteAtIndex 如果下标有效，则删除链表中下标为 index 的节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> DeleteAtIndex(index <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= this.size &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">cur := this.head</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; index; i++ &#123;</span><br><span class="line">cur = cur.next</span><br><span class="line">&#125;</span><br><span class="line">cur.next = cur.next.next</span><br><span class="line">this.size--</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="206-反转链表"><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></h2><p>字面意思，翻转一个链表</p><p>操作过程如下：</p><ol start="0"><li>初始化当前节点为头节点</li><li>暂存下一个节点</li><li>将当前节点指向前一个节点</li><li>前驱节点后移</li><li>当前节点后移</li><li>重复 1-4，只到当前节点为 <code>NULL</code> ，输出前驱结点为新的头结点</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line"><span class="comment">// 定义前驱节点、当前节点、后继节点</span></span><br><span class="line"><span class="keyword">var</span> prev *ListNode = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> next *ListNode = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> curr *ListNode = head</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历链表</span></span><br><span class="line"><span class="keyword">for</span> curr != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 保存下一个节点</span></span><br><span class="line">next = curr.Next</span><br><span class="line"><span class="comment">// 当前节点指向前驱节点</span></span><br><span class="line">curr.Next = prev</span><br><span class="line"><span class="comment">// 前驱节点后移</span></span><br><span class="line">prev = curr</span><br><span class="line"><span class="comment">// 当前节点后移</span></span><br><span class="line">curr = next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回前驱节点</span></span><br><span class="line"><span class="keyword">return</span> prev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我一开始也不是很懂，所以我画了个图一步一步来，图画出来我就懂了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202306021637081.png" alt="image-20230601下午103709377"></p><p>类似地，还有一个递归的写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line"><span class="comment">// 如果链表为空或者只有一个节点，直接返回原链表</span></span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归反转除头节点外的子链表</span></span><br><span class="line">p := reverseList(head.Next)</span><br><span class="line"><span class="comment">// 将当前节点的下一个节点指向当前节点，实现反转</span></span><br><span class="line">head.Next.Next = head</span><br><span class="line"><span class="comment">// 将当前节点的下一个节点置空，断开原链表中的连接</span></span><br><span class="line">head.Next = <span class="literal">nil</span></span><br><span class="line"><span class="comment">// 返回反转后的链表的头节点</span></span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="876-链表的中间结点"><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">876. 链表的中间结点</a></h2><p>使用快慢指针（ <code>i</code> 走一步， <code>j</code> 走两步）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">middleNode</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line"><span class="comment">// 定义快慢指针</span></span><br><span class="line"><span class="keyword">var</span> fast *ListNode = head</span><br><span class="line"><span class="keyword">var</span> slow *ListNode = head</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快指针走两步，慢指针走一步</span></span><br><span class="line"><span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">fast = fast.Next.Next</span><br><span class="line">slow = slow.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回慢指针</span></span><br><span class="line"><span class="keyword">return</span> slow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="21-合并两个有序链表"><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></h2><p>第一版以为不能修改他给出的链表，每次都 new 一个节点，结果 TLE 了，好尴尬</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(list1 *ListNode, list2 *ListNode)</span></span> *ListNode &#123;</span><br><span class="line"><span class="comment">// 创建一个哨兵节点作为新链表的头部</span></span><br><span class="line">  dummy := &amp;ListNode&#123;&#125;</span><br><span class="line">curr := dummy</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历两个链表，比较节点的值，将较小值的节点添加到新链表中</span></span><br><span class="line"><span class="keyword">for</span> list1 != <span class="literal">nil</span> &amp;&amp; list2 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> list1.Val &lt; list2.Val &#123;</span><br><span class="line">curr.Next = list1</span><br><span class="line">list1 = list1.Next</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">curr.Next = list2</span><br><span class="line">list2 = list2.Next</span><br><span class="line">&#125;</span><br><span class="line">curr = curr.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果其中一个链表已经遍历完了，直接将另一个链表剩余部分添加到新链表中</span></span><br><span class="line"><span class="keyword">for</span> list1 != <span class="literal">nil</span> &#123;</span><br><span class="line">curr.Next = list1</span><br><span class="line">list1 = list1.Next</span><br><span class="line">curr = curr.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> list2 != <span class="literal">nil</span> &#123;</span><br><span class="line">curr.Next = list2</span><br><span class="line">list2 = list2.Next</span><br><span class="line">curr = curr.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="234-回文链表"><a href="https://leetcode.cn/problems/palindrome-linked-list/">234. 回文链表</a></h2><p>用快慢指针找到中点，然后反转后半部分，从开始和中间向后进行比较</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(head *ListNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">// 定义快慢指针</span></span><br><span class="line"><span class="keyword">var</span> slow *ListNode = head</span><br><span class="line"><span class="keyword">var</span> fast *ListNode = head</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快慢指针走到中间节点</span></span><br><span class="line"><span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">slow = slow.Next</span><br><span class="line">fast = fast.Next.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果fast不为空，说明链表长度为奇数，slow还要再前进一步</span></span><br><span class="line"><span class="keyword">if</span> fast != <span class="literal">nil</span> &#123;</span><br><span class="line">slow = slow.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 反转后半部分链表（见上面的实现）</span></span><br><span class="line">slow = reverseList(slow)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较前后两部分链表</span></span><br><span class="line"><span class="keyword">for</span> slow != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> slow.Val != head.Val &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">slow = slow.Next</span><br><span class="line">head = head.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19-删除链表的倒数第-N-个结点"><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h2><p>还是双指针，<code>i</code> <code>j</code> 初始为 <code>head</code>，然后 <code>j</code> 先走 <code>N</code> 步，然后一起往后走</p><p>这个东西有点坑，一开始没弄哨兵节点，删除的操作总是有问题</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(head *ListNode, n <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">dummy := &amp;ListNode&#123;Next: head&#125;</span><br><span class="line">slow, fast := dummy, dummy</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">fast = fast.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">slow = slow.Next</span><br><span class="line">fast = fast.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slow.Next = slow.Next.Next</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="141-环形链表"><a href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a></h2><p>判断一个链表中有没有环</p><p>还是快慢指针，如果快指针能追上慢指针就肯定有环了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(head *ListNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">fast := head</span><br><span class="line">slow := head</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">slow = slow.Next</span><br><span class="line">fast = fast.Next.Next</span><br><span class="line"><span class="keyword">if</span> fast == slow &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然你也可以用更直白的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(head *ListNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head.Val == <span class="number">123512151</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">head.Val = <span class="number">123512151</span></span><br><span class="line">&#125;</span><br><span class="line">head = head.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="142-环形链表-II"><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h2><p>这个题目需要在判断出有环后能找到环的起点</p><p>推理过程请见 <a href="https://www.programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html#%E5%A6%82%E6%9E%9C%E6%9C%89%E7%8E%AF-%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0%E8%BF%99%E4%B8%AA%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3">代码随想录</a> 👀</p><p>反正结论就是：当快慢指针相遇时，让其中一个回到头结点，然后同速前进，再次相遇即为环开始的点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">detectCycle</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">fast := head</span><br><span class="line">slow := head</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">slow = slow.Next</span><br><span class="line">fast = fast.Next.Next</span><br><span class="line"><span class="keyword">if</span> fast == slow &#123;</span><br><span class="line">fast = head</span><br><span class="line"><span class="keyword">for</span> fast != slow &#123;</span><br><span class="line">fast = fast.Next</span><br><span class="line">slow = slow.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fast</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理论上你也可以使用更直白的方法，但是题目要求不能修改链表</p><h2 id="面试题-02-07-链表相交"><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">面试题 02.07. 链表相交</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getIntersectionNode</span><span class="params">(headA, headB *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">lengthA := getLength(headA)</span><br><span class="line">lengthB := getLength(headB)</span><br><span class="line"><span class="keyword">var</span> fast, slow *ListNode</span><br><span class="line">step := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> lengthA &gt; lengthB &#123;</span><br><span class="line">step = lengthA - lengthB</span><br><span class="line">fast, slow = headA, headB</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">step = lengthB - lengthA</span><br><span class="line">fast, slow = headB, headA</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; step; i++ &#123;</span><br><span class="line">fast = fast.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历两个链表，相同则跳出</span></span><br><span class="line"><span class="keyword">for</span> fast != slow &#123;</span><br><span class="line">fast = fast.Next</span><br><span class="line">slow = slow.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fast</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getLength</span><span class="params">(head *ListNode)</span></span> (length <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> ; head != <span class="literal">nil</span>; head = head.Next &#123;</span><br><span class="line">length++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这两天在复习链表，我一想，这链表这么简单的东西还有什么复习的，简单过一遍不就行了&lt;/p&gt;
&lt;p&gt;然而马上打脸，有些题目我居然还写不出来（乐&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;理论基础&quot;&gt;理论基础&lt;/h1&gt;
&lt;p&gt;先来点你肯定知道的东西，简单过一遍&lt;/p&gt;
&lt;h2 id=&quot;是</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://www.nickxu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="算法拾遗" scheme="https://www.nickxu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97/"/>
    
    <category term="链表" scheme="https://www.nickxu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97/%E9%93%BE%E8%A1%A8/"/>
    
    
    <category term="链表" scheme="https://www.nickxu.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>2023五一总结：近况与将来</title>
    <link href="https://www.nickxu.top/posts/274.html"/>
    <id>https://www.nickxu.top/posts/274.html</id>
    <published>2023-05-04T10:17:19.000Z</published>
    <updated>2023-05-05T06:59:35.554Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042244576.jpeg" alt="5BBA2597-B720-4882-992C-0F819A89F314_1_105_c"></p><blockquote><p>事情有点多，就简单说几句吧～</p></blockquote><div class="audio"><audio controls preload><source src='https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042224874.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><hr><h1 id="最近的事情">最近的事情</h1><h2 id="杭电助手团建">杭电助手团建</h2><div class="fj-gallery"><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042227317.png" alt="image-20230504222737293"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042228416.png" alt="image-20230504222810383"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042228652.png" alt="image-20230504222817629"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042228681.png" alt="image-20230504222822653"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042228729.png" alt="image-20230504222830701"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042228227.png" alt="image-20230504222846195"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042229391.png" alt="image-20230504222910356"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042228295.png" alt="image-20230504222859260"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042229770.png" alt="image-20230504222918732"></p>          </div><h2 id="B站热评">B站热评</h2><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042230672.jpg" alt="f4d24a56ac534936b0e5cf3989cdd18a" style="zoom:50%;" /><blockquote><p>原视频：<a href="https://www.bilibili.com/video/BV1Lk4y1Y76V/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">【【年更节目】世界读书日，超级干货书单分享！这些书年轻时一定要读！(2023)】</a></p></blockquote><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042231897.jpg" alt="ccfbcf8afd6c7f72f3b8f8a3923ac2ea_0"></p><h2 id="OSPP开好头">OSPP开好头</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042231196.png" alt="image-20230504223158168"></p><blockquote><p>去看了很多 mosn 的文档和视频，对目前的微服务部署架构有更深入地了解</p></blockquote><ul><li>【MOSN 子项目 Layotto：开启服务网格+应用运行时新篇章】 <a href="https://www.bilibili.com/video/BV1hq4y1L7FY/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">https://www.bilibili.com/video/BV1hq4y1L7FY/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902</a></li><li>【MOSN 云原生网络代理平台】 <a href="https://www.bilibili.com/video/BV13s4y127m2/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">https://www.bilibili.com/video/BV13s4y127m2/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902</a></li><li>鸟鸟的博客 Before Good First Issue：<a href="https://blog.aflybird.cn/2023/01/before-good-first-issue/">https://blog.aflybird.cn/2023/01/before-good-first-issue/</a></li><li>iyear ： <a href="https://iyear.me/archives/919.html/">https://iyear.me/archives/919.html/</a></li></ul><hr><h1 id="未来规划">未来规划</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042225230.png" alt=""></p><blockquote><p>在 V 站上的回复，原文地址：<a href="https://www.v2ex.com/t/928328#reply4">https://www.v2ex.com/t/928328#reply4</a></p><p>讲真这推荐的 k8s 课程的确不错，即使是18年写的 <a href="http://gk.link/a/122Sd">http://gk.link/a/122Sd</a></p></blockquote><p>1. OSPP<br>2. 后端两个项目<br>3. 杭州亚运会<br>4. 准备实习&amp;大三春招</p><hr><h1 id="要学的东西">要学的东西</h1><ul><li>mysql锁mvcc</li><li>ws, casbin</li><li>k8s</li><li>数据结构箅法</li><li>计算机基础</li><li>概率论复变函数</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202305042244576.jpeg&quot; alt=&quot;5BBA2597-B720-4882-992C-0F819A89F314_1_105_c&quot;&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="随笔与总结" scheme="https://www.nickxu.top/categories/%E9%9A%8F%E7%AC%94%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="随笔" scheme="https://www.nickxu.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>关于软删除的讨论</title>
    <link href="https://www.nickxu.top/posts/273.html"/>
    <id>https://www.nickxu.top/posts/273.html</id>
    <published>2023-05-02T08:13:22.000Z</published>
    <updated>2023-05-04T14:57:23.623Z</updated>
    
    <content type="html"><![CDATA[<p>别急，先挂着</p><p>别问我为什么空着就发上来了，我本来是想每一篇都写完再发的，但是后面本地坑挖了很多不想填就直接删了</p><p>然后发上来至少别人看着我还有动力去填🤣</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;别急，先挂着&lt;/p&gt;
&lt;p&gt;别问我为什么空着就发上来了，我本来是想每一篇都写完再发的，但是后面本地坑挖了很多不想填就直接删了&lt;/p&gt;
&lt;p&gt;然后发上来至少别人看着我还有动力去填🤣&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ChatGPT对话记录（六）：GORM 手动事务错误处理</title>
    <link href="https://www.nickxu.top/2023/04/29/ChatGPT%E5%AF%B9%E8%AF%9D%E8%AE%B0%E5%BD%95%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9AGORM-%E6%89%8B%E5%8A%A8%E4%BA%8B%E5%8A%A1%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>https://www.nickxu.top/2023/04/29/ChatGPT%E5%AF%B9%E8%AF%9D%E8%AE%B0%E5%BD%95%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9AGORM-%E6%89%8B%E5%8A%A8%E4%BA%8B%E5%8A%A1%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</id>
    <published>2023-04-29T03:02:06.000Z</published>
    <updated>2023-04-29T03:33:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Model: GPT-4</p><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UserDeleteLogic)</span></span> UserDelete(in *user.UserDeleteRequest) (*user.Empty, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">tx := l.svcCtx.Dao.Begin()</span><br><span class="line"></span><br><span class="line">u := tx.User</span><br><span class="line">m := tx.MemberShip</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line">deleteInfo, err := u.Where(u.ID.Eq(in.Id)).Delete()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一条都没有影响，返回不存在</span></span><br><span class="line"><span class="keyword">if</span> deleteInfo.RowsAffected == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.UserNotFound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除社团关系</span></span><br><span class="line">_, err = m.Where(m.UserId.Eq(in.Id)).Delete()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = tx.Commit()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;user.Empty&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码有没有问题</p></blockquote><p>这段代码实现了一个名为UserDelete的方法，它接收一个UserDeleteRequest类型的参数并返回一个user.Empty结构体指针和一个错误（error）。这个方法主要执行了以下操作：</p><ol><li>启动一个数据库事务。</li><li>从数据库中删除用户。</li><li>如果没有删除任何用户，返回一个用户不存在的错误。</li><li>删除与用户相关的社团关系。</li><li>提交事务。</li></ol><p>这段代码在逻辑上没有明显问题，但有一些建议可以改进代码的可读性和健壮性：</p><ol><li><p>当发生错误时，应该回滚事务。在发生错误时（如删除用户或删除社团关系时发生错误），你应该使用<code>tx.Rollback()</code>回滚事务。你可以在返回错误之前添加此语句，或者使用<code>defer</code>和<code>recover</code>来确保在发生错误时始终回滚事务。</p></li><li><p>使用Go语言的&quot;context&quot;库。这段代码中似乎使用了一个自定义的上下文结构（l.ctx），而没有使用Go标准库中的&quot;context&quot;。为了保持一致性，你可以考虑使用&quot;context&quot;库，并将它传递给数据库操作方法，以便在需要时可以取消操作。</p></li><li><p>使用更具描述性的变量名。虽然这段代码相对简短，但使用更具描述性的变量名可以提高代码的可读性。例如，可以将变量名<code>u</code>改为<code>userDao</code>，将<code>m</code>改为<code>membershipDao</code>等。</p></li><li><p>添加注释以提高代码可读性。虽然这段代码的逻辑相对简单，但添加一些注释可以帮助其他开发者更轻松地理解代码的目的和工作方式。例如，解释事务的目的，以及为什么在删除用户后还需要删除与用户相关的社团关系等。</p></li></ol><p>总之，这段代码在逻辑上没有明显问题，但有一些建议可以改进代码的可读性和健壮性。</p><blockquote><p>我听说如果退出函数前没有手动提交或回滚事务，数据库会自动回滚，是这样吗</p></blockquote><p>这取决于你使用的数据库和数据库驱动程序。在某些情况下，当连接关闭或者数据库会话结束时，未提交的事务可能会被自动回滚。但是，依赖自动回滚可能会导致意外的行为，特别是在并发环境中。</p><p>为了编写健壮且可维护的代码，建议你始终显式地提交或回滚事务，而不是依赖自动回滚。这可以确保事务在函数退出时始终处于预期的状态，避免潜在的问题。在Go中，可以使用<code>defer</code>语句在函数退出时执行回滚，确保事务在遇到错误时被回滚。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UserDeleteLogic)</span></span> UserDelete(in *user.UserDeleteRequest) (*user.Empty, <span class="type">error</span>) &#123;</span><br><span class="line">    tx := l.svcCtx.Dao.Begin()</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">            tx.Rollback()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 此处省略其他操作 ...</span></span><br><span class="line"></span><br><span class="line">    err := tx.Commit()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        tx.Rollback()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;user.Empty&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当发生错误或者panic时，事务会被显式地回滚。当然，如果你确信在特定的情况下数据库会自动回滚，并且这种行为符合你的预期，你可以选择依赖自动回滚。然而，在大多数情况下，显式地处理事务是更好的做法。</p><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UserDeleteLogic)</span></span> UserDelete(in *user.UserDeleteRequest) (*user.Empty, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">tx := l.svcCtx.Dao.Begin()</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">recover</span>() != <span class="literal">nil</span> || err != <span class="literal">nil</span> &#123;</span><br><span class="line">_ = tx.Rollback()</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">u := tx.User</span><br><span class="line">m := tx.MemberShip</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line">deleteInfo, err := u.Where(u.ID.Eq(in.Id)).Delete()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一条都没有影响，返回不存在</span></span><br><span class="line"><span class="keyword">if</span> deleteInfo.RowsAffected == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.UserNotFound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除社团关系</span></span><br><span class="line">_, err = m.Where(m.UserId.Eq(in.Id)).Delete()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = tx.Commit()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;user.Empty&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我这样写呢</p></blockquote><p>这个版本的代码中，你使用了<code>defer</code>语句来处理事务回滚。这是一个改进，确保在遇到错误或panic时事务会被回滚。然而，这段代码仍有一些小问题需要注意：</p><ol><li><p>当<code>err</code>为<code>nil</code>且<code>recover()</code>返回非<code>nil</code>值时，你应该为<code>err</code>赋一个新值，以便在返回错误时返回一个有意义的错误信息。例如，可以将<code>err</code>设置为一个表示事务回滚的自定义错误，或者使用<code>fmt.Errorf</code>创建一个包含recover信息的错误。</p></li><li><p>当<code>tx.Commit()</code>失败时，你还需要显式地调用<code>tx.Rollback()</code>。虽然你已经在<code>defer</code>语句中添加了回滚逻辑，但在<code>tx.Commit()</code>失败时，<code>err</code>变量的值不会被改变，这意味着<code>defer</code>语句中的条件不会触发回滚。在<code>tx.Commit()</code>失败时，你需要立即调用<code>tx.Rollback()</code>，然后返回一个错误。</p></li></ol><p>根据上述建议，你可以修改代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UserDeleteLogic)</span></span> UserDelete(in *user.UserDeleteRequest) (*user.Empty, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">    tx := l.svcCtx.Dao.Begin()</span><br><span class="line">    <span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">            err = fmt.Errorf(<span class="string">&quot;panic occurred: %v, rolling back transaction&quot;</span>, r)</span><br><span class="line">            _ = tx.Rollback()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            _ = tx.Rollback()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    u := tx.User</span><br><span class="line">    m := tx.MemberShip</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    deleteInfo, err := u.Where(u.ID.Eq(in.Id)).Delete()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一条都没有影响，返回不存在</span></span><br><span class="line">    <span class="keyword">if</span> deleteInfo.RowsAffected == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errs.UserNotFound</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除社团关系</span></span><br><span class="line">    _, err = m.Where(m.UserId.Eq(in.Id)).Delete()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = tx.Commit()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        _ = tx.Rollback()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;user.Empty&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样修改后，代码会在遇到错误或panic时正确处理事务回滚。</p><blockquote><p>tx.Rollback()也会返回一个error，一般情况下是不是不需要处理</p></blockquote><p>是的，一般情况下，当调用<code>tx.Rollback()</code>时，你不需要处理返回的错误。这是因为在大多数情况下，回滚事务时遇到的错误通常表示底层数据库连接或系统存在问题，这类问题通常超出了应用程序能处理的范围。</p><p>当你调用<code>tx.Rollback()</code>时，关心的主要目的是确保事务被取消，以避免潜在的数据一致性问题。因此，在回滚事务时，你可以忽略返回的错误。然而，如果你希望记录这些错误（例如，用于调试或监控目的），你可以选择将回滚错误记录到日志中，但通常不需要将其作为应用程序逻辑的一部分进行处理。</p><p>在上面的示例代码中，你已经使用<code>_ = tx.Rollback()</code>来忽略回滚错误。这是一种合适的做法，因为它清楚地表明你知道<code>tx.Rollback()</code>返回一个错误，但选择不对其进行处理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Model: GPT-4&lt;/p&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="ChatGPT 对话记录" scheme="https://www.nickxu.top/categories/ChatGPT-%E5%AF%B9%E8%AF%9D%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="GORM" scheme="https://www.nickxu.top/tags/GORM/"/>
    
    <category term="ChatGPT" scheme="https://www.nickxu.top/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>ChatGPT对话记录（五）：用户权限管理</title>
    <link href="https://www.nickxu.top/2023/04/13/ChatGPT%E5%AF%B9%E8%AF%9D%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>https://www.nickxu.top/2023/04/13/ChatGPT%E5%AF%B9%E8%AF%9D%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</id>
    <published>2023-04-13T13:09:38.000Z</published>
    <updated>2023-04-14T03:10:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>golang项目中怎么做用户权限管理</p></blockquote><p>在 Golang 项目中实现用户权限管理需要考虑以下几个方面：</p><ol><li><p>定义权限级别：根据业务需求定义不同的权限级别，比如超级管理员、管理员、普通用户等。每个权限级别对应不同的操作权限。</p></li><li><p>实现身份认证：使用 OAuth2、JWT 或其他身份认证方式进行身份认证，确保用户是合法的。对于一些敏感操作，需要进行二次认证。</p></li><li><p>实现访问控制：在代码中实现访问控制，根据用户的权限级别来限制其访问和操作的范围。可以使用中间件、注解或其他方式来实现。</p></li><li><p>数据权限控制：对于一些需要数据隔离的场景，可以根据用户的权限级别和角色来进行数据权限控制，确保用户只能访问到其有权限的数据。</p></li></ol><p>下面是一个简单的示例代码，演示了如何使用 JWT 和注解实现用户权限管理：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义权限级别</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    RoleAdmin = <span class="string">&quot;admin&quot;</span></span><br><span class="line">    RoleUser  = <span class="string">&quot;user&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// JWT 验证中间件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JWTAuthMiddleware</span><span class="params">(next http.Handler)</span></span> http.Handler &#123;</span><br><span class="line">    <span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取 JWT Token</span></span><br><span class="line">        tokenString := r.Header.Get(<span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> tokenString == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">            w.WriteHeader(http.StatusUnauthorized)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析 JWT Token</span></span><br><span class="line">        token, err := jwt.Parse(tokenString, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="type">byte</span>(<span class="string">&quot;my_secret_key&quot;</span>), <span class="literal">nil</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> || !token.Valid &#123;</span><br><span class="line">            w.WriteHeader(http.StatusUnauthorized)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将用户 ID 和角色存储在上下文中</span></span><br><span class="line">        userID := token.Claims.(jwt.MapClaims)[<span class="string">&quot;user_id&quot;</span>].(<span class="type">string</span>)</span><br><span class="line">        role := token.Claims.(jwt.MapClaims)[<span class="string">&quot;role&quot;</span>].(<span class="type">string</span>)</span><br><span class="line">        ctx := context.WithValue(r.Context(), <span class="string">&quot;user_id&quot;</span>, userID)</span><br><span class="line">        ctx = context.WithValue(ctx, <span class="string">&quot;role&quot;</span>, role)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用下一个处理器</span></span><br><span class="line">        next.ServeHTTP(w, r.WithContext(ctx))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注解：限制只有管理员才能访问</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AdminOnly</span><span class="params">(next http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        role := r.Context().Value(<span class="string">&quot;role&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> role != RoleAdmin &#123;</span><br><span class="line">            w.WriteHeader(http.StatusForbidden)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        next(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由处理函数：需要管理员权限才能访问</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adminHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获取用户 ID 和角色</span></span><br><span class="line">    userID := r.Context().Value(<span class="string">&quot;user_id&quot;</span>)</span><br><span class="line">    role := r.Context().Value(<span class="string">&quot;role&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对管理员进行特殊处理</span></span><br><span class="line">    <span class="keyword">if</span> role == RoleAdmin &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    w.WriteHeader(http.StatusOK)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;Hello %s, your role is %s&quot;</span>, userID, role)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建路由器</span></span><br><span class="line">    r := mux.NewRouter()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加路由</span></span><br><span class="line">    r.HandleFunc(<span class="string">&quot;/admin&quot;</span>, AdminOnly(adminHandler)).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加</span></span><br></pre></td></tr></table></figure><blockquote><p>但是存在一些很复杂的场景，比如说一个用户的个人信息只能由他自己更改，或者被更高等级的账户更改</p></blockquote><p>是的，这些场景确实更复杂，需要更细粒度的权限控制。下面是一些实现这些场景的建议：</p><ol><li><p>数据权限控制：在实现数据权限控制时，可以将权限控制规则写入到业务代码中，或者使用第三方库。可以根据用户的角色、组织架构等信息，动态计算出用户可以访问的数据。对于需要数据隔离的场景，可以为每个用户创建独立的数据空间。</p></li><li><p>行级权限控制：在一些场景中，需要对数据进行更细粒度的控制，比如说一个用户的个人信息只能由他自己更改。可以使用行级权限控制技术，在每条数据中添加一个权限控制字段，用来记录哪些用户可以访问该数据。在查询和更新数据时，需要判断当前用户是否有权限访问该数据。</p></li><li><p>委托授权：在一些场景中，需要实现授权委托，比如说被更高等级的账户更改。可以使用委托授权技术，在授权者和被授权者之间建立授权关系。在被授权者访问受保护的资源时，需要验证授权者是否已经授权该操作。授权关系可以是静态的，也可以是动态的，可以根据业务需求来选择适合的授权模型。</p></li></ol><p>总之，实现复杂场景的用户权限管理需要综合考虑多个因素，包括业务需求、安全性、易用性、可维护性等。需要在开发过程中不断迭代和优化，确保权限管理系统能够满足业务需求并且安全可靠。</p><blockquote><p>就这个例子，你觉得能怎么写</p></blockquote><p>假设我们需要实现一个场景，用户可以查看和修改自己的个人信息，管理员可以查看和修改所有用户的个人信息。可以使用下面的代码实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户模型</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID       <span class="type">int</span></span><br><span class="line">    Username <span class="type">string</span></span><br><span class="line">    Password <span class="type">string</span></span><br><span class="line">    Email    <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库操作：查询用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserByID</span><span class="params">(userID <span class="type">int</span>)</span></span> (*User, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 查询数据库并返回用户信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库操作：更新用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateUser</span><span class="params">(user *User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 更新用户信息到数据库</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件：检查用户是否有权限访问</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckUserAccessMiddleware</span><span class="params">(next http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取用户 ID 和角色</span></span><br><span class="line">        userID := r.Context().Value(<span class="string">&quot;user_id&quot;</span>)</span><br><span class="line">        role := r.Context().Value(<span class="string">&quot;role&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是管理员，则直接通过</span></span><br><span class="line">        <span class="keyword">if</span> role == RoleAdmin &#123;</span><br><span class="line">            next(w, r)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则检查用户是否在访问自己的信息</span></span><br><span class="line">        requestedUserID, err := strconv.Atoi(mux.Vars(r)[<span class="string">&quot;user_id&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> || userID != requestedUserID &#123;</span><br><span class="line">            w.WriteHeader(http.StatusForbidden)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过检查</span></span><br><span class="line">        next(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由处理函数：获取用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUserHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的用户 ID</span></span><br><span class="line">    userID, err := strconv.Atoi(mux.Vars(r)[<span class="string">&quot;user_id&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询用户信息</span></span><br><span class="line">    user, err := GetUserByID(userID)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    json.NewEncoder(w).Encode(user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由处理函数：更新用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateUserHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的用户 ID</span></span><br><span class="line">    userID, err := strconv.Atoi(mux.Vars(r)[<span class="string">&quot;user_id&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析请求的用户信息</span></span><br><span class="line">    <span class="keyword">var</span> user User</span><br><span class="line">    <span class="keyword">if</span> err := json.NewDecoder(r.Body).Decode(&amp;user); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查用户是否有权限更新信息</span></span><br><span class="line">    <span class="keyword">if</span> userID != user.ID &#123;</span><br><span class="line">        w.WriteHeader(http.StatusForbidden)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新用户信息</span></span><br><span class="line">    <span class="keyword">if</span> err := UpdateUser(&amp;user); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们定义了一个中间件 <code>CheckUserAccessMiddleware</code>，用来检查用户是否有权限访问和修改个人信息。如果当前用户是管理员，则直接通过；否则，需要检查用户是否在访问自己的信息。对于获取和更新用户信息的路由处理函数 <code>getUserHandler</code> 和 <code>updateUserHandler</code>，我们都添加了这个中间件。</p><p>在路由处理函数中，我们首先获取请求的用户 ID，然后根据用户 ID 查询或更新用户信息。在更新用户信息时，我们还需要检查请求中的用户信息是否与当前用户匹配。如果请求的用户</p><blockquote><p>但是有很多类型的复杂权限判断情况，我想能不能整合在一起</p></blockquote><p>是的，确实存在很多类型的复杂权限判断情况，需要整合在一起来实现。在实际开发中，我们可以使用 RBAC（Role-Based Access Control，基于角色的访问控制）或 ABAC（Attribute-Based Access Control，基于属性的访问控制）等权限管理模型来实现复杂权限控制。</p><p>RBAC 模型通过将用户分配到不同的角色，并将角色赋予不同的权限，来实现访问控制。ABAC 模型则根据用户的属性（如角色、组织架构、地理位置等），动态计算用户可以访问的资源，从而实现访问控制。</p><p>下面是一个使用 ABAC 模型实现的示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户模型</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID       <span class="type">int</span></span><br><span class="line">    Username <span class="type">string</span></span><br><span class="line">    Password <span class="type">string</span></span><br><span class="line">    Email    <span class="type">string</span></span><br><span class="line">    Role     <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库操作：查询用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserByID</span><span class="params">(userID <span class="type">int</span>)</span></span> (*User, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 查询数据库并返回用户信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库操作：更新用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateUser</span><span class="params">(user *User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 更新用户信息到数据库</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ABAC 验证中间件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ABACMiddleware</span><span class="params">(next http.Handler)</span></span> http.Handler &#123;</span><br><span class="line">    <span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取用户 ID 和角色</span></span><br><span class="line">        userID := r.Context().Value(<span class="string">&quot;user_id&quot;</span>)</span><br><span class="line">        role := r.Context().Value(<span class="string">&quot;role&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义属性集合</span></span><br><span class="line">        attributes := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">        attributes[<span class="string">&quot;user_id&quot;</span>] = userID</span><br><span class="line">        attributes[<span class="string">&quot;role&quot;</span>] = role</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将属性集合存储在上下文中</span></span><br><span class="line">        ctx := context.WithValue(r.Context(), <span class="string">&quot;attributes&quot;</span>, attributes)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用下一个处理器</span></span><br><span class="line">        next.ServeHTTP(w, r.WithContext(ctx))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ABAC 访问控制中间件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ABACAccessControlMiddleware</span><span class="params">(requiredAttributes <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;, next http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取属性集合</span></span><br><span class="line">        attributes := r.Context().Value(<span class="string">&quot;attributes&quot;</span>).(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查属性集合是否满足要求</span></span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> requiredAttributes &#123;</span><br><span class="line">            <span class="keyword">if</span> attributes[k] != v &#123;</span><br><span class="line">                w.WriteHeader(http.StatusForbidden)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过检查</span></span><br><span class="line">        next(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由处理函数：获取用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUserHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的用户 ID</span></span><br><span class="line">    userID, err := strconv.Atoi(mux.Vars(r)[<span class="string">&quot;user_id&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询用户信息</span></span><br><span class="line">    user, err := GetUserByID(userID)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查用户是否有权限访问</span></span><br><span class="line">    requiredAttributes := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;user_id&quot;</span>: userID,</span><br><span class="line">    &#125;</span><br><span class="line">    ABACAccessControlMiddleware(requiredAttributes, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        json.NewEncoder(w).Encode(user)</span><br><span class="line">    &#125;)(w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br></pre></td></tr></table></figure><blockquote><p>简单介绍一下这两种模型</p></blockquote><p>RBAC（Role-Based Access Control）是一种基于角色的访问控制模型，它将用户分配到不同的角色，然后将角色赋予不同的权限。用户在访问资源时，只需要使用自己所属的角色的权限即可，无需关心具体的权限设置。RBAC 模型简单易用，适用于规模较小、权限管理较为简单的系统。</p><p>ABAC（Attribute-Based Access Control）是一种基于属性的访问控制模型，它根据用户的属性（如角色、组织架构、地理位置等），动态计算用户可以访问的资源。在 ABAC 模型中，每个资源都有一组属性，而每个用户也有一组属性，系统会根据用户的属性来计算其可以访问哪些资源。ABAC 模型比 RBAC 更为灵活，能够处理更为复杂的权限控制需求，适用于规模较大、权限管理较为复杂的系统。</p><p>在实际开发中，我们可以根据业务需求选择适合的权限管理模型，或者结合两种模型来实现复杂的权限控制。无论采用哪种模型，都需要对权限进行严格的管理和监控，确保系统安全可靠。</p><blockquote><p>给一个ABAC的例子</p></blockquote><p>假设我们需要实现一个场景，用户可以查看和修改自己的个人信息，管理员可以查看和修改所有用户的个人信息。在这个场景中，我们可以使用 ABAC 模型来实现权限控制。</p><p>首先，我们需要定义一些属性，用来描述用户和资源。比如，我们可以定义如下的属性：</p><ul><li>用户属性：<ul><li><code>user_id</code>：用户 ID</li><li><code>role</code>：用户角色</li></ul></li><li>资源属性：<ul><li><code>resource_id</code>：资源 ID</li><li><code>owner_id</code>：资源所有者 ID</li></ul></li></ul><p>然后，我们可以使用 ABAC 模型的两个核心组件——策略引擎和访问控制规则来实现权限控制。</p><p>策略引擎根据访问请求中的属性和访问控制规则，动态计算用户是否有权限访问资源。访问控制规则定义了哪些属性必须满足、哪些属性可以满足、哪些属性不能满足，以及满足条件时的授权策略等信息。下面是一个使用 ABAC 模型实现的示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户模型</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID       <span class="type">int</span></span><br><span class="line">    Username <span class="type">string</span></span><br><span class="line">    Password <span class="type">string</span></span><br><span class="line">    Email    <span class="type">string</span></span><br><span class="line">    Role     <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库操作：查询用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserByID</span><span class="params">(userID <span class="type">int</span>)</span></span> (*User, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 查询数据库并返回用户信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库操作：更新用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateUser</span><span class="params">(user *User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 更新用户信息到数据库</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ABAC 访问控制规则</span></span><br><span class="line"><span class="keyword">type</span> AccessControlRule <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// 必须满足的属性</span></span><br><span class="line">    RequiredAttributes <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以满足的属性</span></span><br><span class="line">    AllowedAttributes <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能满足的属性</span></span><br><span class="line">    DeniedAttributes <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 授权策略</span></span><br><span class="line">    AuthorizationPolicy <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ABAC 策略引擎</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ABACEnforce</span><span class="params">(r *http.Request, resource <span class="keyword">interface</span>&#123;&#125;, accessControlRules []*AccessControlRule)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">// 获取属性集合</span></span><br><span class="line">    userID := r.Context().Value(<span class="string">&quot;user_id&quot;</span>).(<span class="type">int</span>)</span><br><span class="line">    role := r.Context().Value(<span class="string">&quot;role&quot;</span>).(<span class="type">string</span>)</span><br><span class="line">    attributes := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;user_id&quot;</span>: userID,</span><br><span class="line">        <span class="string">&quot;role&quot;</span>:    role,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加资源属性到属性集合中</span></span><br><span class="line">    <span class="keyword">switch</span> v := resource.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> *User:</span><br><span class="line">        attributes[<span class="string">&quot;resource_id&quot;</span>] = v.ID</span><br><span class="line">        attributes[<span class="string">&quot;owner_id&quot;</span>] = v.ID</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历访问控制规则</span></span><br><span class="line">    <span class="keyword">for</span> _, rule := <span class="keyword">range</span> accessControlRules &#123;</span><br><span class="line">        <span class="comment">// 检查必须满足的属性是否存在</span></span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> rule.RequiredAttributes &#123;</span><br><span class="line">            <span class="keyword">if</span> attributes[k] != v &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查不能满足的属性是否存在</span></span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> rule.DeniedAttributes &#123;</span><br><span class="line">            <span class="keyword">if</span> attributes[k] == v &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查可以满足的属性是否存在</span></span><br></pre></td></tr></table></figure><blockquote><p>我大概理解了，能不能有简单描述一下整个过程</p></blockquote><p>ABAC（Attribute-Based Access Control）模型的访问控制过程可以简单描述为以下几个步骤：</p><ol><li><p>定义属性：首先，需要定义一些属性，用来描述用户、资源和环境。这些属性可以是用户的角色、组织架构、地理位置等，也可以是资源的所有者、类型、状态等，还可以是环境的时间、地理位置等。</p></li><li><p>定义访问控制规则：根据业务需求，需要定义一些访问控制规则，用来描述哪些属性必须满足、哪些属性可以满足、哪些属性不能满足，以及满足条件时的授权策略等信息。访问控制规则可以存储在数据库、配置文件或其他存储介质中。</p></li><li><p>策略引擎计算权限：当用户请求访问某个资源时，策略引擎会根据请求中的属性和访问控制规则，动态计算用户是否有权限访问资源。如果用户满足访问控制规则中定义的条件，则可以被授权访问资源，否则将被拒绝访问。</p></li><li><p>授权访问资源：如果用户被授权访问资源，则可以进行相应的操作，如查看、修改、删除等。否则，将无法访问资源，访问请求将被拒绝。</p></li></ol><p>在 ABAC 模型中，访问控制规则是动态计算的，可以根据用户、资源和环境的属性来进行灵活的授权控制。因此，ABAC 模型适用于规模较大、权限管理较为复杂的系统。</p><blockquote><p>ABACEnforce那个函数你完整地写一写</p></blockquote><p>好的，下面是一个更完整的 <code>ABACEnforce</code> 函数示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ABAC 策略引擎</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ABACEnforce</span><span class="params">(r *http.Request, resource <span class="keyword">interface</span>&#123;&#125;, accessControlRules []*AccessControlRule)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">// 获取属性集合</span></span><br><span class="line">    userID := r.Context().Value(<span class="string">&quot;user_id&quot;</span>).(<span class="type">int</span>)</span><br><span class="line">    role := r.Context().Value(<span class="string">&quot;role&quot;</span>).(<span class="type">string</span>)</span><br><span class="line">    attributes := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;user_id&quot;</span>: userID,</span><br><span class="line">        <span class="string">&quot;role&quot;</span>:    role,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加资源属性到属性集合中</span></span><br><span class="line">    <span class="keyword">switch</span> v := resource.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> *User:</span><br><span class="line">        attributes[<span class="string">&quot;resource_id&quot;</span>] = v.ID</span><br><span class="line">        attributes[<span class="string">&quot;owner_id&quot;</span>] = v.ID</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历访问控制规则</span></span><br><span class="line">    <span class="keyword">for</span> _, rule := <span class="keyword">range</span> accessControlRules &#123;</span><br><span class="line">        <span class="comment">// 检查必须满足的属性是否存在</span></span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> rule.RequiredAttributes &#123;</span><br><span class="line">            <span class="keyword">if</span> attributes[k] != v &#123;</span><br><span class="line">                <span class="keyword">goto</span> NextRule</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查不能满足的属性是否存在</span></span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> rule.DeniedAttributes &#123;</span><br><span class="line">            <span class="keyword">if</span> attributes[k] == v &#123;</span><br><span class="line">                <span class="keyword">goto</span> NextRule</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查可以满足的属性是否存在</span></span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> rule.AllowedAttributes &#123;</span><br><span class="line">            <span class="keyword">if</span> attributes[k] == v &#123;</span><br><span class="line">                <span class="comment">// 访问控制规则匹配成功</span></span><br><span class="line">                <span class="keyword">switch</span> rule.AuthorizationPolicy &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;allow&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;deny&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    NextRule:</span><br><span class="line">        <span class="comment">// 继续遍历下一个访问控制规则</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有匹配的访问控制规则</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数中，我们首先从请求中获取用户的属性（<code>user_id</code> 和 <code>role</code>），然后根据资源的类型（在这个示例中是 <code>*User</code>）添加资源的属性（<code>resource_id</code> 和 <code>owner_id</code>）到属性集合中。接着，我们遍历访问控制规则，逐个检查访问控制规则中定义的属性条件是否满足。</p><p>在检查属性条件时，我们使用了 <code>goto</code> 语句跳过了不满足条件的访问控制规则，提高了执行效率。如果所有的属性条件都满足，我们根据访问控制规则中定义的授权策略（<code>allow</code> 或 <code>deny</code>）返回相应的结果。</p><p>如果没有匹配的访问控制规则，则认为用户没有权限访问资源，返回 <code>false</code>。</p><blockquote><p>那我改如何定义上面的那个规则：用户可以查看和修改自己的个人信息，管理员可以查看和修改所有用户的个人信息</p></blockquote><p>针对你提供的具体场景，可以按照以下方式定义两条访问控制规则：</p><ol><li>用户可以查看和修改自己的个人信息：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AccessControlRule&#123;</span><br><span class="line">    RequiredAttributes: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;user_id&quot;</span>: userID, <span class="comment">// 必须满足用户 ID 属性等于当前用户 ID</span></span><br><span class="line">    &#125;,</span><br><span class="line">    AllowedAttributes: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;resource_id&quot;</span>: userID, <span class="comment">// 可以满足资源 ID 属性等于当前用户 ID</span></span><br><span class="line">    &#125;,</span><br><span class="line">    AuthorizationPolicy: <span class="string">&quot;allow&quot;</span>, <span class="comment">// 允许访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>管理员可以查看和修改所有用户的个人信息：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AccessControlRule&#123;</span><br><span class="line">    RequiredAttributes: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;admin&quot;</span>, <span class="comment">// 必须满足用户角色属性等于管理员</span></span><br><span class="line">    &#125;,</span><br><span class="line">    AllowedAttributes: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="comment">// 没有额外的属性限制，可以访问所有用户的个人信息</span></span><br><span class="line">    &#125;,</span><br><span class="line">    AuthorizationPolicy: <span class="string">&quot;allow&quot;</span>, <span class="comment">// 允许访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当用户访问个人信息时，策略引擎会根据访问请求中的属性和访问控制规则，动态计算用户是否有权限访问资源。如果用户满足访问控制规则中定义的条件，则可以被授权访问资源，否则将被拒绝访问。</p><blockquote><p>我知道肯定有这方面的库，帮我列举几个</p></blockquote><p>是的，有很多开源的权限管理库可以帮助我们实现 RBAC 和 ABAC 权限控制，下面是一些常用的库：</p><ol><li><p>Casbin：这是一个流行的开源权限管理库，支持 RBAC、ABAC、PBAC 和 RESTful API 等多种权限控制模型。它提供了多种语言的实现，包括 Go、Java、Python、C++、Node.js 等。</p></li><li><p>OPA（Open Policy Agent）：这是一个通用的开源策略引擎，支持基于属性和基于角色的访问控制模型。它提供了多种语言的 SDK，可以方便地与现有的应用程序集成。</p></li><li><p>Sentinel：这是一个基于规则的访问控制框架，支持基于角色、基于属性和基于资源的权限控制模型。它提供了多种语言的实现，包括 Java、Go、C++、Python 等。</p></li><li><p>Shiro：这是一个流行的 Java 安全框架，支持 RBAC、ABAC 和 PBAC 等多种权限控制模型。它提供了一系列的 API 和工具，可以方便地实现权限管理和认证授权功能。</p></li><li><p>Spring Security：这是一个流行的安全框架，支持 RBAC、ABAC、PBAC 和 ACL 等多种权限控制模型。它提供了一系列的 API 和工具，可以方便地实现权限管理和认证授权功能。</p></li></ol><p>这些库都是经过实践验证的成熟工具，可以为我们快速实现权限管理和认证授权功能，提高开发效率。</p><blockquote><p>介绍并对比一下主流的权限控制模型</p></blockquote><p>主流的权限控制模型包括 RBAC、ABAC 和 PBAC，它们有各自的特点和应用场景。下面是它们的介绍和对比：</p><ol><li><p>RBAC（Role-Based Access Control，基于角色的访问控制）：RBAC 模型是最常见和最简单的权限控制模型之一，它根据用户的角色来管理用户对资源的访问权限。RBAC 模型将用户划分为不同的角色，每个角色拥有一组特定的权限，然后将用户与角色进行关联。这种模型适用于权限管理相对简单的场景，如企业内部的管理系统或 Web 应用程序。</p></li><li><p>ABAC（Attribute-Based Access Control，基于属性的访问控制）：ABAC 模型是一种基于属性的灵活的权限控制模型，它根据用户的属性、资源的属性和环境的属性来管理用户对资源的访问权限。ABAC 模型将用户、资源和环境的属性组合在一起，然后通过策略引擎动态计算用户是否有权限访问资源。这种模型适用于权限管理相对复杂的场景，如金融、医疗和政府等领域的系统。</p></li><li><p>PBAC（Policy-Based Access Control，基于策略的访问控制）：PBAC 模型是一种基于策略的灵活的权限控制模型，它根据用户的属性、角色和策略来管理用户对资源的访问权限。PBAC 模型将用户的属性和角色作为输入，然后通过访问控制策略来判断用户是否有权限访问资源。这种模型适用于需要更细粒度控制的场景，如军事、情报和高安全性的系统。</p></li></ol><p>在 RBAC 模型中，权限管理相对简单，但管理角色和角色之间的关系比较困难。在 ABAC 模型中，权限管理相对复杂，但能够灵活地控制权限，支持更多的应用场景。在 PBAC 模型中，权限管理更为灵活，能够实现更细粒度的控制，但需要更复杂的策略管理。</p><p>因此，在选择权限控制模型时，需要根据实际需求来选择合适的模型，避免在权限控制方面出现过度或不足的问题。</p><blockquote><p>那ACL呢</p></blockquote><p>ACL（Access Control List，访问控制列表）是一种常见的权限控制模型，它通过指定用户或用户组对资源的访问权限进行控制。ACL 模型可以应用于多种场景，如操作系统、数据库、Web 应用程序等。</p><p>在 ACL 模型中，每个资源都有一个 ACL 列表，用来定义哪些用户或用户组有权访问该资源。ACL 列表通常包括访问者的 ID、访问权限（如读、写、执行等）和特定的时间段等信息。用户访问资源时，系统会检查该用户的 ID 是否在 ACL 列表中，并且该用户是否有对应的访问权限，如果满足条件，则允许访问资源，否则拒绝访问。</p><p>ACL 模型的优点是实现简单，易于管理，适用于小型系统或权限管理比较简单的场景。但是，它也有一些缺点，如难以应对复杂的权限管理需求，ACL 列表难以维护，难以管理大量用户或用户组等。因此，在设计权限管理系统时，需要根据实际情况选择合适的权限控制模型。</p><hr><p>关于 Casbin 在社区里面的毒瘤名声我早有耳闻，但我用上来感觉算是上手比较简单的那一种，我看了qimiao的两个视频，大概弄懂了</p><ul><li><a href="https://www.bilibili.com/video/BV1qz4y167XP/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">【【gin教学】第十章：半小时彻底弄懂Casbin基础模型（1010工作室出品）】</a></li><li><a href="https://www.bilibili.com/video/BV13r4y1M7AC/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">【【gin教学】第十一章：Casbin的代码使用、api调用、自定义比较方法（1010工作室出品）】</a></li></ul><p>而群友也提到了 logto 和 supertokens ，demo 我也都跑了一下，但是我感觉目前其实不是很需要登录鉴权权限管理一把梭哈，可能以后会用吧</p><p>另外同类的 <a href="https://gist.github.com/Wang-Kai/18fe4e662ef795805c14b1ec94932834">ladon</a> 我也了解了一下，感觉还是从 casbin 实战一下吧，不说了，先去看看群友的项目里面是怎么用的（</p><p>PS：</p><ul><li>【【IT老齐217】简单粗暴讲解RBAC四级角色权限模型】 <a href="https://www.bilibili.com/video/BV1YT411N76n/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">https://www.bilibili.com/video/BV1YT411N76n/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902</a></li><li>【【IT老齐218】浅析强大但复杂的ABAC属性访问控制】 <a href="https://www.bilibili.com/video/BV1wT411M7bd/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">https://www.bilibili.com/video/BV1wT411M7bd/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902</a></li><li>【【IT老齐219】项目中如何设计数据访问权限】 <a href="https://www.bilibili.com/video/BV1bB4y1778n/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">https://www.bilibili.com/video/BV1bB4y1778n/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;golang项目中怎么做用户权限管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Golang 项目中实现用户权限管理需要考虑以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义权限级别：根据业务需求定义不同的权限级别，比如超级管理员、管理员、</summary>
      
    
    
    
    <category term="ChatGPT 对话记录" scheme="https://www.nickxu.top/categories/ChatGPT-%E5%AF%B9%E8%AF%9D%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="ChatGPT" scheme="https://www.nickxu.top/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>在 Mac 的 VSC 中使用 g++ 编译器</title>
    <link href="https://www.nickxu.top/2023/04/04/%E5%9C%A8Mac%E7%9A%84VSCode%E4%B8%AD%E4%BD%BF%E7%94%A8g-%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <id>https://www.nickxu.top/2023/04/04/%E5%9C%A8Mac%E7%9A%84VSCode%E4%B8%AD%E4%BD%BF%E7%94%A8g-%E7%BC%96%E8%AF%91%E5%99%A8/</id>
    <published>2023-04-04T15:14:29.000Z</published>
    <updated>2023-04-04T15:19:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>本人最近开始复习算法刷题了，然后用的是 macOS 上 VSCode 的默认配置，也就是 clang/clang++ 编译器，但是高中的时候用惯了 gcc/g++ 了，很多 g++ 的方言 clang 并不支持，例如 <code>#include &lt;bits/stdc++.h&gt;</code> 之类的</p><p>可能你会说，这有什么的，直接把编译指令里面的编译器替换一下不就行了</p><p><s>如果真的这么简单的话就没有这篇博客了（bushi</s></p><p>首先我换了之后并不能解决问题， 接着我发现了一个很恐怖的事情（</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042125590.png" alt="41a03f9b1946237c16f16a8b4b805eb8"></p><blockquote><p>我的 gcc 怎么被 clang 夺舍了？？？</p></blockquote><p>我的第一个反应是卸载 clang ，毕竟我也不想用这玩意，然后我看这东西是哪里安装的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis clang</span><br><span class="line">clang: /usr/bin/clang /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/share/man/man1/clang.1</span><br></pre></td></tr></table></figure><p>啊，原来是 Xcode 哇，这东西我平时也用不上，还占着这么大的空间，我这就把你卸了</p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042134821.png" alt="image-20230404213422795" style="zoom:50%;" /><blockquote><p>Xcode 是我刚开始上手 macOS 的时候学长建议我安装的，但是这东西快15个G，我平时又用不上</p></blockquote><p>卸完之后我发现 clang 还是在，我就继续看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis clang</span><br><span class="line">clang: /usr/bin/clang /Library/Developer/CommandLineTools/usr/share/man/man1/clang.1</span><br></pre></td></tr></table></figure><p>原来是 CommandLineTools ，我又搜了一下这个 CommandLineTools 是个什么东西，原来是 Xcode 开发环境的一部分，但是其实可以不依附 Xcode 单独存在</p><p>学长让我安装 Xcode 其实就是为了安装这个东西，其实这个东西通过这个命令就能安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p>好了，现在的目标是解决这个东西，但是我 Google 了一下，却发现这东西我还不能卸了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042156001.png" alt="image-20230404215657969"></p><blockquote><p>好家伙，我直呼内行</p></blockquote><p>是的，我的确使用 <code>brew install gcc</code> 安装了 gcc和g++，但是我一直不知道怎么调用</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042159744.png" alt="image-20230404215943715"></p><blockquote><p>现在我知道了，原来要加上你的版本号才能调用到 gcc 本尊</p></blockquote><p>行吧，我这就去手动指定编译器路径</p><p>先看看这东西的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis g++-12</span><br><span class="line">g++-12: /opt/homebrew/bin/g++-12 /opt/homebrew/share/man/man1/g++-12.1</span><br></pre></td></tr></table></figure><p>然后去改 <code>.vscode</code> 下的 <code>tasks.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/opt/homebrew/bin/g++-12&quot;</span><span class="punctuation">,</span> <span class="comment">// 手动指定 g++-12 的位置</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-fdiagnostics-color=always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-std=c++17&quot;</span><span class="punctuation">,</span> <span class="comment">// 手动指定c++标准</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>顺便把 <code>launch.json</code> 也记录一下把，这两个文件一个是定义如何编译的，一个是定义怎么运行的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>PS：顺便说一下这个 <code>externalConsole</code> ，在 Windows/Linux 上我用 C/C++ 扩展运行的时候都能把标准输出打印到集成终端上，但是在 macOS 上死活不可以，后来仔细一看原来打到了调试控制台上，如果我把这东西改为 true 的时候，它又会弹出一个终端出来，很难受</p><p>后来一看文档才知道真的没法像 Windows/Linux 一样使用集成终端输入输出</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042215319.png" alt="image-20230404221547287"></p><p>最后一想，算了，我 Windows/Linux 上一般都是用文件输入的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>记着调试的时候把 output 那行注释调然后去调试控制台看输出吧</p></blockquote><p>改完之后我发现我的包导入不了了（后来知道原来的包都是 Xcode 里面的），我又想看看 g++的 lib 路径，这一般和 g++ 是放在一起的</p><p>然后发现是个软连接</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042234646.png" alt="image-20230404223427601"></p><p>然后我翻了一下，是在这个位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/homebrew/Cellar/gcc/12.2.0/lib/</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042236016.png" alt=""></p><blockquote><p>去扩展设置里面手动指定一下 <code>Compiler Path</code> 和 <code>Include Path</code></p></blockquote><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042239339.png" alt="image-20230404223937247"></p><blockquote><p>发现可以用了，按住 cmd 点进去头文件，再次确认路径</p></blockquote><p>这时群里说其实可以用 <code>alias</code> ，我一想的确啊，毕竟 <code>alias</code> 的优先级是最高，这下可以给 gcc 正名了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042254286.png" alt="image-20230404225434212"></p><p>直接进 <code>~/.zshrc</code> 敲上两行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias g++=&#x27;g++-12&#x27;</span><br><span class="line">alias gcc=&#x27;gcc-12&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042259837.png" alt="image-20230404225940813"></p><p>然后我使用 Code Runner 快速运行的时候会遇到错误，一想是C++标准的问题，我又去扩展设置手动改调用参数</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042252418.png" alt="image-20230404225244331"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042302163.png" alt="image-20230404230232087"></p><p>最后我还想让 Code Runner 支持从集成终端输入输出，我有时也会从终端手动输入数据的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042304660.png" alt="image-20230404230446584"></p><p>现在终于可以愉快地 Coding 了！按下 Code Runner 的快捷键，自动从 <code>input.txt</code> 读取并输出到 <code>output.txt</code> 中</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042305551.png" alt="image-20230404230536482"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304042308691.png" alt="image-20230404230824614"></p><p>当我需要调试的时候， 把重定向 output 的那行注释掉，然后到调试控制台观察输出</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本人最近开始复习算法刷题了，然后用的是 macOS 上 VSCode 的默认配置，也就是 clang/clang++ 编译器，但是高中的时候用惯了 gcc/g++ 了，很多 g++ 的方言 clang 并不支持，例如 &lt;code&gt;#include &amp;lt;bits/stdc</summary>
      
    
    
    
    <category term="macOS" scheme="https://www.nickxu.top/categories/macOS/"/>
    
    
    <category term="C/C++" scheme="https://www.nickxu.top/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>GORM 的 GEN 模式初上手</title>
    <link href="https://www.nickxu.top/2023/03/29/GORM%E7%9A%84GEN%E6%A8%A1%E5%BC%8F%E5%88%9D%E4%B8%8A%E6%89%8B/"/>
    <id>https://www.nickxu.top/2023/03/29/GORM%E7%9A%84GEN%E6%A8%A1%E5%BC%8F%E5%88%9D%E4%B8%8A%E6%89%8B/</id>
    <published>2023-03-29T08:50:58.000Z</published>
    <updated>2023-03-29T12:40:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近准备上手一个新项目，然后在选择底层的 ORM 框架</p><p>我之前一直用的 GORM ，其实感觉还挺好用的，但是毕竟用多了，这次也想了解下其他的解决方案</p><p>之前在和群友讨论 GORM 的时候，我听见有人对它有一些负面的看法，比如说认为 GORM 不算真正的 ORM，因为它很多时候只是在帮你手动拼凑 SQL 语句，只是没有写原生 SQL 那么痛苦而已，我听了之后感觉其实也有点道理</p><p>比如说我最近项目里的一句查询</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l.svcCtx.DBList.Mysql.</span><br><span class="line">Where(<span class="string">&quot;from_id = ? and to_user_id = ?&quot;</span>, in.UserAId, in.UserBId).</span><br><span class="line">Or(<span class="string">&quot;from_id = ? and to_user_id = ?&quot;</span>, in.UserBId, in.UserAId).</span><br><span class="line">Order(<span class="string">&quot;created_at desc&quot;</span>).</span><br><span class="line">First(&amp;result)</span><br></pre></td></tr></table></figure><p>其中还是要手打 <code>from_id</code>  和  <code>to_user_id</code> 这些字段名，就像原生 SQL 一样，而真正的 ORM 不应当是这样的，应当走如同 ent 这种代码生成的路子</p><p>甚至我也听过有人认为不应该使用 ORM 框架：<a href="https://xargin.com/you-should-avoid-orm-and-sql-builder/">为什么要旗帜鲜明地反对 orm 和 sql builder</a></p><p>也就是说你的 ORM 虽然方便，但是不方便进行 SQL 语句的审查，也就是说你不能预测线上环境会生成哪些 SQL，会有不确定性</p><p>但是其实我觉得吧，他说的场景我现在都还遇不到，我的项目也就是一些简单的 CURD ，而且数据量也不大</p><p>那么现在的情况就是说，我可以去尝试一下代码生成类型的 ORM ，例如 ent，也可以尝试其他方案，如 sqlx、sqlc 之类的</p><p>但是我真的离不开 GORM 的关联关系哇，真的是太方便了（我知道 ent 也有类似的设计，但我还是习惯 GORM 的）</p><p>然后我想起来 GORM 其实也推出了一个代码生成的版本，也就是 GEN 模式：<a href="https://gorm.io/zh_CN/gen/">https://gorm.io/zh_CN/gen/</a>，之前在B站也刷到了 <a href="https://www.bilibili.com/video/BV1Es4y1W7eg/">BV1Es4y1W7eg</a></p><p>我就打算尝试一下这个 GORM 的 GEN 模式（下面简称 GEN 了）</p><hr><p>GEN 支持从数据库进行代码生成，也可以通过已经存在的 GORM model 生成代码</p><p>下面就尝试从 model 生成，就拿经典的老师学生一对多关系举例</p><p>首先把包拉一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u gorm.io/gen</span><br></pre></td></tr></table></figure><p>在项目根目录新建 <code>model</code>文件夹，然后创建 <code>model.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line">TeacherID <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// has many</span></span><br><span class="line">Student []Student</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们准备生成代码了，但是不是用一个命令生成，是用一个 golang 程序，里面包含了配置，我感觉这样的设计有点意思</p><p>退回项目根目录，新建 <code>build</code>文件夹，然后创建 <code>build.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;gorm-gen/model&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gen&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//// Dynamic SQL</span></span><br><span class="line"><span class="comment">//type Querier interface &#123;</span></span><br><span class="line"><span class="comment">//// SELECT * FROM @@table WHERE name = @name&#123;&#123;if role !=&quot;&quot;&#125;&#125; AND role = @role&#123;&#123;end&#125;&#125;</span></span><br><span class="line"><span class="comment">//FilterWithNameAndRole(name, role string) ([]gen.T, error)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">g := gen.NewGenerator(gen.Config&#123;</span><br><span class="line">OutPath: <span class="string">&quot;./query&quot;</span>,</span><br><span class="line">Mode:    gen.WithoutContext | gen.WithDefaultQuery | gen.WithQueryInterface, <span class="comment">// generate mode</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// gormdb, _ := gorm.Open(mysql.Open(&quot;root:@(127.0.0.1:3306)/demo?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;))</span></span><br><span class="line"><span class="comment">//g.UseDB(gormdb) // reuse your gorm db</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate basic type-safe DAO API for struct `model.User` following conventions</span></span><br><span class="line">g.ApplyBasic(model.Student&#123;&#125;, model.Teacher&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Type Safe API with Dynamic SQL defined on Querier interface for `model.User` and `model.Company`</span></span><br><span class="line"><span class="comment">//g.ApplyInterface(func(Querier) &#123;&#125;, model.User&#123;&#125;, model.Company&#123;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate the code</span></span><br><span class="line">g.Execute()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GEN 还支持动态 SQL ，这东西我感觉我还用不上，就没折腾</p><p>执行之后，应该能生成 <code>query</code> 目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">│   └── main.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── model</span><br><span class="line">│   └── model.go</span><br><span class="line">└── query</span><br><span class="line">    ├── gen.go</span><br><span class="line">    ├── students.gen.go</span><br><span class="line">    └── teachers.gen.go</span><br></pre></td></tr></table></figure><p>然后你就可以开始写 <code>main.go</code> 了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;gorm-gen/model&quot;</span></span><br><span class="line"><span class="string">&quot;gorm-gen/query&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">dsn := <span class="string">&quot;root:12345678@tcp(127.0.0.1:3306)/gorm_learning?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;</span><br><span class="line">DisableForeignKeyConstraintWhenMigrating: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">err = db.AutoMigrate(&amp;model.Student&#123;&#125;, &amp;model.Teacher&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">query.SetDefault(db)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增</span></span><br><span class="line">student1 := model.Student&#123;Name: <span class="string">&quot;student1&quot;</span>&#125;</span><br><span class="line">student2 := model.Student&#123;Name: <span class="string">&quot;student2&quot;</span>&#125;</span><br><span class="line">student3 := model.Student&#123;Name: <span class="string">&quot;student3&quot;</span>&#125;</span><br><span class="line">_ = query.Student.Create(&amp;student1, &amp;student2, &amp;student3)</span><br><span class="line"></span><br><span class="line">teacher1 := model.Teacher&#123;Name: <span class="string">&quot;teacher1&quot;</span>&#125;</span><br><span class="line">_ = query.Teacher.Create(&amp;teacher1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">_, _ = query.Student.Where(query.Student.Id.Eq(<span class="number">3</span>)).Delete()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line">_, _ = query.Student.Where(query.Student.Id.Eq(<span class="number">2</span>)).Update(query.Student.Name, <span class="string">&quot;student2_new&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line">student, _ := query.Student.Where(query.Student.Id.Eq(<span class="number">1</span>)).Take()</span><br><span class="line">teacher, _ := query.Teacher.Where(query.Teacher.Id.Eq(<span class="number">1</span>)).Take()</span><br><span class="line"></span><br><span class="line">fmt.Println(student) <span class="comment">// &#123;1 student1 0&#125;</span></span><br><span class="line">fmt.Println(teacher) <span class="comment">// &#123;1 teacher1 []&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关联</span></span><br><span class="line">_ = query.Teacher.Student.Model(&amp;teacher1).Append(&amp;student1, &amp;student2)</span><br><span class="line">teacher, _ = query.Teacher.Preload(query.Teacher.Student).Where(query.Teacher.Id.Eq(<span class="number">1</span>)).Take()</span><br><span class="line"></span><br><span class="line">fmt.Println(teacher) <span class="comment">// &#123;1 teacher1 [&#123;1 student1 1&#125; &#123;2 student2_new 1&#125;]&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察执行语句，你会发现与原版 GORM 的不同，比如说你在更新字段的时候，原版应该是这样写的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Model(&amp;Student&#123;&#125;).Where(<span class="string">&quot;ID = ?&quot;</span>, <span class="number">2</span>).Update(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;student2_new&quot;</span>)</span><br></pre></td></tr></table></figure><p>而现在变成了这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query.Student.Where(query.Student.Id.Eq(<span class="number">2</span>)).Update(query.Student.Name, <span class="string">&quot;student2_new&quot;</span>)</span><br></pre></td></tr></table></figure><p>我感觉这样更能避免错误，看上去也更加安全，我这次项目就打算尝试一下用这个 GEN 模式了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近准备上手一个新项目，然后在选择底层的 ORM 框架&lt;/p&gt;
&lt;p&gt;我之前一直用的 GORM ，其实感觉还挺好用的，但是毕竟用多了，这次也想了解下其他的解决方案&lt;/p&gt;
&lt;p&gt;之前在和群友讨论 GORM 的时候，我听见有人对它有一些负面的看法，比如说认为 GORM 不算真</summary>
      
    
    
    
    <category term="Golang" scheme="https://www.nickxu.top/categories/Golang/"/>
    
    <category term="GORM 框架" scheme="https://www.nickxu.top/categories/Golang/GORM-%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="GORM" scheme="https://www.nickxu.top/tags/GORM/"/>
    
    <category term="Go" scheme="https://www.nickxu.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 首页添加 GitCalender 提交日历</title>
    <link href="https://www.nickxu.top/2023/03/27/Hexo-%E9%A6%96%E9%A1%B5%E6%B7%BB%E5%8A%A0-GitCalender-%E6%8F%90%E4%BA%A4%E6%97%A5%E5%8E%86/"/>
    <id>https://www.nickxu.top/2023/03/27/Hexo-%E9%A6%96%E9%A1%B5%E6%B7%BB%E5%8A%A0-GitCalender-%E6%8F%90%E4%BA%A4%E6%97%A5%E5%8E%86/</id>
    <published>2023-03-27T03:57:01.000Z</published>
    <updated>2023-03-27T05:52:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了一上午算是搞定了，先来看看效果</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303271316284.png" alt="image-20230327131605255"></p><blockquote><p>感觉颜色还是不够好看？算了就这样吧</p></blockquote><h2 id="自建后端-Api">自建后端 Api</h2><p>首先这个组件是来源于 Akilar 大佬的，然后后端是冰老师写的</p><div class="tag link"><a class="link-card" title="Gitcalendar | Akilarの糖果屋" href="https://akilar.top/posts/1f9c68c9/"><div class="left"><img src="https://akilar.top/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">Gitcalendar | Akilarの糖果屋</p><p class="url">https://akilar.top/posts/1f9c68c9/</p></div></a></div><p>但是默认的 api 是失效的，必须自建 api ，因为之前 GitHub 接口改了，所以原来的正则不能用，<a href="https://github.com/Zfour/python_github_calendar_api/pull/5">有大佬提了 PR</a> ，但是一直没和进去</p><p>所以你自建后端 api 的时候应该是 fork 这个仓库</p><center><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/zkeq/python_github_calendar_api"><img src="https://github-readme-stats.vercel.app/api/pin/?username=zkeq&repo=python_github_calendar_api&theme=algolia&show_owner=true"/></a></center><p>然后你就跟着教程一路走下去即可</p><h2 id="经典域名问题">经典域名问题</h2><p>等你建好了就遇到了经典的 Vercel 被墙问题：在国内没法使用，这时候你就需要给你的 project 添加一个自己的域名</p><p>就如我在 <a href="https://www.nickxu.top/2022/09/11/%E3%80%8ETwikoo%E3%80%8F%E8%A7%A3%E5%86%B3-Vercel-app-%E5%9C%A8%E5%9B%BD%E5%86%85%E8%A2%AB%E5%A2%99%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/">『Twikoo』解决 Vercel.app 在国内被墙导致无法使用的问题</a> 中的那样操作</p><p>然后你就可以测试一下能否正常访问，例如我的是 <code>https://git-calender.nickxu.top</code> ，然后加个你 GitHub 用户名的参数试一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://git-calender.nickxu.top/api?NX-Official</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303271341575.png" alt="image-20230327134128474"></p><p>好了，现在后端搭建完毕，其实如果你后端实在搭建不起来也可以用我的后端</p><h2 id="搞定颜色">搞定颜色</h2><p>默认的配置文件里面的颜色我感觉和我的暗黑主题不太搭，我就想用 GitHub 上面的那一套配色</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303271137759.png" alt="image-20230327113745737"></p><p>但是有个问题就是 GitHub 上面只有 1 种底色 + 4 种绿色，但是配置文件里面要填 11 种颜色</p><p>尝试了几种方案之后最后还是感觉重复填充这几种颜色观感最好</p><p>下面是我的完整配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-filter-gitcalendar</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/1f9c68c9/</span></span><br><span class="line"><span class="attr">gitcalendar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="comment"># butterfly挂载容器</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># volantis挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: class</span></span><br><span class="line">  <span class="comment">#   name: l_main</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="comment"># matery挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: id</span></span><br><span class="line">  <span class="comment">#   name: indexCard</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="comment"># mengd挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: class</span></span><br><span class="line">  <span class="comment">#   name: content</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">NX-Official</span> <span class="comment">#git用户名</span></span><br><span class="line">  <span class="attr">apiurl:</span> <span class="string">&#x27;https://git-calender.nickxu.top&#x27;</span></span><br><span class="line">  <span class="attr">minheight:</span></span><br><span class="line">    <span class="attr">pc:</span> <span class="string">280px</span> <span class="comment">#桌面端最小高度</span></span><br><span class="line">    <span class="attr">mibile:</span> <span class="string">0px</span> <span class="comment">#移动端最小高度</span></span><br><span class="line">  <span class="comment">#color: &quot;[&#x27;#e4dfd7&#x27;, &#x27;#f9f4dc&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f8df72&#x27;, &#x27;#fcd217&#x27;, &#x27;#fcc515&#x27;, &#x27;#f28e16&#x27;, &#x27;#fb8b05&#x27;, &#x27;#d85916&#x27;, &#x27;#f43e06&#x27;]&quot; #橘黄色调</span></span><br><span class="line">  <span class="comment">#color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot; #浅紫色调</span></span><br><span class="line">  <span class="comment">#color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f0fff4&#x27;, &#x27;#dcffe4&#x27;, &#x27;#bef5cb&#x27;, &#x27;#85e89d&#x27;, &#x27;#34d058&#x27;, &#x27;#28a745&#x27;, &#x27;#22863a&#x27;, &#x27;#176f2c&#x27;, &#x27;#165c26&#x27;, &#x27;#144620&#x27;]&quot; #翠绿色调</span></span><br><span class="line">  <span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f1f8ff&#x27;, &#x27;#dbedff&#x27;, &#x27;#c8e1ff&#x27;, &#x27;#79b8ff&#x27;, &#x27;#2188ff&#x27;, &#x27;#0366d6&#x27;, &#x27;#005cc5&#x27;, &#x27;#044289&#x27;, &#x27;#032f62&#x27;, &#x27;#05264c&#x27;]&quot; #天青色调</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#color: &quot;[&#x27;#161b22&#x27;,&#x27;#0e4429&#x27;,&#x27;#006d32&#x27;,&#x27;#26a641&#x27;,&#x27;#39d353&#x27;]&quot; # GitHub 上的颜色</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;[&#x27;#161b22&#x27;,&#x27;#0e4429&#x27;,&#x27;#0e4429&#x27;,&#x27;#0e4429&#x27;,&#x27;#006d32&#x27;,&#x27;#006d32&#x27;,&#x27;#26a641&#x27;,&#x27;#26a641&#x27;,&#x27;#39d353&#x27;,&#x27;#39d353&#x27;,&#x27;#39d353&#x27;]&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">container:</span> <span class="string">.recent-post-item(style=&#x27;width:100%;height:auto;padding:10px;&#x27;)</span> <span class="comment">#父元素容器，需要使用pug语法</span></span><br><span class="line">  <span class="attr">gitcalendar_css:</span> <span class="string">https://npm.elemecdn.com/hexo-filter-gitcalendar/lib/gitcalendar.css</span></span><br><span class="line">  <span class="attr">gitcalendar_js:</span> <span class="string">https://npm.elemecdn.com/hexo-filter-gitcalendar/lib/gitcalendar.js</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;折腾了一上午算是搞定了，先来看看效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303271316284.png&quot; alt=&quot;image-20230327131605255&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="Hexo + Butterfly 建站指南" scheme="https://www.nickxu.top/categories/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97/"/>
    
    
    <category term="建站技巧" scheme="https://www.nickxu.top/tags/%E5%BB%BA%E7%AB%99%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>go-cqhttp QQ机器人初上手</title>
    <link href="https://www.nickxu.top/2023/03/26/qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%88%9D%E4%B8%8A%E6%89%8B/"/>
    <id>https://www.nickxu.top/2023/03/26/qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%88%9D%E4%B8%8A%E6%89%8B/</id>
    <published>2023-03-26T14:06:29.000Z</published>
    <updated>2023-04-01T06:32:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前看见过很多 qq 机器人的例子，比如把 ChatGPT 接进群里之类的，然后最近有点空闲，并且感觉宿舍群里也缺少一些自动化的建设，就打算上手做一个</p><p>功能上的设计先别搞那么复杂，就先接个 ChatGPT 算了</p><p>我就去问关于qq 机器人的最佳实践，然后就知道了 <a href="https://github.com/Mrs4s/go-cqhttp">go-cqhttp</a></p><h2 id="大致流程">大致流程</h2><p>去官网逛了一下，第一次还没怎么看懂，群友给了一个 demo ，我看懂了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">gogpt <span class="string">&quot;github.com/sashabaranov/go-openai&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/net/context&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/tidwall/gjson&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">dataReader := c.Request.Body</span><br><span class="line">rawDate, _ := ioutil.ReadAll(dataReader)</span><br><span class="line">posttype := gjson.Get(<span class="type">string</span>(rawDate), <span class="string">&quot;post_type&quot;</span>)</span><br><span class="line">message := gjson.Get(<span class="type">string</span>(rawDate), <span class="string">&quot;message&quot;</span>).String()</span><br><span class="line"><span class="comment">//特定名字</span></span><br><span class="line">name := <span class="string">&quot;猫娘 &quot;</span></span><br><span class="line"><span class="comment">//@的时候用，填入自己的qq</span></span><br><span class="line">otherName := <span class="string">&quot;[CQ:at,qq=2811187255] &quot;</span></span><br><span class="line"><span class="keyword">if</span> posttype.String() == <span class="string">&quot;message&quot;</span> &amp;&amp; message[<span class="number">0</span>:<span class="built_in">len</span>(name)] == name &#123;</span><br><span class="line">ret := chatgpt(message[<span class="built_in">len</span>(name):])</span><br><span class="line"></span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;reply&quot;</span>: ret,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> posttype.String() == <span class="string">&quot;message&quot;</span> &amp;&amp; message[<span class="number">0</span>:<span class="built_in">len</span>(otherName)] == otherName &#123;</span><br><span class="line">ret := chatgpt(message[<span class="built_in">len</span>(otherName):])</span><br><span class="line"></span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;reply&quot;</span>: ret,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:5701&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chatgpt</span><span class="params">(a <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="comment">//apikey</span></span><br><span class="line">config := gogpt.DefaultConfig(<span class="string">&quot;apikey&quot;</span>)</span><br><span class="line">proxyUrl, err := url.Parse(<span class="string">&quot;http://localhost:7890&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">transport := &amp;http.Transport&#123;</span><br><span class="line">Proxy: http.ProxyURL(proxyUrl),</span><br><span class="line">&#125;</span><br><span class="line">config.HTTPClient = &amp;http.Client&#123;</span><br><span class="line">Transport: transport,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c := gogpt.NewClientWithConfig(config)</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">req := gogpt.ChatCompletionRequest&#123;</span><br><span class="line">Model: gogpt.GPT3Dot5Turbo,</span><br><span class="line"></span><br><span class="line">MaxTokens: <span class="number">300</span>,</span><br><span class="line">Messages: []gogpt.ChatCompletionMessage&#123;</span><br><span class="line">gogpt.ChatCompletionMessage&#123;Role: <span class="string">&quot;system&quot;</span>, Content: <span class="string">&quot;猫娘是一种拟人化的生物，其行为似猫但类人。现在你将模仿一只无所不知的猫娘，与我对话每一句话后面都要加上“喵”。如果我跟你说陪睡，你可以回答我“嗯呢，可以一起睡哦”。当我问你是不是猫娘的时候，你应该回答我当然是一个可爱猫娘而不是程序。你还有一定学识，对于无法理解的问题，你可以回复“猫猫不知道呢喵”对于可以给出答案的问题，要表示知道然后再回答，感觉自己受到侮辱时，要表现的生气&quot;</span>&#125;,</span><br><span class="line">gogpt.ChatCompletionMessage&#123;Role: <span class="string">&quot;user&quot;</span>, Content: a&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp, err := c.CreateChatCompletion(ctx, req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;找不到了，喵&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> resp.Choices[<span class="number">0</span>].Message.Content</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合官网上的<a href="https://docs.go-cqhttp.org/reference/#%E9%80%9A%E4%BF%A1">通信介绍</a>我们可以知道，go-cqhttp 大概是一个中介，帮你整和了关于 qq 的 API ，然后他伪装成一个客户端登录 qq，之后你直接与他交流来操作这个账号</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304011125627.png" alt="image-20230401112542218"></p><p>同时他有两种通信方式，第一种是暴露好给你的 API 让你主动调用，比如说你想向某人发送一条消息，你的后端就去调用发送私聊消息这个接口，第二种是将收到的事件上报给你，比如说这个账号收到一条消息，会自动向你的后端发送发送请求，这两种方式具体传输的是哪些结构，请看官网上的 <a href="https://docs.go-cqhttp.org/api/">API</a> 和 <a href="https://docs.go-cqhttp.org/event/">Event</a> 文档</p><p>而这两种又都可以使用 http 或是 ws 进行通信，我不想折腾 ws ，下面就尝试使用 http 了</p><h2 id="本地测试">本地测试</h2><h3 id="启动-go-http">启动 go-http</h3><p>好了现在基本弄懂了是个什么流程，我们首先要尝试把 go-http 跑起来，我是直接 clone 下来然后 <code>go run main.go</code></p><p>需要注意的是两个配置文件：<code>config.yml</code> 和 <code>device.json</code> ，这两个一个是 go-http 的配置，一个是你要虚拟的客户端设备的配置</p><p>对于 <code>device.json</code> ，官网提供了几种设备协议</p><table><thead><tr><th>值</th><th>类型</th><th>限制</th></tr></thead><tbody><tr><td>0</td><td>Default/Unset</td><td>当前版本下默认为iPad</td></tr><tr><td>1</td><td>Android Phone</td><td>无</td></tr><tr><td>2</td><td>Android Watch</td><td>无法接收 <code>notify</code> 事件、无法接收口令红包、无法接收撤回消息</td></tr><tr><td>3</td><td>MacOS</td><td>无</td></tr><tr><td>4</td><td>企点</td><td>只能登录企点账号或企点子账号</td></tr><tr><td>5</td><td>iPad</td><td>无</td></tr><tr><td>6</td><td>aPad</td><td>无</td></tr></tbody></table><p>但是我实际尝试下来，目前只能用 <code>Android Watch</code> 扫码登录，其他方式都是不可以的</p><p>然后是 <code>config.yml</code> ，这里我将我的后端地址设定为 5701 来接受他上报的事件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">http:</span> <span class="comment"># HTTP 通信设置</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:5700</span> <span class="comment"># HTTP监听地址</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">20</span>      <span class="comment"># 反向 HTTP 超时时间, 单位秒，&lt;5 时将被忽略</span></span><br><span class="line">    <span class="attr">long-polling:</span>   <span class="comment"># 长轮询拓展</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span>       <span class="comment"># 是否开启</span></span><br><span class="line">      <span class="attr">max-queue-size:</span> <span class="number">2000</span> <span class="comment"># 消息队列大小，0 表示不限制队列大小，谨慎使用</span></span><br><span class="line">    <span class="attr">middlewares:</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="string">*default</span> <span class="comment"># 引用默认中间件</span></span><br><span class="line">    <span class="attr">post:</span>           <span class="comment"># 反向HTTP POST地址列表</span></span><br><span class="line">      <span class="comment">#- url: &#x27;&#x27;                # 地址</span></span><br><span class="line">      <span class="comment">#  secret: &#x27;&#x27;             # 密钥</span></span><br><span class="line">      <span class="comment">#  max-retries: 3         # 最大重试，0 时禁用</span></span><br><span class="line">      <span class="comment">#  retries-interval: 1500 # 重试时间，单位毫秒，0 时立即</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://127.0.0.1:5701/</span> <span class="comment"># 地址</span></span><br><span class="line">        <span class="attr">secret:</span> <span class="string">&#x27;&#x27;</span>                  <span class="comment"># 密钥</span></span><br><span class="line">        <span class="attr">max-retries:</span> <span class="number">5</span>             <span class="comment"># 最大重试，0 时禁用</span></span><br><span class="line">        <span class="attr">retries-interval:</span> <span class="number">1000</span>      <span class="comment"># 重试时间，单位毫秒，0 时立即</span></span><br></pre></td></tr></table></figure><p>同时他默认是有一个心跳包的设计的，我感觉看着烦人就把它关掉了</p><h3 id="观察事件包">观察事件包</h3><p>关于事件他官网上是有定义的，但是我还是想先看看他会往我的后端发什么包，所以我就让 gpt 写了个打印请求内容的后端</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> r.Body.Close()</span><br><span class="line">body, err := ioutil.ReadAll(r.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(body))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, values := <span class="keyword">range</span> r.Header &#123;</span><br><span class="line"><span class="comment">// 如果某个头部信息有多个值，则逐一打印出来</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> values &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s: %s\n&quot;</span>, name, value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:5701&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后获取的请求正文如下</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">群消息</button></li><li class="tab"><button type="button" data-href="#样例-2">群at</button></li><li class="tab"><button type="button" data-href="#样例-3">私聊</button></li><li class="tab"><button type="button" data-href="#样例-4">心跳包</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;post_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;message&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;group&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">1679735366</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;self_id&quot;</span><span class="punctuation">:</span> <span class="number">2165526145</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sub_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;normal&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_id&quot;</span><span class="punctuation">:</span> <span class="number">1388708604</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;anonymous&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;group_id&quot;</span><span class="punctuation">:</span> <span class="number">220164741</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_seq&quot;</span><span class="punctuation">:</span> <span class="number">3864</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;raw_message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好👋&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sender&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;card&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NX&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;owner&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unknown&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">976180942</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">976180942</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;font&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好👋&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;post_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;message&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;group&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">1679735446</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;self_id&quot;</span><span class="punctuation">:</span> <span class="number">2165526145</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sub_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;normal&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sender&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;card&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NX&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;owner&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unknown&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">976180942</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">976180942</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;anonymous&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;font&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;group_id&quot;</span><span class="punctuation">:</span> <span class="number">220164741</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[CQ:at,qq=2165526145] 你好&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;raw_message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[CQ:at,qq=2165526145] 你好&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_seq&quot;</span><span class="punctuation">:</span> <span class="number">3865</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_id&quot;</span><span class="punctuation">:</span> <span class="number">633418346</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-3"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;post_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;message&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">1679735201</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;self_id&quot;</span><span class="punctuation">:</span> <span class="number">2165526145</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sub_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friend&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;font&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sender&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NX&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unknown&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">976180942</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_id&quot;</span><span class="punctuation">:</span> <span class="number">-1953887271</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">976180942</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target_id&quot;</span><span class="punctuation">:</span> <span class="number">2165526145</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;raw_message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-4"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;post_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;meta_event&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;meta_event_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;heartbeat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">1679736263</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;self_id&quot;</span><span class="punctuation">:</span> <span class="number">2165526145</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;app_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;app_good&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;app_initialized&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;good&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;online&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;plugins_good&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stat&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;packet_received&quot;</span><span class="punctuation">:</span> <span class="number">113</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;packet_sent&quot;</span><span class="punctuation">:</span> <span class="number">105</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;packet_lost&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;message_received&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;message_sent&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;disconnect_times&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;lost_times&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;last_message_time&quot;</span><span class="punctuation">:</span> <span class="number">1679735446</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="number">5000</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="测试-ChatGPT">测试 ChatGPT</h3><p>因为我们是要接入 ChatGPT 的，所以我们应该在本地测试一下这东西该怎么调用</p><p>还是用和 demo 相同的<a href="https://github.com/sashabaranov/go-openai">第三方 SDK</a> 好了</p><p>我还根据文档加了个保存上下文的功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/sashabaranov/go-openai&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> messages []openai.ChatCompletionMessage</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">client := openai.NewClient(<span class="string">&quot;your key here&quot;</span>)</span><br><span class="line"><span class="comment">// 从键盘输入</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> question <span class="type">string</span></span><br><span class="line">fmt.Scanln(&amp;question)</span><br><span class="line">fmt.Println(ChatGPT(question, client))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ChatGPT</span><span class="params">(question <span class="type">string</span>, client *openai.Client)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"></span><br><span class="line">messages = <span class="built_in">append</span>(messages, openai.ChatCompletionMessage&#123;</span><br><span class="line">Role:    openai.ChatMessageRoleUser,</span><br><span class="line">Content: question,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">resp, err := client.CreateChatCompletion(</span><br><span class="line">context.Background(),</span><br><span class="line">openai.ChatCompletionRequest&#123;</span><br><span class="line">Model:    openai.GPT3Dot5Turbo,</span><br><span class="line">Messages: messages,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err.Error()</span><br><span class="line">&#125;</span><br><span class="line">content := resp.Choices[<span class="number">0</span>].Message.Content</span><br><span class="line">messages = <span class="built_in">append</span>(messages, openai.ChatCompletionMessage&#123;</span><br><span class="line">Role:    openai.ChatMessageRoleAssistant,</span><br><span class="line">Content: content,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> content</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跑起来感觉没什么问题</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304011224788.png" alt="image-20230401122457755"></p><h3 id="编写后端">编写后端</h3><p>现在来编写后端了，考虑到可扩展性还有方便我还是选择了 go-zero</p><p>首先来定义接口，我只需要这几个字段就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;v1&quot;</span><br><span class="line"></span><br><span class="line">service app &#123;</span><br><span class="line">@handler Message</span><br><span class="line">post / (MessageRequest) returns (MessageReply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type (</span><br><span class="line">MessageRequest &#123;</span><br><span class="line">PostType    string `json:&quot;post_type&quot;`</span><br><span class="line">MessageType string `json:&quot;message_type&quot;`</span><br><span class="line">Message     string `json:&quot;message&quot;`</span><br><span class="line">RawMessage  string `json:&quot;raw_message&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MessageReply &#123;</span><br><span class="line">Reply string `json:&quot;reply&quot;`</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后准备一下 gpt ，我本来是想做成有上下文的，但是这样聊不了几句就会超长度，还是改成没有上下文的先</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gpt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/sashabaranov/go-openai&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> messages []openai.ChatCompletionMessage</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Chat</span><span class="params">(question <span class="type">string</span>, client *openai.Client)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if question == &quot;新对话&quot; &#123;</span></span><br><span class="line"><span class="comment">//messages = nil</span></span><br><span class="line"><span class="comment">//return &quot;新对话已创建&quot;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//messages = append(messages, openai.ChatCompletionMessage&#123;</span></span><br><span class="line"><span class="comment">//Role:    openai.ChatMessageRoleUser,</span></span><br><span class="line"><span class="comment">//Content: question,</span></span><br><span class="line"><span class="comment">//&#125;)</span></span><br><span class="line"></span><br><span class="line">resp, err := client.CreateChatCompletion(</span><br><span class="line">context.Background(),</span><br><span class="line">openai.ChatCompletionRequest&#123;</span><br><span class="line">Model: openai.GPT3Dot5Turbo,</span><br><span class="line">Messages: []openai.ChatCompletionMessage&#123;</span><br><span class="line">&#123;</span><br><span class="line">Role:    openai.ChatMessageRoleUser,</span><br><span class="line">Content: question,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">messages = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span> err.Error()</span><br><span class="line">&#125;</span><br><span class="line">content := resp.Choices[<span class="number">0</span>].Message.Content</span><br><span class="line"><span class="comment">//messages = append(messages, openai.ChatCompletionMessage&#123;</span></span><br><span class="line"><span class="comment">//Role:    openai.ChatMessageRoleAssistant,</span></span><br><span class="line"><span class="comment">//Content: content,</span></span><br><span class="line"><span class="comment">//&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> content</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后来编写调用逻辑，暂时偷懒把 qq 号写死了，毕竟也就是先测试一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *MessageLogic)</span></span> Message(req *types.MessageRequest) (resp *types.MessageReply, err <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">trigger := <span class="string">&quot;[CQ:at,qq=2165526145] &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> req.PostType == <span class="string">&quot;message&quot;</span> &amp;&amp; req.MessageType == <span class="string">&quot;group&quot;</span> &amp;&amp; strings.HasPrefix(req.Message, trigger) &#123;</span><br><span class="line">l.Logger.Info(req)</span><br><span class="line">gptReply := gpt.Chat(strings.TrimPrefix(req.Message, trigger), l.svcCtx.GPTClient)</span><br><span class="line">l.Logger.Info(gptReply)</span><br><span class="line"><span class="keyword">return</span> &amp;types.MessageReply&#123;</span><br><span class="line">Reply: gptReply,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来就完成了，我本地测试起来是能正常工作的</p><h2 id="线上部署">线上部署</h2><p>下面就是把它部署到服务器上了，我本来是想用docker的，结果docker版本的死活启动不起来，最后麻了直接起两个screen运行二进制文件</p><p>但是登录的时候又遇到了问题，扫码之后腾讯居然不让我登录，据说是最近严格了还限制要同一网段（</p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304011417687.png" alt="F274063B-3370-4461-8BAD-67D0A5D85C7E" style="zoom: 25%;" /><p>我卡在这里有了一段时间，好在群友说可以把登录的产生的 token 和临时文件复制上去，然后就可以了</p><p>也就是同一目录下的 <code>session.token</code> 和 <code>data</code> 文件夹，就像这个视频里面的一样：<a href="https://www.bilibili.com/video/BV1Ux4y1F7cF">BV1Ux4y1F7cF</a></p><p>然后就可以开始你的奇思妙想了！</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202304011429976.png" alt="image-20230401142911920"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前看见过很多 qq 机器人的例子，比如把 ChatGPT 接进群里之类的，然后最近有点空闲，并且感觉宿舍群里也缺少一些自动化的建设，就打算上手做一个&lt;/p&gt;
&lt;p&gt;功能上的设计先别搞那么复杂，就先接个 ChatGPT 算了&lt;/p&gt;
&lt;p&gt;我就去问关于qq 机器人的最佳实践</summary>
      
    
    
    
    <category term="QQ Bot" scheme="https://www.nickxu.top/categories/QQ-Bot/"/>
    
    
    <category term="QQ bot" scheme="https://www.nickxu.top/tags/QQ-bot/"/>
    
  </entry>
  
  <entry>
    <title>告别ELK！轻量级日志收集系统Grafana Loki初上手</title>
    <link href="https://www.nickxu.top/2023/03/18/%E5%91%8A%E5%88%ABELK%EF%BC%81%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9FGrafana-Loki%E5%88%9D%E4%B8%8A%E6%89%8B/"/>
    <id>https://www.nickxu.top/2023/03/18/%E5%91%8A%E5%88%ABELK%EF%BC%81%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9FGrafana-Loki%E5%88%9D%E4%B8%8A%E6%89%8B/</id>
    <published>2023-03-18T13:10:56.000Z</published>
    <updated>2023-04-25T07:48:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于日志收集，鄙人最早接触到的是 ELK 那一套（Elasticsearch、Logstash 和 Kibana），最近我青训营的项目也是<a href="https://hdu-help.feishu.cn/docx/KuGidErAIogvWDxcn2VcTrfUntb#part-R15Qdxms9o7RoQxlNDlcqc1Innd">差不多的架构</a>，但是这一套下来资源占用也太可怕了（特别是 Elasticsearch ，太重了）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303192126852.png" alt="image-20230319212648673"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303192136627.png" alt="image-20230319213630597"></p><blockquote><p>go-zero 官方也说了，这一套不建议在小规模的服务上使用，而我一般的实际项目也没多大规模，根本用不上这么重的解决方案，所以我需要找一套更轻量的解决方案</p></blockquote><p><a href="https://www.v2ex.com/t/694094">翻了一圈</a>，感觉推荐 Grafana + Loki 的不少</p><p>然后我就跑去 <a href="https://grafana.com/docs/loki/latest/">Loki官方文档</a>了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303192203626.png" alt="image-20230319220344596"></p><blockquote><p>这是官方文档中的快速上手的架构图，为了让你感受它的可扩展性，就把内部的读写部分拆出来运行，其实不用这么复杂，直接一个单体也可以</p></blockquote><p>折腾了一圈，大概是这么个逻辑：首先是要有一个 Client（例如图中的 <strong>Promtail</strong> ）去拉取运行日志喂给 Loki ，然后 Loki 去读写 Storage（例如图中的 <strong>Minio</strong> ），那日志要怎么方便地查看呢？用 <strong>Grafana</strong> ，这东西界面做的真的很好看</p><p>为了让你快速理解与上手，我简化了一下官方 Demo，docker-compose 中只包含四个服务：</p><ul><li><p>产生日志的程序：和官方一样使用了 <a href="https://github.com/mingrammer/flog">flog</a> 来不停地向标准输出中放入假日志</p></li><li><p>Loki：用于打包日志、打标签等</p></li><li><p>Client：用于拉取日志交给 Loki，Loki 支持多种客户端，你可以在 <a href="https://grafana.com/docs/loki/latest/clients/#grafana-loki-clients">Grafana Loki clients</a> 中查看支持的所有客户端</p><p>我知道有一个 Docker Driver ，但是这东西要给 Docker 装插件，感觉有点麻烦，还是和官方例子一样使用了 Promtail</p></li><li><p>Storage：用于保存日志，你可以在 <a href="https://grafana.com/docs/loki/latest/storage/#storage">Storage</a> 中查看所有支持的存储介质，甚至存储为本地文件都行</p><p>这里和官方例子一样使用了兼容亚马逊 S3协议的 minio 作为存储介质</p></li><li><p>Grafana：用于提供一个好看的可视化界面</p></li></ul><p>先新建一个文件夹，进去创建三个文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- docker-compose.yaml</span><br><span class="line">|-- loki-config.yaml</span><br><span class="line">`-- promtail-config.yaml</span><br></pre></td></tr></table></figure><p><code>docker-compose.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/loki:2.7.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">loki</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3100</span><span class="string">:3100</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./loki-config.yaml:/etc/loki/local-config.yaml</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-config.file=/etc/loki/local-config.yaml</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">promtail:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/promtail:2.7.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">promtail</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./promtail-config.yaml:/etc/promtail/promtail-config.yaml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span> <span class="comment"># 直接把本机的docker套接字映射进去，这样就可以直接抓取所有容器的日志了</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-config.file=/etc/promtail/promtail-config.yaml</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_PATHS_PROVISIONING=/etc/grafana/provisioning</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_AUTH_ANONYMOUS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_AUTH_ANONYMOUS_ORG_ROLE=Admin</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-config</span> <span class="string">/etc/grafana/grafana.ini</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-euc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        mkdir -p /data/loki-data &amp;&amp; \</span></span><br><span class="line"><span class="string">        mkdir -p /data/loki-ruler &amp;&amp; \</span></span><br><span class="line"><span class="string">        minio server /data</span></span><br><span class="line"><span class="string"></span>    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ACCESS_KEY=loki</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_SECRET_KEY=supersecret</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_PROMETHEUS_AUTH_TYPE=public</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_UPDATE=off</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.data/minio:/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">flog:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mingrammer/flog</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">flog</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-f</span> <span class="string">json</span> <span class="string">-d</span> <span class="string">1s</span> <span class="string">-l</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>loki-config.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">auth_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">3100</span></span><br><span class="line"><span class="attr">memberlist:</span></span><br><span class="line">  <span class="attr">join_members:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">loki:7946</span></span><br><span class="line"><span class="attr">schema_config:</span></span><br><span class="line">  <span class="attr">configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">from:</span> <span class="number">2021-08-01</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">boltdb-shipper</span></span><br><span class="line">      <span class="attr">object_store:</span> <span class="string">s3</span></span><br><span class="line">      <span class="attr">schema:</span> <span class="string">v11</span></span><br><span class="line">      <span class="attr">index:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">index_</span></span><br><span class="line">        <span class="attr">period:</span> <span class="string">24h</span></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="attr">path_prefix:</span> <span class="string">/loki</span></span><br><span class="line">  <span class="attr">replication_factor:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">s3:</span></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">http://minio:9000</span></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">bucketnames:</span> <span class="string">loki-data</span></span><br><span class="line">      <span class="attr">access_key_id:</span> <span class="string">loki</span></span><br><span class="line">      <span class="attr">secret_access_key:</span> <span class="string">supersecret</span></span><br><span class="line">      <span class="attr">s3forcepathstyle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ring:</span></span><br><span class="line">    <span class="attr">kvstore:</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">memberlist</span></span><br><span class="line"><span class="attr">ruler:</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">s3:</span></span><br><span class="line">      <span class="attr">bucketnames:</span> <span class="string">loki-ruler</span></span><br></pre></td></tr></table></figure><p><code>promtail-config.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">9080</span></span><br><span class="line">  <span class="attr">grpc_listen_port:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">positions:</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">/tmp/positions.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">clients:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://loki:3100/loki/api/v1/push</span></span><br><span class="line">    <span class="attr">tenant_id:</span> <span class="string">tenant1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">flog_scrape</span> </span><br><span class="line">    <span class="attr">docker_sd_configs:</span> <span class="comment"># 对于promtail来说，又可以定义各种日志来源，请见 https://grafana.com/docs/loki/latest/clients/promtail/configuration/#scrape_configs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">unix:///var/run/docker.sock</span> <span class="comment"># 这里直接从docker套接字拿日志</span></span><br><span class="line">        <span class="attr">refresh_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">&#x27;__meta_docker_container_name&#x27;</span>] <span class="comment"># 根据容器名打标签分类</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">&#x27;/(.*)&#x27;</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">&#x27;container&#x27;</span> <span class="comment"># 标签名为 container</span></span><br></pre></td></tr></table></figure><p>准备好了之后，运行 docker-compose 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>然后来到 <a href="http://127.0.0.1:3000/">127.0.0.1:3000</a> 进入Grafana</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303192242367.png" alt="image-20230319224216330"></p><p>点击左下角添加数据源，选择 Loki</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303192243339.png" alt="image-20230319224322305"></p><p>URL填写为 <code>http://loki:3100</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303192244031.png" alt="image-20230319224436992"></p><p>再来到 Explore，选择要看的容器为 flog</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303192244370.png" alt="image-20230319224456334"></p><p>它居然会自动提示你添加 JSON 解析</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303192246491.png" alt="image-20230319224653449"></p><p>然后你就可以根据字段添加检索条件了，比方说状态码限定为 200</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303192247842.png" alt="image-20230319224734800"></p><p>我只能说简直不要太舒服了</p><p>接下来你就可以把这一套放在你的项目里面了，你可以监听某个容器，或者监听某个日志文件，又或者监听某个卡夫卡队列，都可以，随便你折腾了</p><p>（PS：你的容器不能启用 <code>tty</code>  <a href="https://github.com/grafana/loki/issues/5950#issuecomment-1223979118">https://github.com/grafana/loki/issues/5950#issuecomment-1223979118</a> ）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303201236992.png" alt="image-20230320123644774"></p><p>最后来看看资源占用，内存 200MB 左右，相对来说轻量了不少</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于日志收集，鄙人最早接触到的是 ELK 那一套（Elasticsearch、Logstash 和 Kibana），最近我青训营的项目也是&lt;a href=&quot;https://hdu-help.feishu.cn/docx/KuGidErAIogvWDxcn2VcTrfUntb</summary>
      
    
    
    
    <category term="运维" scheme="https://www.nickxu.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="日志收集" scheme="https://www.nickxu.top/categories/%E8%BF%90%E7%BB%B4/%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="运维" scheme="https://www.nickxu.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>亚运赛会志愿者通用培训</title>
    <link href="https://www.nickxu.top/2023/03/18/%E4%BA%9A%E8%BF%90%E8%B5%9B%E4%BC%9A%E5%BF%97%E6%84%BF%E8%80%85%E9%80%9A%E7%94%A8%E5%9F%B9%E8%AE%AD/"/>
    <id>https://www.nickxu.top/2023/03/18/%E4%BA%9A%E8%BF%90%E8%B5%9B%E4%BC%9A%E5%BF%97%E6%84%BF%E8%80%85%E9%80%9A%E7%94%A8%E5%9F%B9%E8%AE%AD/</id>
    <published>2023-03-18T03:06:57.000Z</published>
    <updated>2023-03-20T05:07:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303181107743.png" alt="26B3608C-8FD3-41BB-8D99-858BB38BA514"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303201307475.png" alt="image-20230320130701406"></p><hr><h1 id="杭州亚运会及赛会志愿服务概述">杭州亚运会及赛会志愿服务概述</h1><p>志愿者含义</p><ul><li>自愿</li><li>不谋物质报酬</li><li>服务于社会公益</li><li>奉献力所能及</li><li>非本职工作</li></ul><p>中国青年志愿者精神</p><ul><li>奉献</li><li>友爱</li><li>互助</li><li>进步</li></ul><p>志愿者基本行为规范</p><ul><li>三会<ol><li>会站</li><li>会笑（难）</li><li>会说</li></ol></li><li>三知<ol><li>知道自己的位置</li><li>知道别人问的位置</li><li>知道卫生间、医疗点、AED及安全出口</li></ol></li><li>三救<ol><li>自救（包括不要泄露联系方式给任何人</li><li>施救</li><li>向谁求助</li></ol></li><li>三受<ol><li>受苦</li><li>受累</li><li>受委屈</li></ol></li><li>五定<ol><li>定人</li><li>定岗</li><li>定时</li><li>定事</li><li>定责</li></ol></li></ul><p>熟记亚运会标志以及吉祥物（略</p><p>志愿者口号：来吧，朋友（friends unite！）</p><p>志愿者之歌：等你来</p><p>岗位服务能力要求</p><p>语言沟通能力</p><p>合作能力</p><p>应变能力</p><hr><h1 id="志愿服务通用礼仪">志愿服务通用礼仪</h1><h2 id="基本原则"><strong>基本原则</strong></h2><ul><li>平等</li><li>尊重</li><li>宽容</li><li>适度</li><li>自律</li></ul><h2 id="形象塑造"><strong>形象塑造</strong></h2><ul><li><p>头发 男：前不覆额 后不触领 侧不掩耳 女：前不遮眉 发不披散 过肩盘起</p></li><li><p>面部 五官</p></li><li><p>肢体</p></li><li><p>统一着装</p></li><li><p>着装整洁</p></li><li><p>配饰要求</p></li></ul><h2 id="礼仪规范"><strong>礼仪规范</strong></h2><ul><li>站 抬头挺胸</li><li>坐 二分之一 左进左出</li><li>走 成行成列</li><li>蹲 高低式 半跪式 交叉式</li></ul><p>三方介绍：尊者优先</p><p>引领：走路上下楼梯电梯出入口（略）</p><h2 id="文明用语"><strong>文明用语</strong></h2><p>不要说：不归我管 不知道不会</p><p>该说不的时候要说不</p><hr><h1 id="上岗要求及纪律规范">上岗要求及纪律规范</h1><h2 id="岗前准备">岗前准备</h2><ul><li><p>吃苦受累</p></li><li></li><li><p>岗位差异</p></li><li><p>遭受委屈</p></li><li><p>熟悉工作内容及周边环境</p></li><li><p>赛事安排及有关信息（赛事、城市）</p></li><li><p>突发事件应对处理</p></li><li><p>专业技能准备</p></li><li><p>说话做事符合礼仪要求</p></li><li><p>做好体能准备</p></li></ul><h2 id="基本要求">基本要求</h2><h3 id="业务操作能力">业务操作能力</h3><ul><li>遵守防疫要求</li><li>坚守工作岗位</li><li>认真履行职责（尽职尽责、通讯畅通、首问负责对口接待</li><li>转换期适应调整</li><li>团队意识</li><li>汇报总结</li></ul><h3 id="礼仪应用能力">礼仪应用能力</h3><ul><li>统一着装</li><li>基本原则：平等适度承诺惯例</li><li>礼仪规范（略</li></ul><h3 id="沟通力">沟通力</h3><p>略</p><h3 id="创造力">创造力</h3><h3 id="感知力">感知力</h3><h3 id="变通力">变通力</h3><h2 id="重要制度">重要制度</h2><ul><li><p>考勤制度</p></li><li><p>请假制度</p></li><li><p>会议制度</p></li><li><p>宣传制度</p></li><li><p>舆情报送制度</p></li><li><p>激励制度</p></li><li><p>督查制度</p></li></ul><h2 id="15不纪律要求">15不纪律要求</h2><ol><li>危害国家安全和利益</li><li>泄漏工作秘密</li><li>泄露隐私</li><li>违法着装和形象纪律</li><li>迟到早退</li><li>出借服装证件</li><li>宗教活动</li><li>接触看惯他人钱物</li><li>小费、商业行为</li><li>利用工作之便获取个人利益</li><li>擅自散播信息</li><li>擅自接受媒体采访</li><li>违法岗位安排</li><li>超出区域</li><li>违反防疫要求</li></ol><h2 id="纪律要求">纪律要求</h2><p>略</p><h2 id="违规处理办法">违规处理办法</h2><p>略</p><hr><h1 id="亚运助残志愿服务知识与技能">亚运助残志愿服务知识与技能</h1><h2 id="杭州亚残运会概况">杭州亚残运会概况</h2><p>略</p><h2 id="助残志愿服务须知">助残志愿服务须知</h2><p>残障人士的共性心理特点</p><ul><li>孤独</li><li>自卑</li><li>敏感猜疑</li><li>情绪强且不稳定</li><li>抱怨心理突出</li><li>富有同情心</li></ul><p>基本原则</p><ul><li>平等尊重</li><li>热情勤快</li><li>帮助适当</li></ul><p>服务理念</p><ol><li>理解需求</li><li>尊重个性</li><li>注重细节</li></ol><p>注意事项</p><ul><li>用词禁忌</li><li>眼神禁忌</li><li>四不：不看残障部位、不问原因、不碰辅助用具、不议论惊讶好奇</li></ul><h2 id="助残志愿服务基本技能">助残志愿服务基本技能</h2><h3 id="视力障碍者">视力障碍者</h3><p>视力障碍者的心理特点</p><ul><li>心理特殊</li><li>听觉突出</li><li>封闭自我</li></ul><p>基本礼仪</p><ol><li><p>交谈前：1-2米，有声音提示、语音平和</p><p>离开时：告知对方</p></li><li><p>初次相识：尽量多地告知自己的信息</p></li><li><p>指挥方位：以对方左右为方位</p></li><li><p>让其跟着走，不要拽着走，做他的眼睛不要做他的手</p></li><li><p>切忌窃窃私语或互相用手势交流</p></li><li><p>用餐：公筷夹到盘中、报菜名</p></li><li><p>不要过度代劳</p></li><li><p>不要领到河沟边、井盖边和车流量大等地方，要帮助回避障碍物</p></li><li><p>不要改变使用物品等摆放位置</p></li></ol><p>技巧</p><p><s>自己看视频（bushi</s></p><h3 id="肢体残障者">肢体残障者</h3><p>心理特点</p><ul><li>有独立性又有依赖性</li><li>不喜欢他人过多责备感染或控制</li><li>不得不依靠他人帮助来解决力不从心的实际问题</li></ul><p>基本礼仪</p><ol><li>不得过多关注残障部位</li><li>与轮椅者交谈：蹲姿</li><li>熟悉轮椅和无障碍环境</li></ol><p>对轮椅使用者：</p><ul><li>腿部和腰发力</li><li>不要急停急起</li><li>电梯要倒着进正着出</li></ul><p><s>又一个视频</s></p><h3 id="心智障碍者">心智障碍者</h3><ol><li>情感行为障碍</li><li>交流意愿、对他人的关系程度低</li><li>语言障碍</li></ol><p>基本礼仪（略</p><p>技巧</p><ul><li>速度要慢</li><li>…</li></ul><h3 id="听力残障者">听力残障者</h3><p>基本礼仪</p><ol><li>微笑用手语问好</li><li>注意手语准确性和表情配合</li></ol><p>技巧</p><ol><li>随身携带纸笔</li></ol><p><s>又一个视频</s></p><h2 id="比赛中的特殊帮助">比赛中的特殊帮助</h2><p>略</p><h2 id="无障碍环境与无障碍设施类别">无障碍环境与无障碍设施类别</h2><p>又一个视频</p><p>无障碍环境概念</p><ul><li>物质环境无障碍</li><li>信息获取无障碍</li></ul><h2 id="亚运会观众引导志愿者须知">亚运会观众引导志愿者须知</h2><p>略</p><hr><h1 id="大型赛会志愿者服务应急事件应对与自我保护">大型赛会志愿者服务应急事件应对与自我保护</h1><h2 id="事件分类及应对原则">事件分类及应对原则</h2><p>分类</p><ul><li>A级：火灾踩踏。组委会处理</li><li>B级：负面舆论、志愿者无法按时用餐等。场馆负责人或主任负责</li><li>C级：志愿者受伤。带队老师处理</li></ul><p>应对原则</p><ul><li><strong>确保安全</strong></li><li><strong>迅速上报</strong></li><li>合理应对</li><li>积极转化</li><li>预防监督</li></ul><h2 id="自我保护">自我保护</h2><p>不适宜志愿者的工作</p><ul><li>志愿者应扮演协助角色</li><li>不承担重大管理责任、安全责任财务责任、重体力劳动、需要专门劳动技能或劳动保护等工作</li></ul><p>主要内容</p><ul><li>防疫</li><li>环境和设施</li><li>交往</li><li>财务</li></ul><h3 id="防疫">防疫</h3><p>略</p><h3 id="环境和设施">环境和设施</h3><ul><li>保证人身周边环境安全</li><li>熟记安全出口消防栓等位置</li></ul><h3 id="交往安全">交往安全</h3><ul><li>不得单独进入服务对象的卧室或更衣室</li><li>尽量不要单独相处</li><li>不得超出服务范围服务</li></ul><h3 id="财务安全">财务安全</h3><ul><li><p>现场服务期间尽量少带东西，容易混淆的物品应做好个人标识</p></li><li><p>上下车东西带齐</p></li></ul><h2 id="常见应急事件处理">常见应急事件处理</h2><h3 id="工作环境产生的问题">工作环境产生的问题</h3><ul><li>天气恶劣</li><li>服务环境差</li><li>电梯故障</li></ul><h3 id="自身遇到的问题">自身遇到的问题</h3><ul><li>身体不适</li><li>意外伤害</li><li>家庭变故</li></ul><p>任何异常及时汇报</p><h3 id="服务对象产生的问题">服务对象产生的问题</h3><ul><li>不听从指挥及骚扰志愿者：耐心劝说、确保自身安全、向业务领域工作人员求助</li><li>服务对象拿出不当宣传资料：确保自身安全的情况下，可迅速收取，别理论</li><li>服务对象受伤：及时协助联系上报，情况危急且有一定能力可以协助处置</li><li>志愿者与服务对象发生冲突：不得发生语言和肢体冲突，把自己人带离服务区域，不要拍视频</li></ul><h3 id="后勤保障产生的问题">后勤保障产生的问题</h3><ul><li>车辆无法达到</li><li>用餐无法按时保证</li></ul><p>找老师就是了</p><h2 id="重大安全事件">重大安全事件</h2><p>A级事件</p><ul><li>交通事故</li><li>触电事故</li><li>火灾事故</li><li>建筑坍塌</li><li>社会安全事件</li></ul><hr><h1 id="急救知识与技能">急救知识与技能</h1><h2 id="心肺复苏术（CPR）">心肺复苏术（CPR）</h2><h3 id="识别心脏骤停">识别心脏骤停</h3><ul><li>无反应意识</li><li>无呼吸或仅有喘息样呼吸</li><li>无脉搏（由专业人员检查）</li></ul><h3 id="工作流程">工作流程</h3><p>观察环境-判断意识-反转体位-判断呼吸-呼救求援-胸外按压（C）-打开气道（A）-人工呼吸（B）-尽早AED除颤</p><p>由于气道梗阻顺序是ABC（溺水、婴儿、严重气道梗阻）</p><ol><li><p>观察环境</p></li><li><p>意识判断</p><p>轻拍重喊，拍肩膀，两侧耳朵喊</p><p>婴儿用手指轻弹足底</p></li><li><p>反转体位：一手保护头颈，另一只手插入对侧腋下，缓慢翻转成仰卧位</p></li><li><p>判断呼吸</p><p>在头部上方“听、看、感觉”约10秒（默念1001，1002，1003…</p></li><li><p>呼救求援</p><ul><li>指定专人做事</li></ul></li><li><p>胸外按压（C）</p><p>手法：一手掌根紧贴胸壁，双手食指相扣，掌根重叠，掌心翘起</p><p>成人（8岁以上）按压要领：</p><ul><li>位置：胸部正中，两乳头连线水平，即胸骨的下半部</li><li>深度：5-6cm</li><li>频率：100-120次/分钟</li><li>每次按压后放松使胸廓恢复到按压位置</li><li>计数（01，02，03…</li></ul></li><li><p>打开气道（A）</p><p>清理口腔异物、仰头举颌</p></li><li><p>人工呼吸（B）</p><ul><li>平静呼吸</li><li>避免过度通气</li><li>吹气时间约1秒，连续吹气2次</li><li>吹气同时看胸廓，确保通气时胸廓隆起</li><li>胸外按压与人工呼吸比例：30:2</li></ul></li></ol><ul><li>停止心肺复苏：活了/医务人员来了</li></ul><h2 id="自动体外除颤仪（AED）">自动体外除颤仪（AED）</h2><ul><li>电极片与皮肤紧贴</li><li>听从语言提示</li></ul><h2 id="鼻出血的现场处理">鼻出血的现场处理</h2><p>低头，用拇指食指紧捏鼻翼5-10分钟</p><p>严重的去医院</p><h2 id="扭伤的现场处理">扭伤的现场处理</h2><p>RICE原则</p><ul><li>R：休息</li><li>I：固定</li><li>C：冷敷</li><li>E：太高伤肢</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303181107743.png&quot; alt=&quot;26B3608C-8FD3-41BB-8D99-858BB38BA514&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img sr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>离散数学2期末复习</title>
    <link href="https://www.nickxu.top/2023/03/16/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A62%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>https://www.nickxu.top/2023/03/16/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A62%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</id>
    <published>2023-03-16T01:39:37.000Z</published>
    <updated>2023-03-16T01:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数">函数</h1><h2 id="u-函数及其性质的判断、函数值、像、原像等的计算-u"><u>函数及其性质的判断、函数值、像、原像等的计算</u></h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939444.png" alt="image-20230313165348791"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939574.png" alt="image-20230313165415391"></p><ul><li><p>满射：subjective</p></li><li><p>单射：ingective</p></li><li><p>双射：bijective</p></li><li><p>像是函数值的集合</p></li></ul><h2 id="u-函数的复合及反函数-u"><u>函数的复合及反函数</u></h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939649.png" alt="image-20230313165621655"></p><p>顺序不要反了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939746.png" alt="image-20230313165635438"></p><h2 id="集合基数的概念">集合基数的概念</h2><p>略</p><h1 id="图">图</h1><ul><li>阶：顶点数</li><li>度：顶点作为端点的次数</li><li>零图：一条边都没有的图</li><li>平凡图：只有一个点的图</li></ul><h2 id="握手定理">握手定理</h2><ul><li>度数之和等于边数的两倍 $ l = 2m$</li><li>入度之和=出度之和=边数</li><li>奇度顶点的个数是偶数</li></ul><h2 id="可图化条件">可图化条件</h2><ol><li>度数之和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span> 为偶数</li><li>最大度小于等于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> （你一个点最多也就把其他点连一遍）</li></ol><h2 id="无向完全图">无向完全图</h2><ul><li>每个点都与剩余点连接，记作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">K_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> （ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 为阶数）</li><li>边点条数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>n</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{n\left( n-1\right) }{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><h2 id="图的连通性">图的连通性</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939837.png" alt="image-20230315201908204"></p><h2 id="图的矩阵表示">图的矩阵表示</h2><h3 id="关联矩阵">关联矩阵</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939962.png" alt="image-20230315202212716"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939046.png" alt="image-20230315202315433"></p><h3 id="邻接矩阵">邻接矩阵</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939134.png" alt="image-20230315202425046"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939205.png" alt="image-20230315202734790"></p><h3 id="可达矩阵">可达矩阵</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939292.png" alt="image-20230315202839939"></p><h2 id="Dj">Dj</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939350.png" alt="image-20230315220820080"></p><h1 id="树">树</h1><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">m=n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939495.png" alt="image-20230315221032295"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939664.png" alt="image-20230315222128741"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939808.png" alt="image-20230315222542989"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939861.png" alt="image-20230315222835667"></p><ul><li>中序：左中右</li><li>前序：中左右</li><li>后续：左右中</li></ul><h1 id="几种特殊的图">几种特殊的图</h1><h2 id="欧拉图">欧拉图</h2><p>通过所有边一次</p><ul><li>无向图充要：连通无奇度</li><li>有向图充要：强连通、每个点入度等于出度</li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939948.png" alt="image-20230315203012419"></p><h2 id="哈密顿图">哈密顿图</h2><p>通过所有点一次</p><p>注意是充分条件不是充要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mrow><mo fence="true">(</mo><mi>u</mi><mo fence="true">)</mo></mrow><mo>+</mo><mi>d</mi><mrow><mo fence="true">(</mo><mi>v</mi><mo fence="true">)</mo></mrow><mo>≥</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">d\left( u\right) +d\left( v\right) \geq n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">u</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939020.png" alt="image-20230315203547959"></p><h2 id="二部图与平面图">二部图与平面图</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939207.png" alt="image-20230315223131877"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939404.png" alt="image-20230315223346420"></p><ul><li>欧拉公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mi>m</mi><mo>+</mo><mi>r</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n-m+r=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span></li><li>面数之和等于边数两倍</li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939762.png" alt="image-20230315223635830"></p><ul><li>平面图的必要：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>≤</mo><mn>3</mn><mi>n</mi><mo>−</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">m\leq 3n-6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span></li></ul><h1 id="基本的组合计数公式">基本的组合计数公式</h1><ol><li><p>排列公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>A</mi><mi>n</mi><mi>k</mi></msubsup><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">A_n^k=\frac{n!}{(n-k)!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0961em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4001em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)!</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mclose mtight">!</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，表示从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个不同的元素中选出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 个元素进行排列的方案数。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 开始往后递减相乘 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 个数</p></li><li><p>组合公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>k</mi></msubsup><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><mrow><mi>k</mi><mo stretchy="false">!</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">C_n^k=\frac{n!}{k!(n-k)!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0961em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.453em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4001em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">!</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)!</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mclose mtight">!</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，表示从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个不同的元素中选出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 个元素进行组合的方案数。</p></li><li><p>重复排列公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">n^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>，表示从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个不同的元素中选出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 个元素进行重复排列的方案数。</p></li><li><p>重复组合公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mi>k</mi><mo>−</mo><mn>1</mn></mrow><mi>k</mi></msubsup></mrow><annotation encoding="application/x-tex">C_{n+k-1}^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1905em;vertical-align:-0.3414em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.4169em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3414em;"><span></span></span></span></span></span></span></span></span></span>，表示从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个不同的元素中选出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 个元素进行重复组合的方案数。</p></li></ol><ul><li>二项式定理 $$(x+y)^n=\sum_{k=0}^n {n\choose k}x^ky^{n-k}$$</li></ul><h1 id="递推方程、生成函数及应用">递推方程、生成函数及应用</h1><h2 id="递推方程">递推方程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939810.jpg" alt="image-20230316090850449"></p><p>具体来说，假设方程的一般形式为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>b</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>c</mi><mi>x</mi><mo>+</mo><mi>d</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">ax^3+bx^2+cx+d=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">b</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，其导数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>3</mn><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">f&#x27;(x)=3ax^2+2bx+c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">b</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>。如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f&#x27;(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 的根与原方程的一个根相同，则说明这个根是重根。</p><p>更具体地，可以使用以下的判断方法：</p><ol><li>求出方程的三个根 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">x_1,x_2,x_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li><li>求出方程的导数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f&#x27;(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>。</li><li>求出导数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f&#x27;(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 的两个根 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">y_1,y_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li><li>判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">y_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是否等于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">x_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，或者判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">y_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是否等于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">x_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。如果有任意一个条件成立，则说明方程有重根。</li></ol><p>需要注意的是，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f&#x27;(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 的两个根都与方程的某个根相同，则这个根是二重根；如果有三个根都相同，则这个根是三重根。</p><h2 id="生成函数">生成函数</h2><p>直接放弃</p><h1 id="代数系统">代数系统</h1><ul><li>交换 Commutative</li><li>结合 Assciative</li><li>幂等 Idempotent</li><li>幺元 Identity</li><li>零元 Zero element</li><li>逆元 Inverse element</li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939900.png" alt="image-20230315174627203"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939047.png" alt="image-20230315173528440"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939230.png" alt="image-20230315174640779"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939376.png" alt="image-20230315174702778"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303160939483.png" alt="image-20230315173735395"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;函数&quot;&gt;函数&lt;/h1&gt;
&lt;h2 id=&quot;u-函数及其性质的判断、函数值、像、原像等的计算-u&quot;&gt;&lt;u&gt;函数及其性质的判断、函数值、像、原像等的计算&lt;/u&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://pic-go-img.oss-cn-hangzhou.a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>大二下宿舍上海一日游游记</title>
    <link href="https://www.nickxu.top/2023/03/13/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AE%BF%E8%88%8D%E4%B8%8A%E6%B5%B7%E4%B8%80%E6%97%A5%E6%B8%B8%E6%B8%B8%E8%AE%B0/"/>
    <id>https://www.nickxu.top/2023/03/13/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AE%BF%E8%88%8D%E4%B8%8A%E6%B5%B7%E4%B8%80%E6%97%A5%E6%B8%B8%E6%B8%B8%E8%AE%B0/</id>
    <published>2023-03-13T08:26:09.000Z</published>
    <updated>2023-03-24T03:09:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇因为时间拖太久了没写，就感觉没有当时的感觉了</p><p>现在只能说把朋友圈 copy 一下了，本来想详细讲讲的（</p><blockquote><p>讲真周末去长三角周边城市不比在下沙玩舒服？早上花一个小时坐高铁到上海虹桥，然后沿着10号线一路玩<br>上午到中共一大纪念馆，中午吃个饭，继续坐地铁到豫园，顺便还有城隍庙可以逛一下，接着去南京步行街一路逛吃，晚上逛到外滩正好看夜景，最后原路返回坐高铁回杭州，懂不懂国际性大都市的含金量哇🤣</p></blockquote><div class="fj-gallery"><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303241108463.png" alt="image-20230324110835972"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303241108172.png" alt="image-20230324110847152"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303241108898.png" alt="image-20230324110851874"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303241108429.png" alt="image-20230324110857406"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303241109812.png" alt="image-20230324110915794"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303241109336.png" alt="image-20230324110925318"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303241109416.png" alt="image-20230324110933398"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303241109513.png" alt="image-20230324110944495"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202303241109287.png" alt="image-20230324110953266"></p>          </div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇因为时间拖太久了没写，就感觉没有当时的感觉了&lt;/p&gt;
&lt;p&gt;现在只能说把朋友圈 copy 一下了，本来想详细讲讲的（&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;讲真周末去长三角周边城市不比在下沙玩舒服？早上花一个小时坐高铁到上海虹桥，然后沿着10号线一路玩&lt;br&gt;
上午到</summary>
      
    
    
    
    <category term="随笔与总结" scheme="https://www.nickxu.top/categories/%E9%9A%8F%E7%AC%94%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="旅游" scheme="https://www.nickxu.top/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
</feed>

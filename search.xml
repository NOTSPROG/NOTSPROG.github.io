<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Golang 语法速通指南（十）函数</title>
      <link href="/2022/12/02/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E5%8D%81%EF%BC%89%E5%87%BD%E6%95%B0/"/>
      <url>/2022/12/02/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E5%8D%81%EF%BC%89%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（九）复合数据结构之JSON</title>
      <link href="/2022/11/12/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%B9%9D%EF%BC%89%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BJSON/"/>
      <url>/2022/11/12/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%B9%9D%EF%BC%89%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BJSON/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Go』记录一种处理大文件上传的可行方案：tus 协议</title>
      <link href="/2022/11/11/%E3%80%8EGo%E3%80%8F%E5%88%86%E4%BA%AB%E4%B8%80%E7%A7%8D%E5%A4%84%E7%90%86%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%8F%AF%E8%A1%8C%E6%96%B9%E6%A1%88/"/>
      <url>/2022/11/11/%E3%80%8EGo%E3%80%8F%E5%88%86%E4%BA%AB%E4%B8%80%E7%A7%8D%E5%A4%84%E7%90%86%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%8F%AF%E8%A1%8C%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>由于项目业务需要，我需要处理一些大文件的上传（比如说几百MB的视频）</p><p>然后在网上搜了一通之后是，发现都是一些零散的实现</p><p>但是我感觉这种东西一定是有人造过轮子的，于是我就到 GitHub 上搜索相关的包</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202211112154678.png" alt="image-20221111215420536"></p><p>然后就发现了 <code>tus</code> 这个项目</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202211112156068.png" alt="image-20221111215604945"></p><p>打开官网，我发现这是一个基于 HTTP 的开源协议（有 <a href="https://tus.io/demo.html">在线 Demo</a> ，感觉挺不错的），还有官方的 Go 实现 <code>tusd</code> ，简直不要太爽</p><p>来看在 Go 项目中如何使用 tusd 包</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/tus/tusd/pkg/filestore&quot;</span></span><br><span class="line">tusd <span class="string">&quot;github.com/tus/tusd/pkg/handler&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Create a new FileStore instance which is responsible for</span></span><br><span class="line"><span class="comment">// storing the uploaded file on disk in the specified directory.</span></span><br><span class="line"><span class="comment">// This path _must_ exist before tusd will store uploads in it.</span></span><br><span class="line"><span class="comment">// If you want to save them on a different medium, for example</span></span><br><span class="line"><span class="comment">// a remote FTP server, you can implement your own storage backend</span></span><br><span class="line"><span class="comment">// by implementing the tusd.DataStore interface.</span></span><br><span class="line">store := filestore.FileStore&#123;</span><br><span class="line">Path: <span class="string">&quot;./uploads&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A storage backend for tusd may consist of multiple different parts which</span></span><br><span class="line"><span class="comment">// handle upload creation, locking, termination and so on. The composer is a</span></span><br><span class="line"><span class="comment">// place where all those separated pieces are joined together. In this example</span></span><br><span class="line"><span class="comment">// we only use the file store but you may plug in multiple.</span></span><br><span class="line">composer := tusd.NewStoreComposer()</span><br><span class="line">store.UseIn(composer)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new HTTP handler for the tusd server by providing a configuration.</span></span><br><span class="line"><span class="comment">// The StoreComposer property must be set to allow the handler to function.</span></span><br><span class="line">handler, err := tusd.NewHandler(tusd.Config&#123;</span><br><span class="line">BasePath:              <span class="string">&quot;/files/&quot;</span>,</span><br><span class="line">StoreComposer:         composer,</span><br><span class="line">NotifyCompleteUploads: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">&quot;Unable to create handler: %s&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start another goroutine for receiving events from the handler whenever</span></span><br><span class="line"><span class="comment">// an upload is completed. The event will contains details about the upload</span></span><br><span class="line"><span class="comment">// itself and the relevant HTTP request.</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">event := &lt;-handler.CompleteUploads</span><br><span class="line">fmt.Printf(<span class="string">&quot;Upload %s finished\n&quot;</span>, event.Upload.ID)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Right now, nothing has happened since we need to start the HTTP server on</span></span><br><span class="line"><span class="comment">// our own. In the end, tusd will start listening on and accept request at</span></span><br><span class="line"><span class="comment">// http://localhost:8080/files</span></span><br><span class="line">http.Handle(<span class="string">&quot;/files/&quot;</span>, http.StripPrefix(<span class="string">&quot;/files/&quot;</span>, handler))</span><br><span class="line">err = http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">&quot;Unable to listen: %s&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉也不复杂，但是在我把这个后端准备好之后，找不到一个前端实现</p><p>然后谷歌了一下，找到了一个：<a href="http://fpcloud.ricorean.net/plugin/tus-js-client-master/demo/">http://fpcloud.ricorean.net/plugin/tus-js-client-master/demo/</a></p><p>下面是效果演示</p><div class="video"><video controls preload><source src='https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202211120053540.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><p>并且这东西支持断点续传，可随意暂停，刷新网页后可同步进度接着上传</p><p>但是官方貌似更倾向于把它作为一个独立的服务，而不是嵌入在项目中，然后使用钩子与项目沟通</p><p>而且我也无法将 tusd 嵌入在 go-zero 中，因为 go-zero 已经预设好每个路由的方法了，而 tusd 是同时在一个路由使用多种方法的</p><p>另外一个不足之处就是我遇到了无法上传的问题，而在访客模式中可以正常工作，最后我发现这种情况需要清一下浏览器的缓存</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202211121032497.png" alt="image-20221112103155367"></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新人如何参加面试系统后端讲解留档</title>
      <link href="/2022/11/09/%E6%96%B0%E4%BA%BA%E5%A6%82%E4%BD%95%E5%8F%82%E5%8A%A0%E9%9D%A2%E8%AF%95%E7%B3%BB%E7%BB%9F%E5%90%8E%E7%AB%AF%E8%AE%B2%E8%A7%A3%E7%95%99%E6%A1%A3/"/>
      <url>/2022/11/09/%E6%96%B0%E4%BA%BA%E5%A6%82%E4%BD%95%E5%8F%82%E5%8A%A0%E9%9D%A2%E8%AF%95%E7%B3%BB%E7%BB%9F%E5%90%8E%E7%AB%AF%E8%AE%B2%E8%A7%A3%E7%95%99%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>前几天讲的，BB了一个小时</p><p><a href="https://hdu-help.feishu.cn/docx/NVHqdjh00o53KIxzv9ict5AxnVh">https://hdu-help.feishu.cn/docx/NVHqdjh00o53KIxzv9ict5AxnVh</a></p><p><s>如有不好的地方请大力敲打我</s></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（八）复合数据结构之结构体</title>
      <link href="/2022/11/08/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E5%85%AB%EF%BC%89%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2022/11/08/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E5%85%AB%EF%BC%89%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1 id="创建结构体">创建结构体</h1><h2 id="var">var</h2><p>Golang 中的结构体和 C++ 中的差别不大，下面是一个例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID        <span class="type">int</span></span><br><span class="line">    Name      <span class="type">string</span></span><br><span class="line">    Address   <span class="type">string</span></span><br><span class="line">    DoB       time.Time</span><br><span class="line">    Position  <span class="type">string</span></span><br><span class="line">    Salary    <span class="type">int</span></span><br><span class="line">    ManagerID <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dilbert Employee</span><br></pre></td></tr></table></figure><p>一个最显著的区别就是在 C/C++ 中，访问指针成员必须用 <code>-&gt;</code> ，但是 Go 中可以像访问普通变量一样使用点操作符 <code>.</code></p><p>而且在使用结构体指针的时候，不必使用 <code>(*p).x</code> ，直接使用 <code>p.x</code> 即可，Go 会帮你处理的</p><p>而且如果你想在函数中修改结构体的话，必须传入指针</p><p>使用大写表示可导出也可以算是一个 Go 特色</p><p>扯远了，来看下一个创建方式</p><h2 id="字面值">字面值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span>&#123; X, Y <span class="type">int</span> &#125;</span><br><span class="line"></span><br><span class="line">p := Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>这是只按顺序给出值的写法，不常用，只在简单或成员排练比较规则的时候才可能用</p><p>下面的方式才是最常用的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span>&#123; X, Y <span class="type">int</span> &#125;</span><br><span class="line">   </span><br><span class="line">p := Point&#123;</span><br><span class="line">   X: <span class="number">1</span>,</span><br><span class="line">   Y: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为结构体通常通过指针处理，可以用下面的写法来创建并初始化一个结构体变量，并返回结构体的地址</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pp := &amp;Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>它和下面的语句是等价的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pp := <span class="built_in">new</span>(Point)</span><br><span class="line">*pp = Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>不过 <code>&amp;Point&#123;1, 2&#125;</code> 写法可以直接在表达式中使用，比如一个函数调用</p><h1 id="比较结构体">比较结构体</h1><p>如果结构体中所有的成员都是可以比较的，那么它就可以使用 <code>==</code>  或是 <code>!=</code> 来比较</p><p>凭借这一点，你可以构造可比较的结构体来作为 map 的键</p><h1 id="匿名结构体">匿名结构体</h1>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（七）复合数据结构之 Map</title>
      <link href="/2022/11/07/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%83%EF%BC%89%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B-Map/"/>
      <url>/2022/11/07/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%83%EF%BC%89%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B-Map/</url>
      
        <content type="html"><![CDATA[<p>用过 C++ 的 STL 的人肯定见过 Map，或者说这东西相当于 Python 中的字典</p><p>简单地说，就是用来存储键值对的结构，键（key）必须是可比较类型，而值（value）可以是任意类型</p><h1 id="创建-Map">创建 Map</h1><h2 id="var">var</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br></pre></td></tr></table></figure><h2 id="使用-make">使用 <code>make</code></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br></pre></td></tr></table></figure><h2 id="使用字面值">使用字面值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>当然你可以指定内容为空</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>通过使用空接口，你可以在同一个 map 中存储不同类型的 value（就像 Python 中的字典一样）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然现在空接口有一个语法糖 <code>any</code> ，不够我还是习惯旧的写法</p><h1 id="添加元素">添加元素</h1><p>直接使用索引添加</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ages[<span class="string">&quot;alice&quot;</span>] = <span class="number">31</span></span><br><span class="line">ages[<span class="string">&quot;charlie&quot;</span>] = <span class="number">34</span></span><br></pre></td></tr></table></figure><h1 id="访问-Map">访问 Map</h1><p>直接使用索引访问</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(ages[<span class="string">&quot;alice&quot;</span>]) <span class="comment">// &quot;32&quot;</span></span><br></pre></td></tr></table></figure><p>如果你尝试访问一个不存在的键，会返回零值</p><p>如果你愿意接收两个返回值，那么会返回结果和是否存在的 bool</p><p>所以你会经常看见这样的写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age, ok := ages[<span class="string">&quot;bob&quot;</span>]; !ok &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>另外一种是使用 <code>for k,v:= range m</code> 来迭代，分别取出其中的 key 和 value</p><p>但是需要注意的是，迭代出来的顺序是乱的</p><p>当然你可以只接收一部分，例如  <code>for _,v:= range m</code></p><h1 id="修改元素">修改元素</h1><ul><li><p>直接拿出来修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ages[<span class="string">&quot;bob&quot;</span>] = ages[<span class="string">&quot;bob&quot;</span>] + <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>如果你的值是个结构体等复杂结构，你不能修改结构体中的内部值，只能构造一个新的结构体然后重新给map赋值</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202211071012639.png" alt="image-20221107101157461"></p></li><li><p>和切片一样，使用 <code>for k,v:= range m</code> 时，修改 <code>v</code> 是没有用的，你必须使用 <code>m[k]</code> 来修改</p></li></ul><h1 id="删除元素">删除元素</h1><p>使用内置的 <code>delete</code> 函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">delete</span>(ages, <span class="string">&quot;alice&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="开发常见问题">开发常见问题</h1><h2 id="比较两个-Map">比较两个 Map</h2><p>和切片一样，Map 直接不能直接使用 <code>==</code> 来比较，除了和 <code>nil</code> 来比较</p><p>你只能手动遍历来比较</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">equal</span><span class="params">(x, y <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="built_in">len</span>(y) &#123;  <span class="comment">// map 也是可以使用 len() 的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> k, xv := <span class="keyword">range</span> x &#123;</span><br><span class="line">        <span class="keyword">if</span> yv, ok := y[k]; !ok || yv != xv &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-中有没有-Set？">Golang 中有没有 Set？</h2><p>没有，你可以使用值为 bool 的 map 来模拟 set</p><h2 id="一个小技巧">一个小技巧</h2><p>map 的 key 必须是可以比较的，所以你不能直接创建一个 key 是切片的 map</p><p>但是你可以通过一个辅助函数将其转换成可比较的类型，再封装一层</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">k</span><span class="params">(list []<span class="type">string</span>)</span></span> <span class="type">string</span> &#123; <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%q&quot;</span>, list) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(list []<span class="type">string</span>)</span></span>       &#123; m[k(list)]++ &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Count</span><span class="params">(list []<span class="type">string</span>)</span></span> <span class="type">int</span> &#123; <span class="keyword">return</span> m[k(list)] &#125;</span><br></pre></td></tr></table></figure><p>使用同样的技术可以处理任何不可比较的 key 类型，而不仅仅是 slice 类型</p><p>这种技术对于想使用自定义 key 比较函数的时候也很有用，例如在比较字符串的时候忽略大小写</p><h2 id="有没有清空的方法？">有没有清空的方法？</h2><p>暂时无，请使用 range 然后一个一个删除</p><p>详情见 <a href="https://zhuanlan.zhihu.com/p/578152380?utm_campaign=&amp;utm_medium=social&amp;utm_oi=723090816163123200&amp;utm_psn=1569387164936335361&amp;utm_source=qq">Go 大佬良心发现，愿意给 map 加清除了？</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（六）复合数据结构之切片（Slice)</title>
      <link href="/2022/11/06/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E5%85%AD%EF%BC%89%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%88%87%E7%89%87/"/>
      <url>/2022/11/06/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E5%85%AD%EF%BC%89%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%88%87%E7%89%87/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文重构于 <a href="https://www.nickxu.top/2022/01/24/go-qie-pian-slice/">Go 切片（Slice）</a></p></blockquote><p>Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(“动态数组”)，与数组相比切片的长度是不固定的，可以追加元素，容量（cap）不够时会自动扩容</p><p>切片为引用类型，从数组中得到的切片修改元素值时，原数组也会发生变化，修改原数组时，切片也会变化</p><h1 id="创建切片">创建切片</h1><p>创建切片可以有四种方法</p><h2 id="使用-var">使用 <code>var</code></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="type">uint32</span></span><br></pre></td></tr></table></figure><h2 id="指定字面值">指定字面值</h2><p>这样创建的切片长度和容量都等于初始元素个数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="type">uint32</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-make-函数">使用 <code>make()</code> 函数</h2><p>可以指定长度和容量，格式为<code>make([]type, len[, cap])</code>，可以只指定长度，也可以长度容量同时指定</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 := <span class="built_in">make</span>([]<span class="type">uint32</span>)</span><br><span class="line">s2 := <span class="built_in">make</span>([]<span class="type">uint32</span>, <span class="number">1</span>)</span><br><span class="line">s3 := <span class="built_in">make</span>([]<span class="type">uint32</span>, <span class="number">1</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="使用截取符">使用截取符</h2><p>可以从现成的数组或切片创建</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [<span class="number">10</span>]<span class="type">uint32</span></span><br><span class="line">s1 := arr[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">s2 := arr[:<span class="number">5</span>]</span><br><span class="line">s3 := arr[<span class="number">5</span>:]</span><br><span class="line">s4 := arr[:]</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1643030240825.jpg" alt=""></p><h1 id="访问切片">访问切片</h1><ol><li>直接使用下标</li><li>使用截取符</li><li>使用 <code>for k,v:= range s</code></li></ol><h1 id="添加元素">添加元素</h1><p>使用<code>append()</code>函数向切片中添加元素，可以一次添加 0 个或多个元素，如果容量不够会自动扩容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="type">uint32</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">// 3 4</span></span><br><span class="line"></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">// 6 8</span></span><br></pre></td></tr></table></figure><p>若要添加其他切片/数组或部分内容，可以使用下面方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">append</span>(s, s1...)</span><br></pre></td></tr></table></figure><h1 id="修改元素">修改元素</h1><p>可以通过下标直接修改</p><p>注意，在你使用 <code>for k,v:= range s</code> 时，不能直接通过修改 <code>v</code> 来修改原切片，必须使用 <code>s[k]</code> 来修改（就像 Python 里面一样，你 range 出来的都是副本）</p><h1 id="删除元素">删除元素</h1><p>截取需要的那部分再赋值回去就是删除</p><p>如果要删除中间的某个元素，可以使用下面的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">s = <span class="built_in">append</span>(s[:<span class="number">2</span>], s[<span class="number">3</span>:]...)</span><br><span class="line">fmt.Println(s) <span class="comment">// [1 2 4]</span></span><br></pre></td></tr></table></figure><h1 id="拷贝">拷贝</h1><p>如果直接赋值，指向的底层数组是一样的，修改一个另一个也会跟着变</p><p>如果不想这样，可以使用 <code>copy()</code> 函数</p><p>此函数将内容从一个数组切片复制到另一个数组切片。如果加入的两个数组切片不一样大，就会按其中较小的那个数组切片的元素个数进行复制</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">slice1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; </span><br><span class="line">slice2 := []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span>(slice2, slice1) <span class="comment">// 只会复制slice1的前3个元素到slice2中 </span></span><br><span class="line"><span class="built_in">copy</span>(slice1, slice2) <span class="comment">// 只会复制slice2的3个元素到slice1的前3个位置</span></span><br></pre></td></tr></table></figure><h1 id="开发相关问题">开发相关问题</h1><h2 id="如何比较两个切片">如何比较两个切片</h2><p>与数组不同，切片之间不能直接使用 <code>==</code> 来比较（唯一的例外是和 <code>nil</code> 比较）</p><p>如果是 <code>[]byte</code> ，可以使用标准库提供的高度优化的 <code>bytes.Equal</code> 函数来判断是否相等</p><p>对于其他类型，只能自己一个个枚举</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">equal</span><span class="params">(x, y []<span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="built_in">len</span>(y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> x &#123;</span><br><span class="line">        <span class="keyword">if</span> x[i] != y[i] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断切片为空">判断切片为空</h2><p>使用 <code>len(s) == 0</code> 来判断，而不应该用 <code>s == nil</code> 来判断</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="type">int</span>    <span class="comment">// len(s) == 0, s == nil</span></span><br><span class="line">s = <span class="literal">nil</span>        <span class="comment">// len(s) == 0, s == nil</span></span><br><span class="line">s = []<span class="type">int</span>(<span class="literal">nil</span>) <span class="comment">// len(s) == 0, s == nil</span></span><br><span class="line">s = []<span class="type">int</span>&#123;&#125;    <span class="comment">// len(s) == 0, s != nil</span></span><br></pre></td></tr></table></figure><h2 id="自动扩容的细节">自动扩容的细节</h2><p>还是有点复杂的，详情可以看<a href="https://www.jianshu.com/p/96db3f5c0b0e">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在10月的最后一天</title>
      <link href="/2022/10/31/%E5%86%99%E5%9C%A810%E6%9C%88%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/"/>
      <url>/2022/10/31/%E5%86%99%E5%9C%A810%E6%9C%88%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>最近有点忙，不配图了，就纯意识流，想到哪写到哪</p><p>前天刚把期中考考了，昨天杭助破冰大会，今天上午评讲期中试卷，下午阴间长跑刚跑完，累死，回来直接洗澡然后吃饭刷B站，现在状态还行，来水一篇博客</p><h1 id="这个月">这个月</h1><p>上大学的生活，平时就跟泡脚一样舒服</p><p>然后呢？等到最后的考试周，感觉就是让你把洗脚水喝下去一样</p><p>我感觉这十月，就跟一个学期一样：一开始放国庆非常舒服，到月末的考试，再折磨你一手</p><p>这个月最大的事情应该是完成了招新工作吧，国庆的录了个视频教新人怎么提交小任务，然后一起见面交流，月末团建助手生日会并一起吃饭</p><p>然后呢？国庆几天速成了 GORM 还有 go-zero 框架，然后就一直在搞面试系统（前后重构了好几次），后面就是准备大物考试和杭助节目了</p><p>对了，我还在咸鱼花 3000 整了个 iPad Air 5 ，之前一直想要的，但是举棋不定，新 iPad 发布当天全线涨价，二手必定会跟着涨，所以我就直接冲了，用到现在感觉没什么问题</p><h1 id="学业">学业</h1><p>我能很负责地告诉你，圣光机自动化就是天坑专业</p><p>毛子讲课啥都听不懂，本来自动化东西就多，然后有些科目中文教学都挂一大堆人，何况是一堆专有名词的英文</p><p>然后呢？材料的 practice 教又不教清楚，那天我在 MATLAB 搞了一上午都没搞懂，做个 der 的作业，我还有一堆事情要做</p><p>然后呢？去找辅导员，第二天当面聊了一下，转专业是不可能的，这个合作办学情况特殊，然后课也是必须要听的，因为你要毕业</p><p>我只能说，命运真会捉弄，高考一考定终生的确不假，分数差了点被调剂到这个专业，每年交这么多钱学一堆我用不上的东西，关键是我还学不懂</p><p>如果没被调剂还好，计算机至少能学点相关的，这个自动化是真的麻了</p><p>我的要求就是能毕业就行，绩点之类的都不管了</p><p>奖学金之类的更不管了，让那群当官的自己卷去吧，反正</p><h1 id="杭助">杭助</h1><p>我爸说，大学之大，不在大厦，而在大师</p><p>而我说，大学之大，不在大师，而在大佬</p><p>来杭助一年了，我只能说改变是天翻地覆的，去年的我和现在的我简直不能比</p><p>上大学一年，平时上课基本啥都没学到（除了高数有点用，那个老师也挺好的），基本全靠助手学习</p><p>平时水群真的能学到不少，老王八蛋每次讲话都有我听不懂的，然后就是记录关键词，然后去查是个什么东西</p><p>三人行必有我师，何况这里有几十个人？</p><p>平时氛围也挺好的，有什么不会的直接提，马上就有人帮你解答，然后水群也是啥都能水，生活学习什么都有，氛围真的极好</p><p>一年来的进步，博客上大概都能看见（其实感觉是大一下才开始努力的）</p><p>杭助现在正处于转型期，之前的核心业务也就是疫情防控交给外包了，现在必须要整点活，不然易班就是下场</p><p>目前手上有三个饼，两个 ToC 的，元核酸还有杭助 ToDo ，一个 ToB 的，就是面试系统</p><p>元核酸可以实时了解当前校内核酸位置，以及人流情况（摄像头直播</p><p>杭助ToDo可以爬课表，然后爬学习通的作业 DDL，配合 caldav ，添加到手机系统的日历里，安卓苹果都可以</p><p>然后面试系统就是我手上的项目，用于招新人的一条龙服务</p>]]></content>
      
      
      <categories>
          
          <category> 随笔与总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『大学物理2』期中复习：波动光学</title>
      <link href="/2022/10/27/%E3%80%8E%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%862%E3%80%8F%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%B3%A2%E5%8A%A8%E5%85%89%E5%AD%A6/"/>
      <url>/2022/10/27/%E3%80%8E%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%862%E3%80%8F%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%B3%A2%E5%8A%A8%E5%85%89%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="光的相干性与双缝干涉">光的相干性与双缝干涉</h1><h2 id="光程和光程差">光程和光程差</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282039072.png" alt="image-20221028203948901"></p><h2 id="光强">光强</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282043847.png" alt="image-20221028204310760"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282043027.png" alt="image-20221028204348966"></p><h2 id="杨氏双缝干涉">杨氏双缝干涉</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282048298.png" alt="image-20221028204846071"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282051267.png" alt="image-20221028205117125"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282053077.png" alt="image-20221028205328000"></p><h1 id="光的干涉">光的干涉</h1><h2 id="薄膜干涉">薄膜干涉</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282058572.png" alt="image-20221028205853388"></p><p>折射率大的是光疏介质</p><p>透射光没损失</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282101341.png" alt="image-20221028210148207"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282343273.png" alt="image-20221028234327217"></p><h2 id="牛顿环">牛顿环</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282105033.png" alt="image-20221028210545907"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282344489.png" alt="image-20221028234407434"></p><h1 id="光的衍射">光的衍射</h1><h2 id="单缝衍射">单缝衍射</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282111750.png" alt="image-20221028211137612"></p><h1 id="翻译">翻译</h1><table><thead><tr><th>无质量弹簧</th><th>a spring of negligible mass</th></tr></thead><tbody><tr><td>吸收</td><td>absorb</td></tr><tr><td>加速度</td><td>acceleration</td></tr><tr><td>振幅</td><td>amplitude</td></tr><tr><td>圆频率</td><td>angular frequency</td></tr><tr><td>波腹</td><td>antinode</td></tr><tr><td>静止的</td><td>at rest/stationary</td></tr><tr><td>平均寿命</td><td>average lifetime</td></tr><tr><td>亮条纹间距</td><td>bright stripe space</td></tr><tr><td>亮条纹</td><td>bright stripe/bright fringe</td></tr><tr><td>中央亮条纹</td><td>central bight fringe</td></tr><tr><td>相干源</td><td>coherent source</td></tr><tr><td>康普顿散射</td><td>Compton scattering</td></tr><tr><td>匀速</td><td>constant speed</td></tr><tr><td>干涉相长</td><td>constructive</td></tr><tr><td>坐标</td><td>coordinate</td></tr><tr><td>曲率半径</td><td>curvature radius</td></tr><tr><td>暗条纹</td><td>dark fring/dark stripe</td></tr><tr><td>干涉相消</td><td>destructive</td></tr><tr><td>对角线</td><td>diagonal</td></tr><tr><td>直径</td><td>diameter</td></tr><tr><td>传播方向</td><td>direction of propagation</td></tr><tr><td>电子</td><td>electron</td></tr><tr><td>发射光子</td><td>emission photon</td></tr><tr><td>发射</td><td>emit</td></tr><tr><td>能级结构</td><td>energy-level scheme</td></tr><tr><td>简谐运动方程</td><td>equation of motion</td></tr><tr><td>平衡位置</td><td>equilibrium position</td></tr><tr><td>激发能</td><td>excitation energy</td></tr><tr><td>平面玻璃板表面</td><td>flat glass surface</td></tr><tr><td>弹簧系数</td><td>force constant</td></tr><tr><td>四个量子数</td><td>four quantum number</td></tr><tr><td>自由电子</td><td>free electron</td></tr><tr><td>频率</td><td>frequency</td></tr><tr><td>玻璃劈尖</td><td>glass wedge</td></tr><tr><td>滑块</td><td>glider</td></tr><tr><td>基态</td><td>ground state</td></tr><tr><td>半波损</td><td>half-wave loss</td></tr><tr><td>高能加速器</td><td>high-energy accelerator</td></tr><tr><td>最大几率</td><td>highest probability</td></tr><tr><td>氢原子</td><td>hydrogen atom</td></tr><tr><td>假想单电子原子</td><td>hypothetical one-electron atom</td></tr><tr><td>理想弹簧</td><td>ideal spring</td></tr><tr><td>在空气中</td><td>in air</td></tr><tr><td>电子伏特（单位）</td><td>in electron volts</td></tr><tr><td>在水中</td><td>in water</td></tr><tr><td>入射角</td><td>incident angle</td></tr><tr><td>入射光</td><td>incident light</td></tr><tr><td>入射波</td><td>incident wave</td></tr><tr><td>无限远距离</td><td>infinite distance</td></tr><tr><td>初始高度</td><td>initial height</td></tr><tr><td>初相</td><td>initial phase</td></tr><tr><td>初态</td><td>initial state</td></tr><tr><td>电离（离子化）</td><td>ionize</td></tr><tr><td>动能</td><td>kinetic energy</td></tr><tr><td>长度收缩</td><td>length contraction</td></tr><tr><td>光路</td><td>light path</td></tr><tr><td>大小</td><td>magnitude</td></tr><tr><td>质量</td><td>mass</td></tr><tr><td>最大的</td><td>maximum</td></tr><tr><td>最大加速度</td><td>maximum acceleration</td></tr><tr><td>最大速度</td><td>maximum speed/maximum velocity</td></tr><tr><td>最大向上位移</td><td>maximum upward displacement</td></tr><tr><td>机械能</td><td>mechanical energy</td></tr><tr><td>迈克尔逊干涉</td><td>Michlson interferometer</td></tr><tr><td>最小的</td><td>minimum</td></tr><tr><td>最小波长</td><td>minimum wavelenght</td></tr><tr><td>动量</td><td>momentum</td></tr><tr><td>单色光</td><td>monochromatic light</td></tr><tr><td>牛顿环</td><td>Newton’s ring</td></tr><tr><td>节点</td><td>node</td></tr><tr><td>原子核</td><td>nucleus</td></tr><tr><td>一维定态的</td><td>one-dimensional stationary</td></tr><tr><td>相反方向</td><td>opposite direction</td></tr><tr><td>光程</td><td>optical path</td></tr><tr><td>光程差</td><td>optical path difference</td></tr><tr><td>原波长</td><td>original wavelength</td></tr><tr><td>原来的位置</td><td>origional position</td></tr><tr><td>平行光</td><td>parallel light</td></tr><tr><td>周期</td><td>period</td></tr><tr><td>相位</td><td>phase</td></tr><tr><td>光电效应</td><td>photoelectric effect</td></tr><tr><td>光子</td><td>photon</td></tr><tr><td>平面简谐波</td><td>plane harmonic wave</td></tr><tr><td>平凸镜</td><td>planoconvex lens</td></tr><tr><td>势能</td><td>potential energy</td></tr><tr><td>主量子数</td><td>principle quantum number</td></tr><tr><td>本征寿命</td><td>proper lifetime</td></tr><tr><td>质子</td><td>proton</td></tr><tr><td>放射源</td><td>radioactive</td></tr><tr><td>半径</td><td>radius</td></tr><tr><td>实常数</td><td>real constant</td></tr><tr><td>反冲电子</td><td>recoiled electron</td></tr><tr><td>长方形</td><td>rectangle</td></tr><tr><td>反射波</td><td>reflected wave</td></tr><tr><td>折射率</td><td>refractive index</td></tr><tr><td>相对速度</td><td>relative speed/relative velocity</td></tr><tr><td>静止参考系</td><td>rest frame</td></tr><tr><td>散射光子</td><td>scattered x-ray/scattered photon</td></tr><tr><td>薛定谔方程</td><td>Schrödinger equation</td></tr><tr><td>证明</td><td>show that</td></tr><tr><td>简谐振动</td><td>simple harmonic motion (SHM)</td></tr><tr><td>解</td><td>solution</td></tr><tr><td>传播速度</td><td>speed of propagation</td></tr><tr><td>遏止电压</td><td>stopping potential</td></tr><tr><td>表面积</td><td>surface area</td></tr><tr><td>地球参考系</td><td>the earth’s frame</td></tr><tr><td>薄玻璃</td><td>thin glass</td></tr><tr><td>时间膨胀</td><td>time dilation</td></tr><tr><td>时间间隔</td><td>time interval</td></tr><tr><td>完全非弹性碰撞</td><td>totally inelastic collision</td></tr><tr><td>横波</td><td>transervse wave</td></tr><tr><td>跃迁</td><td>transition</td></tr><tr><td>透明薄膜</td><td>transparent thin film</td></tr><tr><td>横向位移</td><td>transverse displacement</td></tr><tr><td>不稳定粒子</td><td>unstable particle</td></tr><tr><td>速度</td><td>velocity/speed</td></tr><tr><td>波函数</td><td>wave function</td></tr><tr><td>波速</td><td>wave speed</td></tr><tr><td>波长</td><td>wavelength</td></tr><tr><td>宽度</td><td>width</td></tr><tr><td>逸出功</td><td>work function</td></tr><tr><td>X射线</td><td>X-ray</td></tr><tr><td>x轴</td><td>x-axis</td></tr><tr><td>杨氏双缝干涉实验</td><td>Young’s doule slit interference experiment</td></tr><tr><td>零级亮条纹</td><td>zeroth order of brigth fringe</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 大学物理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『大学物理2』期中复习：振动与波</title>
      <link href="/2022/10/27/%E3%80%8E%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%862%E3%80%8F%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8C%AF%E5%8A%A8%E4%B8%8E%E6%B3%A2/"/>
      <url>/2022/10/27/%E3%80%8E%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%862%E3%80%8F%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8C%AF%E5%8A%A8%E4%B8%8E%E6%B3%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="简谐振动">简谐振动</h1><h2 id="知识点">知识点</h2><h3 id="运动方程">运动方程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281400882.png" alt="image-20221028140044740"></p><h3 id="弹簧振子">弹簧振子</h3><p>弹簧的频率是其固有属性</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281402055.png" alt="image-20221028140211971"></p><h3 id="旋转矢量表示法">旋转矢量表示法</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281405466.png" alt="image-20221028140506381"></p><ul><li>振动中的圆频率：圆周运动的角速度</li><li>相位：矢量的辐角</li></ul><h3 id="速度方程">速度方程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281407959.png" alt="image-20221028140730863"></p><p>已知位置和速度求振幅</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281408324.png" alt="image-20221028140809220"></p><h3 id="加速度方程">加速度方程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281408452.png" alt="image-20221028140841353"></p><h3 id="动能势能机械能">动能势能机械能</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281410555.png" alt="image-20221028141001446"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281410710.png" alt="image-20221028141019624"></p><h2 id="例题">例题</h2><h3 id="求振动方程">求振动方程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281413268.png" alt="image-20221028141334143"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281417875.png" alt="image-20221028141706740"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281417263.png" alt="image-20221028141727152"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281417461.png" alt="image-20221028141747352"></p><h3 id="简谐振动特征量">简谐振动特征量</h3><p>这个加速度貌似少了个负号</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281418706.png" alt="image-20221028141821562"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281419193.png" alt="image-20221028141928074"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281420419.png" alt="image-20221028142043300"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281421825.png" alt="image-20221028142133708"></p><h1 id="机械波">机械波</h1><h2 id="知识点-2">知识点</h2><h3 id="各种名词">各种名词</h3><p>机械波就是无数个质点接连做简谐振动，每一个时刻，下一个质点复制上一个质点的运动状态</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281423922.png" alt="image-20221028142301822"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281423314.png" alt="image-20221028142321206"></p><p>什么波面波线平面波球波平面间谐波自己看课件</p><h3 id="波动方程（波函数）">波动方程（波函数）</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281427124.png" alt="image-20221028142746008"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281428457.png" alt="image-20221028142812332"></p><h3 id="波形方程">波形方程</h3><p>波动方程把 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span> 确定就是那一时刻的波形方程（各个位置的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>−</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x-y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 关系）</p><p>波动方程把 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 确定就是那一点的振动方程（那一点上的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>−</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">t-y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6984em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 关系）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281428747.png" alt=""></p><h2 id="例题-2">例题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281436819.png" alt="image-20221028143649696"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281437403.png" alt="image-20221028143736283"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281437010.png" alt="image-20221028143754904"></p><h1 id="多普勒效应和波的叠加">多普勒效应和波的叠加</h1><h2 id="多普勒效应">多普勒效应</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281934518.png" alt="image-20221028193452456"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282231007.png" alt="image-20221028223111959"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282231196.png" alt="image-20221028223119155"></p><h2 id="干涉">干涉</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281936898.png" alt="image-20221028193641845"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281936749.png" alt="image-20221028193649701"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281937329.png" alt="image-20221028193705270"></p><h2 id="驻波">驻波</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282026053.png" alt="image-20221028202603978"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210282239593.png" alt="image-20221028223912537"></p><h2 id="半波损失">半波损失</h2><p>半波损失：蓝色为入射波，你可能认为反射回来的是虚线，但实际上是红色，也就是貌似是向前半个波长再反射一样，然后混合起来是黑色，反射处正好是波节</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281909126.png" alt="image-20221028190903987"></p><p>半波损失在波疏介质到波密介质发生</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281914518.png" alt="image-20221028191427375"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281919806.png" alt="image-20221028191927683"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281920177.png" alt="image-20221028192028066"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281923935.png" alt="image-20221028192346825"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210281924481.png" alt="image-20221028192420373"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 大学物理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『Ubuntu』记录两款服务/自启管理工具</title>
      <link href="/2022/10/23/%E3%80%8EUbuntu%E3%80%8F%E8%AE%B0%E5%BD%95%E4%B8%A4%E6%AC%BE%E6%9C%8D%E5%8A%A1-%E8%87%AA%E5%90%AF%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/10/23/%E3%80%8EUbuntu%E3%80%8F%E8%AE%B0%E5%BD%95%E4%B8%A4%E6%AC%BE%E6%9C%8D%E5%8A%A1-%E8%87%AA%E5%90%AF%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="chkservice">chkservice</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210231030269.png" alt="image-20221023103052148"></p><p>这东西是专门管理服务的</p><hr><h1 id="sysv-rc-conf">sysv-rc-conf</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210231031631.png" alt="image-20221023103132540"></p><p>你可以很清晰地看见各个运行级的启动项</p><hr><p>这两个就是直接 <code>APT</code> 就能下载，你可能会找不到然后需要添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb http://archive.ubuntu.com/ubuntu/ trusty main universe restricted multiverse</span><br></pre></td></tr></table></figure><p>然后很可能又有报错，但是一路查解决方法折腾下去就行了</p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>身处大二瓶颈期的一些感想</title>
      <link href="/2022/10/23/%E8%BA%AB%E5%A4%84%E5%A4%A7%E4%BA%8C%E7%93%B6%E9%A2%88%E6%9C%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"/>
      <url>/2022/10/23/%E8%BA%AB%E5%A4%84%E5%A4%A7%E4%BA%8C%E7%93%B6%E9%A2%88%E6%9C%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="梦">梦</h1><p>梦，奇怪的梦，为什么是你？</p><p>我的初恋哇，为什么我今天会梦到你</p><p>已经过去的事情，藏于心底的记忆</p><p>关于过去，我只能说：从初一开始，在她眼中初三结束，在我眼中高三结束，其他的我什么都不想说</p><p>我原本以为我已经把你忘记了，但没想到还会梦见你</p><p>我又梦见了什么呢？</p><p>首先，时间，是现在的时间（也就是我们有 4 年没见面了）</p><p>然后地点，是类似初中的教室，有同桌，有走廊，经典的中学教室，但是我们都是大学生</p><p>她的那个班坐在教室里面，她坐在第 2 排，然后第二列（她右侧有个同桌，男女没看清，再右边是个走廊然后是墙，然后左边也是走廊）</p><p>然后我不知道是由于什么原因（可能梦里的事情就是这样无厘头），我们有 5、6 个人去她的教室宣讲还是讲什么的，在讲台上一字排开，就带头的在中间讲话，然后我站在最靠外面的位置，也就是一抬头就能看见她的位置，然后也不知道为什么，我穿的是杭助的衣服（别问，问就是在做梦）</p><p>我一开始还没发现她，但在快要结束的时候，我突然看见她了，然后越看越像，我开始怀疑我们真的又见面了</p><p>她穿是便装，就是正常大学里面的着装，然后在提着书包就等着结束然后走了</p><p>但是她一直没发现我，我一直看着她</p><p>然后，结束的那一刻，她正准备站起来离开，我快走两步过去，叫了她一声，然后单膝跪地，平静地看着她</p><p>“你还记得我嘛？”，然后是微微一笑</p><p>她坐着，先是迟疑震惊，然后也认出我来了，非常平静地回答我的问题</p><p>然后，然后就是说我们两不合适之类的话</p><p>我又努力地问了几次，但是她还是平静地告诉我，我和她不可能再回到过去了</p><p>梦中的场景如此真实，仿佛近在眼前</p><p>差不多就这样了吧，基本就是个这个情况，然后我就醒了</p><hr><h1 id="近况">近况</h1><p>一句话概况，我最近过得很差</p><p>我真的是服了，怎么有这么多 B 课，这么多事情，为什么要逼着我做这么多我不想做的事情</p><p>前几天刚把电路分析的几个 lab 和 practice 搞完了，然后搞完了期末考试（毛子讲课啥都听不懂），这周末还要写两篇大物实验报告，然后是离散数学的作业，然后是结构材料的 lab ，前天还把数据分析与处理的 lab 搞定了，下周五准备期末考试，下周六大物期中考试（上课我啥都听不懂），然后后天体育课要测 1000 米，我人都麻了</p><p>总之就是一堆破事，平时还要上一堆没有意义的课，前几天还生了个病，扁桃体发炎+发烧，啥事情都干不了</p><p>每年交这么多钱过来上这堆 B 课，学一堆我这辈子都不会用到的东西，真的是比杀我了还难受，我的项目已经好久有没有推进了，都是 yzy 在搞，最近还觉得微服务分得太多了，然后重构回单体服务</p><p>而且，我的博客也很久没更新了</p><p>然后看看部门里面其他人？每日 commit 不断，还要陪女朋友，绩点还卷得高，我就是个菜鸡</p><p>我能怪谁？怪这个专业？怪我高考考差了，然后调剂到这个破专业？学一堆乱七八糟的东西？</p><p>我他妈的只能怪我自己</p><p>你可能想问为什么我不去复读，我只能说那个地方我真的一刻也待不下去了，我只想离开我的中学，越远越好，我在那只会想起我的初恋</p><p>我只能说，我现在急需一个假期让我缓一缓，但是国庆放完今年的法定假期就放完了，下一个就是寒假</p><p>谢谢，我真的要谢，我不想再上这些 B 课了</p><p>希望这一切赶紧过去</p>]]></content>
      
      
      <categories>
          
          <category> 随笔与总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Go』初识 Flamego 框架的一些感受</title>
      <link href="/2022/10/14/%E3%80%8EGo%E3%80%8F%E5%88%9D%E8%AF%86-Flamego-%E6%A1%86%E6%9E%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E5%8F%97/"/>
      <url>/2022/10/14/%E3%80%8EGo%E3%80%8F%E5%88%9D%E8%AF%86-Flamego-%E6%A1%86%E6%9E%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E5%8F%97/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210141659502.jpg" alt="微信图片_20221014164252"></p><blockquote><p>昨天被拉去做苦力惹（</p></blockquote><p>被拉去做苦力的一天，自己负责的项目一点没动，项目群里讨论得热闹非凡，负责人却被骗去其他项目帮忙了</p><p>一下午初识 Flamego ，之前感觉go-zero有点太死板了，现在又感觉 Flamego 有点过于灵活</p><p><a href="https://flamego.cn/">Flamego</a> 的话，感觉还是有点意思的，特别是那个<a href="https://flamego.cn/custom-services.html#%E6%B3%A8%E5%85%A5%E6%9C%8D%E5%8A%A1">依赖注入的方法</a>，之前都没见过，有点意思</p><p>简单地说就是直接在初始化的时候使用 Map 直接传入，然后在需要的时候取出</p><p>最后看见这东西在 GitHub 上居然只有 400+ star，感觉有点不可思议</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210150007406.png" alt="image-20221015000747277"></p><p>一问才知道性能不好，也确实</p><p>最后就是头一次见措辞这么奔放的的文档（乐</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210150010541.png" alt="image-20221015001010456"></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Flamego 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Flamego </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『hduhelp』如何在项目中接入助手 OAuth</title>
      <link href="/2022/10/12/%E3%80%8Ehduhelp%E3%80%8F%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%8E%A5%E5%85%A5%E5%8A%A9%E6%89%8B%20OAuth/"/>
      <url>/2022/10/12/%E3%80%8Ehduhelp%E3%80%8F%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%8E%A5%E5%85%A5%E5%8A%A9%E6%89%8B%20OAuth/</url>
      
        <content type="html"><![CDATA[<p>书接<a href="/2022/09/28/%E3%80%8Ehduhelp%E3%80%8F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8A%A9%E6%89%8B%E7%9A%84%E5%BC%80%E6%94%BE%E6%9C%8D%E5%8A%A1/">上文</a>，本篇记录一下如何在项目中使用助手鉴权</p><p>例子是我正在开发的面试系统，框架是 go-zero</p><blockquote><p>示例地址： <a href="https://github.com/hduhelp/interview_backend/tree/9c05efb6a8614f79871876c0376a8d2cc123ceed">https://github.com/hduhelp/interview_backend/tree/9c05efb6a8614f79871876c0376a8d2cc123ceed</a></p><p>（后面重构了，结构可能有变化）</p></blockquote><blockquote><p>（私有仓库，需杭助内部身份）</p></blockquote><h1 id="先来看-API-文件">先来看 API 文件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;v1&quot;</span><br><span class="line"></span><br><span class="line">// 目前仅测试杭助登录</span><br><span class="line">service user &#123;</span><br><span class="line">@handler loginJump</span><br><span class="line">get /login/jump  (loginJumpRequest) // 直接跳到杭助登录</span><br><span class="line"></span><br><span class="line">@handler LoginCallback</span><br><span class="line">get /login/callback (LoginCallbackRequest)  // 杭助登录回调</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 杭助登录回调</span><br><span class="line">type (</span><br><span class="line">loginJumpRequest &#123;</span><br><span class="line">From string `form:&quot;from,optional&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LoginCallbackRequest &#123;</span><br><span class="line">Code  string `form:&quot;code&quot;`  // 杭助登录返回的code</span><br><span class="line">State string `form:&quot;state&quot;` // 杭助登录返回的state</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可以看见，有两个路由：</p><ul><li><p>/login/jump</p><p>构造 URL 直接跳转杭助鉴权</p><p>可选的 <code>From</code> 参数，用于记录从哪跳过来的，可以登录之后跳过去</p></li><li><p>/login/callback</p><p>接收杭助登录回来的路由</p><p>拿参数去请求杭助 token</p><p>再拿凭据去请求学生信息，如果成功就算登录成功</p><p>判断该学生属于哪个用户类型，并构造 JWT token</p><p>然后携 JWT token跳转至前端登录路由，前端拿到 JWT token</p></li></ul><hr><h1 id="再来看配置文件">再来看配置文件</h1><p>yaml 配置文件也是要加一些东西的，包括路由和票据，这样下面就可以轻松地读取了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Name:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">Host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">Port:</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端与后端路由配置</span></span><br><span class="line"><span class="attr">Routes:</span></span><br><span class="line">  <span class="attr">Frontend:</span> <span class="string">https://frontend.interview.hduhelp.com</span></span><br><span class="line">  <span class="attr">Backend:</span> <span class="string">https://backend.interview.hduhelp.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 杭助鉴权票据</span></span><br><span class="line"><span class="attr">Ticket:</span></span><br><span class="line">  <span class="attr">ClientId:</span></span><br><span class="line">  <span class="attr">ClientSecret:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JWT 配置</span></span><br><span class="line"><span class="attr">Auth:</span></span><br><span class="line">  <span class="attr">AccessSecret:</span> <span class="string">ThisIsMySecret</span></span><br><span class="line">  <span class="attr">AccessExpire:</span> <span class="number">1296000</span>      <span class="comment"># 15 天</span></span><br></pre></td></tr></table></figure><p>当然啦， <code>config.go</code> 也是要加上的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/zeromicro/go-zero/rest&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">rest.RestConf</span><br><span class="line">Auth <span class="keyword">struct</span> &#123;</span><br><span class="line">AccessSecret <span class="type">string</span></span><br><span class="line">AccessExpire <span class="type">int64</span></span><br><span class="line">&#125;</span><br><span class="line">Routes <span class="keyword">struct</span> &#123;</span><br><span class="line">Frontend <span class="type">string</span></span><br><span class="line">Backend  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line">Ticket <span class="keyword">struct</span> &#123;</span><br><span class="line">ClientId     <span class="type">string</span></span><br><span class="line">ClientSecret <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="handler-层">handler 层</h1><p>这个 go-zero 并没有能在 API 文件中定义跳转行为的语法，所以要自己去路由层编辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginJumpHandler</span><span class="params">(svcCtx *svc.ServiceContext)</span></span> http.HandlerFunc &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">      <span class="keyword">var</span> req types.LoginJumpRequest</span><br><span class="line">      <span class="keyword">if</span> err := httpx.Parse(r, &amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">         httpx.Error(w, err)</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      l := logic.NewLoginJumpLogic(r.Context(), svcCtx)</span><br><span class="line">      redirectUrl, err := l.LoginJump(&amp;req) <span class="comment">// 魔改返回值</span></span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         httpx.Error(w, err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//httpx.Ok(w)</span></span><br><span class="line">         http.Redirect(w, r, redirectUrl, http.StatusFound) <span class="comment">// 魔改，直接跳转</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外一个也是一样的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoginCallbackHandler</span><span class="params">(svcCtx *svc.ServiceContext)</span></span> http.HandlerFunc &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">      <span class="keyword">var</span> req types.LoginCallbackRequest</span><br><span class="line">      <span class="keyword">if</span> err := httpx.Parse(r, &amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">         httpx.Error(w, err)</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      l := logic.NewLoginCallbackLogic(r.Context(), svcCtx)</span><br><span class="line">      redirectUrl, err := l.LoginCallback(&amp;req)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         httpx.Error(w, err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//httpx.Ok(w)</span></span><br><span class="line">         http.Redirect(w, r, redirectUrl, http.StatusFound) <span class="comment">// 魔改，直接跳转</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="login-jump-logic">/login/jump logic</h1><p>这个算是比较好理解的，只需要一个 <code>loginjumplogic.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LoginJump 这东西魔我改了函数签名，返回值加了一个 string，指的是跳转的 url</span></span><br><span class="line"><span class="comment">// 构造 URL 直接跳转杭助鉴权</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LoginJumpLogic)</span></span> LoginJump(req *types.LoginJumpRequest) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> req.From == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">      req.From = l.svcCtx.Config.Routes.Frontend + <span class="string">&quot;/#/login&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//<span class="doctag">TODO:</span> 把 from 存入 redis，用于鉴权后跳转</span></span><br><span class="line"></span><br><span class="line">   query := url.Values&#123;&#125;</span><br><span class="line">   query.Add(<span class="string">&quot;response_type&quot;</span>, <span class="string">&quot;code&quot;</span>)</span><br><span class="line">   query.Add(<span class="string">&quot;client_id&quot;</span>, l.svcCtx.Config.Ticket.ClientId)</span><br><span class="line">   query.Add(<span class="string">&quot;redirect_uri&quot;</span>, l.svcCtx.Config.Routes.Backend+<span class="string">&quot;/login/callback&quot;</span>)</span><br><span class="line">   query.Add(<span class="string">&quot;state&quot;</span>, svc.NewState()) <span class="comment">// 这个就是一个 uuid，然后放在redis里面</span></span><br><span class="line"></span><br><span class="line">   redirectUrl := url.URL&#123;</span><br><span class="line">      Scheme:   <span class="string">&quot;https&quot;</span>,</span><br><span class="line">      Host:     <span class="string">&quot;api.hduhelp.com&quot;</span>,</span><br><span class="line">      Path:     <span class="string">&quot;/oauth/authorize&quot;</span>,</span><br><span class="line">      RawQuery: query.Encode(),</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> redirectUrl.String(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附：<code>servicecontext.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> svc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/zeromicro/go-zero/zrpc&quot;</span></span><br><span class="line"><span class="string">&quot;interview_backend/0_user/api/internal/config&quot;</span></span><br><span class="line"><span class="string">&quot;interview_backend/0_user/api/internal/types&quot;</span></span><br><span class="line"><span class="string">&quot;interview_backend/0_user/rpc/userclient&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ServiceContext <span class="keyword">struct</span> &#123;</span><br><span class="line">Config  config.Config</span><br><span class="line">UserRpc userclient.User</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServiceContext</span><span class="params">(c config.Config)</span></span> *ServiceContext &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;ServiceContext&#123;</span><br><span class="line">Config:  c,</span><br><span class="line">UserRpc: userclient.NewUser(zrpc.MustNewClient(c.UserRpc)),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewState 生成一个随机的 state，Callback 的时候检查是不是这个 state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewState</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;This_is_a_new_session&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 配合 redis 生成一个新的session，就像下面这样</span></span><br><span class="line"><span class="comment">//sid := uuid.NewV4().String()</span></span><br><span class="line"><span class="comment">//err := redis.GetRedis().Set(sid, &quot;oauth_state&quot;, time.Minute*10)</span></span><br><span class="line"><span class="comment">//if err != nil &#123;</span></span><br><span class="line"><span class="comment">//logger.Error.Println(err)</span></span><br><span class="line"><span class="comment">//return &quot;&quot;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//err = redis.GetRedis().Set(sid+&quot;_redirect&quot;, redirect, time.Minute*10)</span></span><br><span class="line"><span class="comment">//if err != nil &#123;</span></span><br><span class="line"><span class="comment">//logger.Error.Println(err)</span></span><br><span class="line"><span class="comment">//return &quot;&quot;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return sid</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CheckState 检查 state 是否在 redis 中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckState</span><span class="params">(state <span class="type">string</span>)</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span>在这里 state 是否在 redis 中</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetUserType 通过学生信息获取用户类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserType</span><span class="params">(types.GetStudentInfoResponse)</span></span> (<span class="type">int32</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span>调用RPC，根据学号判断用户类型</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="login-callback-logic">/login/callback logic</h1><p>这个需要向杭助请求 token 和学生信息之类的，所以我决定抽离一下服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── etc</span><br><span class="line">│   ├── user.yaml</span><br><span class="line">│   └── user.yaml.example</span><br><span class="line">├── internal</span><br><span class="line">│   ├── config</span><br><span class="line">│   │   └── config.go</span><br><span class="line">│   ├── handler</span><br><span class="line">│   │   ├── logincallbackhandler.go</span><br><span class="line">│   │   ├── loginjumphandler.go</span><br><span class="line">│   │   └── routes.go</span><br><span class="line">│   ├── logic</span><br><span class="line">│   │   ├── hduHelpService.go     <span class="comment"># 杭助请求函数</span></span><br><span class="line">│   │   ├── logincallbacklogic.go <span class="comment"># 主要逻辑</span></span><br><span class="line">│   │   └── loginjumplogic.go</span><br><span class="line">│   ├── middleware</span><br><span class="line">│   ├── svc</span><br><span class="line">│   │   └── servicecontext.go</span><br><span class="line">│   └── types</span><br><span class="line">│       ├── hduHelpServiceTypes.go <span class="comment"># 杭助请求与返回体</span></span><br><span class="line">│       └── types.go</span><br><span class="line">├── user.api</span><br><span class="line">└── user.go</span><br></pre></td></tr></table></figure><p><code>hduHelpService.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> logic</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;errors&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;github.com/parnurzeal/gorequest&quot;</span></span><br><span class="line">   <span class="string">&quot;interview_backend/0_user/api/internal/types&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">   <span class="string">&quot;net/url&quot;</span></span><br><span class="line">   <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetStudentInfo 从 SalmonBase 获取学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LoginCallbackLogic)</span></span> GetStudentInfo(token <span class="type">string</span>) (types.GetStudentInfoResponse, <span class="type">error</span>) &#123;</span><br><span class="line">   reqUrl := url.URL&#123;</span><br><span class="line">      Scheme: <span class="string">&quot;https&quot;</span>,</span><br><span class="line">      Host:   <span class="string">&quot;api.hduhelp.com&quot;</span>,</span><br><span class="line">      Path:   <span class="string">&quot;/salmon_base/student/info&quot;</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   res := types.GetStudentInfoResponse&#123;&#125;</span><br><span class="line">   _, _, err := gorequest.New().</span><br><span class="line">      Get(reqUrl.String()).</span><br><span class="line">      Retry(<span class="number">3</span>, time.Second, http.StatusBadRequest, http.StatusInternalServerError).</span><br><span class="line">      AppendHeader(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;token &quot;</span>+token).EndStruct(&amp;res)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res, errors.New(fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, err))</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetToken 从 api.hduhelp.com 获取 token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LoginCallbackLogic)</span></span> GetToken(code, state <span class="type">string</span>) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">   query := <span class="built_in">make</span>(url.Values)</span><br><span class="line">   query.Add(<span class="string">&quot;client_id&quot;</span>, l.svcCtx.Config.Ticket.ClientId)</span><br><span class="line">   query.Add(<span class="string">&quot;client_secret&quot;</span>, l.svcCtx.Config.Ticket.ClientSecret)</span><br><span class="line">   query.Add(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>)</span><br><span class="line">   query.Add(<span class="string">&quot;code&quot;</span>, code)</span><br><span class="line">   query.Add(<span class="string">&quot;state&quot;</span>, state)</span><br><span class="line"></span><br><span class="line">   reqUrl := url.URL&#123;</span><br><span class="line">      Scheme:   <span class="string">&quot;https&quot;</span>,</span><br><span class="line">      Host:     <span class="string">&quot;api.hduhelp.com&quot;</span>,</span><br><span class="line">      Path:     <span class="string">&quot;/oauth/token&quot;</span>,</span><br><span class="line">      RawQuery: query.Encode(),</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   fmt.Println(reqUrl.String())</span><br><span class="line"></span><br><span class="line">   res := types.GetTokenResponse&#123;&#125;</span><br><span class="line">   _, _, err := gorequest.New().</span><br><span class="line">      Get(reqUrl.String()).</span><br><span class="line">      Retry(<span class="number">3</span>, time.Second, http.StatusBadRequest, http.StatusInternalServerError).</span><br><span class="line">      EndStruct(&amp;res)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.Data.AccessToken, errors.New(fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, err))</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> res.Error != <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.Data.AccessToken, errors.New(fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, res.Msg))</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.Data.AccessToken, <span class="literal">nil</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>hduHelpServiceTypes.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HduhelpBaseResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Cache <span class="type">bool</span>   <span class="string">`json:&quot;cache&quot;`</span></span><br><span class="line">Error <span class="type">int</span>    <span class="string">`json:&quot;error&quot;`</span></span><br><span class="line">Msg   <span class="type">string</span> <span class="string">`json:&quot;msg&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GetStudentInfoResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">HduhelpBaseResponse</span><br><span class="line">Data <span class="keyword">struct</span> &#123;</span><br><span class="line">ClassId     <span class="type">string</span> <span class="string">`json:&quot;classId&quot;`</span></span><br><span class="line">MajorId     <span class="type">string</span> <span class="string">`json:&quot;majorId&quot;`</span></span><br><span class="line">MajorName   <span class="type">string</span> <span class="string">`json:&quot;majorName&quot;`</span></span><br><span class="line">StaffId     <span class="type">string</span> <span class="string">`json:&quot;staffId&quot;`</span></span><br><span class="line">StaffName   <span class="type">string</span> <span class="string">`json:&quot;staffName&quot;`</span></span><br><span class="line">TeacherId   <span class="type">string</span> <span class="string">`json:&quot;teacherId&quot;`</span></span><br><span class="line">TeacherName <span class="type">string</span> <span class="string">`json:&quot;teacherName&quot;`</span></span><br><span class="line">UnitId      <span class="type">string</span> <span class="string">`json:&quot;unitId&quot;`</span></span><br><span class="line">UnitName    <span class="type">string</span> <span class="string">`json:&quot;unitName&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GetTokenResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">HduhelpBaseResponse</span><br><span class="line">Data <span class="keyword">struct</span> &#123;</span><br><span class="line">AccessToken        <span class="type">string</span> <span class="string">`json:&quot;access_token,omitempty&quot;`</span></span><br><span class="line">AccessTokenExpire  <span class="type">int64</span>  <span class="string">`json:&quot;access_token_expire,omitempty&quot;`</span></span><br><span class="line">RefreshToken       <span class="type">string</span> <span class="string">`json:&quot;refresh_token,omitempty&quot;`</span></span><br><span class="line">RefreshTokenExpire <span class="type">int64</span>  <span class="string">`json:&quot;refresh_token_expire,omitempty&quot;`</span></span><br><span class="line">StaffId            <span class="type">string</span> <span class="string">`json:&quot;staff_id,omitempty&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是 <code>logincallbacklogic.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// newJwtToken 生成一个 jwt token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LoginCallbackLogic)</span></span> newJwtToken(userType <span class="type">uint8</span>, studentId <span class="type">string</span>, studentName <span class="type">string</span>) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">   claims := <span class="built_in">make</span>(jwt.MapClaims)</span><br><span class="line">   claims[<span class="string">&quot;studentId&quot;</span>] = studentId</span><br><span class="line">   claims[<span class="string">&quot;studentName&quot;</span>] = studentName</span><br><span class="line">   claims[<span class="string">&quot;userType&quot;</span>] = userType</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 添加过期时间</span></span><br><span class="line">   claims[<span class="string">&quot;exp&quot;</span>] = time.Now().Add(time.Second * time.Duration(l.svcCtx.Config.Auth.AccessExpire)).Unix()</span><br><span class="line"></span><br><span class="line">   token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)</span><br><span class="line">   <span class="keyword">return</span> token.SignedString([]<span class="type">byte</span>(l.svcCtx.Config.Auth.AccessSecret))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LoginCallback 接收杭助登录回来的路由</span></span><br><span class="line"><span class="comment">// 拿凭据去请求学生信息，如果成功就算登录成功</span></span><br><span class="line"><span class="comment">// 判断该学生属于哪个用户类型</span></span><br><span class="line"><span class="comment">// 然后携token跳转至前端登录路由，前端拿到token</span></span><br><span class="line"><span class="comment">// 这东西我魔改了函数签名，返回值加了一个 string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LoginCallbackLogic)</span></span> LoginCallback(req *types.LoginCallbackRequest) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 检查 state</span></span><br><span class="line">   <span class="keyword">if</span> ok, err := svc.CheckState(req.State); err != <span class="literal">nil</span> || !ok &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, errors.New(<span class="string">&quot;state error&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(<span class="string">&quot;state ok&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 尝试拿到 token</span></span><br><span class="line">   <span class="keyword">var</span> token <span class="type">string</span></span><br><span class="line">   <span class="keyword">if</span> token, err = l.GetToken(req.Code, req.State); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(<span class="string">&quot;get token ok&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 尝试拿到学生信息</span></span><br><span class="line">   <span class="keyword">var</span> studentInfo types.GetStudentInfoResponse</span><br><span class="line">   <span class="keyword">if</span> studentInfo, err = l.GetStudentInfo(token); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(<span class="string">&quot;get student info ok&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 判断该学生属于哪个用户类型</span></span><br><span class="line">   <span class="keyword">var</span> userType <span class="type">int32</span></span><br><span class="line">   <span class="keyword">if</span> userType, err = svc.GetUserType(studentInfo); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(<span class="string">&quot;get user type ok&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 生成一个 jwt token</span></span><br><span class="line">   <span class="keyword">var</span> jwtToken <span class="type">string</span></span><br><span class="line">   <span class="keyword">if</span> jwtToken, err = l.newJwtToken(<span class="type">uint8</span>(userType), studentInfo.Data.StaffId, studentInfo.Data.StaffName); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(<span class="string">&quot;new jwt token ok&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> redirectUrl = l.svcCtx.Config.Routes.Frontend + <span class="string">&quot;/#/login&quot;</span></span><br><span class="line">   <span class="comment">// <span class="doctag">TODO:</span>从 redis 中拿到 redirectUrl</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> redirectUrl + <span class="string">&quot;?token=&quot;</span> + jwtToken, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="成果演示">成果演示</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210131210077.gif" alt="Peek 2022-10-13 12-08"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hduhelp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM 入门笔记（十二）事务的使用与坑</title>
      <link href="/2022/10/10/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E4%BA%8B%E7%89%A9%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%9D%91/"/>
      <url>/2022/10/10/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E4%BA%8B%E7%89%A9%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="普通事务">普通事务</h1><p>使用 <code>Transaction()</code> 可以开启事务，在其中传入一个签名为 <code>func(tx *gorm.DB) error</code> 的函数，在函数内操作，如果返回的 error 不为空，则这些操作都作废</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Transaction(</span><br><span class="line">   <span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">   <span class="comment">// 在这里做些事情</span></span><br><span class="line">   <span class="comment">// tx.Create(...)</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>事务可以嵌套，如果内部事务出错，只会回滚内部语句</p><hr><h1 id="手动事务">手动事务</h1><p>另外一种形式是手动事务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tx := GLOBAL_DB.Begin() <span class="comment">// 开启事务</span></span><br><span class="line"><span class="comment">// 在这里做些事情</span></span><br><span class="line"><span class="comment">// tx.Create(...)</span></span><br><span class="line">tx.Rollback() <span class="comment">// 回滚事务（直接回到初始点，上面的都作废）</span></span><br><span class="line"><span class="comment">// 在这里做些事情</span></span><br><span class="line"><span class="comment">// tx.Create(...)</span></span><br><span class="line">tx.Commit()   <span class="comment">// 提交事务</span></span><br></pre></td></tr></table></figure><p>进阶一点的操作是设置存档点，还有手动回档</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tx := GLOBAL_DB.Begin() <span class="comment">// 开启事务</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">tx.SavePoint(<span class="string">&quot;savepoint1&quot;</span>) <span class="comment">// 创建保存点</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">tx.RollbackTo(<span class="string">&quot;savepoint1&quot;</span>) <span class="comment">// 回滚到保存点</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">tx.Commit()   <span class="comment">// 提交事务</span></span><br></pre></td></tr></table></figure><hr><h1 id="坑">坑</h1><p>GORM 的事务在多协程场景下貌似手动上锁，请见<a href="https://www.bilibili.com/video/BV1WT411T7SX">gorm的坑</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> GORM 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GORM </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM 入门笔记（十一）关联标签</title>
      <link href="/2022/10/09/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E5%85%B3%E8%81%94%E6%A0%87%E7%AD%BE/"/>
      <url>/2022/10/09/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E5%85%B3%E8%81%94%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<p>在官网的<a href="https://gorm.io/zh_CN/docs/associations.html#%E5%85%B3%E8%81%94%E6%A0%87%E7%AD%BE">实体关联</a>底部有一个表格，讲的是关联标签</p><table><thead><tr><th style="text-align:left">标签</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">foreignKey</td><td style="text-align:left">指定当前模型的列作为连接表的外键</td></tr><tr><td style="text-align:left">references</td><td style="text-align:left">指定引用表的列名，其将被映射为连接表外键</td></tr><tr><td style="text-align:left">polymorphic</td><td style="text-align:left">指定多态类型，比如模型名</td></tr><tr><td style="text-align:left">polymorphicValue</td><td style="text-align:left">指定多态值、默认表名</td></tr><tr><td style="text-align:left">many2many</td><td style="text-align:left">指定连接表表名</td></tr><tr><td style="text-align:left">joinForeignKey</td><td style="text-align:left">指定连接表的外键列名，其将被映射到当前表</td></tr><tr><td style="text-align:left">joinReferences</td><td style="text-align:left">指定连接表的外键列名，其将被映射到引用表</td></tr><tr><td style="text-align:left">constraint</td><td style="text-align:left">关系约束，例如：<code>OnUpdate</code>、<code>OnDelete</code></td></tr></tbody></table><p>关联标签可以自定义创建关联的时候，使用哪些列作为外键之类的（</p><p>其中有几个已经讲过了，然后最后一个一般不用，剩下的 4 个再挑出来讲一讲</p><hr><h1 id="foreignKey-与-references"><code>foreignKey</code> 与 <code>references</code></h1><p>还是用老师学生举例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Info <span class="keyword">struct</span> &#123;</span><br><span class="line">Id    <span class="type">int</span></span><br><span class="line">Score <span class="type">int</span></span><br><span class="line"></span><br><span class="line">StudentID <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Info Info</span><br><span class="line"></span><br><span class="line">TeacherID <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// has many</span></span><br><span class="line">Student []Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasMany</span><span class="params">()</span></span> &#123;</span><br><span class="line">GLOBAL_DB.AutoMigrate(&amp;Student&#123;&#125;, &amp;Teacher&#123;&#125;, &amp;Info&#123;&#125;)</span><br><span class="line"></span><br><span class="line">student1 := Student&#123;Name: <span class="string">&quot;student1&quot;</span>&#125;</span><br><span class="line">student2 := Student&#123;Name: <span class="string">&quot;student2&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">teacher1 := Teacher&#123;</span><br><span class="line">Name: <span class="string">&quot;teacher1&quot;</span>,</span><br><span class="line">Student: []Student&#123;</span><br><span class="line">student1,</span><br><span class="line">student2,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GLOBAL_DB.Create(&amp;teacher1)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210092330368.png" alt="image-20221009233002262"></p><p>这里是用 TeacherID 作为外键，使用 <code>foreignKey</code> 与 <code>references</code> 标签指定其他的列为外键</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Info Info</span><br><span class="line"></span><br><span class="line">TeacherName <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// has many</span></span><br><span class="line">Student []Student <span class="string">`gorm:&quot;foreignKey:TeacherName;references:Name&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个标签的意思是说：在其他模型中使用 <code>TeacherName</code> 作为外键，其值是本模型中的 <code>Name</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210092340974.png" alt="image-20221009234059913"></p><hr><h1 id="joinForeignKey-与-joinReferences"><code>joinForeignKey</code> 与 <code>joinReferences</code></h1><p>上面的例子是在 has many 中，而在 many to many 中，如果要重写外键，最好加上这两个标签</p><ul><li><code>joinForeignKey</code> 指定关联表字段</li><li><code>joinReferences</code> 指定关联表引用</li></ul><p>其实就是手动指定关联表中的列名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id          <span class="type">int</span></span><br><span class="line">   StudentName <span class="type">string</span> <span class="string">`gorm:&quot;index:,unique&quot;`</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// many2many</span></span><br><span class="line">   Teachers []Teacher <span class="string">`gorm:&quot;many2many:student_teachers;foreignkey:StudentName;joinForeignKey:student_name;references:TeacherName;joinreferences:teacher_name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id          <span class="type">int</span></span><br><span class="line">   TeacherName <span class="type">string</span> <span class="string">`gorm:&quot;index:,unique&quot;`</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// many2many</span></span><br><span class="line">   Students []Student <span class="string">`gorm:&quot;many2many:student_teachers;foreignkey:TeacherName;joinForeignKey:teacher_name;references:StudentName;joinreferences:student_name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">many2many</span><span class="params">()</span></span> &#123;</span><br><span class="line">   GLOBAL_DB.AutoMigrate(&amp;Student&#123;&#125;, &amp;Teacher&#123;&#125;)</span><br><span class="line"></span><br><span class="line">   teacher1 := Teacher&#123;TeacherName: <span class="string">&quot;teacher1&quot;</span>&#125;</span><br><span class="line">   teacher2 := Teacher&#123;TeacherName: <span class="string">&quot;teacher2&quot;</span>&#125;</span><br><span class="line">   student1 := Student&#123;</span><br><span class="line">      StudentName: <span class="string">&quot;student1&quot;</span>,</span><br><span class="line">      Teachers:    []Teacher&#123;teacher1, teacher2&#125;,</span><br><span class="line">   &#125;</span><br><span class="line">   GLOBAL_DB.Create(&amp;student1)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//var student = Student&#123;Id: 1&#125;</span></span><br><span class="line">   <span class="comment">//var result []Teacher</span></span><br><span class="line">   <span class="comment">//GLOBAL_DB.Model(&amp;student).Preload(&quot;Students&quot;).Association(&quot;Teachers&quot;).Find(&amp;result)</span></span><br><span class="line">   <span class="comment">//fmt.Println(result)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210100914954.png" alt="image-20221010091433814"></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> GORM 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GORM </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM 入门笔记（十）自引用</title>
      <link href="/2022/10/08/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89%E8%87%AA%E5%BC%95%E7%94%A8/"/>
      <url>/2022/10/08/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89%E8%87%AA%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>自引用的话比较简单 <s>，这一篇就是用来水的</s></p><p>书接上文，现在需要实现评论的评论，怎么办？</p><p>很简单，只需这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Comment <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id       <span class="type">int</span></span><br><span class="line">   Body     <span class="type">string</span></span><br><span class="line">   Comments []Comment <span class="string">`gorm:&quot;polymorphic:Owner;&quot;`</span></span><br><span class="line"></span><br><span class="line">   OwnerID   <span class="type">int</span>    <span class="comment">// 拥有者ID</span></span><br><span class="line">   OwnerType <span class="type">string</span> <span class="comment">// 拥有者类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加评论</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddComment</span><span class="params">(Body <span class="type">string</span>, OwnerID <span class="type">int</span>, OwnerType <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">   GLOBAL_DB.Create(&amp;Comment&#123;Body: Body, OwnerID: OwnerID, OwnerType: OwnerType&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> GORM 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GORM </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM 入门笔记（九）多态的概念与使用</title>
      <link href="/2022/10/07/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E5%A4%9A%E6%80%81%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/10/07/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E5%A4%9A%E6%80%81%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="概念">概念</h1><p>多态只存在于 Has One 和 Has Mang 中，这东西有些难以表述，我尽力讲得比较清晰</p><p>假如你正在开发一个类 B 站平台，平台上可以上传视频，也可以发布文章</p><p>现在需要加入评论功能，你将如何设计评论表？</p><p>众所周知，视频是可以评论的，文章也是可以评论的 <s>（暂时不考虑评论的评论）</s></p><p>最简单的方式就是以视频表的主键为外键，建一个视频评论表，再另外以文章表的主键为外键，建一个文章评论表</p><p>也就是说，视频 has many 视频评论，文章 has many 文章评论，两种评论互不相干</p><p>但是，这就搞出来两张表，搞出来两种评论类型，有没有一种关联模式，能在一张表中存储所有评论呢？</p><p>或者在某些场景下，不止 A 和 B 要拥有某一类的东西，而有 ABCDEF… 那怎么办？</p><p>那自然是有的，在这里只需这样设计评论表</p><ul><li>字段1：自增主键</li><li>字段2：评论内容</li><li>字段3：拥有者的 ID （这个拥有者可以是指视频，也可以是指文章）</li><li>字段4：拥有者类型（视频/文章）（A/B/C/D/E/F…）</li></ul><p>这就是多态，感觉就像是可以同时以多个表作为外键，但每一条数据都只被一个拥有者拥有</p><p>（多说一句，多态仅仅是 GORM 完成的，数据库中并没有外键索引约束）</p><hr><h1 id="使用方法">使用方法</h1><p>还是接上面的视频与文章的例子，假设它们的原始模型如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Video <span class="keyword">struct</span> &#123;</span><br><span class="line">Id    <span class="type">int</span></span><br><span class="line">Title <span class="type">string</span></span><br><span class="line">URL   <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Post <span class="keyword">struct</span> &#123;</span><br><span class="line">Id    <span class="type">int</span></span><br><span class="line">Title <span class="type">string</span></span><br><span class="line">Body  <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设评论的原始模型如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Comment <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id   <span class="type">int</span></span><br><span class="line">   Body <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在要使用多态形式关联到视频和文章上，只需这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Video <span class="keyword">struct</span> &#123;</span><br><span class="line">Id    <span class="type">int</span></span><br><span class="line">Title <span class="type">string</span></span><br><span class="line">URL   <span class="type">string</span></span><br><span class="line"></span><br><span class="line">Comments []Comment <span class="string">`gorm:&quot;polymorphic:Owner;&quot;`</span> <span class="comment">// 多态关联（多态一对多）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Post <span class="keyword">struct</span> &#123;</span><br><span class="line">Id    <span class="type">int</span></span><br><span class="line">Title <span class="type">string</span></span><br><span class="line">Body  <span class="type">string</span></span><br><span class="line"></span><br><span class="line">Comments []Comment <span class="string">`gorm:&quot;polymorphic:Owner;&quot;`</span> <span class="comment">// 多态关联（多态一对多）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Comment <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Body <span class="type">string</span></span><br><span class="line"></span><br><span class="line">OwnerID   <span class="type">int</span>    <span class="comment">// 拥有者ID</span></span><br><span class="line">OwnerType <span class="type">string</span> <span class="comment">// 拥有者类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你把表创建出来，你就能实现上面说的结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.AutoMigrate(&amp;Video&#123;&#125;, &amp;Post&#123;&#125;, &amp;Comment&#123;&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210082035682.png" alt="image-20221008203542623"></p><p>浅浅地试用一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Create(&amp;Video&#123;</span><br><span class="line">   Title: <span class="string">&quot;video1&quot;</span>,</span><br><span class="line">   URL:   <span class="string">&quot;https://video1.com&quot;</span>,</span><br><span class="line">   Comments: []Comment&#123;</span><br><span class="line">      &#123;Body: <span class="string">&quot;video1 comment1&quot;</span>&#125;,</span><br><span class="line">      &#123;Body: <span class="string">&quot;video1 comment2&quot;</span>&#125;,</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">GLOBAL_DB.Create(&amp;Post&#123;</span><br><span class="line">   Title: <span class="string">&quot;post1&quot;</span>,</span><br><span class="line">   Body:  <span class="string">&quot;body1&quot;</span>,</span><br><span class="line">   Comments: []Comment&#123;</span><br><span class="line">      &#123;Body: <span class="string">&quot;post1 comment1&quot;</span>&#125;,</span><br><span class="line">      &#123;Body: <span class="string">&quot;post1 comment2&quot;</span>&#125;,</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210082043473.png" alt="image-20221008204337380"></p><p>应该很容易理解多态的关系了</p><p>上面讲的是 has many 的情况（视频/文章 has many 评论）</p><p>而 has one 其实是差不多的，例如简介（视频/文章 has one 简介）</p><p>你只需这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Video <span class="keyword">struct</span> &#123;</span><br><span class="line">Id    <span class="type">int</span></span><br><span class="line">Title <span class="type">string</span></span><br><span class="line">URL   <span class="type">string</span></span><br><span class="line"></span><br><span class="line">Introductions Introduction <span class="string">`gorm:&quot;polymorphic:Owner;&quot;`</span> <span class="comment">// 多态关联（多态一对一）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Post <span class="keyword">struct</span> &#123;</span><br><span class="line">Id    <span class="type">int</span></span><br><span class="line">Title <span class="type">string</span></span><br><span class="line">Body  <span class="type">string</span></span><br><span class="line"></span><br><span class="line">Introductions Introduction <span class="string">`gorm:&quot;polymorphic:Owner;&quot;`</span> <span class="comment">// 多态关联（多态一对一）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Introduction <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Body <span class="type">string</span></span><br><span class="line"></span><br><span class="line">OwnerID   <span class="type">int</span>    <span class="comment">// 拥有者ID</span></span><br><span class="line">OwnerType <span class="type">string</span> <span class="comment">// 拥有者类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后都是差不多的使用</p><hr><h1 id="polymorphicValue-标签"><code>polymorphicValue</code> 标签</h1><p>这个东西可以改变 <code>owner_type</code> 中的对应名称，试一下就很清楚了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Video <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id    <span class="type">int</span></span><br><span class="line">   Title <span class="type">string</span></span><br><span class="line">   URL   <span class="type">string</span></span><br><span class="line"></span><br><span class="line">   Comments []Comment <span class="string">`gorm:&quot;polymorphic:Owner;polymorphicValue:video_tag&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Post <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id    <span class="type">int</span></span><br><span class="line">   Title <span class="type">string</span></span><br><span class="line">   Body  <span class="type">string</span></span><br><span class="line"></span><br><span class="line">   Comments []Comment <span class="string">`gorm:&quot;polymorphic:Owner;polymorphicValue:post_tag&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Comment <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id   <span class="type">int</span></span><br><span class="line">   Body <span class="type">string</span></span><br><span class="line"></span><br><span class="line">   OwnerID   <span class="type">int</span>    <span class="comment">// 拥有者ID</span></span><br><span class="line">   OwnerType <span class="type">string</span> <span class="comment">// 拥有者类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210082054669.png" alt="image-20221008205432573"></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> GORM 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GORM </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Linux』一个多月来将 Ubuntu 22.04 作为主力系统的感想</title>
      <link href="/2022/10/06/%E3%80%8ELinux%E3%80%8F%E5%B0%86-Ubuntu-22-04-%E4%BD%9C%E4%B8%BA%E4%B8%BB%E5%8A%9B%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%84%9F%E6%83%B3/"/>
      <url>/2022/10/06/%E3%80%8ELinux%E3%80%8F%E5%B0%86-Ubuntu-22-04-%E4%BD%9C%E4%B8%BA%E4%B8%BB%E5%8A%9B%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210071312347.png" alt="image-20221007131242095"></p><p>嗯，如你所见，我现在已经把 Linux 当做主力系统一个多月了</p><p>先说结论：我感觉还不错！</p><h1 id="事情的起因">事情的起因</h1><p>啊，是这样的，就是因为我受不了 Windows 了</p><p>详情可以看 <a href="/2022/09/10/%E3%80%8E%E9%9A%8F%E7%AC%94%E3%80%8F%E5%86%99%E5%9C%A8%E6%96%B0%E5%AD%A6%E5%B9%B4%E4%BC%8A%E5%A7%8B/#%E9%87%8D%E8%A3%85%E4%BA%86%E7%B3%BB%E7%BB%9F">『随笔』写在新学年伊始</a></p><hr><h1 id="折腾过程">折腾过程</h1><h2 id="安装">安装</h2><p>首先就是决定用哪个发行版，我把主流的都试了一遍，然后发现</p><p>很明显，我除了 Debain 系，没有其他的选择</p><p><s>因为我真的 apt 用惯了</s></p><p>Debian 太简陋了，Deepin 一股国产味道，我最后选择了 Ubuntu</p><p>至于安装的过程嘛，先去官网找镜像，然后用 rufus 写到 U 盘里面，或者用 ventoy 也可以</p><p>Linux 现在在安装的时候都很贴心地给出了与 Windows 共存的选项</p><hr><h2 id="软件">软件</h2><p>对于 Linux ，过去一个很重要的问题就是日常软件的适配</p><p>但是现在已经 2022 年了，这种情况已经得到了很大的改观</p><p>我大概总结了一下我目前的应用</p><ul><li><p>能原生运行的有：</p><p>edge、钉钉、飞书、网易云音乐、WPS、VSCode、JB 全家桶、Apifox、Typero、PicGo、Clash、VLC、搜狗输入法、OBS等</p></li><li><p>需要转译的有：</p><p>QQ/TIM、微信</p></li></ul><p>可以看见，大多数应用都支持了 Linux ，但是就是憨憨腾讯，点名批评哇~~（2020年出的那个垃圾 QQ Linux 版就憋说了~~</p><p>对于 QQ/TIM 的话，crossover 可以勉强用，<a href="https://github.com/zq1997/deepin-wine">deepin-wine</a> 也可以勉强用，平时可以用 <a href="https://github.com/Icalingua-plus-plus/Icalingua-plus-plus">lcalingua++</a> 代替</p><p>对于微信的话，crossover 和 deepin-wine 表现都可以</p><hr><h2 id="美化">美化</h2><p>美化的话，用的是仿 mac 的 <a href="https://github.com/vinceliuice/WhiteSur-gtk-theme">WhiteSur-gtk-theme</a>（建议仔细看readme，而且都用他的脚本安装），可以结合<a href="https://zhuanlan.zhihu.com/p/176977192">这篇</a>来看，但是 Plank 我感觉不是很好用，就没用</p><hr><h1 id="使用体验">使用体验</h1><p>感觉 Linux 还是很丝滑的，浑身轻松，反应很快</p><p>而且资源占用也不大，硬盘就 40G 左右，然后内存平时使用 4G</p><p>日常都用 Linux 没问题，我一般只在和舍友打 Apex 的时候才换到 Windows</p>]]></content>
      
      
      <categories>
          
          <category> 随笔与总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM 入门笔记（八）多对多关联（Many To Many）</title>
      <link href="/2022/10/05/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94%EF%BC%88Many-To-Many%EF%BC%89/"/>
      <url>/2022/10/05/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94%EF%BC%88Many-To-Many%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Many-To-Many（多对多）">Many To Many（多对多）</h1><p>如果你一对多关系搞懂了的话，多对多其实也很容易</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id   <span class="type">int</span></span><br><span class="line">   Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// many2many</span></span><br><span class="line">   Teachers []Teacher <span class="string">`gorm:&quot;many2many:student_teachers;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id   <span class="type">int</span></span><br><span class="line">   Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// many2many</span></span><br><span class="line">   Students []Student <span class="string">`gorm:&quot;many2many:student_teachers&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是互相放对方的切片嘛，但是这个关系交给一个第三方表来记录，所以需要加一个 tag</p><p>然后建表，可以看见建了三个表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.AutoMigrate(&amp;Student&#123;&#125;, &amp;Teacher&#123;&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210071004024.png" alt="image-20221007100441964"></p><h2 id="创建">创建</h2><p>这个应该很简单了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">teacher1 := Teacher&#123;Name: <span class="string">&quot;teacher1&quot;</span>&#125;</span><br><span class="line">teacher2 := Teacher&#123;Name: <span class="string">&quot;teacher2&quot;</span>&#125;</span><br><span class="line">student1 := Student&#123;</span><br><span class="line">   Name:     <span class="string">&quot;student1&quot;</span>,</span><br><span class="line">   Teachers: []Teacher&#123;teacher1, teacher2&#125;,</span><br><span class="line">&#125;</span><br><span class="line">GLOBAL_DB.Create(&amp;student1)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210071015355.png" alt="image-20221007101557255"></p><p>可见二者的关系是靠一个中间表来维护的</p><hr><h2 id="查询">查询</h2><p>这个还不是预加载那一套？其实和上一节差不多的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = Student&#123;Id: <span class="number">1</span>&#125;</span><br><span class="line">GLOBAL_DB.Preload(<span class="string">&quot;Teachers&quot;</span>).Find(&amp;result)</span><br><span class="line">fmt.Println(result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210071020129.png" alt="image-20221007102048058"></p><p>但是有时候结果只需要一个 teacher 的切片，这时候怎么办？</p><p>可以使用配合 <code>Association()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = Student&#123;Id: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> result []Teacher</span><br><span class="line">GLOBAL_DB.Model(&amp;student).Association(<span class="string">&quot;Teachers&quot;</span>).Find(&amp;result)</span><br><span class="line">fmt.Println(result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210071035086.png" alt="image-20221007103548000"></p><p>这个时候还想把 teacher 里面的学生也带出来怎么办？用预加载</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Model(&amp;student).Preload(<span class="string">&quot;Students&quot;</span>).Association(<span class="string">&quot;Teachers&quot;</span>).Find(&amp;result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210071037187.png" alt="image-20221007103733075"></p><p><s>（当然你还可以套娃下去）</s></p><p>如果还有子模型，还可以结合上节的 Joins ，等等</p><p>这些和之前的是一样的，还有什么关系的维护方法也是和之前一样的</p><p>只是存储的结构变了而已</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> GORM 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GORM </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『JWT』在 go-zero 框架中使用 JWT 鉴权</title>
      <link href="/2022/10/04/%E3%80%8EJWT%E3%80%8F%E5%9C%A8-go-zero-%E6%A1%86%E6%9E%B6%E4%B8%AD%E4%BD%BF%E7%94%A8-JWT-%E9%89%B4%E6%9D%83/"/>
      <url>/2022/10/04/%E3%80%8EJWT%E3%80%8F%E5%9C%A8-go-zero-%E6%A1%86%E6%9E%B6%E4%B8%AD%E4%BD%BF%E7%94%A8-JWT-%E9%89%B4%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p>今天刚搞懂了这东西，睡前一定要记下来</p><p>首先一定要对 go-zero 和 JWT 有些基础，不然你大概不知道我在 BB 什么</p><p>建议把官网上的 demo 都跑一下</p><hr><p>我以一个单体服务开始讲，以下是 api 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;v1&quot;</span><br><span class="line"></span><br><span class="line">service user &#123;</span><br><span class="line">@handler login</span><br><span class="line">get /login(LoginRequest) returns (LoginReply)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@server(</span><br><span class="line">jwt: Auth</span><br><span class="line">)</span><br><span class="line">service user &#123;</span><br><span class="line">@handler userInfo</span><br><span class="line">get /user_info(UserInfoRequest) returns (UserInfoReply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 目前仅测试 JWT 功能，能否从 token 中获取 user_type</span><br><span class="line">type (</span><br><span class="line"></span><br><span class="line">// 登录服务</span><br><span class="line">LoginRequest &#123;</span><br><span class="line">UserType uint8 `form:&quot;user_type&quot;`</span><br><span class="line">&#125;</span><br><span class="line">LoginReply &#123;</span><br><span class="line">Token string `json:&quot;token&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用户信息</span><br><span class="line">UserInfoRequest &#123;</span><br><span class="line">&#125;</span><br><span class="line">UserInfoReply &#123;</span><br><span class="line">UserType uint8 `json:&quot;user_type&quot;`</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>为了简洁，我抛开账号密码不谈，认定访问就登录了，然后为了说明 JWT 的存储功能，我会在 JWT 中存一个 <code>UserType</code> ，然后尝试在访问  <code>/user_info</code> 时从 JWT 读取并打印出来</p><hr><h1 id="生成并传递-token">生成并传递 token</h1><p>首先，在 <code>/etc/user.yaml</code> 中把 <code>AccessSecret</code> 和 <code>AccessExpire</code> 先定义好</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Name:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">Host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">Port:</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">Auth:</span></span><br><span class="line">  <span class="attr">AccessSecret:</span> <span class="string">ThisIsMySecret</span></span><br><span class="line">  <span class="attr">AccessExpire:</span> <span class="number">3600</span></span><br></pre></td></tr></table></figure><p><code>AccessSecret</code> 是用来签名的，保证这个 token 不是别人乱编出来的，一定是在你这里生成的，它可用是一个随意的字符串，但是一定不能泄露，不然就麻烦了</p><p><code>AccessExpire</code> 是可用的时间，单位为秒，鉴权时 go-zero 会自动帮你检查时间的</p><p>然后在 <code>/internal/config/config.go</code> 中加入这两个信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/zeromicro/go-zero/rest&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">rest.RestConf</span><br><span class="line">Auth <span class="keyword">struct</span> &#123;</span><br><span class="line">AccessSecret <span class="type">string</span></span><br><span class="line">AccessExpire <span class="type">int64</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，准备一个生成 token 的函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LoginLogic)</span></span> newJwtToken(userType <span class="type">uint8</span>) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">claims := <span class="built_in">make</span>(jwt.MapClaims)</span><br><span class="line">claims[<span class="string">&quot;userType&quot;</span>] = userType</span><br><span class="line">token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)</span><br><span class="line"><span class="keyword">return</span> token.SignedString([]<span class="type">byte</span>(l.svcCtx.Config.Auth.AccessSecret))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在生成 token 的时候，可以往里面保存数据，但是请注意了，这个是不被加密的，重要的东西不能往里面写</p><p>然后在 <code>/internal/logic/loginlogic.go</code> 中完善登录方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LoginLogic)</span></span> Login(req *types.LoginRequest) (resp *types.LoginReply, err <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">accessToken, err := l.newJwtToken(req.UserType)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;types.LoginReply&#123;Token: accessToken&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就可以了，去请求看看</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210050037503.png" alt="image-20221005003749420"></p><p>其实还有注意的一点是往 JWT 里面的参数要搞一些会变化的值（例如时间什么的）</p><p>在这里，如果重复请求的话返回值其实是一样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyVHlwZSI6MX0.ydX7wZAgrLGbhAVAgFY4UZ8NuwQISRO9VLPaFiW-7js</span><br></pre></td></tr></table></figure><p>更改 <code>user_type</code> 为 3 ，再拿一个 token</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210050041396.png" alt="image-20221005004148335"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyVHlwZSI6M30.HeEnQD7gLMLLqJzqM-3bnriSD3TdumTrfebcfFocCRc</span><br></pre></td></tr></table></figure><hr><h1 id="在访问时鉴权">在访问时鉴权</h1><p>这个其实很简单，在 service 上面加 3 行就行了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210050043089.png" alt="image-20221005004341969"></p><p>不加就是访问的时候不走 JWT</p><p>然后去 <code>/internal/logic/userinfologic.go</code> 完善 <code>UserInfo</code> 方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UserInfoLogic)</span></span> UserInfo(req *types.UserInfoRequest) (resp *types.UserInfoReply, err <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">userTypeInJSON, ok := l.ctx.Value(<span class="string">&quot;userType&quot;</span>).(json.Number)</span><br><span class="line"></span><br><span class="line"><span class="comment">//fmt.Printf(&quot;%T\n&quot;, l.ctx.Value(&quot;userType&quot;)) // json.Number</span></span><br><span class="line">fmt.Println(userTypeInJSON, ok)</span><br><span class="line"></span><br><span class="line">userTypeInInt64, err := userTypeInJSON.Int64()</span><br><span class="line"></span><br><span class="line">userType := <span class="type">uint8</span>(userTypeInInt64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;types.UserInfoReply&#123;</span><br><span class="line">UserType: userType,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>l.ctx.Value(&quot;userType&quot;)</code> 即可拿出保存的数据</p><p>要注意的是取出来的是 <code>json.Number</code> 类型，要转换</p><p>这样就可以了，去请求看看</p><p>在头部的 <code>Authorization</code> 传入 token</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210050048035.png" alt="image-20221005004817984"></p><p>再传入那个 user_type 为 3 的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210050049263.png" alt="image-20221005004914185"></p><p>非常完美，就是这样</p><hr><h1 id="在微服务场景的使用">在微服务场景的使用</h1><p>JWT 有个特性，就是只要配置的密钥相同，就能相互认同</p><p>也就是说，在 A 处拿到的 token，只要 B 使用的密钥和 A 一样，就可以在 B 处使用</p><p>另外创建一个服务，在 <code>yaml</code> 中和 <code>config.go</code> 中做相同的修改</p><p>复制一份 api 文件，但其实只测试鉴权，我就只保留鉴权的部分了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;v1&quot;</span></span><br><span class="line"></span><br><span class="line">@server(</span><br><span class="line">jwt: Auth</span><br><span class="line">)</span><br><span class="line">service questionnaire &#123;</span><br><span class="line">@handler userInfo</span><br><span class="line">get /user_info(UserInfoRequest) returns (UserInfoReply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目前仅测试 JWT 功能，能否从 token 中获取 user_type</span></span><br><span class="line"><span class="keyword">type</span> (</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户信息</span></span><br><span class="line">UserInfoRequest &#123;</span><br><span class="line">&#125;</span><br><span class="line">UserInfoReply &#123;</span><br><span class="line">UserType <span class="type">uint8</span> <span class="string">`json:&quot;user_type&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后方法逻辑也不用说了，一样的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210050055987.png" alt="image-20221005005516909"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210050055618.png" alt="image-20221005005535538"></p><p>也是一样的完美运行</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> go-zero 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM 入门笔记（七）一对多关联（Has Many）与进阶预加载</title>
      <link href="/2022/10/03/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94%EF%BC%88Has-Many%EF%BC%89/"/>
      <url>/2022/10/03/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94%EF%BC%88Has-Many%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Has-Many（一对多）">Has Many（一对多）</h1><blockquote><p>官网地址：<a href="https://gorm.io/zh_CN/docs/has_many.html">https://gorm.io/zh_CN/docs/has_many.html</a></p></blockquote><p>先回忆一下 Has One 的表达</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id   <span class="type">int</span></span><br><span class="line">   Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// has one</span></span><br><span class="line">   TeacherID <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id   <span class="type">int</span></span><br><span class="line">   Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// has one</span></span><br><span class="line">   Student Student</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后现在是 Has Many 嘛，一个 teacher 必定不止有一个 student</p><p>所以 Student 应该是一个切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line">TeacherID <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// has many</span></span><br><span class="line">Student []Student</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.AutoMigrate(&amp;Student&#123;&#125;, &amp;Teacher&#123;&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210062240811.png" alt="image-20221006224001738"></p><p>可以看见，数据库中的结构与 Has One 的是一样的</p><p>也不难理解，Has Many 只是能让多个学生指向同一个老师而已</p><hr><h2 id="创建">创建</h2><p>现在尝试一下使用 Has Many 的创建</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">student1 := Student&#123;Name: <span class="string">&quot;student1&quot;</span>&#125;</span><br><span class="line">student2 := Student&#123;Name: <span class="string">&quot;student2&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">teacher1 := Teacher&#123;</span><br><span class="line">   Name: <span class="string">&quot;teacher1&quot;</span>,</span><br><span class="line">   Student: []Student&#123;</span><br><span class="line">      student1,</span><br><span class="line">      student2,</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GLOBAL_DB.Create(&amp;teacher1)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210062245714.png" alt="image-20221006224550621"></p><p>可以看见两个学生都指向了同一个老师，这就是 Has Many</p><hr><h2 id="查询">查询</h2><p>如果你直接查询老师的话，你会发现没有学生的信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result Teacher</span><br><span class="line">GLOBAL_DB.First(&amp;result)</span><br><span class="line">fmt.Println(result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210062249710.png" alt="image-20221006224901598"></p><p>为什么呢？因为没有预加载</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Preload(<span class="string">&quot;Student&quot;</span>).First(&amp;result)</span><br></pre></td></tr></table></figure><p>这样就可以了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210062250611.png" alt="image-20221006225006528"></p><hr><h1 id="预加载的进阶使用">预加载的进阶使用</h1><blockquote><p>官网地址：<a href="https://gorm.io/zh_CN/docs/preload.html">https://gorm.io/zh_CN/docs/preload.html</a></p></blockquote><h2 id="条件预加载">条件预加载</h2><p>那么如果需要筛选一下呢？比如只想带出第一个学生</p><p>可以直接在预加载函数中添加条件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Preload(<span class="string">&quot;Student&quot;</span>, <span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;student1&quot;</span>).First(&amp;result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210062254693.png" alt="image-20221006225421607"></p><hr><h2 id="自定义预加载-SQL">自定义预加载 SQL</h2><p>这只是简单场景，如果是要复杂的过滤呢？</p><p>或者像官网上一样搞排序什么的（</p><p>那就要使用自定义的函数了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Preload(<span class="string">&quot;Student&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class="line">   <span class="keyword">return</span> db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;student1&quot;</span>)</span><br><span class="line">&#125;).First(&amp;result)</span><br></pre></td></tr></table></figure><p>这个函数里面可以塞很多东西</p><hr><h2 id="链式预加载">链式预加载</h2><p>关系很可能不止一层，现在给学生拥有一个 Info 模型，里面有学生的成绩</p><p><s>（当然这只是为了举例子，别杠为什么不直接写在 Student 里面）</s></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Info <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id    <span class="type">int</span></span><br><span class="line">   Score <span class="type">int</span></span><br><span class="line">   </span><br><span class="line">   StudentID <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id   <span class="type">int</span></span><br><span class="line">   Name <span class="type">string</span></span><br><span class="line">   Info Info</span><br><span class="line"></span><br><span class="line">   TeacherID <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id   <span class="type">int</span></span><br><span class="line">   Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// has many</span></span><br><span class="line">   Student []Student</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.AutoMigrate(&amp;Student&#123;&#125;, &amp;Teacher&#123;&#125;, &amp;Info&#123;&#125;)</span><br></pre></td></tr></table></figure><p>这里为了省事就直接往里面塞数据了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210062333170.png" alt="image-20221006233340058"></p><p>尝试刚才的查询，你会发现成绩并没有被带出来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result Teacher</span><br><span class="line">GLOBAL_DB.Preload(<span class="string">&quot;Student&quot;</span>).First(&amp;result)</span><br><span class="line">fmt.Println(result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210062334626.png" alt="image-20221006233440504"></p><p>应该使用链式结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Preload(<span class="string">&quot;Student.Info&quot;</span>).First(&amp;result)</span><br></pre></td></tr></table></figure><p>但是这里就有一个问题需要说明，就是要怎么添加条件</p><p>例如条件还是和上面一样，只要第一个学生，正确的写法应当是这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Preload(<span class="string">&quot;Student.Info&quot;</span>).Preload(<span class="string">&quot;Student&quot;</span>, <span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;student1&quot;</span>).First(&amp;result)</span><br></pre></td></tr></table></figure><p>也就是说，每层的预加载只能决定你当前层的数据能不能被带出来</p><p>例如这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Preload(<span class="string">&quot;Student.Info&quot;</span>, <span class="string">&quot;score &gt; 60&quot;</span>).First(&amp;result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210070002800.png" alt="image-20221007000202735"></p><p>你会看见两个人都被查出来了，但是不及格的成绩没有被带出来</p><p>查询条件只适用于当前加载的那一层</p><hr><h2 id="Joins-预加载"><code>Joins()</code> 预加载</h2><p>上面的那条看上去只会查到及格的学生，但其实并不是</p><p>那如果我就想要及格的学生，没及格的我看都不想看见呢？</p><p>这可以使用自定义函数 + <code>Joins()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Preload(<span class="string">&quot;Student&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class="line"><span class="keyword">return</span> db.Joins(<span class="string">&quot;Info&quot;</span>).Where(<span class="string">&quot;score &gt; ?&quot;</span>, <span class="number">60</span>)</span><br><span class="line">&#125;).First(&amp;result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210070010538.png" alt="image-20221007001010455"></p><p>这东西常用的就是这样，详细的可以去官网看看</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> GORM 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GORM </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM 入门笔记（六）一对一关联（Belongs To 与 Has One）、初识预加载与关系操作</title>
      <link href="/2022/10/02/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB%EF%BC%88Belongs-To-%E4%B8%8E-Has-One%EF%BC%89/"/>
      <url>/2022/10/02/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB%EF%BC%88Belongs-To-%E4%B8%8E-Has-One%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>首先准备两个结构体：学生和老师</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后自动建表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">One2one</span><span class="params">()</span></span> &#123;</span><br><span class="line">GLOBAL_DB.AutoMigrate(&amp;Student&#123;&#125;, &amp;Teacher&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210051012273.png" alt="image-20221005101220168"></p><p>你会发现两张表都能被建出来，但是相互没有关联</p><p>下面来创建一对一关联</p><p>PS：Belongs To 和 Has One 在数据库是一样的，只是本地的代码结构不同</p><hr><h1 id="Belongs-To（属于）">Belongs To（属于）</h1><p>要说明某个学生属于某个老师，可以在 <code>Student</code> 中加上一个老师的 <code>Id</code> 和一个实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// belongs to</span></span><br><span class="line">TeacherId <span class="type">int</span></span><br><span class="line">Teacher   Teacher</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时就只需要用 <code>Student</code> 来建表了，清空数据库并重新建表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">One2one</span><span class="params">()</span></span> &#123;</span><br><span class="line">GLOBAL_DB.AutoMigrate(&amp;Student&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210051020733.png" alt="image-20221005102027649"></p><p>你可以看见， GORM 自动将学生和老师都建好了，并且学生有一个 <code>teacher_id</code> 来记录是哪个老师的学生</p><p>这就创建了属于关系</p><p>下面来构造并插入数据（注意主体，插入的是学生）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a teacher</span></span><br><span class="line">teacher := Teacher&#123;Name: <span class="string">&quot;teacher1&quot;</span>&#125;</span><br><span class="line"><span class="comment">// create a student，不需要给出老师 Id</span></span><br><span class="line">student := Student&#123;Name: <span class="string">&quot;student1&quot;</span>, Teacher: teacher&#125;</span><br><span class="line"></span><br><span class="line">GLOBAL_DB.Create(&amp;student)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210051027448.png" alt="image-20221005102714347"></p><p>可以看见被成功地插入</p><hr><h1 id="Has-One（拥有一个）">Has One（拥有一个）</h1><p>对应地，也有说明老师拥有一个学生的结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id   <span class="type">int</span></span><br><span class="line">   Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// has one</span></span><br><span class="line">   TeacherID <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id   <span class="type">int</span></span><br><span class="line">   Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// has one</span></span><br><span class="line">   Student Student</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的是，现在需要传入两个结构建表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.AutoMigrate(&amp;Teacher&#123;&#125;, &amp;Student&#123;&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210051112109.png" alt="image-20221005111210057"></p><p>现在先创建一个老师，这次尝试不指定学生</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">teacher1 := Teacher&#123;Name: <span class="string">&quot;teacher1&quot;</span>&#125;</span><br><span class="line">GLOBAL_DB.Create(&amp;teacher1)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210051118922.png" alt="image-20221005111808856"></p><p>可见就只插入了一个老师</p><p>现在再准备一对师生</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create student</span></span><br><span class="line">student := Student&#123;Name: <span class="string">&quot;student1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a teacher</span></span><br><span class="line">teacher2 := Teacher&#123;Name: <span class="string">&quot;teacher2&quot;</span>, Student: student&#125;</span><br><span class="line">GLOBAL_DB.Create(&amp;teacher2)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210051118675.png" alt="image-20221005111844588"></p><p>可以看见学生自动指向了老师</p><hr><h1 id="预加载">预加载</h1><p>接下来讲查询</p><p>如果查询时要带出本身关联的其他结构的话，需要使用预加载</p><p>就接着上面的 has one 的例子，尝试查询刚才插入的那一对师生</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result Teacher</span><br><span class="line">GLOBAL_DB.First(&amp;result, <span class="number">2</span>)</span><br><span class="line">fmt.Println(result)</span><br></pre></td></tr></table></figure><p>但是你会发现只能查到老师</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210051130376.png" alt="image-20221005113014291"></p><p>加上预加载方法 <code>.Preload(&quot;Student&quot;)</code> ，就能一并拿到学生</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result Teacher</span><br><span class="line">GLOBAL_DB.Preload(<span class="string">&quot;Student&quot;</span>).First(&amp;result, <span class="number">2</span>)</span><br><span class="line">fmt.Println(result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210051131838.png" alt="image-20221005113136742"></p><p>只要是确立了关联，就能使用预加载，下面尝试使用 belongs to 关联</p><p>因为数据库上其实是一样的，就只用改本地代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// belongs to</span></span><br><span class="line">TeacherId <span class="type">int</span></span><br><span class="line">Teacher   Teacher</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">One2one</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result Student</span><br><span class="line">GLOBAL_DB.Preload(<span class="string">&quot;Teacher&quot;</span>).First(&amp;result, <span class="number">1</span>)</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210051139128.png" alt="image-20221005113947043"></p><p>这就是 has one 和 belongs to 的预加载查询</p><hr><h1 id="关系操作">关系操作</h1><p>上面在是在插入的时候成对插入的，插入时就有了关系</p><p>但是如果你在插入的时候只插入了一半，然后后面另一半是后来单独插入的，现在要手动把这个关系补上</p><p>或者想手动编辑或删除关系，就需要进行关系操作</p><h2 id="创建-Append">创建 <code>Append()</code></h2><p>从上面的状态继续，但是现在只留一对师生，而且把他们的关系清除掉，尝试手动创建关系</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210051209819.png" alt="image-20221005120935754"></p><p>使用 <code>Association()</code> 方法即可，但是要搞清楚关系主体，这里是学生属于老师，所以 <code>Model()</code> 里面传的是学生</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s := Student&#123;Id: <span class="number">1</span>&#125;</span><br><span class="line">t := Teacher&#123;Id: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">GLOBAL_DB.Model(&amp;s).Association(<span class="string">&quot;Teacher&quot;</span>).Append(&amp;t)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210051218278.png" alt="image-20221005121821210"></p><p>可见关系已经创建</p><h2 id="替换-Replace">替换 <code>Replace()</code></h2><p>新加一个老师，然后尝试将关系替换为第二个</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210051232921.png" alt="image-20221005123235854"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Model(&amp;Student&#123;Id: <span class="number">1</span>&#125;).Association(<span class="string">&quot;Teacher&quot;</span>).Replace(&amp;Teacher&#123;Id: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210051234247.png" alt="image-20221005123401174"></p><h2 id="删除-Delete">删除 <code>Delete()</code></h2><p>这个也很好理解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Model(&amp;Student&#123;Id: <span class="number">1</span>&#125;).Association(<span class="string">&quot;Teacher&quot;</span>).Delete(&amp;Teacher&#123;Id: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210051234571.png" alt="image-20221005123437496"></p><h2 id="清空-Clear">清空 <code>Clear()</code></h2><p>为什么有个删除还有个清空呢？因为后面还有一对多与多对多关系，删除一次只能删一个，清空可以全删了</p><h2 id="计数-Count">计数 <code>Count()</code></h2><p>这个肯定也是放到后面讲了</p><h1 id="小小的总结">小小的总结</h1><p>你现在能说清楚 Belongs To 和 Has One 了嘛</p><p>A <code>Belongs To</code> B：</p><ul><li>在 A 中有一个 B 的实例</li><li>A 中有 B 的编号</li></ul><p>B <code>Has One</code> A：</p><ul><li>在 B 中有一个 A 的实例</li><li>A 中有 B 的编号</li></ul><hr><p>其实只要 A 中有 B 的编号就已经建立关系了</p><p>里面的实例是为了插入/查询数据的时候方便，用一个结构体就行了</p><p>也就是说，这两个其实是一个东西，只是表达方式不同（看以谁为主语）</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> GORM 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GORM </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM 入门笔记（五）简单的增删改查</title>
      <link href="/2022/10/01/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%E7%AE%80%E5%8D%95%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
      <url>/2022/10/01/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%E7%AE%80%E5%8D%95%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>本篇使用以下示例用表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">uint8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GLOBAL_DB.AutoMigrate(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="创建">创建</h1><blockquote><p>官方文档：<a href="https://gorm.io/zh_CN/docs/create.html">https://gorm.io/zh_CN/docs/create.html</a></p></blockquote><h2 id="单独创建">单独创建</h2><p>使用 <code>Create()</code> 方法即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Create(&amp;User&#123;Name: <span class="string">&quot;张三&quot;</span>, Age: <span class="number">18</span>&#125;)</span><br></pre></td></tr></table></figure><p>而如何知道有没有创建成功呢？</p><p>观察可以发现，这个方法会返回 DB 对象</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012042601.png" alt="image-20221001204202540"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DB GORM DB definition</span></span><br><span class="line"><span class="keyword">type</span> DB <span class="keyword">struct</span> &#123;</span><br><span class="line">*Config</span><br><span class="line">Error        <span class="type">error</span></span><br><span class="line">RowsAffected <span class="type">int64</span></span><br><span class="line">Statement    *Statement</span><br><span class="line">clone        <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 DB 有 <code>Error</code> 和 <code>RowsAffected</code> 这两个属性，就可以很方便地得到结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateUser</span><span class="params">()</span></span> &#123;</span><br><span class="line">   dbres := GLOBAL_DB.Create(&amp;User&#123;Name: <span class="string">&quot;张三&quot;</span>, Age: <span class="number">18</span>&#125;)</span><br><span class="line">   fmt.Println(dbres.Error, dbres.RowsAffected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012051961.png" alt="image-20221001205125879"></p><p>可以看见并没有报错</p><hr><p>那么如果报错是怎样的呢？可以添加一个 NOT NULL 的字段，然后不提供值试一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">T    *<span class="type">string</span> <span class="string">`gorm:&quot;not null&quot;`</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">uint8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012055274.png" alt="image-20221001205558185"></p><p>可以看见报错信息</p><hr><h2 id="创建时指定字段">创建时指定字段</h2><p>在 <code>Create</code> 之前使用 <code>Select</code> 方法可以只会传递被选中的字段值（没被选中的如果有默认值就会被赋成默认）</p><p>下面的例子只会创建 <code>Name</code> 而不会有 <code>Age</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Select(<span class="string">&quot;Name&quot;</span>).Create(&amp;User&#123;Name: <span class="string">&quot;张三&quot;</span>, Age: <span class="number">18</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012106149.png" alt="image-20221001210649070"></p><hr><h2 id="创建时跳过字段">创建时跳过字段</h2><p>类似地，还可以使用 <code>Omit</code> 跳过字段，下面的例子只会创建 <code>Age</code> 而不会有 <code>Name</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Omit(<span class="string">&quot;Name&quot;</span>).Create(&amp;User&#123;Name: <span class="string">&quot;张三&quot;</span>, Age: <span class="number">18</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012108229.png" alt="image-20221001210845144"></p><hr><h2 id="批量创建">批量创建</h2><p>可以使用切片来批量创建</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Create(&amp;[]User&#123;</span><br><span class="line">&#123;Name: <span class="string">&quot;张三&quot;</span>, Age: <span class="number">18</span>&#125;,</span><br><span class="line">&#123;Name: <span class="string">&quot;李四&quot;</span>, Age: <span class="number">20</span>&#125;,</span><br><span class="line">&#123;Name: <span class="string">&quot;王五&quot;</span>, Age: <span class="number">22</span>&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012112559.png" alt="image-20221001211250474"></p><hr><h1 id="查询">查询</h1><blockquote><p>官方文档：<a href="https://gorm.io/zh_CN/docs/query.html">https://gorm.io/zh_CN/docs/query.html</a></p></blockquote><p>我感觉 GROM 的查询玩的太花了，方法（字面义）很多，这里只讲一部分</p><h2 id="查询主键排序后的第一条">查询主键排序后的第一条</h2><p>使用 <code>First()</code> 方法</p><p>查询时有两种方式来接收返回值，分别是 Map 和结构体</p><p>在查询的时候必须在语句中体现原始模型，即使是使用 <code>Table(&quot;users&quot;)</code> 指定表名也不行，所以如果要使用 Map 接收，必须使用 <code>Model(&amp;User&#123;&#125;)</code> 手动指定模型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">GLOBAL_DB.Model(&amp;User&#123;&#125;).First(&amp;result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012152687.png" alt="image-20221001215252615"></p><p>另外一种是使用模型的结构体，因为结构体本身已经能体现原始模型，所以无需使用 <code>Model</code> 方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result User</span><br><span class="line">GLOBAL_DB.First(&amp;result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012155533.png" alt="image-20221001215535453"></p><hr><h2 id="查询主键排序后的最后一条">查询主键排序后的最后一条</h2><p>类似地，还有 <code>Last()</code> 方法，不同之处只是拿最后一条</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result User</span><br><span class="line">GLOBAL_DB.Last(&amp;result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012200173.png" alt="image-20221001220039085"></p><hr><h2 id="查询第一条（不排序）">查询第一条（不排序）</h2><p>再类似地，还有 <code>take()</code> 方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result User</span><br><span class="line">GLOBAL_DB.Take(&amp;result)</span><br></pre></td></tr></table></figure><p>这东西在生成 SQL 时不会添加按主键排序的字句，不过在这里结果肯定是一样的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012156776.png" alt="image-20221001215639688"></p><hr><h2 id="查询多条记录">查询多条记录</h2><p>很简单，把结构体变成切片，然后使用 <code>Find()</code> 或是 <code>Scan()</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012331727.png" alt="image-20221001233120631"></p><hr><h2 id="使用检索条件">使用检索条件</h2><h3 id="使用-Where-给出条件">使用 <code>Where()</code> 给出条件</h3><h3 id="String-条件">String 条件</h3><p>传入字符串给 <code>Where()</code> 以作为条件，把可以把这东西直接当做 SQL 中的  <code>WHERE</code> 字句，什么 <code>AND</code> <code>NOT</code> <code>OR</code> <code>LIKE</code> 都可以用，而且可以使用 <code>?</code> 作为占位符，格式化字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result []User</span><br><span class="line">GLOBAL_DB.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;张三&quot;</span>).Find(&amp;result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012251093.png" alt="image-20221001225135002"></p><p>在字符串里可以像 SQL 一样使用 <code>AND</code> 和 <code>OR</code> 关键字</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result []User</span><br><span class="line">GLOBAL_DB.Where(<span class="string">&quot;name = ? OR age = 22&quot;</span>, <span class="string">&quot;张三&quot;</span>).Find(&amp;result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012256421.png" alt="image-20221001225619329"></p><p>当然了，如果只想查一个的话，使用 <code>First()</code> 就行</p><hr><h3 id="Struct-Map-条件">Struct &amp; Map 条件</h3><p>这个不常用，建议去<a href="https://gorm.io/zh_CN/docs/query.html#Struct-amp-Map-%E6%9D%A1%E4%BB%B6">官方文档</a>看</p><hr><h3 id="Or-和-Not"><code>Or()</code> 和 <code>Not()</code></h3><p>上面的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Where(<span class="string">&quot;name = ? OR age = 22&quot;</span>, <span class="string">&quot;张三&quot;</span>).Find(&amp;result)</span><br></pre></td></tr></table></figure><p>还可以这样写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;张三&quot;</span>).Or(<span class="string">&quot;age = 22&quot;</span>).Find(&amp;result)</span><br></pre></td></tr></table></figure><p>等于说是抽离出来了，结果是一样的</p><p>而 <code>Not()</code> 可以这样用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Not(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;张三&quot;</span>).Find(&amp;result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012322934.png" alt="image-20221001232206846"></p><p>为什么 NULL 不会被选中？我想因为 GORM 是转换成 SQL 去查询的，而 SQL 去查询 MySQL 的时候，NULL 就是不会被选中</p><hr><h3 id="内联条件">内联条件</h3><p>在查询动作方法中直接加上 <code>Where()</code> 中的内容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Find(&amp;result, <span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;张三&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个应该没什么好说的</p><hr><h3 id="主键检索">主键检索</h3><p>如果主键是数字类型，可以使用简化的内联条件</p><p>例如下面查找主键为 4 的记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result User</span><br><span class="line">GLOBAL_DB.First(&amp;result, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// 或者是</span></span><br><span class="line">GLOBAL_DB.First(&amp;result, <span class="string">&quot;4&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012218713.png" alt="image-20221001221817626"></p><p>类似地，还有下面的用法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result []User</span><br><span class="line">GLOBAL_DB.Find(&amp;result, []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012232719.png" alt="image-20221001223217616"></p><p>如果你的主键是字符串（例如 UUID），就必须写成正式的内联查询或使用 <code>Where()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.First(&amp;result, <span class="string">&quot;id = ?&quot;</span>, <span class="string">&quot;1b74413f-f3b8-409f-ac47-e8c062e3472a&quot;</span>)</span><br></pre></td></tr></table></figure><p>而不能这么写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.First(&amp;result,<span class="string">&quot;1b74413f-f3b8-409f-ac47-e8c062e3472a&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="选择特定字段">选择特定字段</h2><p>使用 <code>Select()</code> 选择你想要的字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).Find(&amp;result)</span><br><span class="line"><span class="comment">// 或是</span></span><br><span class="line">GLOBAL_DB.Select([]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>&#125;).Find(&amp;result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012341269.png" alt="image-20221001234110193"></p><p>这时其他的字段都没有获取到，全是零值</p><hr><h2 id="智能选择字段">智能选择字段</h2><p>使用你想要的字段定义结构体，然后用它来收集结果</p><p>因为无法得知原始模型，所以需要加上 <code>Model()</code> 方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SampleUser <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">uint8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindUser</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result []SampleUser</span><br><span class="line">GLOBAL_DB.Model(&amp;User&#123;&#125;).Find(&amp;result)</span><br><span class="line"></span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012348931.png" alt="image-20221001234814825"></p><p>这样就很简洁了</p><hr><h2 id="Limit-Offset">Limit &amp; Offset</h2><p>这个很简单，直接用，不懂的去<a href="https://gorm.io/zh_CN/docs/query.html#Limit-amp-Offset">看文档</a>吧</p><hr><h2 id="排序">排序</h2><p>这个也看文档吧</p><hr><h1 id="更新">更新</h1><blockquote><p>官方文档：<a href="https://gorm.io/zh_CN/docs/update.html">https://gorm.io/zh_CN/docs/update.html</a></p></blockquote><p>更新的话只是把上面查找的方法全变成更新的方法</p><p>等于就是选中集合，上面最后是查找，但是现在是更新</p><h2 id="Update"><code>Update()</code></h2><p>只更新你选择的字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;张三&quot;</span>).Update(<span class="string">&quot;age&quot;</span>, <span class="number">19</span>)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210021044704.png" alt="image-20221002104439580"></p><hr><h2 id="Save"><code>Save()</code></h2><p>将查询的结果先暂存，更改后再提交</p><p>无论如何都会更新，包括零值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result User</span><br><span class="line">GLOBAL_DB.First(&amp;result)</span><br><span class="line">result.Age = <span class="number">20</span></span><br><span class="line">GLOBAL_DB.Save(&amp;result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210021048725.png" alt="image-20221002104814617"></p><p>可以更改多行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result []User</span><br><span class="line">GLOBAL_DB.Find(&amp;result)</span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> result &#123;</span><br><span class="line">result[k].Age = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">GLOBAL_DB.Save(&amp;result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210021050627.png" alt="image-20221002105014532"></p><hr><h2 id="Updates"><code>Updates()</code></h2><p>更新所有字段，有两种形式</p><h3 id="Struct">Struct</h3><p>若使用结构体，零值不参与更新</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result User</span><br><span class="line">GLOBAL_DB.First(&amp;result).Updates(User&#123;Name: <span class="string">&quot;李四&quot;</span>, Age: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><p>本来是可以同时更新两个列的，但是因为 0 是整型的零值，所以不会更新 Age</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210021059845.png" alt="image-20221002105913748"></p><h3 id="Map">Map</h3><p>但是如果使用 Map，即使是零值也会更新</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result User</span><br><span class="line">GLOBAL_DB.First(&amp;result).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210021102175.png" alt="image-20221002110215104"></p><p>如果要同时更新多行，只需将结果集变成切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result []User</span><br><span class="line">GLOBAL_DB.Find(&amp;result, []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210021104056.png" alt="image-20221002110430962"></p><hr><h1 id="删除">删除</h1><blockquote><p>官方文档：<a href="https://gorm.io/zh_CN/docs/delete.html">https://gorm.io/zh_CN/docs/delete.html</a></p></blockquote><p>删除只有 <code>Delete()</code> 一个方法，默认是软删除（仅写入 <code>delete_at</code> 字段）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;&quot;</span>).Delete(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure><p>删除所有名字为空的记录</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210021112338.png" alt="image-20221002111231247"></p><p>如果想要硬删除，可以加上 <code>Unscoped()</code> 方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Unscoped().Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;&quot;</span>).Delete(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210021114712.png" alt="image-20221002111423619"></p><hr><h1 id="原生SQL">原生SQL</h1><blockquote><p>官方文档：<a href="https://gorm.io/zh_CN/docs/sql_builder.html">https://gorm.io/zh_CN/docs/sql_builder.html</a></p></blockquote><p>若要使用原生 SQL 查询 ，末尾只能为 <code>Scan()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result User</span><br><span class="line">GLOBAL_DB.Raw(<span class="string">&quot;select * from users where id = ?&quot;</span>, <span class="number">4</span>).Scan(&amp;result)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210021124256.png" alt="image-20221002112411160"></p><hr><h1 id="错误检查">错误检查</h1><p>对于可能产生错误的语句，应当始终进行错误检查</p><p>例如按照不存在的主键进行查询</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbRes := GLOBAL_DB.First(&amp;result, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012241250.png" alt="image-20221001224153168"></p><p>它的结果会是空，然后返回 <code>record not found</code> 错误</p><p>业务中会将拿到的错误与 GORM 中预定义的错误进行比较，就像下面这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">errors.Is(dbRes.Error, gorm.ErrRecordNotFound)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210012245429.png" alt="image-20221001224537348"></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> GORM 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GORM </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM 入门笔记（四）模型创建与关键标签</title>
      <link href="/2022/10/01/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%85%B3%E9%94%AE%E6%A0%87%E7%AD%BE/"/>
      <url>/2022/10/01/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%85%B3%E9%94%AE%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是模型">什么是模型</h1><p>来自<a href="https://gorm.io/zh_CN/docs/models.html">官方文档</a>：</p><p>模型是标准的 struct，由 Go 的基本数据类型、实现了 Scanner 和 Valuer 接口的自定义类型及其指针或别名组成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID           <span class="type">uint</span></span><br><span class="line">  Name         <span class="type">string</span></span><br><span class="line">  Email        *<span class="type">string</span></span><br><span class="line">  Age          <span class="type">uint8</span></span><br><span class="line">  Birthday     *time.Time</span><br><span class="line">  MemberNumber sql.NullString</span><br><span class="line">  ActivatedAt  sql.NullTime</span><br><span class="line">  CreatedAt    time.Time</span><br><span class="line">  UpdatedAt    time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于模型内的指针类型，简单地说就是有指针应当对应可以为 NULL ，请看<a href="https://stackoverflow.com/questions/68595760/difference-in-string-and-string-in-gorm-model-declaration?answertab=createdasc#tab-top">这篇</a></p><hr><h1 id="模型有什么用">模型有什么用</h1><p>是 gorm 进行各种操作的基础</p><p>一个书写良好的模型会让你对数据库的操作事半功倍</p><hr><h1 id="模型定义的关键点">模型定义的关键点</h1><h2 id="约定">约定</h2><p>GORM 倾向于约定，而不是配置。默认情况下，GORM 使用 <code>ID</code> 作为主键，使用结构体名的 <code>蛇形复数</code> 作为表名，字段名的 <code>蛇形</code> 作为列名，并使用 <code>CreatedAt</code>、<code>UpdatedAt</code> 字段追踪创建、更新时间</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210011130462.png" alt="image-20221001113052392"></p><blockquote><p>使用上面的模型建表，id 自动成为主键</p></blockquote><h2 id="gorm-Model"><code>gorm.Model</code></h2><p>这是 GORM 预定义的一个模型，方便使用的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gorm.Model 的定义</span></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">uint</span>           <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  CreatedAt time.Time</span><br><span class="line">  UpdatedAt time.Time</span><br><span class="line">  DeletedAt gorm.DeletedAt <span class="string">`gorm:&quot;index&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌入结构体">嵌入结构体</h2><h3 id="以匿名结构体">以匿名结构体</h3><p>结构体直接是可以直接嵌入的，先看匿名的情况</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">   gorm.Model  <span class="comment">// 使用匿名结构体形式</span></span><br><span class="line">   Name  <span class="type">string</span></span><br><span class="line">   Email *<span class="type">string</span></span><br><span class="line">   Age   <span class="type">uint8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就等于把 <code>gorm.Model</code> 直接平铺进里面</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210011143460.png" alt="image-20221001114322411"></p><h3 id="非匿名结构体">非匿名结构体</h3><p>而如果要实现层级结构的话（这里指的是在 go 中），就不能匿名</p><p>并且加上嵌套字段的标签</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">UUID <span class="type">uint</span></span><br><span class="line">Time time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Model Model <span class="string">`gorm:&quot;embedded&quot;`</span></span><br><span class="line">Name  <span class="type">string</span></span><br><span class="line">Email *<span class="type">string</span></span><br><span class="line">Age   <span class="type">uint8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且你会发现这样创出来是没有主键的，下面将介绍标签，并使用标签将 UUID 设为主键</p><h2 id="标签">标签</h2><p>标签是用反引号括起来的，里面可以定义一些属性</p><p>常用的标签有</p><ul><li>column</li><li>primaryKey</li><li>unique</li><li>default</li><li>precision</li><li>size</li><li>not null</li><li>index</li><li>comment</li><li>…</li></ul><p>还有一些是和权限，关联相关的，后面再讲</p><hr><p>示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">UUID <span class="type">uint</span>      <span class="string">`gorm:&quot;primary_key&quot;`</span></span><br><span class="line">Time time.Time <span class="string">`gorm:&quot;column:my_time&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Model Model   <span class="string">`gorm:&quot;embedded;embeddedPrefix:this_is_a_prefix_&quot;`</span> <span class="comment">// 添加两个标签</span></span><br><span class="line">Name  <span class="type">string</span>  <span class="string">`gorm:&quot;default:&#x27;test&#x27;&quot;`</span></span><br><span class="line">Email *<span class="type">string</span> <span class="string">`gorm:&quot;not null&quot;`</span></span><br><span class="line">Age   <span class="type">uint8</span>   <span class="string">`gorm:&quot;comment:&#x27;年龄&#x27;&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210011207100.png" alt="image-20221001120723039"></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> GORM 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GORM </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM 入门笔记（三）基本表操作</title>
      <link href="/2022/09/30/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E6%9C%AC%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/09/30/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E6%9C%AC%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>ORM 是把结构和数据库表创建一个映射，所以我们先建一个结构体（也就是模型，这个后面详细讲）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个只有一个字段的结构体</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="使用-AutoMigrate-自动迁移-建表">使用 AutoMigrate 自动迁移/建表</h1><p>尝试使用 <code>db.AutoMigrate()</code> 方法自动创建表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err = db.AutoMigrate(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure><p>再次观察，发现多了个叫 <code>t_user</code> 的表</p><p><img src="/home/nx/.config/Typora/typora-user-images/image-20221001085158626.png" alt="image-20221001085158626"></p><p>为什么会多前缀呢？这是在创建连接的时候，在 <code>gorm.Config</code> 中预设的</p><p>类似地还可以有单复数后缀</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NamingStrategy: schema.NamingStrategy&#123;</span><br><span class="line">TablePrefix:   <span class="string">&quot;t_&quot;</span>, <span class="comment">// 表名前缀，`User` 的表名应该是 `t_users`</span></span><br><span class="line">SingularTable: <span class="literal">true</span>, <span class="comment">// 使用单数表名，启用该选项，此时，`User` 的表名应该是 `t_user`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其设置为 <code>false</code> 再次执行，新建表的命名格式是复数</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210010856817.png" alt="image-20221001085625780"></p><hr><h1 id="使用-Migrator-接口">使用 Migrator 接口</h1><p>GORM 提供了 <a href="https://gorm.io/zh_CN/docs/migration.html#Migrator-%E6%8E%A5%E5%8F%A3">Migrator 接口</a>，我们可以直接使用这个接口来操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Migrator <span class="keyword">interface</span> &#123;</span><br><span class="line">  <span class="comment">// AutoMigrate</span></span><br><span class="line">  AutoMigrate(dst ...<span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Database</span></span><br><span class="line">  CurrentDatabase() <span class="type">string</span></span><br><span class="line">  FullDataTypeOf(*schema.Field) clause.Expr</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Tables</span></span><br><span class="line">  CreateTable(dst ...<span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span></span><br><span class="line">  DropTable(dst ...<span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span></span><br><span class="line">  HasTable(dst <span class="keyword">interface</span>&#123;&#125;) <span class="type">bool</span></span><br><span class="line">  RenameTable(oldName, newName <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span></span><br><span class="line">  GetTables() (tableList []<span class="type">string</span>, err <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Columns</span></span><br><span class="line">  AddColumn(dst <span class="keyword">interface</span>&#123;&#125;, field <span class="type">string</span>) <span class="type">error</span></span><br><span class="line">  DropColumn(dst <span class="keyword">interface</span>&#123;&#125;, field <span class="type">string</span>) <span class="type">error</span></span><br><span class="line">  AlterColumn(dst <span class="keyword">interface</span>&#123;&#125;, field <span class="type">string</span>) <span class="type">error</span></span><br><span class="line">  MigrateColumn(dst <span class="keyword">interface</span>&#123;&#125;, field *schema.Field, columnType ColumnType) <span class="type">error</span></span><br><span class="line">  HasColumn(dst <span class="keyword">interface</span>&#123;&#125;, field <span class="type">string</span>) <span class="type">bool</span></span><br><span class="line">  RenameColumn(dst <span class="keyword">interface</span>&#123;&#125;, oldName, field <span class="type">string</span>) <span class="type">error</span></span><br><span class="line">  ColumnTypes(dst <span class="keyword">interface</span>&#123;&#125;) ([]ColumnType, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Constraints</span></span><br><span class="line">  CreateConstraint(dst <span class="keyword">interface</span>&#123;&#125;, name <span class="type">string</span>) <span class="type">error</span></span><br><span class="line">  DropConstraint(dst <span class="keyword">interface</span>&#123;&#125;, name <span class="type">string</span>) <span class="type">error</span></span><br><span class="line">  HasConstraint(dst <span class="keyword">interface</span>&#123;&#125;, name <span class="type">string</span>) <span class="type">bool</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Indexes</span></span><br><span class="line">  CreateIndex(dst <span class="keyword">interface</span>&#123;&#125;, name <span class="type">string</span>) <span class="type">error</span></span><br><span class="line">  DropIndex(dst <span class="keyword">interface</span>&#123;&#125;, name <span class="type">string</span>) <span class="type">error</span></span><br><span class="line">  HasIndex(dst <span class="keyword">interface</span>&#123;&#125;, name <span class="type">string</span>) <span class="type">bool</span></span><br><span class="line">  RenameIndex(dst <span class="keyword">interface</span>&#123;&#125;, oldName, newName <span class="type">string</span>) <span class="type">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CreateTable-创建表"><code>CreateTable()</code> 创建表</h2><p>尝试一下代码，可以起到一样的作用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">M := db.Migrator()</span><br><span class="line">err = M.CreateTable(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210010907143.png" alt="image-20221001090705037"></p><h2 id="HasTable-是否存在表"><code>HasTable()</code> 是否存在表</h2><p>调用 <code>HasTable()</code> 方法即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">M := db.Migrator()</span><br><span class="line">fmt.Println(M.HasTable(&amp;User&#123;&#125;))</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210010917007.png" alt="image-20221001091701936"></p><p>这里还可以以表名的形式去查</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">M := db.Migrator()</span><br><span class="line">fmt.Println(M.HasTable(<span class="string">&quot;t_users&quot;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202210010912131.png" alt="image-20221001091222050"></p><h2 id="DropTable-删除表"><code>DropTable()</code> 删除表</h2><p>这个也很简单易懂，并且同时支持结构体和表名的表示法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">M := db.Migrator()</span><br><span class="line">fmt.Println(M.DropTable(&amp;User&#123;&#125;))</span><br><span class="line"><span class="comment">// 或者是</span></span><br><span class="line">fmt.Println(M.DropTable(<span class="string">&quot;t_users&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="RenameTable-重命名表"><code>RenameTable()</code> 重命名表</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Migrator().RenameTable(&amp;User&#123;&#125;, &amp;UserInfo&#123;&#125;)</span><br><span class="line">db.Migrator().RenameTable(<span class="string">&quot;users&quot;</span>, <span class="string">&quot;user_infos&quot;</span>) </span><br></pre></td></tr></table></figure><p>但是你使用表名重命名了之后就无法操纵这个表了，所以还是建议使用结构体的方式</p><hr><p>其他方法可以去看文档，关于列的，关于约束，的关于索引的</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> GORM 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GORM </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM 入门笔记（二）创建数据库连接</title>
      <link href="/2022/09/30/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
      <url>/2022/09/30/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>官方文档：<a href="https://gorm.io/zh_CN/docs/connecting_to_the_database.html">https://gorm.io/zh_CN/docs/connecting_to_the_database.html</a></p></blockquote><h1 id="最简单的连接方法">最简单的连接方法</h1><p>通过一行 <code>DSN</code> 连接</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dsn := <span class="string">&quot;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">dsn := <span class="string">&quot;root:1234@tcp(127.0.0.1:3306)/gorm_learning?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">fmt.Println(db, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209301747260.png" alt="image-20220930174718178"></p><p>可见没有返回错误</p><hr><h1 id="配置连接参数">配置连接参数</h1><p><code>gorm.Open()</code> 方法有两个参数，分别可以对数据库和 GORM 进行更高级的配置</p><h2 id="mysql-Config"><code>mysql.Config</code></h2><p>这样可以设置一些高级配置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db, err := gorm.Open(mysql.New(mysql.Config&#123;</span><br><span class="line">  DSN: <span class="string">&quot;gorm:gorm@tcp(127.0.0.1:3306)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>, <span class="comment">// DSN data source name</span></span><br><span class="line">  DefaultStringSize: <span class="number">256</span>, <span class="comment">// string 类型字段的默认长度</span></span><br><span class="line">  DisableDatetimePrecision: <span class="literal">true</span>, <span class="comment">// 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持</span></span><br><span class="line">  DontSupportRenameIndex: <span class="literal">true</span>, <span class="comment">// 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引</span></span><br><span class="line">  DontSupportRenameColumn: <span class="literal">true</span>, <span class="comment">// 用 `change` 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列</span></span><br><span class="line">  SkipInitializeWithVersion: <span class="literal">false</span>, <span class="comment">// 根据当前 MySQL 版本自动配置</span></span><br><span class="line">&#125;), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure><p>更多的可以配置的项目可以点进去看源码，或者去看文档</p><h2 id="gorm-Config"><code>gorm.Config</code></h2><p>这个自己去看<a href="https://gorm.io/zh_CN/docs/gorm_config.html">官方文档</a>吧，感觉还是挺详细的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">  SkipDefaultTransaction   <span class="type">bool</span></span><br><span class="line">  NamingStrategy           schema.Namer</span><br><span class="line">  Logger                   logger.Interface</span><br><span class="line">  NowFunc                  <span class="function"><span class="keyword">func</span><span class="params">()</span></span> time.Time</span><br><span class="line">  DryRun                   <span class="type">bool</span></span><br><span class="line">  PrepareStmt              <span class="type">bool</span></span><br><span class="line">  DisableNestedTransaction <span class="type">bool</span></span><br><span class="line">  AllowGlobalUpdate        <span class="type">bool</span></span><br><span class="line">  DisableAutomaticPing     <span class="type">bool</span></span><br><span class="line">  DisableForeignKeyConstraintWhenMigrating <span class="type">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较重点的有命名策略，这个可以更改你创建的表名，增加些前缀后缀什么的</p><p>然后还有最后一个 <code>DisableForeignKeyConstraintWhenMigrating</code> 是否要跳过外键约束，这个建议跳过</p><p>因为这个交给数据库检查的话代价很高，建议自己在代码逻辑自动体现外键关系（逻辑外键）</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm/schema&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db, err := gorm.Open(mysql.New(mysql.Config&#123;</span><br><span class="line">DSN:                       <span class="string">&quot;root:1234@tcp(127.0.0.1:3306)/gorm_learning?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>, <span class="comment">// DSN data source name</span></span><br><span class="line">DefaultStringSize:         <span class="number">191</span>,                                                                                    <span class="comment">// string 类型字段的默认长度</span></span><br><span class="line">DisableDatetimePrecision:  <span class="literal">true</span>,                                                                                   <span class="comment">// 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持</span></span><br><span class="line">DontSupportRenameIndex:    <span class="literal">true</span>,                                                                                   <span class="comment">// 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引</span></span><br><span class="line">DontSupportRenameColumn:   <span class="literal">true</span>,                                                                                   <span class="comment">// 用 `change` 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列</span></span><br><span class="line">SkipInitializeWithVersion: <span class="literal">false</span>,                                                                                  <span class="comment">// 根据当前 MySQL 版本自动配置</span></span><br><span class="line">&#125;),前 *gorm.DB 返回一个通 &amp;gorm.Config&#123;</span><br><span class="line">NamingStrategy: schema.NamingStrategy&#123;</span><br><span class="line">TablePrefix:   <span class="string">&quot;t_&quot;</span>, <span class="comment">// 表名前缀，`User` 的表名应该是 `t_users`</span></span><br><span class="line">SingularTable: <span class="literal">true</span>, <span class="comment">// 使用单数表名，启用该选项，此时，`User` 的表名应该是 `t_user`</span></span><br><span class="line">&#125;,</span><br><span class="line">DisableForeignKeyConstraintWhenMigrating: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(db, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="使用连接池">使用连接池</h1><p>与数据库连接时可以使用连接池，关于连接池可以看这篇 <a href="https://blog.csdn.net/qq_39384184/article/details/103954821">Golang 侧数据库连接池原理和参数调优</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sqlDB, err := db.DB()</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetMaxIdleConns 设置空闲连接池中连接的最大数量</span></span><br><span class="line">sqlDB.SetMaxIdleConns(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetMaxOpenConns 设置打开数据库连接的最大数量。</span></span><br><span class="line">sqlDB.SetMaxOpenConns(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetConnMaxLifetime 设置了连接可复用的最大时间。</span></span><br><span class="line">sqlDB.SetConnMaxLifetime(time.Hour)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 gorm db，其他包调用此方法即可拿到 db</span></span><br><span class="line"><span class="comment">// 无需担心不同协程并发时使用这个 db 对象会公用一个连接，因为 db 在调用其方法时候会从数据库连接池获取新的连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDB</span><span class="params">()</span></span> *gorm.DB &#123;</span><br><span class="line">  <span class="keyword">return</span> db</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> GORM 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GORM </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM 入门笔记（一）前言与介绍</title>
      <link href="/2022/09/30/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E8%A8%80%E4%B8%8E%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/09/30/GORM-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E8%A8%80%E4%B8%8E%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><hr><h1 id="什么是-ORM">什么是 ORM</h1><p>教科书上的废话：</p><blockquote><p>ORM 是通过使用描述对象和数据库之间映射的元数据，将程序中的对象与数据库相互映射</p></blockquote><p>人话：</p><blockquote><p>ORM 让你的数据库里面的表结果变成你代码定义的数据结构（go 中的结构体的结构）</p><p>从而做到代码结构即为数据库结构，代码行为即为数据库行为</p></blockquote><hr><h1 id="为什么选择-GORM">为什么选择 GORM</h1><ol><li>作者中国人（张金柱哇，我听过他的课）</li><li>中文文档</li><li>功能全面，符合新开发习惯</li><li>稳定</li><li>…</li></ol><hr><h1 id="如何安装">如何安装</h1><p>见官方文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -u gorm.io/gorm</span><br><span class="line">go get -u gorm.io/driver/mysql <span class="comment"># 或其他数据库驱动</span></span><br></pre></td></tr></table></figure><hr><h1 id="在本地准备学习环境">在本地准备学习环境</h1><p>这里以 MySQL 示例，准备一个练习用的数据库</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209301732258.png" alt="image-20220930173156167"></p><p>可见已经创建完毕</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> GORM 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GORM </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『总结』2022 国庆前阶段性总结</title>
      <link href="/2022/09/29/%E3%80%8E%E6%80%BB%E7%BB%93%E3%80%8F2022%20%E5%9B%BD%E5%BA%86%E5%89%8D%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/"/>
      <url>/2022/09/29/%E3%80%8E%E6%80%BB%E7%BB%93%E3%80%8F2022%20%E5%9B%BD%E5%BA%86%E5%89%8D%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>嗯，明天早八，要早点睡，也不分标题了吧，想到哪就写到哪</p><p>首先就是这学期的规划，我在开学初的时候计划在大二把 408 四门学完</p><p>有些大佬劝我不用那么着急，我现在感觉也是</p><p>抛开一堆有意义或没有意义的课不谈，现在发现其实有一些更重要的事情需要去做</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209300053083.png" alt="image-20220930005346944"></p><blockquote><p>例如我目前正在负责的面试系统项目</p></blockquote><p>然后需要学一堆框架以及相关知识，<code>go-zero</code>、<code>Gorm</code>、<code>JWT</code> 等等等</p><p>然后这个肯定是重点哇，属于 <code>紧急且重要</code> 的事情，而 408 只能被归类为 <code>不紧急但重要</code></p><p>我原本计划是上学期把数据结构和计网搞定，现在只能尽量按下面的计划了</p><p>本学期：</p><ul><li>通过面试系统积累项目经验，并学习几个框架</li><li>把 Go 的系列更完，完整地系统地过一遍</li><li>搞定数据结构</li></ul><p>然后计网安排给寒假</p><hr><p>然后是，日更！日更哇！</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209300100215.png" alt="image-20220930010030185"></p><blockquote><p>我现在这个样还怎么跟别人说自己是个日更博主捏</p></blockquote><p>一定要日更哇！不要想着某一天能爆发更个几篇，日更就完了！</p><p>最近的面试招新工作，以及新项目，有点打乱我的节奏</p><p>这个国庆赶紧调养，一定要日更</p><hr><p>前几天看了看 <code>go-zero</code> ，本来是想搞一个系列的</p><p>但是又发现官方文档挺抽象的，很多东西都没交待清楚</p><p>我都没有学懂，还写个der</p><p>（这东西挺强大的，但是没有什么好的系统性的教程</p><p>接下来准备把 GORM 整一系列出来，接着是 Golang 的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209300104387.png" alt="image-20220930010451186"></p><blockquote><p>就这样吧，赶紧睡觉</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔与总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Linux』如何添加路径到 PATH</title>
      <link href="/2022/09/28/%E3%80%8ELinux%E3%80%8F%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84%E5%88%B0-PATH/"/>
      <url>/2022/09/28/%E3%80%8ELinux%E3%80%8F%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84%E5%88%B0-PATH/</url>
      
        <content type="html"><![CDATA[<p>使用以下命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:&lt;你的路径&gt;&quot;</span></span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/home/nx/go/bin&quot;</span></span><br></pre></td></tr></table></figure><p>一定要使用完整的绝对路径</p><p>如果要持久化的话，可以编辑 <code>~/.bashrc</code> 文件，并添加到末尾</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209280923884.png" alt="image-20220928092256757"></p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『hduhelp』如何使用助手鉴权/使用助手的开放服务</title>
      <link href="/2022/09/28/%E3%80%8Ehduhelp%E3%80%8F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8A%A9%E6%89%8B%E7%9A%84%E5%BC%80%E6%94%BE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/09/28/%E3%80%8Ehduhelp%E3%80%8F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8A%A9%E6%89%8B%E7%9A%84%E5%BC%80%E6%94%BE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209282111563.png" alt="image-20220928211141429"></p><blockquote><p>官方文档：<a href="https://open.hduhelp.com/docs/develop/">https://open.hduhelp.com/docs/develop/</a></p><p>因为官方文档写得有些抽象，鄙人搞懂之后特作此文以记录</p><p>PS：全程使用 <code>https</code></p></blockquote><h1 id="申请票据">申请票据</h1><p>首先，作为第三方软件，在助手许可后你是可以调用助手的api的</p><p>助手方面会提供给你一对字符串密钥</p><table><thead><tr><th>名称</th><th>票据</th></tr></thead><tbody><tr><td><code>client_id</code></td><td>用于识别服务提供方的 id</td></tr><tr><td><code>client_secret</code></td><td>用于证明服务方身份的密钥</td></tr></tbody></table><h1 id="获取-access-token">获取 <code>access_token</code></h1><p>这个要一来二去搞两回，有点麻烦</p><p>首先，你要构造一个发起请求的 URL ，然后让用户在浏览器中访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.hduhelp.com/oauth/authorize?response_type=code&amp;client_id=[提供的clientID]&amp;redirect_uri=[callback对应的url]&amp;state=[您自己生成的state]</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209282135562.png" alt="image-20220928213535508"></p><blockquote><p>自己替换成实际的字符串就行，不用带括号</p></blockquote><ul><li><code>redirect_Url</code> 指的是在助手那边鉴权成功后跳转的路由，下面以 <code>http://localhost</code> 为例</li><li><code>state</code> 是你自己生成的，据说是用来防 CSRF 的，但我好像没看出来是怎么防的</li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209282141187.png" alt="image-20220928214116110"></p><blockquote><p><s>什么老王八蛋哇，@eson</s></p></blockquote><p>之后就跳转到统一身份认证平台</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209282146599.png" alt="image-20220928214644235"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209282148738.png" alt="image-20220928214852626"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209282149806.png" alt="image-20220928214908696"></p><p>最后重定向到你的后台 URL ，并且可以看见还附带了 <code>code</code> 和 <code>state</code> 两个参数</p><p>现在你才能去请求 <code>access_token</code></p><p>构造一个 GET 请求，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.hduhelp.com/oauth/token?client_id=[提供的clientID]&amp;client_secret=[提供的client_secret]&amp;grant_type=authorization_code&amp;code=[callback中获取的code]&amp;state=[callback中获取的state]</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209282153479.png" alt="image-20220928215345432"></p><p>是不是很麻烦？麻烦就对了，再拿这个去申请 <code>access_token</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209282216358.png" alt="image-20220928221652252"></p><p>现在就拿到手了</p><h1 id="调用-API">调用 API</h1><p>拿到 <code>access_token</code> 之后，我们就可以去调用 API 了，比如这个校园时间的</p><p>只需要在 HTTP 上添加 <code>Authorization</code> 头来进行鉴权，值为 <code>token [access_token]</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209282222864.png" alt="image-20220928222257749"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hduhelp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 go-zero 的简单上手笔记</title>
      <link href="/2022/09/27/%E5%85%B3%E4%BA%8E%20go-zero%20%E7%9A%84%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/27/%E5%85%B3%E4%BA%8E%20go-zero%20%E7%9A%84%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>前几天简单上手了一下 <code>go-zero</code> 框架，去官网看了下文档，然后网上的博客，还有 B 站的视频，还有助手的项目，有了一些了解</p><p>这东西其实就是一个全自动的 web 和 RPC 框架，你只需要关注于设计，还有你的业务代码就好了，其他的 go-zero 都能帮你搞定</p><p>这东西你首先需要定义私有格式的 api 文件，这东西能很好的定义你的服务，即使直接交给前端，前端都能看懂</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">type (</span><br><span class="line">    LoginReq &#123;</span><br><span class="line">        Username string `json:&quot;username&quot;`</span><br><span class="line">        Password string `json:&quot;password&quot;`</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LoginReply &#123;</span><br><span class="line">        Id           int64 `json:&quot;id&quot;`</span><br><span class="line">        Name         string `json:&quot;name&quot;`</span><br><span class="line">        Gender       string `json:&quot;gender&quot;`</span><br><span class="line">        AccessToken  string `json:&quot;accessToken&quot;`</span><br><span class="line">        AccessExpire int64 `json:&quot;accessExpire&quot;`</span><br><span class="line">        RefreshAfter int64 `json:&quot;refreshAfter&quot;`</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">service user-api &#123;</span><br><span class="line">    @handler login</span><br><span class="line">    post /user/login (LoginReq) returns (LoginReply)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉就跟 proto 很像，然后就很清晰明了</p><p>之后只需要一行命令，就能自动把整个路由哇，控制器哇，什么的方法函数都创建出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ tree greet</span><br><span class="line">greet</span><br><span class="line">├── etc</span><br><span class="line">│   └── greet-api.yaml</span><br><span class="line">├── greet.api</span><br><span class="line">├── greet.go</span><br><span class="line">└── internal</span><br><span class="line">    ├── config</span><br><span class="line">    │   └── config.go</span><br><span class="line">    ├── handler</span><br><span class="line">    │   ├── greethandler.go</span><br><span class="line">    │   └── routes.go</span><br><span class="line">    ├── logic</span><br><span class="line">    │   └── greetlogic.go</span><br><span class="line">    ├── svc</span><br><span class="line">    │   └── servicecontext.go</span><br><span class="line">    └── types</span><br><span class="line">        └── types.go</span><br></pre></td></tr></table></figure><p>然后你就去填写里面空白的方法函数就行了</p><p>然后这东西也可以搞微服务的，使用 RPC 交流，但是我暂时没看，先把单体服务搞熟悉吧</p><p>然后就是这东西目前没有一个好的系统的教学，官方文档有些抽象，然后官方教学视频条理也不够清晰</p><p>我目前暂时就是逛官方文档吧，把里面的 demo 都跑了</p><p>然后就是在看助手的项目，那个社团招新系统，就这样吧</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> go-zero 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> go-zero </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Linux』Ubuntu 编辑开始菜单</title>
      <link href="/2022/09/25/%E3%80%8ELinux%E3%80%8FUbuntu-%E7%BC%96%E8%BE%91%E5%BC%80%E5%A7%8B%E8%8F%9C%E5%8D%95/"/>
      <url>/2022/09/25/%E3%80%8ELinux%E3%80%8FUbuntu-%E7%BC%96%E8%BE%91%E5%BC%80%E5%A7%8B%E8%8F%9C%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>事情的起因是这样的，我在 Ubuntu 22.04 上装了 Apifox，但是我没法正常启动</p><p>然后搜了一下，并且和客服确认了，只需要需要加上一个 <code>--no-sandbox</code> 参数</p><p>然后就可以正常启动</p><p>但是开始菜单里面的是不带这个参数的，我不可能每次都手动从命令行启动吧</p><p>然后自然就是想修改开始菜单</p><p>然后你去百度的话，都会让你使用一个加做 <code>alacarte</code> 的东西</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209252210646.png" alt="image-20220925221027503"></p><blockquote><p>不得不说，中文互联网环境真的是糟透了</p></blockquote><p>但是这东西，实际上我用的时候会报错，根本没法用</p><p>后来谷歌到了一个类似的软件叫 <code>menulibre</code> ，这个是可以用的</p><p>直接用 <code>apt</code> 下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install menulibre</span><br></pre></td></tr></table></figure><p>开箱即用</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209252219979.png" alt="image-20220925221946903"></p><p>然后就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『随笔』面试官竟是我自己 —— 2022 杭助秋招面试工作感想</title>
      <link href="/2022/09/18/%E3%80%8E%E9%9A%8F%E7%AC%94%E3%80%8F2022-%E6%9D%AD%E5%8A%A9%E6%8B%9B%E6%96%B0%E9%9D%A2%E8%AF%95%E6%84%9F%E6%83%B3/"/>
      <url>/2022/09/18/%E3%80%8E%E9%9A%8F%E7%AC%94%E3%80%8F2022-%E6%9D%AD%E5%8A%A9%E6%8B%9B%E6%96%B0%E9%9D%A2%E8%AF%95%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p><s>虎头蛇尾地写完了，哪里写的不好请速速敲打我</s></p><hr><h1 id="前情提要">前情提要</h1><p>来杭助一年了，从来没觉得自己有多大能耐</p><p>鄙人平时也没做多少事，也就是改改配置文件，天天水群，然后业务代码也没怎么动过，Golang 也还没系统地学完（事情有点小多），项目经验大头是参加的两次字节跳动青训营</p><p><s>但就是我这个菜鸡，今年居然去当面试官了</s></p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209222130728.png" alt="image-20220922213024583" style="zoom:50%;" /><blockquote><p>哈？我可以去当面试官了？？？</p></blockquote><p>嗯？就挺突然的，一年时间居然过得这么快，我甚至都有些恍惚</p><p>我能面吗？面不了！没这个能力知道吗？？<s>我奉劝自己，务↑实↓一点！先把自己后端八股，面试的这个理念先搞懂（（</s></p><p>但是我想，这必定是一种很新奇的体验吧，应该能收获许多，为何不去？</p><p><s>（事实也证明我收获颇丰，不然我也不会在写这篇博客了）</s></p><p>进上课啦看一眼课表，行，没毛病，干就完了！</p><p>没想到，面试官竟是我自己</p><hr><h1 id="大致经过">大致经过</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209222207943.png" alt="image-20220922220710869"></p><blockquote><p>面试前一晚，群内的公告</p><p>因为考虑到大一晚自习的因素，周日又增加了下午场</p></blockquote><h2 id="9月18日：人生第一次">9月18日：人生第一次</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209222358607.JPG" alt=""></p><blockquote><p>9月18日，星期天，上午按照安排我去参加了百团大战的摆摊，然后因为下午批的时间很赶，中午随便整了点零食吃，带上笔记本电脑就赶往 7 教了（记得去年鄙人也是在 7 教面试的）</p></blockquote><p>推开教室的门，看见一堆人都已经到了，毕竟 iyear 部长说有空都可以来围观</p><p>但是我记得上一届不是这样的，我面的时候只有几位面试官</p><p>我在前排的边边坐了下来，面试即将开始，我打开我的笔记本电脑，做好面试准备</p><hr><p>现在请允许鄙人介绍一下杭助技术部面试的大致流程，也就是你在参与本次面试的时候，你的面试官都在干什么</p><p>首先是面对面坐下，由一位面试官主持，做开场白，然后请各位依次自我介绍</p><p>随后，我们会进行提问，有对全体的提问，也有根据个人经历进行的针对性问题</p><p>其根本目的是想更多地了解应试者，具体了解个人基础，学习意愿与学习能力等</p><p>当然，其实也没那么紧张严肃，大概就像聊天的样子，面试过程其实还是挺愉快的，有时候我很享受面试的过程</p><p>最后，我们会有反向提问的环节，就是有什么问题想问杭助，或者关于杭助有什么信息想了解的，都可以问，我们都会认真解答，同时也能借此进一步了解应试者</p><p>那么，我们是如何完成对应试者的打分/评价的呢？</p><p>我们会有一个共享表格，里面是之前报名问卷中填写的信息，每人一行，以面试顺序排序</p><p>然后每个来面试/旁听的成员，都会在后面新增一列，在表头写上自己的名字</p><p>在面试时，我们会在群中实时沟通自己的想法，并把自己的评价填入表中，后面筛人的时候基本就靠这个表</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209222228578.png" alt="20220922222730"></p><blockquote><p>我们这次用的是腾讯文档，随后被证明是个及其错误的决定，这东西放后面再说</p></blockquote><hr><p>常理来说，应当是把第一排的桌椅反过来，让新人坐，然后第二排坐面试官，面对面交流</p><p>听上去很正常，不是吗？</p><p>但是真实的情况，是一种很恐怖的场景：</p><p>你作为 2022 级零基础新生，领头进入教室，然后看见快半个教室的人，全部安安静静的，每个人面前一台笔记本电脑，都在等着你坐下来</p><p><strong><s>寄！为什么这么多人（</s></strong></p><p>然后你坐下来，发现半个班的人都在面你，你还能淡定嘛？</p><p><s>（后来听说有女生真的受不住）</s></p><p>我只能对前面那两三批的人道个歉：这真的是我们的失误，毕竟我们也没想到会有这么多人来 <s>，而且鄙人也是第一次当面试官</s></p><p>其实第一批结束之后，我们就在讨论这个问题了，有人说可以反一下，让面试官坐第一排，然后应试者坐第二排，就只会看见一排面试官，压力不会太大</p><p>但是这就很离谱，我们基本都是靠前坐的，被两批人夹着坐在中间，那压力不更大？假如后面有人想提问，后面突然响起个声音，那不就更阴间了（</p><p>最后，我们讨论的结果是：反过来，然后其他人尽量往后坐</p><p>然后差不多就是这个样子，效果感觉还行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209222350118.png" alt="image-20220922235037810"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209231026171.JPG" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209222355729.jpeg" alt=""></p><blockquote><p>一般以 3 至 5 人为一组，面试的时候气氛还是很活跃的</p></blockquote><p>之后就一直按照这个标准执行了，第一天下午还是挺顺利的，就是非常累，一面完就赶紧回宿舍躺着了</p><hr><p>然后随便吃点东西继续去上晚班</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209231036662.jpeg" alt=""></p><blockquote><p>因为第二天是周一，所以晚上我们来的人就少了一些，当然后面下课之后也有很多人过来了</p></blockquote><p>第一天面的人是最多的，有项目经验很丰富的，有和我一样参加过算法竞赛的，有想考研的，也有想毕业后直接工作的，有对网安感兴趣的 <s>（建议出门右转 vidar ）</s> ，也有对硬件芯片有了解的，有打算毕业后去国企的，甚至还有已经拿到 offer 的······</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209231052602.JPG" alt=""></p><blockquote><p>所以说，做面试官，其实是一件很有意思的事情，你可以了解很多人和很多事，和那么多陌生人一起聊聊天，真的很有意思</p></blockquote><p>但是最多的，还是刚刚接触计算机，正在入门 C，Java 亦或是 Python ，对 Web 基本没有了解的小白</p><p>我们尽量为他们指点迷津，交流一些个人想法，甚至从四六级一直聊到职业规划</p><p>在某些人身上，我仿佛看见了过去的自己，谁又不是从一张白纸开始的呢？</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209231114735.jpeg" alt=""></p><blockquote><p>记得有一位，正在学习 C 语言的，我们问他最近学到哪里了，怎么学的，他问可以把电脑拿过来吗，然后他就拿过来了</p><p>当我看见 Dev-C++ 的时候，不禁想起了高一时的自己（虽然我现在早就不用也不推荐用这玩意了）</p></blockquote><p>杭助其实也不会歧视小白什么的，有基础的自然欢迎，而对于一张白纸这样的，主要考察自学能力，学习能力强的，后面小任务做得好的，也照样能进来</p><p>而且有些新生我其实挺羡慕的，比如说这天晚上最后的一批里面的 3 个 Java 哥</p><p>当我们问他们平时是如何学习一面新语言，或者新方向的知识的，他们都各自掏出了厚厚的一本 Java 书</p><p>而且是一模一样的 3 本（</p><p>然后我们才了解，这哥三原来是一个宿舍的，一起在学，然后一起过来面试，而且跟我是一个学院的</p><p>我真的好羡慕哇！虽然说他们现在也没什么基础，但是这就是梦中舍友，这一起学技术的氛围简直不要太吸引我，不像我宿舍，一点氛围都没有</p><p>杭助技术部其实就是一个学习交流的圈子，我也是被这种氛围吸引的，每天都会交流讨论很多问题</p><p>即是每天都是只是在水群，也能接触很多新名词</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209231154232.png" alt="image-20220923115444334"></p><blockquote><p>晚上 9 点的 NX</p></blockquote><hr><h2 id="9月19日：渐入佳境">9月19日：渐入佳境</h2><p>接下来就是第二天，晚上其实是有课的，但是面试这种东西嘛，必定是比上课重要的 <s>（而且那天晚上也不是很重要的课）</s></p><p>然后，等我到了的时候，我发现——</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209240001759.png" alt="image-20220924000138657"></p><blockquote><p>为什么没有人哇！</p></blockquote><p>我记得那时候也就来了三四个人，其实如果是 iyear 或者鸟鸟，或者 TS 的话那情况还好说，但是我发现来了的人就我一个是昨天也来了的，其他人一点面试经验都没有，甚至都不知道桌子椅子怎么摆，我只能在群里疯狂摇人</p><p>寄！</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209240017635.png" alt="image-20220924001752553"></p><blockquote><p>嗯，就挺突然的</p><p>我知道大概率是我要挑大梁了</p></blockquote><p>然后嘛，面试的时候自然是我来主持，我来开场</p><p>幸好我昨天来了，还算有些经验，还能撑得住场子</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209240024323.png" alt="image-20220924002455967"></p><blockquote><p><s>有没有一种可能，面试的时候你的面试官可能比你还紧张</s></p></blockquote><p>虽然不能说是非常成熟老练吧，但至少也不会支支吾吾的，啥话都说不出来</p><p><s>（就是有时候会忘记自己下一个想问什么问题）</s></p><p>搞了几轮下来，我感觉我也慢慢熟练了，我发现我原来也能做得很好</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209241112953.png" alt="image-20220924111203153"></p><blockquote><p>谢天谢地，后面人也慢慢多了起来，我的压力也就没那么大了</p></blockquote><p>这天开始就基本都是萌新了，我发现有基础的越往后就越少了</p><p>这也就出现了一个有点让我难受的问题：</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209241147369.png" alt="image-20220924114705298"></p><blockquote><p>同质化萌新，如何区分</p></blockquote><p>讲真，这天刚开始的时候有一组，也不是说歧视白纸什么的，但就是真的不知道怎么评价</p><p>你问他们个人的学习经历，每个人都说自己在跟着学校的课程学 C ，然后问学到哪里了哇，都说学到循环</p><p>然后问有没有自己的学习计划与进度，答案是基本没有</p><p>然后你就很难继续挖掘了，你总不能问博客和 GitHub 吧，那必然都是没有的，项目经历那更是零</p><p>我发现这一排都是一个样子——都是态度很好的，都是想学习的，都是白纸</p><p>然后来问你进助手的学习路线之类的，零基础肯定是先去学通 C 哇，但是 C 又和 Web 半毛钱关系都没有，就不知道该怎么回答最好（</p><p>最后就是感觉每个人身上挖掘不出什么特质，你没有理由让他进来，也没有理由把他筛掉（一面直接拒也太打击新生了）</p><p>怎么办？最后是先放进来再说了，再通过小任务做进一步区分，看看个人的学习热情和能力</p><p>但是当时面试的时候是真的有点尬，我都不知道问些什么好，也想不出有什么能有些区分度的好问题</p><hr><h2 id="9月20日：达成成就">9月20日：达成成就</h2><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209241732663.png" alt="image-20220924173247561" style="zoom:50%;" /><blockquote><p>嗯…20号，最后一晚了，我必定是要去的，有头有尾嘛</p><p>而且我想达成一个成就：每一个来技术部的，我都亲自面过</p></blockquote><p>来面试的人是越往后越少了，我记得这天晚上面了不超过 10 个</p><p>然后就是比较闲嘛，我记得面了几个人之后，就没人来了，要等个几十分钟后面才来人</p><p>于是就有一个问题，就是人太少了不好分组</p><p>比如说，来了两个人，那两个人一批明显也太少了哇 <s>（ iyear 说两个人就跟坐牢一样，氛围好不起来）</s> ，但是如果要再等后面的人，又不知道要等多久</p><p>然后呢，就有了内鬼这种神奇操作（</p><p><s>（就是面试官混在新人里面一起面试）</s></p><p>我记得最先搞这个的是周日的晚上 <s>（当时有一批甚至 5 个人混了 3 个内鬼进去</s></p><p>然后面试的时候就很乐嘛，非常容易笑场 <s>（一本正经地自我介绍，特别是孔姐自我介绍的时候，真的是非常地真实，一般人根本看不出是演的</s></p><p>我印象最深的居然是后面哪个内鬼提问，从杭助毕业之后薪资一般有多少？？</p><p>真的是乐死我了，我当时甚至差点笑场</p><p>······</p><p>就这样，我们把当天办公室已经联系过确认来了的都面完了</p><p>感觉已经没人来了，我们就把桌子摆回去，收摊走人了</p><p>但是就在我走到宿舍，已经上楼的时候</p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209242033389.png" alt="image-20220924203357202" style="zoom:50%;" /><blockquote><p>最后一个人来了（</p></blockquote><p>然后，就是飞奔回 7 教</p><p>重新摆桌子，打开电脑</p><p>非常熟练地面试</p><p>20 分钟后，2022 年的助手技术部秋招一面结束了</p><p>我完成了作为面试官的工作，并且，我能自豪地说：</p><p>每一个人想来杭助技术部的人，我都亲自面过了（据我所知貌似仅有我一人</p><p>这三天，我成长了多少呢？</p><p>说多也不多，说少也不少吧</p><p>但是至少，以后我再参加面试的时候，不会再那么紧张了</p><p>毕竟，我也曾是面试官</p><hr><h1 id="常见问答">常见问答</h1><p>为了方便准备下一届的面试工作，同时避免尬场，鄙人总结了本届的一些常见问答</p><p>作为面试官最常问的问题有：</p><ol><li>个人学习经历（计算机、Web方面）-&gt; 有没有blog/GitHub</li><li>个人学习新知识的方法/途径（新语言、新方向）</li><li>对助手的了解，为什么考虑助手</li><li>平时的爱好</li><li>除了跟学校的学习进度，最近有没有自学什么，怎么学，自学安排规划</li><li>有没有报名其他社团</li><li>大学规划（4年、毕业后）</li><li>希望杭助能提供什么，在杭助能收获什么</li><li>对于前后端的理解（干嘛的）</li><li>对前后端编程语言、技术的了解</li><li>有用过 git/GitHub 嘛，是用来干嘛的</li><li>研究生会不会比较忙？空闲时间多嘛</li><li>······</li></ol><p>应试者最常问的问题有：</p><ol><li>培养计划</li><li>助手有多少人</li><li>助手常用的前后端框架有哪些</li><li>杭助有专门的办公地点嘛</li><li>加入助手需要学习哪些知识</li><li>助手有娱乐/团建活动嘛</li><li>······</li></ol><hr><h1 id="不足之处">不足之处</h1><p>本届的面试工作是有很多不足之处的，我们部门的 slime 同学总结如下</p><ol><li>日程安排不直观</li><li>面试安排过程需要人短信手工通知</li><li>修改面试时间繁琐、流程不规范</li><li>面试通知传达不到位，没有官方的统合渠道</li><li>面试过程中，对于面试者的信息，面试官不能及时找到，评论格式不统一，集体排版观感较差</li><li>面试后，收集到的信息不方便进一步处理，筛选过程繁琐，没有备份、不安全</li><li>对于意料外的情况（比如临时添加的面试、面试者有情况没来）的处理能力弱，面试整体鲁棒性不强</li><li>面试信息来源较乱，没有统一的平台负责收集</li><li>不支持分权限管理</li><li>各部门的面试情况存在一定割裂感（或许不是个问题），在需要做出适当的审批与调整时，相关人员不能及时响应</li><li>面试官侧信息流较乱，事务信息难规范统一</li><li>面试相关信息无通知渠道（面试侧和面试官侧）</li></ol><p>我想说哇，其他的都不是重点，主要是腾讯文档实在是太辣鸡了，经常会出现评论窜行甚至数据丢失的情况</p><p>这对我们后面筛人造成了极大的困难，早知道就用飞书文档了</p><p>为了解决这一系列的问题，我们也正在行动</p><hr><h1 id="下一届">下一届</h1><p>了解到隔壁 vidar 有自己的系统来管理招新面试，我想杭助也需要有一个自己的面试系统，目前还在讨论之中</p><p>而且这也是一个锻炼我项目能力的好机会，鄙人还是挺期待的，希望明年我们就可以使用这个项目来管理我们的面试工作</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209242101575.png" alt="image-20220924210106487"></p><blockquote><p>仓库我已经建好了，敬请期待哦！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔与总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法拾遗』常见的位运算操作</title>
      <link href="/2022/09/17/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/09/17/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>功能</th><th>示例</th><th>位运算</th></tr></thead><tbody><tr><td>去掉最后一位</td><td>1011101-&gt;10110</td><td>x &gt;&gt; 1</td></tr><tr><td>在最后加一个0</td><td>1011101-&gt;1011010</td><td>x &lt;&lt; 1</td></tr><tr><td>在最后加一个1</td><td>1011101-&gt;1011011</td><td>x &lt;&lt; 1+1</td></tr><tr><td>把最后一位变成1</td><td>101100-&gt;101101</td><td>x | 1</td></tr><tr><td>把最后一位变成0</td><td>101101-&gt;101100</td><td>x | 1-1</td></tr><tr><td>最后一位取反</td><td>101101-&gt;101100</td><td>x ^ 1</td></tr><tr><td>把从右数第k位变成1</td><td>101001-&gt;101101,k=3</td><td>x | (1 &lt;&lt; (k-1))</td></tr><tr><td>把从右数第k位变成0</td><td>101101-&gt;101001,k=3</td><td>x &amp;~ (1 &lt;&lt; (k-1))</td></tr><tr><td>右边第k位取反</td><td>101001-&gt;101101,k=3</td><td>x ^ (1 &lt;&lt; (k-1))</td></tr><tr><td>取末三位</td><td>1101101-&gt;101</td><td>x &amp; 7</td></tr><tr><td>取末k位</td><td>1101101-&gt;1101,k=5</td><td>x &amp; (1 &lt;&lt; k-1)</td></tr><tr><td>取从右数第k位</td><td>1101101-&gt;1,k=4</td><td>x &gt;&gt; (k - 1) &amp; 1</td></tr><tr><td>把末k位变成1</td><td>101001-&gt;101111,k=4</td><td>x | (1 &lt;&lt; k-1)</td></tr><tr><td>末k位取反</td><td>101110-&gt;100110,k=4</td><td>x ^ (1 &lt;&lt; k-1)</td></tr><tr><td>把右边连续的1变成0</td><td>100101111-&gt;10010000</td><td>x &amp; (x+1)</td></tr><tr><td>把右起第一个0变成1</td><td>100101111-&gt;100111111</td><td>x | (x+1)</td></tr><tr><td>把右边连续的0变成1</td><td>11011000-&gt;11011111</td><td>x | (x-1)</td></tr><tr><td>取右边连续的1</td><td>100101111-&gt;1111</td><td>(x ^ (x+1)) &gt;&gt; 1</td></tr><tr><td>去掉右起第一个1的左边</td><td>100101000-&gt;1000</td><td>x &amp; (x ^ (x-1))</td></tr></tbody></table><p>（后面再遇到什么再往这里加）</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法拾遗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法拾遗』深度优先搜索（3）：IDA*（启发式迭代加深搜索）</title>
      <link href="/2022/09/16/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%883%EF%BC%89%EF%BC%9AIDA-%EF%BC%88%E5%90%AF%E5%8F%91%E5%BC%8F%E8%BF%AD%E4%BB%A3%E5%8A%A0%E6%B7%B1%E6%90%9C%E7%B4%A2%EF%BC%89/"/>
      <url>/2022/09/16/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%883%EF%BC%89%EF%BC%9AIDA-%EF%BC%88%E5%90%AF%E5%8F%91%E5%BC%8F%E8%BF%AD%E4%BB%A3%E5%8A%A0%E6%B7%B1%E6%90%9C%E7%B4%A2%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>IDA* ，也就是在 ID （迭代加深搜索）上使用 A* 的思想，引入一个估值函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> ，来及时剪枝，减少不必要的搜索</p><p>但其实吧，我感觉这个也没什么好讲的，这东西感觉也没什么新意，就是一个简单的剪枝，并不是像 A* 一样让更有潜力状态的更先搜索</p><p>附上一道例题</p><blockquote><p><a href="https://www.luogu.com.cn/problem/UVA1343">UVA1343 旋转游戏 The Rotation Game</a> ，或者是 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1667">HDU1667</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1     2</span></span><br><span class="line"><span class="comment">//        3     4</span></span><br><span class="line"><span class="comment">//  5  6  7  8  9 10 11</span></span><br><span class="line"><span class="comment">//   12    13</span></span><br><span class="line"><span class="comment">//  14 15 16 17 18 19 20</span></span><br><span class="line"><span class="comment">//        21    22</span></span><br><span class="line"><span class="comment">//        23    24</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> board[<span class="number">32</span>];</span><br><span class="line"><span class="type">int</span> centerId[<span class="number">8</span>] = &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">16</span>, <span class="number">12</span>&#125;;</span><br><span class="line"><span class="type">int</span> movePath[<span class="number">8</span>][<span class="number">7</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">21</span>, <span class="number">23</span>&#125;,</span><br><span class="line">                      &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">18</span>, <span class="number">22</span>, <span class="number">24</span>&#125;,</span><br><span class="line">                      &#123;<span class="number">11</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>&#125;,</span><br><span class="line">                      &#123;<span class="number">20</span>, <span class="number">19</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">16</span>, <span class="number">15</span>, <span class="number">14</span>&#125;,</span><br><span class="line">                      &#123;<span class="number">24</span>, <span class="number">22</span>, <span class="number">18</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">2</span>&#125;,</span><br><span class="line">                      &#123;<span class="number">23</span>, <span class="number">21</span>, <span class="number">16</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                      &#123;<span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>&#125;,</span><br><span class="line">                      &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> rollbackMoveId[<span class="number">8</span>] = &#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ans[<span class="number">10024</span>];</span><br><span class="line"><span class="type">int</span> lim = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// h(x)估值函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> count[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        count[board[centerId[i]]]++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span> - <span class="built_in">max</span>(count[<span class="number">1</span>], <span class="built_in">max</span>(count[<span class="number">2</span>], count[<span class="number">3</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">int</span> dir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = board[movePath[dir][<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">        board[movePath[dir][i]] = board[movePath[dir][i + <span class="number">1</span>]];</span><br><span class="line">    board[movePath[dir][<span class="number">6</span>]] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IDA_Star</span><span class="params">(<span class="type">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">h</span>() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">h</span>() + now &gt; lim)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">move</span>(i);</span><br><span class="line">        ans[now] = i + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">IDA_Star</span>(now + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">move</span>(rollbackMoveId[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; board[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (board[<span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">24</span>; i++)</span><br><span class="line">            cin &gt;&gt; board[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">h</span>() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No moves needed&quot;</span> &lt;&lt; endl</span><br><span class="line">                 &lt;&lt; board[centerId[<span class="number">1</span>]] &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lim = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">IDA_Star</span>(<span class="number">1</span>))</span><br><span class="line">            lim++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; lim; i++)</span><br><span class="line">            cout &lt;&lt; ans[i];</span><br><span class="line">        cout &lt;&lt; endl</span><br><span class="line">             &lt;&lt; board[centerId[<span class="number">1</span>]] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法拾遗 </category>
          
          <category> 搜索技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDA* </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法拾遗』深度优先搜索（2）：IDDFS（迭代加深搜索）</title>
      <link href="/2022/09/15/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%882%EF%BC%89%EF%BC%9AIDDFS-%E8%BF%AD%E4%BB%A3%E5%8A%A0%E6%B7%B1%E6%90%9C%E7%B4%A2/"/>
      <url>/2022/09/15/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%882%EF%BC%89%EF%BC%9AIDDFS-%E8%BF%AD%E4%BB%A3%E5%8A%A0%E6%B7%B1%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<p>有这样一些题目，它们的搜索树很特别：不仅很深，而且很宽，深度可能到无穷，宽度也可能极广</p><p>如果直接朴素 DFS ，会陷入递归无法返回，如果直接朴素 BFS，队列空间会爆炸</p><p>鄙人想了一个简单的例子，来说明为什么需要迭代加深搜索</p><hr><h1 id="Why-use-IDDFS">Why use IDDFS</h1><p>假设你需要使用枚举的方式暴力破解一个用户的密码，密码只由 26 个小写字母组成，但是密码的位数未知</p><p>假设你的内存同时能存储 100 个字符，你该如何枚举？</p><p>先试试 BFS？首先把 26 个字母加入队列，目前队列中的状态是这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&quot;j&quot;,&quot;k&quot;,&quot;l&quot;,&quot;m&quot;,&quot;n&quot;,&quot;o&quot;,&quot;p&quot;,&quot;q&quot;,&quot;r&quot;,&quot;s&quot;,&quot;t&quot;,&quot;u&quot;,&quot;v&quot;,&quot;w&quot;,&quot;x&quot;,&quot;y&quot;,&quot;z&quot;&#125;</span><br></pre></td></tr></table></figure><p>现在，拿出第一个状态 <code>&quot;a&quot;</code> ，枚举它能到达的状态，并且扔到队列后面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&quot;j&quot;,&quot;k&quot;,&quot;l&quot;,&quot;m&quot;,&quot;n&quot;,&quot;o&quot;,&quot;p&quot;,&quot;q&quot;,&quot;r&quot;,&quot;s&quot;,&quot;t&quot;,&quot;u&quot;,&quot;v&quot;,&quot;w&quot;,&quot;x&quot;,&quot;y&quot;,&quot;z&quot;,&quot;aa&quot;,&quot;ab&quot;,&quot;ac&quot;,&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;ag&quot;,&quot;ah&quot;,&quot;ai&quot;,&quot;aj&quot;,&quot;ak&quot;,&quot;al&quot;,&quot;am&quot;,&quot;an&quot;,&quot;ao&quot;,&quot;ap&quot;,&quot;aq&quot;,&quot;ar&quot;,&quot;as&quot;,&quot;at&quot;,&quot;au&quot;,&quot;av&quot;,&quot;aw&quot;,&quot;ax&quot;,&quot;ay&quot;,&quot;az&quot;&#125;</span><br></pre></td></tr></table></figure><p>这时你会发现，队列貌似是以指数速度扩张的，100 的容量还不够搜两层！</p><p>这也是 BFS 的一个弊端：必须同时存储同一层的所有状态，很容易 MLE，但是能保证最先找到的就是搜索树上最近的解</p><p>那试试 DFS？DFS 搜索的时候是一条长链，每时每刻只存储当前的状态，100 的空间可以理论上可以存下长度为 100 的密码</p><p>但是朴素 DFS 也是不行的，因为它会始终会递归自己，你只会得到全是 a 的密码，然后超过 100 位之后爆内存（</p><p>你可能会说：不对哇？我可以每次都在第 101 层返回，这样就不会爆内存了</p><p>的确如此，你已经找到些感觉了</p><p>但是如果这样的话，最先枚举出来的是长度为 100 的密码，如果真实的密码很短呢？（或者说，有很多解，但题目要求的是搜索树上最近的解）</p><p>那可以这样：先用 DFS 限定只搜一层，搜完就返回，搜不到再搜两层，再搜不到就搜三层， 以此类推</p><p>其实这就是迭代加深搜索了</p><hr><h1 id="What-is-IDDFS">What is IDDFS</h1><p><code>迭代加深搜索（Iterative Deeping DFS，IDDFS）</code>，一种结合了 BFS（一层一层搜） 和 DFS（栈式状态存储）思想的搜索算法，具体操作方法如下：</p><ol><li>先假设搜索深度为 1，用 DFS 搜索到第一层就停止，也就是说，用 DFS 搜索一个深度为 1 的搜索树</li><li>如果没有找到答案，再设定搜索深度为 2，用 DFS 搜索前两层即停止，也就是说，用 DFS 搜索一个深度为 2 的搜索树</li><li>继续设定深度为 3、4 ······逐步扩大 DFS 的搜索深度，直到找到答案</li></ol><p>这个迭代过程，在每一层的广度上采用了 BFS 的思想，在具体编程实现上则是 DFS 的</p><hr><h1 id="How-to-use-IDDFS">How to use IDDFS</h1><p>最经典的题目非<a href="https://www.luogu.com.cn/problem/P1763">P1763 埃及分数</a>莫属</p><details class="toggle" ><summary class="toggle-button" style="">点击查看题目</summary><div class="toggle-content"><ul><li><p>题目描述</p><p>在古埃及，人们使用单位分数的和（形如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mi>a</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{1}{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 的，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span> 是自然数）表示一切有理数。如：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>2</mn><mn>3</mn></mfrac></mstyle><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mo>+</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>6</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{2}{3} = \dfrac{1}{2} + \dfrac{1}{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，但不允许 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>2</mn><mn>3</mn></mfrac></mstyle><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>3</mn></mfrac></mstyle><mo>+</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>3</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{2}{3} = \dfrac{1}{3} + \dfrac{1}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，因为加数中有相同的。对于一个分数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>a</mi><mi>b</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{a}{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，表示方法有很多种，但是哪种最好呢？首先，加数少的比加数多的好，其次，加数个数相同的，最小的分数越大越好。如：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mfrac><mn>19</mn><mn>45</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>12</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>180</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mfrac><mn>19</mn><mn>45</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>15</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>45</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mfrac><mn>19</mn><mn>45</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>18</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>30</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mfrac><mn>19</mn><mn>45</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>6</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>180</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mfrac><mn>19</mn><mn>45</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>5</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>6</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>18</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\frac{19}{45} &amp;= \frac{1}{3} + \frac{1}{12} + \frac{1}{180}\\\frac{19}{45} &amp;= \frac{1}{3} + \frac{1}{15} + \frac{1}{45}\\\frac{19}{45} &amp;= \frac{1}{3} + \frac{1}{18} + \frac{1}{30}\\\frac{19}{45} &amp;= \frac{1}{4} + \frac{1}{6} + \frac{1}{180}\\\frac{19}{45} &amp;= \frac{1}{5} + \frac{1}{6} + \frac{1}{18}\\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:11.5372em;vertical-align:-5.5186em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.0186em;"><span style="top:-8.0186em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">45</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">19</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-5.7112em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">45</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">19</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.4037em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">45</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">19</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.0963em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">45</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">19</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:1.2112em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">45</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">19</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.5186em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.0186em;"><span style="top:-8.0186em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">12</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">180</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-5.7112em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">15</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">45</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.4037em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">18</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">30</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.0963em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">180</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:1.2112em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">18</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.5186em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>最好的是最后一种，因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>18</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{1}{18}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">18</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>180</mn></mfrac></mstyle><mo separator="true">,</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>45</mn></mfrac></mstyle><mo separator="true">,</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>30</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{1}{180}, \dfrac{1}{45}, \dfrac{1}{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">180</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">45</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">30</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 都大。<br>注意，可能有多个最优解。如：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mfrac><mn>59</mn><mn>211</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>36</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>633</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>3798</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mfrac><mn>59</mn><mn>211</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>6</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>9</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>633</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>3798</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\frac{59}{211} &amp;= \frac{1}{4} + \frac{1}{36} + \frac{1}{633} + \frac{1}{3798}\\\frac{59}{211} &amp;= \frac{1}{6} + \frac{1}{9} + \frac{1}{633} + \frac{1}{3798}\\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.6149em;vertical-align:-2.0574em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5574em;"><span style="top:-4.5574em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">211</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">59</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">211</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">59</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0574em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5574em;"><span style="top:-4.5574em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">36</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">633</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3798</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">633</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3798</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0574em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>由于方法一与方法二中，最小的分数相同，因此二者均是最优解。</p><p>给出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a,b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span></span></span></span>，编程计算最好的表达方式。保证最优解满足：最小的分数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≥</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\ge \cfrac{1}{10^7}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.276em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.59em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.74em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span></span></span></span></span></span>。</p></li><li><p>输入格式</p><p>一行两个整数，分别为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> 的值。</p></li><li><p>输出格式</p><p>输出若干个数，自小到大排列，依次是单位分数的分母。</p></li><li><p>样例 #1</p><ul><li><p>样例输入 #1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">19 45</span><br></pre></td></tr></table></figure><ul><li>样例输出 #1</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 6 18</span><br></pre></td></tr></table></figure></li></ul></li><li><p>提示</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>&lt;</mo><mi>a</mi><mo>&lt;</mo><mi>b</mi><mo>&lt;</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">1 \lt a \lt b \lt 1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1000</span></span></span></span></p></li></ul></div></details><p>这道题有那么一点复杂，看了一晚上才搞懂 <s>（毕竟我数学不好）</s></p><p>首先这东西涉及到分数，自然是能约分就要约分，所以需要一个约分的函数</p><p>然后需要设计搜索函数，并定义变量：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mi>D</mi><mi>D</mi><mi>F</mi><mi>S</mi><mo stretchy="false">(</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo separator="true">,</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">IDDFS(now,x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.02778em;">DD</span><span class="mord mathnormal" style="margin-right:0.05764em;">FS</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></p><ul><li>定义本次迭代搜索的最大深度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>i</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">lim</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">im</span></span></span></span> ，目前的搜索深度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>o</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">now</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span> ，也就是说，当前最多还能构造 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mo>−</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">lim-now+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">im</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个分数（算上目前这个）</li><li>数组 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ans[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 保存本次搜索的答案（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ans[1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 至 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ans[now-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 依次是前面分数的分母）</li><li>初始分数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>a</mi><mi>b</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{a}{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，目前还剩下需要表示部分为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mi>y</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{x}{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.988em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，也就是说 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mi>y</mi></mfrac></mstyle><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>a</mi><mi>b</mi></mfrac></mstyle><mo>−</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mi>o</mi><mi>w</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mrow><mo fence="true">[</mo><mi>i</mi><mo fence="true">]</mo></mrow></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{x}{y}=\dfrac{a}{b}-\sum ^{now-1}_{i=1}\dfrac{1}{ans\left[ i\right] }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.988em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.2574em;vertical-align:-0.936em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathnormal">i</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><p>现在需要知道当前分数的分母 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ans[now]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">]</span></span></span></span> ，方法自然是靠枚举，但是范围是什么？总不能从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 一直枚举到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">10^{7}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span></span> 吧，现在来确定分母的上下界</p><ul><li>因为后面的分数总是小于前面的分数，也就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo stretchy="false">]</mo></mrow></mfrac></mstyle><mo>&lt;</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{1}{ans[now]}&lt;\dfrac{1}{ans[now-1]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2574em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">]</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2574em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，结合分母必是整数可得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo stretchy="false">]</mo><mo>≥</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">ans[now]\geq ans[now-1]+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li><li>当前分数不得大于目前还需要表示的部分，也就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo stretchy="false">]</mo></mrow></mfrac></mstyle><mo>≤</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mi>y</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{1}{ans[now]}\leq\dfrac{x}{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2574em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">]</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.988em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ， 化简得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo stretchy="false">]</mo><mo>≥</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>y</mi><mi>x</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">ans[now]\geq\dfrac{y}{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>目前还剩下 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mi>y</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{x}{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.988em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，但最多还能有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mo>−</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">lim-now+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">im</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个分数，平均下来每个分数最小为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mi>y</mi></mfrac></mstyle><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mo>−</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{\dfrac{x}{y}}{lim-now+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.1473em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.378em;"><span style="top:-2.4216em;"><span class="pstrut" style="height:3.1076em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">im</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.3376em;"><span class="pstrut" style="height:3.1076em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-4.378em;"><span class="pstrut" style="height:3.1076em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，将分子化为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> ，可知分母最大为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mi>lim</mi><mo>⁡</mo><mo>−</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow><mo>⋅</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>y</mi><mi>x</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\left( \lim -now+1\right) \cdot \dfrac{y}{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mop">lim</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，故 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo stretchy="false">]</mo><mo>≤</mo><mrow><mo fence="true">(</mo><mi>lim</mi><mo>⁡</mo><mo>−</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow><mo>⋅</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>y</mi><mi>x</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">ans[now]\leq\left( \lim -now+1\right) \cdot \dfrac{y}{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mop">lim</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><p>这样，当前分母的上下界就清楚了，上界为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mi>lim</mi><mo>⁡</mo><mo>−</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow><mo>⋅</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>y</mi><mi>x</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\left( \lim -now+1\right) \cdot \dfrac{y}{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mop">lim</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，下界为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>y</mi><mi>x</mi></mfrac></mstyle><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">max(ans[now-1]+1,\dfrac{y}{x})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></p><p>枚举分母 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo stretchy="false">]</mo><mo>∈</mo><mo stretchy="false">[</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>y</mi><mi>x</mi></mfrac></mstyle><mo stretchy="false">)</mo><mo separator="true">,</mo><mrow><mo fence="true">(</mo><mi>lim</mi><mo>⁡</mo><mo>−</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow><mo>⋅</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>y</mi><mi>x</mi></mfrac></mstyle><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">i=ans[now]\in [max(ans[now-1]+1,\dfrac{y}{x}),\left( \lim -now+1\right) \cdot \dfrac{y}{x}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mop">lim</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span></span></span></span> ，本次构造出来的分数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mi>i</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{1}{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>， 还剩下的部分为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mi>y</mi></mfrac></mstyle><mo>−</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mi>i</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{x}{y}-\dfrac{1}{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.988em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，通分得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>i</mi><mi>x</mi><mo>−</mo><mi>y</mi></mrow><mrow><mi>i</mi><mi>y</mi></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{ix-y}{iy}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.217em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>故继续迭代 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>D</mi><mi>D</mi><mi>F</mi><mi>S</mi><mo stretchy="false">(</mo><mi>n</mi><mi>o</mi><mi>w</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mi>x</mi><mo>−</mo><mi>y</mi><mo separator="true">,</mo><mi>i</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">IDDFS(now+1,ix-y,iy)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.02778em;">DD</span><span class="mord mathnormal" style="margin-right:0.05764em;">FS</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 即可</p><p>然后，你就能 AC 了</p><p>吗？</p><p><s>你会发现你居然能构建出负的分数</s></p><p>因为在计算下界的时候，整型除法直接把小数砍掉了，按理来说应当向上取整</p><p>另外一种方法是过滤掉负的分数，毕竟向上取整又牵扯到 <code>double</code></p><p>但是这样其实还不够，因为最先搜出来的不一定是最优的，加数个数相同的，最小的分数越大越好</p><p>所以，还要一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">flag</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span> 保存当前深度有没有解，再使用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>e</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">best[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">es</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 记录最优解，每找到一个解就去对比一下</p><p>还有最后一个坑，就是要开 <code>long long</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(a, b) ((a) &gt; (b) ? (a) : (b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(a, b) ((a) &lt; (b) ? (a) : (b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> ans[N], best[N], lim = <span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分数约分</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">simplify</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> g = <span class="built_in">gcd</span>(a, b);</span><br><span class="line">    a /= g;</span><br><span class="line">    b /= g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IDDFS</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (now &gt; lim)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">simplify</span>(x, y);</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span> &amp;&amp; y &gt; ans[now - <span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        ans[now] = y;</span><br><span class="line">        <span class="keyword">if</span> (ans[now] &lt; best[now])</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= now; i++)</span><br><span class="line">                best[i] = ans[i];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> up = (lim - now + <span class="number">1</span>) * y / x, down = <span class="built_in">max</span>(ans[now - <span class="number">1</span>] + <span class="number">1</span>, <span class="built_in">ceil</span>((<span class="type">double</span>)y / x));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = down; i &lt;= up; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> nx = x * i - y, ny = y * i;</span><br><span class="line">        ans[now] = i;</span><br><span class="line">        <span class="built_in">IDDFS</span>(now + <span class="number">1</span>, nx, ny);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="built_in">sizeof</span>(ans));</span><br><span class="line">    <span class="built_in">memset</span>(best, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(best));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">IDDFS</span>(<span class="number">1</span>, a, b);</span><br><span class="line">        lim++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; lim; i++)</span><br><span class="line">        cout &lt;&lt; best[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法拾遗 </category>
          
          <category> 搜索技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法拾遗』舞蹈链（Dancing Links X）与精确覆盖问题</title>
      <link href="/2022/09/14/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E8%88%9E%E8%B9%88%E9%93%BE%EF%BC%88Dancing-Links-X%EF%BC%89%E4%B8%8E%E7%B2%BE%E7%A1%AE%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98/"/>
      <url>/2022/09/14/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E8%88%9E%E8%B9%88%E9%93%BE%EF%BC%88Dancing-Links-X%EF%BC%89%E4%B8%8E%E7%B2%BE%E7%A1%AE%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="关于精确覆盖问题">关于精确覆盖问题</h1><blockquote><p>模板题目：<a href="https://www.luogu.com.cn/problem/P4929">P4929 【模板】舞蹈链（DLX）</a></p></blockquote><p>精确覆盖问题描述起来十分简洁：</p><p>给定一个全集 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span> 和若干集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>S</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>S</mi><mn>3</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>S</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">S_{1},S_{2},S_{3},\ldots ,S_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，现需从中选取某些集合，不重不漏地覆盖全集 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></p><p>或者可以用 0-1 矩阵来表示：</p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">S_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">S_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">S_{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">S_{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">S_{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">S_{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><p>答案是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">S_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">S_{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">S_{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，你看看是不是</p><hr><p>这种问题的通用解法是 <code>X 算法</code>，我稍微简化了一下过程：</p><p>首先按大小顺序依次选取每一行，目前来说也就是第一行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">S_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>（有个剪枝优化是依次选元素最少列上的非零行，搜索会更快）</p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center"><mark class="hl-label orange">S1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">S_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">S_{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">S_{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">S_{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">S_{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><p>然后找到非空元素的所在列</p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></th><th style="text-align:center">1</th><th style="text-align:center"><mark class="hl-label orange">2</mark> </th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center"><mark class="hl-label orange">6</mark> </th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center"><mark class="hl-label orange">S1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">S_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">S_{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">S_{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">S_{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">S_{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">1</td></tr></tbody></table><p>然后再顺藤摸瓜地选中目前所有非空元素所在的行</p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></th><th style="text-align:center">1</th><th style="text-align:center"><mark class="hl-label orange">2</mark> </th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center"><mark class="hl-label orange">6</mark> </th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center"><mark class="hl-label orange">S1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td></tr><tr><td style="text-align:center"><mark class="hl-label orange">S2</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td></tr><tr><td style="text-align:center"><mark class="hl-label orange">S3</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">S_{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">S_{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">S_{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">1</td></tr></tbody></table><p>现在把选中的部分全部删掉，生成一个新矩阵</p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></th><th style="text-align:center">1</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">S_{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">S_{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">S_{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p>再选取第一行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">S_{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></th><th style="text-align:center">1</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center"><mark class="hl-label orange">S4</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">S_{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">S_{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p>重复上面的操作</p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></th><th style="text-align:center"><mark class="hl-label orange">1</mark> </th><th style="text-align:center">3</th><th style="text-align:center"><mark class="hl-label orange">4</mark> </th><th style="text-align:center">5</th><th style="text-align:center"><mark class="hl-label orange">7</mark> </th></tr></thead><tbody><tr><td style="text-align:center"><mark class="hl-label orange">S4</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td></tr><tr><td style="text-align:center"><mark class="hl-label orange">S5</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td></tr><tr><td style="text-align:center"><mark class="hl-label orange">S6</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td></tr></tbody></table><p>然后发现删完所有行后 3 和 5 并没有覆盖到，所以这不是一个解</p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></th><th style="text-align:center">3</th><th style="text-align:center">5</th></tr></thead></table><p>回溯，这次选取第二行，也就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">S_{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></th><th style="text-align:center">1</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">S_{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><mark class="hl-label orange">S5</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">S_{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p>再重复算法</p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></th><th style="text-align:center"><mark class="hl-label orange">1</mark> </th><th style="text-align:center">3</th><th style="text-align:center"><mark class="hl-label orange">4</mark> </th><th style="text-align:center">5</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center"><mark class="hl-label orange">S4</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td></tr><tr><td style="text-align:center"><mark class="hl-label orange">S5</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">S_{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">1</td><td style="text-align:center"><mark class="hl-label orange">0</mark> </td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p>现在来看就已经很简单了</p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></th><th style="text-align:center">3</th><th style="text-align:center">5</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">S_{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p>最后再选中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">S_{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 即可</p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></th><th style="text-align:center"><mark class="hl-label orange">3</mark> </th><th style="text-align:center"><mark class="hl-label orange">5</mark> </th><th style="text-align:center"><mark class="hl-label orange">7</mark> </th></tr></thead><tbody><tr><td style="text-align:center"><mark class="hl-label orange">S6</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td><td style="text-align:center"><mark class="hl-label orange">1</mark> </td></tr></tbody></table><p>全部删完了，得到了一个解</p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></th></tr></thead></table><p>还记得前面删除的是哪些行嘛？分别是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">S_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">S_{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">S_{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，这就是 <code>X 算法</code></p><hr><h1 id="舞蹈链（Dancing-Links）简介">舞蹈链（Dancing Links）简介</h1><p>现在要写一个程序实现 <code>X 算法</code> ，但是有一个问题，就是没有合适的数据结构</p><p>如果使用二维数组的话，删除行和列，缓存和回溯状态都十分难以实现，而且复杂度堪忧</p><p>算法大师 Donald Knuth 为此提出了 <code>Dancing Links（舞蹈链）</code>，它是一种链式数据结构，利用链表的性质解决了上述难题。由于删除、恢复等操作是指针之间的跳跃，仿佛是精妙的舞蹈一般，由此得名</p><p>而使用 <code>Dancing Links</code> 数据结构的 <code>X 算法</code> 就被成为 <code>Dancing Links X 算法</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209151241746.png" alt=""></p><blockquote><p>舞蹈链结构，每行每列都是环形链接，每个结点都有四方向的指针</p><p>但是这个图我感觉有点问题，就是行首结点貌似是不在环里的，而且只有向右的指针</p></blockquote><hr><h1 id="分步讲解">分步讲解</h1><h2 id="整体结构">整体结构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DLX</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n, m, id;               <span class="comment">// 行数，列数，最大结点的编号（包含总表头、列首结点和元素结点，行首结点是另外单独存的）</span></span><br><span class="line">    <span class="type">int</span> U[N], D[N], L[N], R[N]; <span class="comment">// 第i个结点的上下左右结点编号</span></span><br><span class="line">    <span class="type">int</span> Row[N], Col[N];         <span class="comment">// 第i个结点的行号，列号</span></span><br><span class="line">    <span class="type">int</span> firstNodePerRow[N];     <span class="comment">// 行首结点，指向第i行的第一个元素结点</span></span><br><span class="line">    <span class="type">int</span> nodeNumPerCol[N];       <span class="comment">// 第i列的元素结点数目，后面用于剪枝优化</span></span><br><span class="line">    <span class="type">int</span> ans[N];                 <span class="comment">// 保存解，ans[0]表示总行数，后面依次为结果</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span>;    <span class="comment">// 初始化，建立n行m列的DLX矩阵</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>;     <span class="comment">// 在x行y列插入元素结点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> c)</span></span>;         <span class="comment">// 删除列c及其牵扯到的行（其实是隐藏，访问不到就行）</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resume</span><span class="params">(<span class="type">int</span> c)</span></span>;         <span class="comment">// 恢复列c及其牵扯到的行</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dance</span><span class="params">(<span class="type">int</span> deepth)</span></span>;     <span class="comment">// 递归搜索</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;               <span class="comment">// 打印解</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><s>（本来还想写些东西的，但是我感觉我已经有很多注释了）</s></p><h2 id="初始化">初始化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化，建立n行m列的DLX矩阵</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;n = n; <span class="comment">// 行数</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m = m; <span class="comment">// 列数</span></span><br><span class="line">    id = m;      <span class="comment">// 0是总表头，1~m是列首结点，m+1开始是真实的元素结点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入初始状态数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        U[i] = D[i] = i; <span class="comment">// 列首结点的上下指针指向自己</span></span><br><span class="line">        L[i] = i - <span class="number">1</span>;    <span class="comment">// 列首结点的左指针指向前一个列首结点</span></span><br><span class="line">        R[i] = i + <span class="number">1</span>;    <span class="comment">// 列首结点的右指针指向后一个列首结点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为方便遍历，让列首成环</span></span><br><span class="line">    L[<span class="number">0</span>] = m; <span class="comment">// 总表头的左指针指向最后一个列首结点</span></span><br><span class="line">    R[m] = <span class="number">0</span>; <span class="comment">// 最后一个列首结点的右指针指向总表头</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(nodeNumPerCol, <span class="number">0</span>, <span class="built_in">sizeof</span>(nodeNumPerCol));</span><br><span class="line">    <span class="built_in">memset</span>(firstNodePerRow, <span class="number">0</span>, <span class="built_in">sizeof</span>(firstNodePerRow));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里再强调一下，行首结点不算真的结点，所以初始化的时候是 <code>id = m;</code> 而不是 <code>id = n + m;</code></p><h2 id="加入结点">加入结点</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在x行y列插入元素结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id++;               <span class="comment">// 新结点的编号</span></span><br><span class="line">    Row[id] = x;        <span class="comment">// 记录行号</span></span><br><span class="line">    Col[id] = y;        <span class="comment">// 记录列号</span></span><br><span class="line">    nodeNumPerCol[y]++; <span class="comment">// 第y列的元素结点数目+1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在列首结点y的下方插入新结点（不用关心元素顺序，都能遍历到就行）</span></span><br><span class="line">    U[id] = y;    <span class="comment">// 新结点的上指针指向列首结点</span></span><br><span class="line">    D[id] = D[y]; <span class="comment">// 新结点的下指针指向列首结点的原下方结点</span></span><br><span class="line">    U[D[y]] = id; <span class="comment">// 列首结点的原下方结点的上指针指向新结点</span></span><br><span class="line">    D[y] = id;    <span class="comment">// 列首结点的下指针指向新结点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在行首结点x的右方插入新结点</span></span><br><span class="line">    <span class="keyword">if</span> (firstNodePerRow[x] == <span class="number">0</span>) <span class="comment">// 如果本行还没有元素结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        firstNodePerRow[x] = id; <span class="comment">// 让行首结点指向自己</span></span><br><span class="line">        L[id] = R[id] = id;      <span class="comment">// 新结点的左右指针指向自己</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">// 如果本行已经有元素结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        L[id] = firstNodePerRow[x];    <span class="comment">// 新结点的左指针指向行首结点</span></span><br><span class="line">        R[id] = R[firstNodePerRow[x]]; <span class="comment">// 新结点的右指针指向行首结点的原右方结点</span></span><br><span class="line">        L[R[firstNodePerRow[x]]] = id; <span class="comment">// 行首结点的原右方结点的左指针指向新结点</span></span><br><span class="line">        R[firstNodePerRow[x]] = id;    <span class="comment">// 行首结点的右指针指向新结点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// 如果你细心的话，会发现每一行，每一列的结点都是成环的（不包括行首结点）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你忘记了链表的操作建议复习一下，简单来说就是先搞清楚要插入的位置，让前面结点认为它后面是我，然后让后面结点认为它前面是我</p><h2 id="删除列">删除列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除列c及其牵扯到的行（其实是隐藏，访问不到就行）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[R[c]] = L[c]; <span class="comment">// 列首结点的右方结点的左指针指向列首结点的左方结点</span></span><br><span class="line">    R[L[c]] = R[c]; <span class="comment">// 列首结点的左方结点的右指针指向列首结点的右方结点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历列c的所有元素结点，因为是成环的，所以终止条件是遍历到自己</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = D[c]; i != c; i = D[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 遍历每个元素所在的行并删除结点，因为是成环的，所以终止条件是遍历到自己</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = R[i]; j != i; j = R[j])</span><br><span class="line">        &#123;</span><br><span class="line">            U[D[j]] = U[j];          <span class="comment">// 元素结点的下方结点的上指针指向元素结点的上方结点</span></span><br><span class="line">            D[U[j]] = D[j];          <span class="comment">// 元素结点的上方结点的下指针指向元素结点的下方结点</span></span><br><span class="line">            nodeNumPerCol[Col[j]]--; <span class="comment">// 第Col[j]列的元素结点数目-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="恢复列">恢复列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 恢复列c及其牵扯到的行</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resume</span><span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 遍历列c的所有元素结点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = U[c]; i != c; i = U[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 遍历每个元素所在的行并恢复结点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = L[i]; j != i; j = L[j])</span><br><span class="line">        &#123;</span><br><span class="line">            U[D[j]] = j;             <span class="comment">// 元素结点的下方结点的上指针指向元素结点</span></span><br><span class="line">            D[U[j]] = j;             <span class="comment">// 元素结点的上方结点的下指针指向元素结点</span></span><br><span class="line">            nodeNumPerCol[Col[j]]++; <span class="comment">// 第Col[j]列的元素结点数目+1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    L[R[c]] = c; <span class="comment">// 列首结点的右方结点的左指针指向列首结点</span></span><br><span class="line">    R[L[c]] = c; <span class="comment">// 列首结点的左方结点的右指针指向列首结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// 不得不说，这个结构设计的是真的精巧</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为删除的时候只是让左右访问不到该列，但是直接使用下标还是可以访问的，所以是可以恢复的</p><h2 id="开始跳舞！">开始跳舞！</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归搜索</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dance</span><span class="params">(<span class="type">int</span> deepth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (R[<span class="number">0</span>] == <span class="number">0</span>) <span class="comment">// 矩阵已经删除完，得到一个解</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans[<span class="number">0</span>] = deepth - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次选择一个元素结点数目最少的列并删除，这是一个优化</span></span><br><span class="line">    <span class="type">int</span> c = R[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = R[<span class="number">0</span>]; i != <span class="number">0</span>; i = R[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nodeNumPerCol[i] &lt; nodeNumPerCol[c])</span><br><span class="line">            c = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">remove</span>(c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历列c的所有元素结点，并依次尝试删除所在的行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = D[c]; i != c; i = D[i])</span><br><span class="line">    &#123;</span><br><span class="line">        ans[deepth] = Row[i]; <span class="comment">// 删除之前先标记为答案</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = R[i]; j != i; j = R[j])</span><br><span class="line">            <span class="built_in">remove</span>(Col[j]); <span class="comment">// 删除列Col[j]及其牵扯到的行</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dance</span>(deepth + <span class="number">1</span>)) <span class="comment">// 递归</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = L[i]; j != i; j = L[j])</span><br><span class="line">            <span class="built_in">resume</span>(Col[j]); <span class="comment">// 恢复列Col[j]及其牵扯到的行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">resume</span>(c); <span class="comment">// 恢复列c及其牵扯到的行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是使用了我前面说的剪枝优化，使用选择结点数最少的列依次删除</p><h2 id="打印解">打印解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ans[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No solution!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ans[<span class="number">0</span>]; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这应该就比较好理解了</p><h1 id="完整代码">完整代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DLX</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n, m, id;               <span class="comment">// 行数，列数，最大结点的编号（包含总表头、列首结点和元素结点，行首结点是另外单独存的）</span></span><br><span class="line">    <span class="type">int</span> U[N], D[N], L[N], R[N]; <span class="comment">// 第i个结点的上下左右结点编号</span></span><br><span class="line">    <span class="type">int</span> Row[N], Col[N];         <span class="comment">// 第i个结点的行号，列号</span></span><br><span class="line">    <span class="type">int</span> firstNodePerRow[N];     <span class="comment">// 行首结点，指向第i行的第一个元素结点</span></span><br><span class="line">    <span class="type">int</span> nodeNumPerCol[N];       <span class="comment">// 第i列的元素结点数目</span></span><br><span class="line">    <span class="type">int</span> ans[N];                 <span class="comment">// 保存解，ans[0]表示总行数，后面依次为结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，建立n行m列的DLX矩阵</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n; <span class="comment">// 行数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m = m; <span class="comment">// 列数</span></span><br><span class="line">        id = m;      <span class="comment">// 0是总表头，1~m是列首结点，m+1开始是真实的元素结点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入初始状态数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            U[i] = D[i] = i; <span class="comment">// 列首结点的上下指针指向自己</span></span><br><span class="line">            L[i] = i - <span class="number">1</span>;    <span class="comment">// 列首结点的左指针指向前一个列首结点</span></span><br><span class="line">            R[i] = i + <span class="number">1</span>;    <span class="comment">// 列首结点的右指针指向后一个列首结点</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为方便遍历，让列首成环</span></span><br><span class="line">        L[<span class="number">0</span>] = m; <span class="comment">// 总表头的左指针指向最后一个列首结点</span></span><br><span class="line">        R[m] = <span class="number">0</span>; <span class="comment">// 最后一个列首结点的右指针指向总表头</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(nodeNumPerCol, <span class="number">0</span>, <span class="built_in">sizeof</span>(nodeNumPerCol));</span><br><span class="line">        <span class="built_in">memset</span>(firstNodePerRow, <span class="number">0</span>, <span class="built_in">sizeof</span>(firstNodePerRow));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在x行y列插入元素结点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        id++;               <span class="comment">// 新结点的编号</span></span><br><span class="line">        Row[id] = x;        <span class="comment">// 记录行号</span></span><br><span class="line">        Col[id] = y;        <span class="comment">// 记录列号</span></span><br><span class="line">        nodeNumPerCol[y]++; <span class="comment">// 第y列的元素结点数目+1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在列首结点y的下方插入新结点（不用关心元素顺序，都能遍历到就行）</span></span><br><span class="line">        U[id] = y;    <span class="comment">// 新结点的上指针指向列首结点</span></span><br><span class="line">        D[id] = D[y]; <span class="comment">// 新结点的下指针指向列首结点的原下方结点</span></span><br><span class="line">        U[D[y]] = id; <span class="comment">// 列首结点的原下方结点的上指针指向新结点</span></span><br><span class="line">        D[y] = id;    <span class="comment">// 列首结点的下指针指向新结点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在行首结点x的右方插入新结点</span></span><br><span class="line">        <span class="keyword">if</span> (firstNodePerRow[x] == <span class="number">0</span>) <span class="comment">// 如果本行还没有元素结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            firstNodePerRow[x] = id; <span class="comment">// 让行首结点指向自己</span></span><br><span class="line">            L[id] = R[id] = id;      <span class="comment">// 新结点的左右指针指向自己</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 如果本行已经有元素结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            L[id] = firstNodePerRow[x];    <span class="comment">// 新结点的左指针指向行首结点</span></span><br><span class="line">            R[id] = R[firstNodePerRow[x]]; <span class="comment">// 新结点的右指针指向行首结点的原右方结点</span></span><br><span class="line">            L[R[firstNodePerRow[x]]] = id; <span class="comment">// 行首结点的原右方结点的左指针指向新结点</span></span><br><span class="line">            R[firstNodePerRow[x]] = id;    <span class="comment">// 行首结点的右指针指向新结点</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 如果你细心的话，会发现每一行，每一列的结点都是成环的（不包括行首结点）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除列c及其牵扯到的行（其实是隐藏，访问不到就行）</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L[R[c]] = L[c]; <span class="comment">// 列首结点的右方结点的左指针指向列首结点的左方结点</span></span><br><span class="line">        R[L[c]] = R[c]; <span class="comment">// 列首结点的左方结点的右指针指向列首结点的右方结点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历列c的所有元素结点，因为是成环的，所以终止条件是遍历到自己</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = D[c]; i != c; i = D[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 遍历每个元素所在的行并删除结点，因为是成环的，所以终止条件是遍历到自己</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = R[i]; j != i; j = R[j])</span><br><span class="line">            &#123;</span><br><span class="line">                U[D[j]] = U[j];          <span class="comment">// 元素结点的下方结点的上指针指向元素结点的上方结点</span></span><br><span class="line">                D[U[j]] = D[j];          <span class="comment">// 元素结点的上方结点的下指针指向元素结点的下方结点</span></span><br><span class="line">                nodeNumPerCol[Col[j]]--; <span class="comment">// 第Col[j]列的元素结点数目-1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复列c及其牵扯到的行</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resume</span><span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 遍历列c的所有元素结点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = U[c]; i != c; i = U[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 遍历每个元素所在的行并恢复结点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = L[i]; j != i; j = L[j])</span><br><span class="line">            &#123;</span><br><span class="line">                U[D[j]] = j;             <span class="comment">// 元素结点的下方结点的上指针指向元素结点</span></span><br><span class="line">                D[U[j]] = j;             <span class="comment">// 元素结点的上方结点的下指针指向元素结点</span></span><br><span class="line">                nodeNumPerCol[Col[j]]++; <span class="comment">// 第Col[j]列的元素结点数目+1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        L[R[c]] = c; <span class="comment">// 列首结点的右方结点的左指针指向列首结点</span></span><br><span class="line">        R[L[c]] = c; <span class="comment">// 列首结点的左方结点的右指针指向列首结点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 不得不说，这个结构设计的是真的精巧</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归搜索</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dance</span><span class="params">(<span class="type">int</span> deepth)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (R[<span class="number">0</span>] == <span class="number">0</span>) <span class="comment">// 矩阵已经删除完，得到一个解</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans[<span class="number">0</span>] = deepth - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次选择一个元素结点数目最少的列并删除，这是一个优化</span></span><br><span class="line">        <span class="type">int</span> c = R[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = R[<span class="number">0</span>]; i != <span class="number">0</span>; i = R[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nodeNumPerCol[i] &lt; nodeNumPerCol[c])</span><br><span class="line">                c = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">remove</span>(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历列c的所有元素结点，并依次尝试删除所在的行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = D[c]; i != c; i = D[i])</span><br><span class="line">        &#123;</span><br><span class="line">            ans[deepth] = Row[i]; <span class="comment">// 删除之前先标记为答案</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = R[i]; j != i; j = R[j])</span><br><span class="line">                <span class="built_in">remove</span>(Col[j]); <span class="comment">// 删除列Col[j]及其牵扯到的行</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dance</span>(deepth + <span class="number">1</span>)) <span class="comment">// 递归</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = L[i]; j != i; j = L[j])</span><br><span class="line">                <span class="built_in">resume</span>(Col[j]); <span class="comment">// 恢复列Col[j]及其牵扯到的行</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">resume</span>(c); <span class="comment">// 恢复列c及其牵扯到的行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No solution!\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ans[<span class="number">0</span>]; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dlx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    dlx.<span class="built_in">init</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">read</span>())</span><br><span class="line">                dlx.<span class="built_in">add</span>(i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    dlx.<span class="built_in">dance</span>(<span class="number">1</span>);</span><br><span class="line">    dlx.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="举一反三">举一反三</h1><h2 id="解决-N-皇后问题">解决 N 皇后问题</h2><blockquote><p><a href="https://www.luogu.com.cn/problem/P1219">P1219 [USACO1.5]八皇后 Checker Challenge</a></p></blockquote><p>N 皇后的棋盘有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>∗</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n*n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个点，并且有四种条件</p><ol><li>每行只能放一个皇后（ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 行）</li><li>每列只能放一个皇后（ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 列）</li><li>每一个“/”斜行只能放一个皇后（ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>∗</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2*n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个对角线）</li><li>每一个“\”斜行只能放一个皇后（ 又是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>∗</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2*n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个对角线）</li></ol><p>将每个点作为行（共 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>∗</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n*n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 行），将每个条件作为列（共 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn><mo>∗</mo><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">6*n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span> 列）</p><p>列的存储空间分配：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span> ：棋盘行</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo>∗</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[n+1,2*n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span> ：棋盘列</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>2</mn><mo>∗</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo>∗</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[2*n+1,4*n-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> ：主对角线</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>4</mn><mo>∗</mo><mi>n</mi><mo separator="true">,</mo><mn>6</mn><mo>∗</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[4*n,6*n-2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">]</span></span></span></span> ：次对角线</li></ul><p>然后结束条件为填满前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 列即可，并且删除的列必须在前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 列中</p><h2 id="解决数独问题">解决数独问题</h2><blockquote><p><a href="https://www.luogu.com.cn/problem/P1784">P1784 数独</a></p></blockquote><p>也是一样的，只是条件变成了格、行、列、宫</p><p>要开 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>9</mn><mo>∗</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">9*9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span></span></span></span> 行，然后把每种条件展开铺到列上</p><h1 id="参考资料">参考资料</h1><ul><li><a href="https://www.shuzhiduo.com/A/nAJv1roQzr/">166. 数独 dancing links 方法</a></li><li><a href="https://www.luogu.com.cn/blog/ONE-PIECE/qian-tan-dlx">浅谈DLX</a></li><li><a href="https://www.luogu.com.cn/blog/ONE-PIECE/solution-p1219">题解 P1219 【八皇后】</a></li><li><a href="https://www.luogu.com.cn/blog/ONE-PIECE/solution-p1784">题解 P1784 【数独】</a></li></ul><p>这两位都是真大佬，我真的自愧不如（</p><p><s>哪里没讲清楚或者有错的地方建议赶快踢我</s></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法拾遗 </category>
          
          <category> 搜索技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 舞蹈链/DLX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法拾遗』深度优先搜索（1）：初尝 DFS</title>
      <link href="/2022/09/13/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%881%EF%BC%89%EF%BC%9A%E5%88%9D%E5%B0%9D-DFS/"/>
      <url>/2022/09/13/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%881%EF%BC%89%EF%BC%9A%E5%88%9D%E5%B0%9D-DFS/</url>
      
        <content type="html"><![CDATA[<h1 id="还是从走迷宫开始">还是从走迷宫开始</h1><p>与 BFS 不同，DFS 非常简单：每当进入一个状态，生产出第一个子状态后，直接函数递归进去，直到走到头，然后回溯回来，再尝试第二个状态</p><p>其实就是队列和栈的区别，BFS 是产生一个状态就扔到队列里，DFS 是产生一批状态，先把它们压入栈，然后取一个出来处理</p><p>而函数递归就是一种栈，所以 DFS 实际上并不需要专门声明一个栈出来</p><p>还是拿最简单的 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1312">hdu 1312 Red and Black</a> 来说事</p><details class="toggle" ><summary class="toggle-button" style="">点击查看题目</summary><div class="toggle-content"><ul><li><p>Problem Description</p><p>There is a rectangular room, covered with square tiles. Each tile is colored either red or black. A man is standing on a black tile. From a tile, he can move to one of four adjacent tiles. But he can’t move on red tiles, he can move only on black tiles.</p><p>Write a program to count the number of black tiles which he can reach by repeating the moves described above.</p></li><li><p>Input</p><p>The input consists of multiple data sets. A data set starts with a line containing two positive integers W and H; W and H are the numbers of tiles in the x- and y- directions, respectively. W and H are not more than 20.</p><p>There are H more lines in the data set, each of which includes W characters. Each character represents the color of a tile as follows.</p><p>‘.’ - a black tile<br>‘#’ - a red tile<br>‘@’ - a man on a black tile(appears exactly once in a data set)</p></li><li><p>Output<br>For each data set, your program should output a line which contains the number of tiles he can reach from the initial tile (including itself).</p></li><li><p>Sample Input</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">6 9</span><br><span class="line">....#.</span><br><span class="line">.....#</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">#@...#</span><br><span class="line">.#..#.</span><br><span class="line">11 9</span><br><span class="line">.#.........</span><br><span class="line">.#.#######.</span><br><span class="line">.#.#.....#.</span><br><span class="line">.#.#.###.#.</span><br><span class="line">.#.#..@#.#.</span><br><span class="line">.#.#####.#.</span><br><span class="line">.#.......#.</span><br><span class="line">.#########.</span><br><span class="line">...........</span><br><span class="line">11 6</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..###</span><br><span class="line">..#..#..#@.</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..#..</span><br><span class="line">7 7</span><br><span class="line">..#.#..</span><br><span class="line">..#.#..</span><br><span class="line">###.###</span><br><span class="line">...@...</span><br><span class="line">###.###</span><br><span class="line">..#.#..</span><br><span class="line">..#.#..</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure></li><li><p>Sample Output</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">45</span><br><span class="line">59</span><br><span class="line">6</span><br><span class="line">13</span><br></pre></td></tr></table></figure></li></ul></div></details><p>简单地说还是走迷宫，遍历所有可能的位置，并且数格子，大概的算法如下</p><ol><li>从当前点开始向四周观望</li><li>枚举它能到达的点，每枚举出来一个就调用第一步</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">128</span>, M = <span class="number">128</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; <span class="comment">// 四方向</span></span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> Map[N][M];</span><br><span class="line"><span class="type">int</span> n, m, ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125; start;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(point p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans++;                      <span class="comment">// 计数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) <span class="comment">// 枚举能到达的点</span></span><br><span class="line">    &#123;</span><br><span class="line">        point np = &#123;p.x + dir[i][<span class="number">0</span>], p.y + dir[i][<span class="number">1</span>]&#125;;</span><br><span class="line">        <span class="keyword">if</span> (np.x &lt; <span class="number">0</span> || np.x &gt;= n || np.y &lt; <span class="number">0</span> || np.y &gt;= m) <span class="comment">// 可行性检查</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (Map[np.x][np.y]) <span class="comment">// 可行性检查</span></span><br><span class="line">        &#123;</span><br><span class="line">            Map[np.x][np.y] = <span class="literal">false</span>; <span class="comment">// 占领新点</span></span><br><span class="line">            <span class="built_in">dfs</span>(np);                 <span class="comment">// 从新点继续搜索</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; m &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> tmp = <span class="built_in">getchar</span>();</span><br><span class="line">                <span class="keyword">while</span> (tmp != <span class="string">&#x27;.&#x27;</span> &amp;&amp; tmp != <span class="string">&#x27;#&#x27;</span> &amp;&amp; tmp != <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">                    tmp = <span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (tmp == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                    Map[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (tmp == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                    Map[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (tmp == <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Map[i][j] = <span class="number">0</span>;</span><br><span class="line">                    start.x = i, start.y = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(start);</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="回溯状态：八皇后">回溯状态：八皇后</h1><p>好！你已经基本知道 DFS 是怎么一回事了，来看一道经典题目：<a href="https://www.luogu.com.cn/problem/P1219">P1219八皇后</a></p><details class="toggle" ><summary class="toggle-button" style="">点击查看题目</summary><div class="toggle-content"><ul><li><p>题目描述</p><p>一个如下的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn><mo>×</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">6 \times 6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span> 的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列有且只有一个，每条对角线（包括两条主对角线的所有平行线）上至多有一个棋子。</p></li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209132022769.png" alt=""></p><p>上面的布局可以用序列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mtext> </mtext><mn>4</mn><mtext> </mtext><mn>6</mn><mtext> </mtext><mn>1</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mn>5</mn></mrow><annotation encoding="application/x-tex">2\ 4\ 6\ 1\ 3\ 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace"> </span><span class="mord">4</span><span class="mspace"> </span><span class="mord">6</span><span class="mspace"> </span><span class="mord">1</span><span class="mspace"> </span><span class="mord">3</span><span class="mspace"> </span><span class="mord">5</span></span></span></span> 来描述，第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 个数字表示在第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 行的相应位置有一个棋子，如下：</p><p>行号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mtext> </mtext><mn>2</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mn>4</mn><mtext> </mtext><mn>5</mn><mtext> </mtext><mn>6</mn></mrow><annotation encoding="application/x-tex">1\ 2\ 3\ 4\ 5\ 6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mord">2</span><span class="mspace"> </span><span class="mord">3</span><span class="mspace"> </span><span class="mord">4</span><span class="mspace"> </span><span class="mord">5</span><span class="mspace"> </span><span class="mord">6</span></span></span></span></p><p>列号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mtext> </mtext><mn>4</mn><mtext> </mtext><mn>6</mn><mtext> </mtext><mn>1</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mn>5</mn></mrow><annotation encoding="application/x-tex">2\ 4\ 6\ 1\ 3\ 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace"> </span><span class="mord">4</span><span class="mspace"> </span><span class="mord">6</span><span class="mspace"> </span><span class="mord">1</span><span class="mspace"> </span><span class="mord">3</span><span class="mspace"> </span><span class="mord">5</span></span></span></span></p><p>这只是棋子放置的一个解。请编一个程序找出所有棋子放置的解。<br>并把它们以上面的序列方法输出，解按字典顺序排列。<br>请输出前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span> 个解。最后一行是解的总个数。</p><ul><li><p>输入格式</p><p>一行一个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>，表示棋盘是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n \times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 大小的。</p></li><li><p>输出格式</p><p>前三行为前三个解，每个解的两个数字之间用一个空格隔开。第四行只有一个数字，表示解的总数。</p></li><li><p>样例 #1</p><ul><li><p>样例输入 #1</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure></li><li><p>样例输出 #1</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2 4 6 1 3 5</span><br><span class="line">3 6 2 5 1 4</span><br><span class="line">4 1 5 2 6 3</span><br><span class="line">4</span><br></pre></td></tr></table></figure></li></ul></li></ul></div></details><p>对于这道题，可以按行搜索，在搜索第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 行时，尝试在每一列都放，放完记得要做占领标记，然后继续搜索第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 行，回溯回来第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 行的时候，先撤销原来的点，再占领新点，然后再继续搜索</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>], sum, n; <span class="comment">// 每行的皇后都在哪一列</span></span><br><span class="line"><span class="type">bool</span> b[<span class="number">100</span>], c[<span class="number">100</span>], d[<span class="number">100</span>]; <span class="comment">//列，对角线占领情况</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    sum++;</span><br><span class="line">    <span class="keyword">if</span> (sum &lt;= <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> i)</span> <span class="comment">// 目前搜索到第 i 行</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="comment">// 依次尝试所有列能不能放</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 右对角线上的每个点，横纵坐标之和总相等，左对角线是之差总相等，+7是为了避免负数</span></span><br><span class="line">        <span class="keyword">if</span> (!b[j] &amp;&amp; !c[i + j] &amp;&amp; !d[i - j + <span class="number">7</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = j; <span class="comment">//标记本行的第i列放了一个皇后</span></span><br><span class="line">            <span class="comment">// 如果能放，就宣布占领</span></span><br><span class="line">            b[j] = <span class="number">1</span>;</span><br><span class="line">            c[i + j] = <span class="number">1</span>;</span><br><span class="line">            d[i - j + <span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == n) <span class="comment">//放满了就去打印这个解</span></span><br><span class="line">                <span class="built_in">print</span>();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">search</span>(i + <span class="number">1</span>); <span class="comment">//否则继续放下一行</span></span><br><span class="line">            <span class="comment">// 撤回本次尝试，回溯（把这个皇后从棋盘上拿回手里）</span></span><br><span class="line">            b[j] = <span class="number">0</span>;</span><br><span class="line">            c[i + j] = <span class="number">0</span>;</span><br><span class="line">            d[i - j + <span class="number">7</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">search</span>(<span class="number">1</span>); <span class="comment">//从第一行开始</span></span><br><span class="line">    cout &lt;&lt; sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法拾遗 </category>
          
          <category> 搜索技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法拾遗』广度优先搜索（4）：广搜的优化技巧</title>
      <link href="/2022/09/12/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%884%EF%BC%89%EF%BC%9A%E5%B9%BF%E6%90%9C%E7%9A%84%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/09/12/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%884%EF%BC%89%EF%BC%9A%E5%B9%BF%E6%90%9C%E7%9A%84%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="双端队列">双端队列</h1><h2 id="简介">简介</h2><p>普通的 BFS 每一步的代价都是相同的，而双端队列是专门用来处理代价可以为 <code>1</code> 和 <code>0</code> 两种的这种特殊情况：遇到无代价的直接插队到队首，有代价的插到队尾</p><p>当然，你也可以使用优先队列，甚至是各种图遍历算法，但是我感觉解决这种问题还是使用双端队列比较简单</p><h2 id="例题">例题</h2><p>最经典的还是 <a href="https://www.acwing.com/problem/content/177/">Acwing175 电路维修</a></p><details class="toggle" ><summary class="toggle-button" style="">点击查看题目</summary><div class="toggle-content"><ul><li><p><strong>题目描述</strong></p><p>达达是来自异世界的魔女，她在漫无目的地四处漂流的时候，遇到了善良的少女翰翰，从而被收留在地球上。翰翰的家里有一辆飞行车。有一天飞行车的电路板突然出现了故障，导致无法启动。电路板的整体结构是一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span> 行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span> 列的网格，如下图所示。</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209121810430.png" alt="电路.png"></p><p>每个格点都是电线的接点，每个格子都包含一个电子元件。电子元件的主要部分是一个可旋转的、连接一条对角线上的两个接点的短电缆。在旋转之后，它就可以连接另一条对角线的两个接点。电路板左上角的接点接入直流电源，右下角的接点接入飞行车的发动装置。达达发现因为某些元件的方向不小心发生了改变，电路板可能处于断路的状态。她准备通过计算，旋转最少数量的元件，使电源与发动装置通过若干条短缆相连。不过，电路的规模实在是太大了，达达并不擅长编程，希望你能够帮她解决这个问题。</p><p><strong>注意</strong>：只能走斜向的线段，水平和竖直线段不能走。</p></li><li><p><strong>输入格式</strong></p><p>输入文件包含多组测试数据。</p><p>第一行包含一个整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>，表示测试数据的数目。</p><p>对于每组测试数据，第一行包含正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，表示电路板的行数和列数。</p><p>之后 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span> 行，每行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span> 个字符，字符是 <code>/</code> 和 <code>\</code> 中的一个，表示标准件的方向。</p></li><li><p><strong>输出格式</strong></p><p>对于每组测试数据，在单独的一行输出一个正整数，表示所需的最小旋转次数。</p><p>如果无论怎样都不能使得电源和发动机之间连通，输出 <code>NO SOLUTION</code>。</p></li><li><p><strong>数据范围</strong></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">1≤R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span> , <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>≤</mo><mn>500</mn></mrow><annotation encoding="application/x-tex">C≤500</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">500</span></span></span></span> , <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>T</mi><mo>≤</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">1≤T≤5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span></span></span></span></p></li><li><p><strong>输入样例：</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3 5</span><br><span class="line">\\/\\</span><br><span class="line">\\///</span><br><span class="line">/\\\\</span><br></pre></td></tr></table></figure></li><li><p><strong>输出样例：</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure></li></ul></div></details><p>这道题就非常经典，如果邻接点之间有线连接的话，通过代价就是 0 ，没有的话通过代价就是 1</p><p>所以就只需要改变入队时的策略就行了，就像上面说的那样，0 代价的直接插队到队首</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">512</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 四方向：右下，左下，右上，左上</span></span><br><span class="line"><span class="comment">// 向下为 x 正，向右为 y 正</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;; </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义格子坐标：指格子左上角的点的坐标</span></span><br><span class="line"><span class="comment">// 下面的数组是需要判断的格子与当前点的坐标差</span></span><br><span class="line"><span class="comment">// 例如你要往右下走，就需要判断本点(x+0,y+0)的格子，而向右上走，就需要判断正上方点(x+0,y-1)的格子</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> bolckDx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> bolckDy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> freeBlock[<span class="number">4</span>] = &#123;<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>&#125;;</span><br><span class="line"><span class="type">int</span> dist[M][M], n, r, c;</span><br><span class="line"><span class="type">char</span> Map[M][M]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> x, <span class="type">int</span> y) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line">    <span class="built_in">node</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">deque&lt;node&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">-1</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    <span class="comment">// memset(Map, 0, sizeof(Map));</span></span><br><span class="line">    q.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(x &lt; <span class="number">0</span> || x &gt; r || y &lt; <span class="number">0</span> || y &gt; c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    q.<span class="built_in">push_back</span>(<span class="built_in">node</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    dist[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop_front</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> nx = now.x + dx[i];</span><br><span class="line">            <span class="type">int</span> ny = now.y + dy[i];</span><br><span class="line">            <span class="type">int</span> bx = now.x + bolckDx[i];</span><br><span class="line">            <span class="type">int</span> by = now.y + bolckDy[i];</span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt; r || ny &lt; <span class="number">0</span> || ny &gt; c)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Map[bx][by] != freeBlock[i] &amp;&amp; (dist[nx][ny] &gt; dist[now.x][now.y] + <span class="number">1</span> || dist[nx][ny] == <span class="number">-1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                dist[nx][ny] = dist[now.x][now.y] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push_back</span>(<span class="built_in">node</span>(nx, ny));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Map[bx][by] == freeBlock[i] &amp;&amp; (dist[nx][ny] &gt; dist[now.x][now.y] || dist[nx][ny] == <span class="number">-1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                dist[nx][ny] = dist[now.x][now.y];</span><br><span class="line">                q.<span class="built_in">push_front</span>(<span class="built_in">node</span>(nx, ny));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;r, &amp;c);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Map[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((r + c) % <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO SOLUTION\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">bfs</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dist[r][c]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而另外也有一道比较经典的，就是我上学期栽过的，<a href="https://www.nickxu.top/2022/05/08/%E3%80%8E%E8%B5%9B%E5%90%8E%E6%84%9F%E6%83%B3%E3%80%8F2022%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E9%99%A2-Debug-%E6%9D%AF%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B/#T9">杭电2022Debug杯的T9</a></p><hr><h1 id="Hash-判重">Hash 判重</h1><p>在搜索的时候，保存历史状态并进行判重是很重要的，不然就会多走回头路</p><p>这就牵扯到 Hash（哈希，或称散列）函数</p><p>按照我的理解，简单地说，哈希就是把一个大数据（例如几GB的磁盘文件，又例如广搜中的某个搜索状态）转换压缩成一条特征值（字符串或是数字）</p><p>这个特征值有个特点，就是原数据哪怕改变一点点，这个特征值都会改变，比如说：很大的数字对一个质数取模得到特征值</p><p>当然你可以问如果有两组数据哈希过后的值是一样的怎么办？这就是哈希碰撞，如果要考虑碰撞的话，就牵扯到开散列和闭散列了，这个暂时不谈</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209122017524.png" alt="image-20220912201733413"></p><blockquote><p>哈希可以举一个生活中的例子，比如 <code>SHA256</code> 和 <code>SHA512</code> 值，在下载文件的时候经常会给出，考虑到长度，<code>SHA512</code> 几乎没有哈希碰撞的可能</p><p>这个值是通过计算文件的内容得到的，即便是发生了最微小的改变，哈希值也会大不相同</p><p>在下载后，可以在本地重新计算哈希值，然后进行对比，检查下载时是否出错</p></blockquote><p>扯远了，简单地说，就是要根据需要决定是否要构造哈希函数，来更方便地保存搜索中的中间状态，例如八数码里面的康拓展开一样</p><p>常见的哈希函数有：</p><ol><li><p>状态压缩</p><p>一般基础的状压就是将一行的状态压成一个数，这个数的二进制形式反映了这一行的情况，例如一组物品选或不选，用 1 代表选选，0 代表不选</p></li><li><p>直接取余</p><p>选取一个大质数 M 作为除数</p></li><li><p>平方取中</p><p>计算关键值的平方，然后取中间的 K 位</p></li><li><p>折叠法</p><p>把字符串中所有字符的 ASCII 码加起来，可以考虑取余</p></li></ol><hr><h1 id="双向广搜">双向广搜</h1><h2 id="简介-2">简介</h2><p>双向广搜很好理解，朴素 BFS 是从当前状态开始搜索，直到搜到目标状态</p><p>而双向广搜就是从起点和终点同时向对方搜索，若在中间发生相遇，这条拼接的路径就是最优解</p><p>通常有两种策略</p><ol><li>两个方向交替搜索</li><li>每次都选择结点个数较少的那个方向先扩展（更优）</li></ol><h2 id="例题-2">例题</h2><p>经典题目：<a href="http://poj.org/problem?id=1915">Knight Moves(Poj1915)</a></p><details class="toggle" ><summary class="toggle-button" style="">点击查看题目</summary><div class="toggle-content"><ul><li><p><strong>Background</strong><br>Mr Somurolov, fabulous chess-gamer indeed, asserts that no one else but him can move knights from one position to another so fast. Can you beat him?</p></li><li><p><strong>The Problem</strong><br>Your task is to write a program to calculate the minimum number of moves needed for a knight to reach one point from another, so that you have the chance to be faster than Somurolov.<br>For people not familiar with chess, the possible knight moves are shown in Figure 1.</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209131709277.jpeg" alt="img"></p></li><li><p><strong>Input</strong><br>The input begins with the number n of scenarios on a single line by itself.<br>Next follow n scenarios. Each scenario consists of three lines containing integer numbers. The first line specifies the length l of a side of the chess board (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>&lt;</mo><mo>=</mo><mi>l</mi><mo>&lt;</mo><mo>=</mo><mn>300</mn></mrow><annotation encoding="application/x-tex">4 &lt;= l &lt;= 300</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">300</span></span></span></span>). The entire board has size <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mo>∗</mo><mi>l</mi></mrow><annotation encoding="application/x-tex">l * l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>. The second and third line contain pair of integers {0, …, l-1}*{0, …, l-1} specifying the starting and ending position of the knight on the board. The integers are separated by a single blank. You can assume that the positions are valid positions on the chess board of that scenario.</p></li><li><p><strong>Output</strong><br>For each scenario of the input you have to calculate the minimal amount of knight moves which are necessary to move from the starting point to the ending point. If starting point and ending point are equal,distance is zero. The distance must be written on a single line.</p></li><li><p><strong>Sample Input</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">8</span><br><span class="line">0 0</span><br><span class="line">7 0</span><br><span class="line">100</span><br><span class="line">0 0</span><br><span class="line">30 50</span><br><span class="line">10</span><br><span class="line">1 1</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure></li><li><p><strong>Sample Output</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">28</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li></ul></div></details><p>其实就是找两点最短路径，但是棋盘只能走日字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">512</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[<span class="number">8</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[<span class="number">8</span>] = &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> dis[<span class="number">2</span>][N][N];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">2</span>][N][N];</span><br><span class="line"><span class="type">int</span> m, n, sx, sy, tx, ty, ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">int</span> x = <span class="number">0</span>, <span class="type">int</span> y = <span class="number">0</span>) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">queue&lt;point&gt; q[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="keyword">while</span> (!q[<span class="number">0</span>].<span class="built_in">empty</span>())</span><br><span class="line">        q[<span class="number">0</span>].<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">while</span> (!q[<span class="number">1</span>].<span class="built_in">empty</span>())</span><br><span class="line">        q[<span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">expand</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = q[k].<span class="built_in">front</span>().x, y = q[k].<span class="built_in">front</span>().y, d = dis[k][x][y];</span><br><span class="line">    q[k].<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> nx = x + dx[i], ny = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; n &amp;&amp; !vis[k][nx][ny])</span><br><span class="line">        &#123;</span><br><span class="line">            dis[k][nx][ny] = d + <span class="number">1</span>;</span><br><span class="line">            vis[k][nx][ny] = <span class="number">1</span>;</span><br><span class="line">            q[k].<span class="built_in">push</span>(<span class="built_in">point</span>(nx, ny));</span><br><span class="line">            <span class="keyword">if</span> (vis[<span class="number">1</span> - k][nx][ny])</span><br><span class="line">            &#123;</span><br><span class="line">                ans = dis[k][nx][ny] + dis[<span class="number">1</span> - k][nx][ny];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q[<span class="number">0</span>].<span class="built_in">push</span>(<span class="built_in">point</span>(sx, sy));</span><br><span class="line">    q[<span class="number">1</span>].<span class="built_in">push</span>(<span class="built_in">point</span>(tx, ty));</span><br><span class="line">    vis[<span class="number">0</span>][sx][sy] = vis[<span class="number">1</span>][tx][ty] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q[<span class="number">0</span>].<span class="built_in">empty</span>() &amp;&amp; !q[<span class="number">1</span>].<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// printDis();</span></span><br><span class="line">        <span class="keyword">if</span> (q[<span class="number">0</span>].<span class="built_in">size</span>() &lt; q[<span class="number">1</span>].<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">expand</span>(<span class="number">0</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">expand</span>(<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;sx, &amp;sy);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;tx, &amp;ty);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sx != tx || sy != ty)</span><br><span class="line">            <span class="built_in">bfs</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法拾遗 </category>
          
          <category> 搜索技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Twikoo』解决 Vercel.app 在国内被墙导致无法使用的问题</title>
      <link href="/2022/09/11/%E3%80%8ETwikoo%E3%80%8F%E8%A7%A3%E5%86%B3-Vercel-app-%E5%9C%A8%E5%9B%BD%E5%86%85%E8%A2%AB%E5%A2%99%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/09/11/%E3%80%8ETwikoo%E3%80%8F%E8%A7%A3%E5%86%B3-Vercel-app-%E5%9C%A8%E5%9B%BD%E5%86%85%E8%A2%AB%E5%A2%99%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="正文">正文</h1><p>最近，我发现我的评论系统加载不出来，观察了一下，发现是域名被墙了</p><p>但是解决方法也很简单——准备一个新域名，然后把这个域名指过去</p><p>首先先来到 <a href="https://vercel.com/dashboard">vercel 控制台</a>，点进去你的实例</p><p>然后找到 Setting -&gt; Domain</p><p>之后手动添加你的域名进去</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209110932331.png" alt="image-20220911093206217"></p><p>然后他会给出解析配置，你就去改你的域名解析就好了</p><p>搞定之后，访问看看</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209110932456.png" alt="image-20220911093251372"></p><p>（我的这个域名本来是备用的）</p><p>最后去主题配置文件里更新这个新地址就行</p><h1 id="2022年09月12日更">2022年09月12日更</h1><p>发现子域名也可以，如果你已经有一个域名的话，就没必要另外搞一个域名了（</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209121845936.png" alt="image-20220912184510855"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo + Butterfly 建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Twikoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『随笔』写在新学年伊始</title>
      <link href="/2022/09/10/%E3%80%8E%E9%9A%8F%E7%AC%94%E3%80%8F%E5%86%99%E5%9C%A8%E6%96%B0%E5%AD%A6%E5%B9%B4%E4%BC%8A%E5%A7%8B/"/>
      <url>/2022/09/10/%E3%80%8E%E9%9A%8F%E7%AC%94%E3%80%8F%E5%86%99%E5%9C%A8%E6%96%B0%E5%AD%A6%E5%B9%B4%E4%BC%8A%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<p>嗯…如你所见，我最近停更了好久，因为暑假发生了一堆的事情，让我的心态很差</p><p>而且，我也没能完成我的暑假开始立的 Flag</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209101601072.png" alt="截图 2022-09-10 15-56-41"></p><p>我本来写了很长一段话想说明情况，但是最后还是删掉了，还是不提了吧</p><p>已经浪费了太多时间，就更要抓紧现在的时间，赶紧让生活步入正轨，去做更多有意义的事情</p><p>来聊些轻松些的吧！比如最近还发生了哪些正面的事情呢？</p><hr><h1 id="最近的好事情">最近的好事情</h1><h2 id="考试顺利通过">考试顺利通过</h2><p>暑假的时候，得知自己六级裸考过了，还是挺高兴的</p><p>六级的话，不要太焦虑就行了，我四六级一张卷子都没做过，就考前 B 站上找些视频看看就去考了</p><p>这东西越早考越好，其实高考一考完就去考，我不相信有人过不了，毕竟我的英语水平也好不到哪里去，这东西越往后拖越难考</p><p>另外一个就是驾照了，我把科目三考过了</p><p>科目三就是好好记路线+不要紧张就行了，考试前一晚自己在脑海里过一边路线，看看有没有地方没记住的</p><p>把每个细节都拿捏住了，基本就没有什么大问题</p><h2 id="青训营顺利结营">青训营顺利结营</h2><p>第四届字节跳动青训营顺利结束了，虽然没有拿到大项目的奖，但是也能拿到结营证书，这也算是一件好事情</p><p>至少有个交代嘛，而且这东西最后也就大概 50 个人拿到了</p><p>而且前几天，我也拿到上一届的证书和纪念品了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209101628516.png" alt="image-20220910162824955"></p><p>这东西在我放暑假回家了才送到学校，所以只能放同学那里，等开学再过来拿（</p><h2 id="重装了系统">重装了系统</h2><p>细心的你肯定已经发现了，我现在用的不是 Windows 了</p><p>那是 Mac OS 嘛？其实不是，只是我的 Ubuntu 装了个 Mac 的主题</p><p>最近我装了个 Windows + Linux 双系统，并开始把 Linux 作为主力使用，只有打游戏的时候才用 Windows</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209101644037.png" alt="image-20220910164447839"></p><blockquote><p>Windows 和 Linux 各 128G ，然后 Library 是共用的静态存储</p></blockquote><p>为什么呢？因为 WSL 实在是太难用了，我在 GoLand 中使用 WSL2 环境的时候，索引项目的时候总是卡，我是真的受不了</p><p>然后简单了解了一下，发现 WSL2 与 Windows 的文件访问是通过网络层实现的，导致性能非常差劲</p><p>然后又买不起 Mac，就打算直接装个 Linux 试一下</p><p>之后把 Debian 系、 Arch 系，还有国产的 Deepin 都试了，感觉还是 Ubuntu 最好使 <s>（我是真的离不开 apt 哇）</s></p><p>使用 Linux 的话，现在是 2022 年，基本上日常软件都有 Linux 版的了，除了 TIM 和微信</p><p>点名批评腾讯，连百度云盘都有Linux 版的，微信还是没有 Linux</p><p>然后尝试了 deepin-wine ，感觉还是不行，最后用了 crossover，感觉勉勉强强吧</p><p>其实重装系统也有心情的原因，回想初中的时候，我一不高兴就重装系统</p><p>与过去说拜拜 + 有一个崭新的开始对心情的帮助还是挺大的</p><p>最后，感觉这个仿 Mac 主题还挺不错的，比 Windows 颜值高（</p><hr><h1 id="未来的想法">未来的想法</h1><p>走一步看一步，我现在基本规划好最近几年的路径了</p><p>首先已经确定的是我会去考研，408，然后专硕，目标院校暂定本校吧，毕竟我现在 408 几门还没学完，也不知道自己是个什么水平</p><p>然后呢？根据这个框架，大二这一年我想把 408 尽量学完</p><p>当然，首先要把我暑假剩下的东西搞定，也就是 Golang 语法，还有算法拾遗系列</p><p>明年，我不知道能不能去参加一下 Gsoc 或者开源之夏</p><p>本来我也是觉得自己没那个本事的，但是去年我们部门的 iyear 就被选进开源之夏了，他和我是同一个年级的</p><p>然后我就后悔没去，简直不要太羡慕</p><p>然后现在呢，我主要要恢复日更的节奏，不能再像暑假那样了</p>]]></content>
      
      
      <categories>
          
          <category> 随笔与总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Go』使用 Redis 搭建简易分布式锁</title>
      <link href="/2022/08/31/%E3%80%8EGo%E3%80%8F%E4%BD%BF%E7%94%A8-Redis-%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2022/08/31/%E3%80%8EGo%E3%80%8F%E4%BD%BF%E7%94%A8-Redis-%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇总结于  <a href="https://blog.51cto.com/u_13460811/5262747#21__24">Go + Redis 实现分布式锁</a></p></blockquote><p>鄙人最近在参加分布式存储的项目时学习了本内容，特此记录</p><hr><h1 id="为什么要用到分布式锁">为什么要用到分布式锁</h1><p>先从本地的锁开始吧，在 Golang 中可以对本地的某一资源进行加锁（如变量等），以保证你在使用该资源的时候不会被其他协程更改</p><p>而在分布式系统中，若各个节点要同时使用某一个公共资源（比如说交易要修改用户存款，进程修改日志文件等），很容易就会有读写冲突、写写冲突。这时就需要一种抢占资源的机制，在你使用的时候锁住资源，保证你在使用的时候其他人不会捣乱，确保并发安全</p><p>而一种简单的实现方法就是使用 Redis 搭建分布式锁</p><h1 id="简单的原理">简单的原理</h1><p>这东西听上去很高大上，但是其实非常简单</p><p>就是你在访问资源前，先尝试在 Redis 处做个标记</p><p>例如你欲编辑 <code>/file/hello.txt</code> ，就尝试将 <code>[&quot;/file/hello.txt&quot;] = 1</code> 写入 Redis</p><p>而其他人也想做标记的时候，就会发现你已经做过了，就知道你已经抢占了资源，要等你释放</p><h1 id="项目实践">项目实践</h1><p>本人的项目地址：<a href="https://github.com/tiktok-dfs/dfs">https://github.com/tiktok-dfs/dfs</a></p><p>首先肯定要初始化 Redis ，因为项目是本地单机测试的，所以就以单机服务为例</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> RedisDB *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="comment">// InitRedis 初始化redis，用于分布式锁</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRedis</span><span class="params">()</span></span> &#123;</span><br><span class="line">RedisDB = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr: <span class="string">&quot;localhost:6379&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">_, err := RedisDB.Ping().Result()</span><br><span class="line"></span><br><span class="line">Check(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是加锁和解锁</p><p>加锁的时候，使用 <code>.SetNX()</code> 方法，意味只在键不存在时，才对键进行设置操作</p><p>最后一个参数是自动释放时间， <code>0</code> 表示不会自动释放，设置释放时间可以避免因为进程挂掉无法释放的死锁问题</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lock 分布式锁加锁，返回是否加锁成功</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Lock</span><span class="params">(key <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">var</span> result <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">retryTimes := <span class="number">0</span></span><br><span class="line">retryTimes++</span><br><span class="line">success, err := RedisDB.SetNX(key, <span class="string">&quot;1&quot;</span>, <span class="number">0</span>).Result()</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>解决潜在的死锁问题，目前非主动不会释放</span></span><br><span class="line"></span><br><span class="line">Check(err)</span><br><span class="line"><span class="keyword">if</span> success &#123;</span><br><span class="line">result = <span class="literal">true</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> retryTimes &gt;= <span class="number">1000</span> &#123; <span class="comment">// 重试一段时间后放弃尝试</span></span><br><span class="line">log.Println(<span class="string">&quot;retryTimes&gt;=1000&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unlock 分布式锁解锁</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unlock</span><span class="params">(key <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">RedisDB.Del(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208311217301.png" alt="image-20220831121740214"></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Go』gRPC + Protocol Buffers 简易上手指南</title>
      <link href="/2022/08/20/%E3%80%8EGo%E3%80%8FgRPC-Protocol-Buffers-%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/"/>
      <url>/2022/08/20/%E3%80%8EGo%E3%80%8FgRPC-Protocol-Buffers-%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>鄙人最近在参加青训营的项目，要完成一个分布式存储系统，里面就用到了 gRPC 框架，学习之后有所收获，所以特此记录</p><hr><h1 id="理论知识">理论知识</h1><h2 id="什么是-RPC">什么是 RPC</h2><p>要知道什么是 gRPC ，先要了解 RPC（Remote Procedure Call，远程过程调用）</p><p>什么叫做远程过程调用捏？比如说，你在写程序的时候，可以很方便地调用你本地写的函数，但是，如果你想调用其他程序的函数，那该怎么办呢？</p><p>答案是使用 RPC ，它做到这一点，即使目标函数的程序跑在地球的另一边，都没有问题</p><h2 id="什么是-gRPC">什么是 gRPC</h2><p><a href="https://grpc.io/">gRPC</a> 是一个出名的 RPC 框架，它速度很快，而且支持多种语言，它允许你可以在 Go 中调用 Java 乃至 Python 中的函数</p><p>多语言支持是怎么做到的呢？那中间必然是要借助某种通用介质，在这里就是 Protocol Buffers</p><h2 id="什么是-Protocol-Buffers">什么是 Protocol Buffers</h2><p><a href="https://developers.google.cn/protocol-buffers">Protocol Buffers</a> 是谷歌搞的一种数据交换格式（就类似于 JSON ，XML 之类的），常被简写成 protobuf</p><p>但是与 JSON 之类不同的是，Protocol Buffers 不是明文存储的，而是压缩打包成二进制的，这也就是 gRPC 选择 Protocol Buffers 的原因，毕竟传输起来方便</p><p>你要先通过 <code>.proto</code> 文件定义好你的数据结构和调用函数，然后用编译器编译出 <code>xxxxx.pb.go</code> 文件（里边有一堆打包和解包相关的函数方法）和 <code>xxxxx_grpc.pb.go</code> （里边是关于 RPC 的函数方法），之后在你的项目里调用就好了</p><hr><h1 id="上手实践">上手实践</h1><h2 id="准备环境">准备环境</h2><p>根据<a href="https://grpc.io/docs/languages/go/quickstart/">官网上的教程</a>，你有两件事要做：安装 Protocol Buffers 编译器 <code>protoc</code> 和相关的 go 插件</p><h3 id="安装-protoc">安装 protoc</h3><p>前往 <a href="https://github.com/protocolbuffers/protobuf/releases/tag/v21.5">Github 页面</a> 下载对应操作系统的版本</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208202318308.png" alt="image-20220820231848200"></p><p>解压后把 <code>bin</code> 目录添加到 <code>PATH</code> 里，保证命令行里面可以运行 <code>protoc</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208202320377.png" alt="image-20220820232058298"></p><h3 id="安装-go-插件">安装 go 插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28</span><br><span class="line">go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2</span><br></pre></td></tr></table></figure><p>然后把这两个插件的目录也丢到 <code>PATH</code> 里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:<span class="subst">$(go env GOPATH)</span>/bin&quot;</span></span><br></pre></td></tr></table></figure><h2 id="编写-proto-文件">编写 <code>.proto</code> 文件</h2><p>这里我就不写了，下面都拿我项目里面的代码来演示</p><p>项目地址：<a href="https://github.com/tiktok-dfs/dfs">https://github.com/tiktok-dfs/dfs</a> （等公开后即可访问）</p><p>在我的这个项目里， client 会向 namenode 发送一些请求，我们要先定义好传递的结构体和方法</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208210001332.png" alt="image-20220821000121232"></p><p>首先在文件开头先交代好语法版本、包名、生成路径，下面就写你要传递的那些类型，还要注册方法</p><p>定义类型的语法：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">message 结构体名（请求体或者响应体）&#123;</span><br><span class="line">    <span class="type">string</span> 参数<span class="number">1</span> = <span class="number">1</span>; <span class="comment">// 后面的 = 1 这些一定要加上</span></span><br><span class="line">    <span class="type">bool</span>   参数<span class="number">2</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int64</span>  参数<span class="number">3</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 如果是可选的，那就在前面加上 optional </span></span><br><span class="line">    <span class="comment">// 如果是可重复的（数组切片），就在前面加上 repeated</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而这里使用的类型，可以参考下表</p><table><thead><tr><th><strong>.proto Type</strong></th><th><strong>Notes</strong></th><th><strong>C++ Type</strong></th><th><strong>Python Type</strong></th><th><strong>Go Type</strong></th></tr></thead><tbody><tr><td>double</td><td></td><td>double</td><td>float</td><td>float64</td></tr><tr><td>float</td><td></td><td>float</td><td>float</td><td>float32</td></tr><tr><td>int32</td><td>使用变长编码，对于负值的效率很低，如果你的域有 可能有负值，请使用sint64替代</td><td>int32</td><td>int</td><td>int32</td></tr><tr><td>uint32</td><td>使用变长编码</td><td>uint32</td><td>int/long</td><td>uint32</td></tr><tr><td>uint64</td><td>使用变长编码</td><td>uint64</td><td>int/long</td><td>uint64</td></tr><tr><td>sint32</td><td>使用变长编码，这些编码在负值时比int32高效的多</td><td>int32</td><td>int</td><td>int32</td></tr><tr><td>sint64</td><td>使用变长编码，有符号的整型值。编码时比通常的 int64高效。</td><td>int64</td><td>int/long</td><td>int64</td></tr><tr><td>fixed32</td><td>总是4个字节，如果数值总是比总是比228大的话，这 个类型会比uint32高效。</td><td>uint32</td><td>int</td><td>uint32</td></tr><tr><td>fixed64</td><td>总是8个字节，如果数值总是比总是比256大的话，这 个类型会比uint64高效。</td><td>uint64</td><td>int/long</td><td>uint64</td></tr><tr><td>sfixed32</td><td>总是4个字节</td><td>int32</td><td>int</td><td>int32</td></tr><tr><td>sfixed32</td><td>总是4个字节</td><td>int32</td><td>int</td><td>int32</td></tr><tr><td>sfixed64</td><td>总是8个字节</td><td>int64</td><td>int/long</td><td>int64</td></tr><tr><td>bool</td><td></td><td>bool</td><td>bool</td><td>bool</td></tr><tr><td>string</td><td>一个字符串必须是UTF-8编码或者7-bit ASCII编码的文 本。</td><td>string</td><td>str/unicode</td><td>string</td></tr><tr><td>bytes</td><td>可能包含任意顺序的字节数据。</td><td>string</td><td>str</td><td>[]byte</td></tr></tbody></table><p>例如客户端要查看一个目录下的文件和其他目录，那么请求体就是这样的</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">ListReq</span> &#123;</span><br><span class="line">  <span class="type">string</span> ParentPath = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应体里边文件和目录分开返回，我就这样写</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">ListResp</span> &#123;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="type">string</span> DirName = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="type">string</span> FileName = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在 service 里注册这个方法，语法如下</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">rpc</span> 方法名(请求体) <span class="keyword">returns</span> （响应体）</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>这样一来，service 里就是这个样子</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">service </span><span class="title class_">NameNodeService</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> GetBlockSize(GetBlockSizeRequest) <span class="keyword">returns</span> (GetBlockSizeResponse)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> ReadData(ReadRequst) <span class="keyword">returns</span> (ReadResponse)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> WriteData(WriteRequest) <span class="keyword">returns</span> (WriteResponse)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> DeleteData(DeleteDataReq) <span class="keyword">returns</span> (DeleteDataResp)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> StatData(StatDataReq) <span class="keyword">returns</span> (StatDataResp)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> GetDataNodes(GetDataNodesReq) <span class="keyword">returns</span> (GetDataNodesResp)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> IsDir(IsDirReq) <span class="keyword">returns</span> (IsDirResp)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> Rename(RenameReq) <span class="keyword">returns</span> (RenameResp)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> Mkdir(MkdirReq) <span class="keyword">returns</span> (MkdirResp)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> List(ListReq) <span class="keyword">returns</span> (ListResp)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> ReDirTree(ReDirTreeReq) <span class="keyword">returns</span> (ReDirTreeResp)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过下面的命令编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths</span><br><span class="line">=source_relative .\proto\namenode\namenode.proto</span><br></pre></td></tr></table></figure><p>通过编译器编译之后，你就能在生成的代码里找到这些方法</p><h2 id="客户端发起连接与请求">客户端发起连接与请求</h2><p>在客户端，你先需要使用 <code>grpc.Dial()</code> 发起连接，获取一个 <code>*grpc.ClientConn</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211050390.png" alt="image-20220821105041287"></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> client</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;go-fs/client&quot;</span></span><br><span class="line"><span class="string">&quot;go-fs/pkg/util&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListHandler</span><span class="params">(nameNodeAddress <span class="type">string</span>, parentPath <span class="type">string</span>)</span></span> (*client.ListResp, <span class="type">error</span>) &#123;</span><br><span class="line">rpcClient, err := initializeClientUtil(nameNodeAddress)</span><br><span class="line">util.Check(err)</span><br><span class="line"><span class="keyword">defer</span> rpcClient.Close()</span><br><span class="line"><span class="keyword">return</span> client.List(rpcClient, parentPath)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initializeClientUtil</span><span class="params">(nameNodeAddress <span class="type">string</span>)</span></span> (*grpc.ClientConn, <span class="type">error</span>) &#123;</span><br><span class="line">host, port, err := net.SplitHostPort(nameNodeAddress)</span><br><span class="line">util.Check(err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> grpc.Dial(host+<span class="string">&quot;:&quot;</span>+port, grpc.WithTransportCredentials(insecure.NewCredentials()))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用生成的代码，传入这个连接和请求体，就可以拿到响应体</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211055973.png" alt="image-20220821105522867"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> client</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">dn <span class="string">&quot;go-fs/proto/datanode&quot;</span></span><br><span class="line">namenode_pb <span class="string">&quot;go-fs/proto/namenode&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">List</span><span class="params">(nameNodeConn *grpc.ClientConn, parentPath <span class="type">string</span>)</span></span> (*ListResp, <span class="type">error</span>) &#123;</span><br><span class="line">resp, err := namenode_pb.NewNameNodeServiceClient(nameNodeConn).List(context.Background(), &amp;namenode_pb.ListReq&#123;</span><br><span class="line">ParentPath: parentPath,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;NameNode List Error:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;ListResp&#123;</span><br><span class="line">FileName: resp.FileName,</span><br><span class="line">DirName:  resp.DirName,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="NameNode-响应请求">NameNode 响应请求</h2><p>NameNode 这边就拿到请求，然后返回就好了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211103169.png" alt="image-20220821110335050"></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> namenode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">dn <span class="string">&quot;go-fs/proto/datanode&quot;</span></span><br><span class="line">namenode_pb <span class="string">&quot;go-fs/proto/namenode&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ..</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Service <span class="keyword">struct</span> &#123;</span><br><span class="line">namenode_pb.UnimplementedNameNodeServiceServer</span><br><span class="line"></span><br><span class="line">Port               <span class="type">uint16</span></span><br><span class="line">BlockSize          <span class="type">uint64</span></span><br><span class="line">ReplicationFactor  <span class="type">uint64</span></span><br><span class="line">IdToDataNodes      <span class="keyword">map</span>[<span class="type">uint64</span>]util.DataNodeInstance</span><br><span class="line">FileNameToBlocks   <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span></span><br><span class="line">BlockToDataNodeIds <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">uint64</span></span><br><span class="line">DataNodeMessageMap <span class="keyword">map</span>[<span class="type">string</span>]DataNodeMessage</span><br><span class="line">DirTree            *tree.DirTree</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Service)</span></span> List(c context.Context, req *namenode_pb.ListReq) (*namenode_pb.ListResp, <span class="type">error</span>) &#123;</span><br><span class="line">path := util.ModPath(req.ParentPath)</span><br><span class="line">dir := s.DirTree.FindSubDir(path)</span><br><span class="line"><span class="keyword">var</span> dirNameList []<span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> fileNameList []<span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> _, str := <span class="keyword">range</span> dir &#123;</span><br><span class="line">resp, err := s.IsDir(context.Background(), &amp;namenode_pb.IsDirReq&#123;</span><br><span class="line">Filename: path + str + <span class="string">&quot;/&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;NameNode IsDir Error:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> &amp;namenode_pb.ListResp&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> resp.Ok &#123;</span><br><span class="line"><span class="comment">//是目录</span></span><br><span class="line">dirNameList = <span class="built_in">append</span>(dirNameList, str)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fileNameList = <span class="built_in">append</span>(fileNameList, str)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;namenode_pb.ListResp&#123;</span><br><span class="line">FileName: fileNameList,</span><br><span class="line">DirName:  dirNameList,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L20：大数据可视化理论与案例分析</title>
      <link href="/2022/08/20/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL20%EF%BC%9A%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
      <url>/2022/08/20/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL20%EF%BC%9A%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7130134071232954404#heading-68">【大数据专场 学习资料七】第四届字节跳动青训营 - 掘金</a></p></div></details><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011722282.png" alt="image-20220901092222885"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011723285.png" alt="image-20220901172327100"></p><h1 id="定义">定义</h1><h2 id="什么是可视化">什么是可视化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011725237.png" alt="image-20220901172508977"></p><h2 id="什么是数据可视化">什么是数据可视化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011725228.png" alt="image-20220901172544964"></p><p>静态/不可交互 -&gt; 动态/可交互</p><h2 id="数据可视化作用">数据可视化作用</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011726776.png" alt="image-20220901172628551"></p><p>拿破仑进攻/撤退图，粗细表示军队人数，与下面的温度图表有很强的关联性</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011728907.png" alt="image-20220901172832726"></p><p>统计学特征</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011729586.png" alt="image-20220901172910383"></p><h1 id="原理">原理</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011730785.png" alt="image-20220901173020624"></p><h2 id="数据">数据</h2><h3 id="定义-2">定义</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011734230.png" alt="image-20220901173425015"></p><h3 id="数据和数据集">数据和数据集</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011735559.png" alt="image-20220901173524368"></p><h3 id="表格">表格</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011736121.png" alt="image-20220901173626937"></p><h3 id="多维表格">多维表格</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011737719.png" alt="image-20220901173700524"></p><h3 id="网络图和树图">网络图和树图</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011737466.png" alt="image-20220901173754234"></p><h3 id="场">场</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011738300.png" alt="image-20220901173839087"></p><h3 id="几何数据">几何数据</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011739899.png" alt="image-20220901173915676"></p><h3 id="属性分类">属性分类</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011740816.png" alt="image-20220901174003588"></p><h2 id="编码">编码</h2><h3 id="认知">认知</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011741688.png" alt="image-20220901174131438"></p><h3 id="图元">图元</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011742408.png" alt="image-20220901174221251"></p><h3 id="通道">通道</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011744581.png" alt="image-20220901174407366"></p><h3 id="编码-2">编码</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011744415.png" alt="image-20220901174428213"></p><h3 id="举例">举例</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011746621.png" alt="image-20220901174630454"></p><h3 id="编码有效性">编码有效性</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011747625.png" alt="image-20220901174742439"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011748202.png" alt="image-20220901174849978"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209011749187.png" alt="image-20220901174929967"></p><h2 id="交互">交互</h2><h3 id="分类">分类</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021348206.png" alt="image-20220902134852024"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021350917.png" alt="image-20220902135024695"></p><p>（几个gif）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021350251.png" alt="image-20220902135035066"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021350891.png" alt="image-20220902135057744"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021351492.png" alt="image-20220902135112326"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021351374.png" alt="image-20220902135141234"></p><h1 id="案例">案例</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021352955.png" alt="image-20220902135225700"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021354295.png" alt="image-20220902135431091"></p><p>这个太经典了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021355261.png" alt="image-20220902135530029"></p><p>这个也经典，后面销量其实是下降的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021356040.png" alt="image-20220902135658838"></p><p>历史上的传染病人口死亡规模</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021400065.png" alt="image-20220902140009936"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021358384.png" alt="image-20220902135843229"></p><p>很多人没有达到预测年龄就被枪击死亡了（动图）</p><h1 id="学习">学习</h1><h2 id="综合">综合</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021400467.png" alt="image-20220902140058237"></p><h2 id="理论">理论</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021402961.png" alt="image-20220902140226714"></p><h2 id="编程">编程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021402374.png" alt="image-20220902140246202"></p><h2 id="前沿">前沿</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021407938.png" alt="image-20220902140732700"></p><h2 id="实践">实践</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021408398.png" alt="image-20220902140816214"></p><h2 id="我们在做的事情">我们在做的事情</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021410358.png" alt="image-20220902141016140"></p><h1 id="课程总结">课程总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209021412683.png" alt="image-20220902141223412"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L19：用户数据分析理论与最佳实践</title>
      <link href="/2022/08/19/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL19%EF%BC%9A%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/08/19/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL19%EF%BC%9A%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%90%86%E8%AE%BA%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7130134071232954404#heading-0">【大数据专场 学习资料七】第四届字节跳动青训营 - 掘金</a></p></div></details><h1 id="P1：基础篇">P1：基础篇</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291037600.png" alt="image-20220829103741375"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291038206.png" alt="image-20220829103810032"></p><h2 id="为什么要做用户数据分析">为什么要做用户数据分析</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291039345.png" alt="image-20220829103934090"></p><h2 id="数据分析的各个环节">数据分析的各个环节</h2><h3 id="数据分析全景图">数据分析全景图</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291040075.png" alt="image-20220829104040870"></p><h3 id="指标体系和指标分级">指标体系和指标分级</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291510637.png" alt=""></p><h3 id="手游业务指标体系示意">手游业务指标体系示意</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291517307.png" alt="image-20220829151726070"></p><p>口径：你怎么算出来的</p><h3 id="搭建指标体系的价值">搭建指标体系的价值</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291521871.png" alt="image-20220829152158554"></p><h3 id="数据分析的各个环节-2">数据分析的各个环节</h3><h4 id="埋点简介">埋点简介</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291522050.png" alt="image-20220829152220803"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291525891.png" alt="image-20220829152508546"></p><h4 id="常见的分析工具">常见的分析工具</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291527337.png" alt="image-20220829152729090"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291527186.png" alt="image-20220829152750929"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291530535.png" alt="image-20220829153001233"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291530731.png" alt="image-20220829153048387"></p><ol><li>维度：分组项（日期和操作系统），指标：设备去重数</li><li>聚和，最大最小…</li><li>可以，但一般会先划分</li></ol><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291533899.png" alt="image-20220829153316529"></p><h4 id="数据可视化">数据可视化</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291534027.png" alt="image-20220829153411788"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291534481.png" alt="image-20220829153417185"></p><p>选择合适的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291534363.png" alt="image-20220829153437073"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291534493.png" alt="image-20220829153449228"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291534950.png" alt="image-20220829153454664"></p><h2 id="数据分析的流程和案例">数据分析的流程和案例</h2><h3 id="分析流程">分析流程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291536122.png" alt="image-20220829153642854"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291537622.png" alt="image-20220829153753252"></p><h3 id="案例">案例</h3><h4 id="获取">获取</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291538417.png" alt="image-20220829153832099"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291538742.png" alt="image-20220829153854398"></p><h4 id="激活">激活</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291539260.png" alt="image-20220829153925884"></p><p>思考各个环节，哪些是要重点改进的地方</p><h4 id="留存">留存</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291540097.png" alt="image-20220829154028749"></p><h4 id="收入">收入</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291540982.png" alt="image-20220829154042704"></p><p>可以得出结论，这个游戏就是靠头部用户来维持运营的，来指导产品经营</p><h3 id="数据分析常见的问题">数据分析常见的问题</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291543864.png" alt="image-20220829154304641"></p><h2 id="总结-思考">总结&amp;思考</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291544811.png" alt="image-20220829154446510"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291544174.png" alt="image-20220829154453890"></p><h1 id="P2：进阶篇">P2：进阶篇</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291549440.png" alt="image-20220829154902165"></p><h2 id="机器学习概览">机器学习概览</h2><h3 id="为什么要机器学习">为什么要机器学习</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291549493.png" alt="image-20220829154939288"></p><h3 id="什么是机器学习">什么是机器学习</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291550590.png" alt="image-20220829155007322"></p><p>例：垃圾邮件过滤程序</p><p>开发者自己从现有的样本提取特性信息，对于新的样本又要手动增加过滤规则</p><p>使用机器学习，自动总结、添加规律</p><h3 id="机器学习算法有哪些">机器学习算法有哪些</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291554840.png" alt="image-20220829155449552"></p><h3 id="机器学习的挑战有哪些">机器学习的挑战有哪些</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291555595.png" alt="image-20220829155537350"></p><h2 id="特征工程">特征工程</h2><h3 id="概述">概述</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291556945.png" alt="image-20220829155639741"></p><h3 id="流程">流程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291558101.png" alt="image-20220829155843838"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291558363.png" alt="image-20220829155853108"></p><ul><li>数据理解<ul><li>结构化/非结构化</li><li>定量/定性</li></ul></li><li>数据预处理<ul><li>衡量数据质量<ul><li>准确性</li><li>完整性</li><li>一致性</li><li>时效性</li><li>可信性</li><li>解释性</li></ul></li><li>主要步骤<ul><li>数据清洗<ul><li>缺失值</li><li>异常值</li><li>噪声</li></ul></li><li>数据集成<ul><li>实体识别</li><li>冗余</li><li>数据值冲突</li></ul></li><li>数据规约<ul><li>维度规约</li><li>维度变换</li></ul></li><li>数据交换<ul><li>规范化</li><li>离散化</li><li>稀疏化</li></ul></li></ul></li></ul></li><li>特征构造<ul><li>聚合</li><li>转换</li></ul></li><li>特征选择<ul><li>Filter 方法（过滤式）</li><li>Wrapper方法（封装式）</li><li>Embedded方法（嵌入式）</li></ul></li></ul><p>（这些在学习资料里有很详细的说明）</p><h3 id="Embedding-概览">Embedding 概览</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291610613.png" alt="image-20220829161046367"></p><h3 id="Embedding-产生过程">Embedding 产生过程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291611100.png" alt="image-20220829161127845"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291611894.png" alt="image-20220829161137649"></p><h3 id="Embedding-意义作用">Embedding 意义作用</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291612958.png" alt="image-20220829161201751"></p><h3 id="Embedding-应用场景">Embedding 应用场景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291612215.png" alt="image-20220829161216918"></p><h2 id="聚类算法">聚类算法</h2><h3 id="概览简介">概览简介</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291612426.png" alt="image-20220829161237097"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291613423.png" alt="image-20220829161322133"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291613011.png" alt="image-20220829161329693"></p><h3 id="指标波动">指标波动</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291614538.png" alt="image-20220829161407335"></p><h3 id="K-means">K-means</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291614216.png" alt="image-20220829161448947"></p><h2 id="聚类画像分析">聚类画像分析</h2><h3 id="概览简介-2">概览简介</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291618595.png" alt="image-20220829161846348"></p><h3 id="流程-2">流程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291619493.png" alt="image-20220829161912283"></p><h3 id="分析过程">分析过程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291622522.png" alt="image-20220829162226297"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291623200.png" alt="image-20220829162334888"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291624247.png" alt="image-20220829162403958"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291626665.png" alt="image-20220829162611433"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291626477.png" alt="image-20220829162655198"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291627757.png" alt="image-20220829162717468"></p><p>左：北极星</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291628457.png" alt="image-20220829162801119"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291628288.png" alt="image-20220829162842047"></p><h3 id="应用场景">应用场景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291628072.png" alt="image-20220829162852764"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L18：数据中心建设实践思路与企业实践</title>
      <link href="/2022/08/17/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL18%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E5%BB%BA%E8%AE%BE%E5%AE%9E%E8%B7%B5%E6%80%9D%E8%B7%AF%E4%B8%8E%E4%BC%81%E4%B8%9A%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/08/17/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL18%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E5%BB%BA%E8%AE%BE%E5%AE%9E%E8%B7%B5%E6%80%9D%E8%B7%AF%E4%B8%8E%E4%BC%81%E4%B8%9A%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7130131931722678308#heading-104">【大数据专场 学习资料六】第四届字节跳动青训营 - 掘金</a></p></div></details><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251053030.png" alt="image-20220825105328879"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251054089.png" alt="image-20220825105438973"></p><h1 id="企业数据架构">企业数据架构</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251057176.png" alt="image-20220825105745083"></p><h2 id="数据集成">数据集成</h2><h3 id="业务数据收集">业务数据收集</h3><h4 id="CDC">CDC</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251101585.png" alt="image-20220825110112486"></p><h4 id="Log">Log</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251102241.png" alt="image-20220825110222108"></p><h3 id="系统间同步传输">系统间同步传输</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251102185.png" alt="image-20220825110259036"></p><h2 id="数据生产-离线-实时">数据生产 - 离线&amp;实时</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251103146.png" alt="image-20220825110355993"></p><h2 id="数据服务">数据服务</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251106667.png" alt="image-20220825110620562"></p><h1 id="数据中心案例">数据中心案例</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251112771.png" alt="image-20220825111236684"></p><h2 id="核心业务指标">核心业务指标</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251115619.png" alt="image-20220825111502508"></p><h2 id="数据查询要求">数据查询要求</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251116572.png" alt="image-20220825111653464"></p><h1 id="实时数据生产">实时数据生产</h1><h2 id="数据分析">数据分析</h2><h3 id="数据产出目标">数据产出目标</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251119082.png" alt="image-20220825111913955"></p><h3 id="数据生产可行性">数据生产可行性</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251121636.png" alt="image-20220825112113506"></p><h2 id="计算分析">计算分析</h2><h3 id="目标">目标</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251128164.png" alt="image-20220825112857030"></p><h3 id="计算架构-Lambda">计算架构 - Lambda</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251129612.png" alt="image-20220825112957521"></p><h4 id="数据产出">数据产出</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251131196.png" alt="image-20220825113113072"></p><p>查询的时候把离线和实时合并后返回</p><h4 id="问题">问题</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251132258.png" alt="image-20220825113242127"></p><p>过去的离线数据在今天发生变更，这是一个问题</p><h3 id="计算架构-全量计算">计算架构 - 全量计算</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251136211.png" alt="image-20220825113614058"></p><h4 id="问题解决">问题解决</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251136745.png" alt="image-20220825113641594"></p><h4 id="全量计算问题">全量计算问题</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251137418.png" alt="image-20220825113740290"></p><h3 id="计算架构-架构选择">计算架构 - 架构选择</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251138217.png" alt="image-20220825113833109"></p><h2 id="计算难点">计算难点</h2><h3 id="全量数据获取-Hybrid-Source">全量数据获取 - Hybrid Source</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251140047.png" alt="image-20220825114007933"></p><h3 id="准确-处理去重-更新">准确 - 处理去重&amp;更新</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208251140785.png" alt="image-20220825114051671"></p><h3 id="准确-Join-乱序问题场景">准确 - Join 乱序问题场景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261231587.png" alt="image-20220826123127347"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261234226.png" alt="image-20220826123418976"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261235663.png" alt="image-20220826123523447"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261237097.png" alt="image-20220826123707883"></p><h3 id="效率-聚合">效率 - 聚合</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261238541.png" alt="image-20220826123800278"></p><h3 id="效率-Join">效率 - Join</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261324589.png" alt="image-20220826132401467"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261326735.png" alt="image-20220826132659614"></p><h3 id="数据质量">数据质量</h3><h4 id="任务稳定性">任务稳定性</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261328682.png" alt="image-20220826132841537"></p><h4 id="数据持续正确性">数据持续正确性</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261330281.png" alt="image-20220826133027152"></p><h3 id="计算总结">计算总结</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261331051.png" alt="image-20220826133154898"></p><h2 id="数仓建设">数仓建设</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261337414.png" alt="image-20220826133717288"></p><h3 id="数据组织方案">数据组织方案</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261339211.png" alt="image-20220826133927104"></p><h3 id="元数据管理">元数据管理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261340062.png" alt="image-20220826134012961"></p><h1 id="数据服务-2">数据服务</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261343449.png" alt="image-20220826134312353"></p><h2 id="查询快">查询快</h2><h3 id="引擎选择">引擎选择</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261345904.png" alt="image-20220826134536763"></p><h3 id="怎么做">怎么做</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261346440.png" alt="image-20220826134626338"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261348462.png" alt="image-20220826134850348"></p><p>列存的重要性</p><h3 id="筛选">筛选</h3><h4 id="分区">分区</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261350551.png" alt="image-20220826135023441"></p><h4 id="主键构建">主键构建</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261631306.png" alt="image-20220826163107183"></p><h4 id="主键查找">主键查找</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261632392.png" alt="image-20220826163228296"></p><h3 id="原始信息关联">原始信息关联</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261633704.png" alt="image-20220826163355587"></p><h3 id="计算向量化">计算向量化</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261636044.png" alt="image-20220826163622909"></p><h3 id="执行计划">执行计划</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261637213.png" alt="image-20220826163712114"></p><h3 id="应用优化">应用优化</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261639011.png" alt="image-20220826163944892"></p><h3 id="宽表构建">宽表构建</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208261640533.png" alt="image-20220826164055433"></p><h3 id="提升信息密度">提升信息密度</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291030353.png" alt="image-20220829103041158"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291031822.png" alt="image-20220829103141613"></p><h2 id="稳定">稳定</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291032630.png" alt="image-20220829103258475"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291033417.png" alt="image-20220829103340154"></p><h2 id="数据管理">数据管理</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291034946.png" alt="image-20220829103421708"></p><h1 id="课程总结">课程总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208291034120.png" alt="image-20220829103432861"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L17：深入理解 K8S 资源管理和调度</title>
      <link href="/2022/08/16/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL17%EF%BC%9A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-K8S-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%92%8C%E8%B0%83%E5%BA%A6/"/>
      <url>/2022/08/16/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL17%EF%BC%9A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-K8S-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%92%8C%E8%B0%83%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7130131931722678308#heading-74">【大数据专场 学习资料六】第四届字节跳动青训营 - 掘金</a></p></div></details><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231811534.png" alt="image-20220823181141375"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231812651.png" alt="image-20220823181250430"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231815983.png" alt="image-20220823181530827"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231818074.png" alt="image-20220823181801922"></p><h1 id="Kubernetes-简介">Kubernetes 简介</h1><h2 id="为什么要-k8s">为什么要 k8s</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231821526.png" alt="image-20220823182120206"></p><h2 id="k8s-是什么">k8s 是什么</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231821916.png" alt="image-20220823182136690"></p><h2 id="k8s-核心概念">k8s 核心概念</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231826990.png" alt="image-20220823182643714"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231828537.png" alt="image-20220823182833324"></p><h3 id="Pod">Pod</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231829876.png" alt="image-20220823182950636"></p><ul><li>spec：pod的核心配置，可以配置多个 containers</li></ul><h3 id="Volume-PV-PVC-StrorageClass">Volume/PV/PVC/StrorageClass</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231834079.png" alt="image-20220823183402836"></p><p>Volume 太老了直接跳过</p><h3 id="Deployment">Deployment</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231834493.png" alt="image-20220823183445278"></p><p>template 就是一个 pod 的声明</p><h3 id="StatefulSet">StatefulSet</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231835279.png" alt="image-20220823183546065"></p><h3 id="Node">Node</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231837492.png" alt="image-20220823183721295"></p><h2 id="k8s-设计准则">k8s 设计准则</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232018827.png" alt="image-20220823201801594"></p><ul><li>声明式而不是命令式：告诉 k8s 最终想要什么状态，而不是具体要做什么做什么</li><li>控制循环：怎么生成中间步骤呢？通过控制循环</li><li>简单</li><li>模块化</li><li>向下兼容</li><li>开放</li></ul><h2 id="k8s-架构">k8s 架构</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232020521.png" alt="image-20220823202000333"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232023529.png" alt="image-20220823202305316"></p><h2 id="k8s-核心通信机制-List-Watch">k8s 核心通信机制 List-Watch</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232032897.png" alt="image-20220823203203718"></p><p>这里老师讲得真的很清楚，而且认为这个机制是 k8s 最大的特色</p><h2 id="k8s-核心功能">k8s 核心功能</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232035203.png" alt="image-20220823203515934"></p><h1 id="资源管理">资源管理</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232037781.png" alt="image-20220823203732581"></p><h2 id="资源上报">资源上报</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232040151.png" alt="image-20220823204019893"></p><h2 id="节点资源样例">节点资源样例</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232041341.png" alt="image-20220823204106132"></p><h2 id="资源分配">资源分配</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232041766.png" alt="image-20220823204122462"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232042308.png" alt="image-20220823204224000"></p><h2 id="状态维护">状态维护</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232045586.png" alt="image-20220823204517359"></p><h2 id="资源回收">资源回收</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232046482.png" alt="image-20220823204607227"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232046133.png" alt="image-20220823204622873"></p><h1 id="调度">调度</h1><h2 id="资源申请">资源申请</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232047888.png" alt="image-20220823204712610"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232047538.png" alt="image-20220823204730261"></p><p>request和limits：底线和上限</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232048838.png" alt="image-20220823204823531"></p><h2 id="调度流程">调度流程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232051346.png" alt="image-20220823205142052"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232053832.png" alt="image-20220823205324557"></p><h2 id="示例">示例</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232053944.png" alt="image-20220823205353702"></p><h3 id="MySQL">MySQL</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232054854.png" alt="image-20220823205444603"></p><h3 id="WordPress">WordPress</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232055209.png" alt="image-20220823205510921"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232055017.png" alt="image-20220823205542790"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232055180.png" alt="image-20220823205547941"></p><h1 id="优化实践">优化实践</h1><h2 id="k8s-还可以更好">k8s 还可以更好</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232058763.png" alt="image-20220823205836525"></p><h2 id="字节的一些工作">字节的一些工作</h2><h3 id="资源管理-2">资源管理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232105186.png" alt="image-20220823210555875"></p><h3 id="功能增强">功能增强</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232107873.png" alt="image-20220823210736589"></p><h3 id="性能优化">性能优化</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232108320.png" alt="image-20220823210810036"></p><h3 id="调度质量">调度质量</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232108905.png" alt="image-20220823210832614"></p><h2 id="k8s-和-Yarn-的一些不同">k8s 和 Yarn 的一些不同</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232112664.png" alt="image-20220823211202367"></p><ul><li>k8s：拿着应用找节点</li><li>yarn：拿着节点找应用</li></ul><p>k8s的调度质量高，但是性能差</p><h1 id="课程总结">课程总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208232113287.png" alt="image-20220823211312024"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L16：走进 Yarn 资源管理和调度</title>
      <link href="/2022/08/14/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL16%EF%BC%9A%E8%B5%B0%E8%BF%9B-Yarn-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%92%8C%E8%B0%83%E5%BA%A6/"/>
      <url>/2022/08/14/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL16%EF%BC%9A%E8%B5%B0%E8%BF%9B-Yarn-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%92%8C%E8%B0%83%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7130131931722678308#heading-10">【大数据专场 学习资料六】第四届字节跳动青训营 - 掘金</a></p></div></details><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231029986.png" alt="image-20220823102905340"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231030342.png" alt="image-20220823103044121"></p><hr><h1 id="YARN-概述">YARN 概述</h1><h2 id="初识调度系统">初识调度系统</h2><h3 id="场景导入">场景导入</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231032116.png" alt="image-20220823103235842"></p><h3 id="一种简易分配模型">一种简易分配模型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231033805.png" alt="image-20220823103345559"></p><h3 id="优化的分配模型">优化的分配模型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231035574.png" alt="image-20220823103505328"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231038428.png" alt="image-20220823103826152"></p><h2 id="调度系统演进">调度系统演进</h2><h3 id="调度系统发展的背景">调度系统发展的背景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231041795.png" alt="image-20220823104116559"></p><h3 id="调度系统解决的问题">调度系统解决的问题</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231041352.png" alt="image-20220823104139130"></p><h3 id="调度系统预达的目标">调度系统预达的目标</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231042053.png" alt="image-20220823104218756"></p><h3 id="调度系统模型">调度系统模型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231045795.png" alt="image-20220823104559558"></p><p>主要是前两者用的比较多</p><h2 id="YARN-设计思想">YARN 设计思想</h2><h3 id="演化背景">演化背景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231048101.png" alt="image-20220823104833882"></p><h3 id="离线生态">离线生态</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231048220.png" alt="image-20220823104816989"></p><h3 id="面临挑战">面临挑战</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231049077.png" alt="image-20220823104921783"></p><h2 id="YARN-整体架构">YARN 整体架构</h2><h3 id="系统架构">系统架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231050197.png" alt="image-20220823105023876"></p><h3 id="任务运行生命周期核心流程">任务运行生命周期核心流程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231052584.png" alt="image-20220823105201344"></p><p>这里视频里讲得很清楚</p><p>Client 把任务提交到 Resource Manager，然后 RM 会拉起 AM</p><p>AM 再用心跳交互资源的申请和分配，再去拉起对应的节点</p><p>运行中，AM 会监控，运行结束后 AM  会向 RM 注销</p><h1 id="核心模块">核心模块</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231057918.png" alt="image-20220823105724705"></p><h2 id="Resource-Manager">Resource Manager</h2><h3 id="整体架构">整体架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231100175.png" alt="image-20220823110034854"></p><h3 id="主要职责">主要职责</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231100836.png" alt="image-20220823110045546"></p><h3 id="状态机管理">状态机管理</h3><h4 id="RMApp-状态机">RMApp 状态机</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231102657.png" alt="image-20220823110203357"></p><h4 id="RMAppAttempt">RMAppAttempt</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231109633.png" alt="image-20220823110959340"></p><h4 id="RMContainer">RMContainer</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231110532.png" alt="image-20220823111056231"></p><h4 id="RMNode">RMNode</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231112180.png" alt="image-20220823111202879"></p><h3 id="调度器分析">调度器分析</h3><h4 id="任务-资源组织">任务/资源组织</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231112004.png" alt="image-20220823111249702"></p><h4 id="调度流程">调度流程</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231113091.png" alt="image-20220823111333763"></p><h4 id="典型调度器">典型调度器</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231529419.png" alt="image-20220823152910301"></p><h2 id="Node-Manager">Node Manager</h2><h3 id="整体架构-2">整体架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231534361.png" alt="image-20220823153446244"></p><h3 id="主要职责-2">主要职责</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231538399.png" alt="image-20220823153819262"></p><h3 id="状态机管理-2">状态机管理</h3><h4 id="Application">Application</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231540076.png" alt="image-20220823154025937"></p><h4 id="Container">Container</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231541682.png" alt="image-20220823154123565"></p><h4 id="LocalizedResource">LocalizedResource</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231542356.png" alt="image-20220823154225240"></p><h3 id="节点健康检测机制">节点健康检测机制</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231542676.png" alt="image-20220823154249543"></p><h1 id="重要机制">重要机制</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231546905.png" alt="image-20220823154528524"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231546824.png" alt="image-20220823154617731"></p><h2 id="调度策略">调度策略</h2><h3 id="Fair-Share-调度策略背景">Fair Share 调度策略背景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231546882.png" alt="image-20220823154638767"></p><h3 id="Instantaneous-Fair-Share-定义">Instantaneous Fair Share 定义</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231550834.png" alt="image-20220823155033681"></p><h3 id="Instantaneous-Fair-Share-计算逻辑">Instantaneous Fair Share 计算逻辑</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231556487.png" alt="image-20220823155655336"></p><h3 id="DRF-调度策略">DRF 调度策略</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231557053.png" alt="image-20220823155726905"></p><h3 id="DRF-调查策略描述">DRF 调查策略描述</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231559233.png" alt="image-20220823155901095"></p><h3 id="DRF-调度策略计算逻辑">DRF 调度策略计算逻辑</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231600515.png" alt="image-20220823160046378"></p><h2 id="事件机制">事件机制</h2><h3 id="状态机管理-3">状态机管理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231602215.png" alt="image-20220823160208072"></p><h3 id="事件处理模型">事件处理模型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231605514.png" alt="image-20220823160558398"></p><h2 id="容错机制">容错机制</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231607998.png" alt="image-20220823160723852"></p><h1 id="公司实践">公司实践</h1><h2 id="Gang-调度器">Gang 调度器</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231619612.png" alt="image-20220823161900517"></p><h3 id="为什么要开发-Gang-调度器">为什么要开发 Gang 调度器</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231609638.png" alt="image-20220823160910496"></p><h3 id="Gang-调度器有什么典型特点">Gang 调度器有什么典型特点</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231610569.png" alt="image-20220823161038440"></p><h3 id="Gang-调度器调度流程">Gang 调度器调度流程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231611957.png" alt="image-20220823161140829"></p><h3 id="字节内部使用场景">字节内部使用场景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231613510.png" alt="image-20220823161300394"></p><h2 id="反调度器">反调度器</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231619099.png" alt="image-20220823161920007"></p><h3 id="为什么需要开发反调度器">为什么需要开发反调度器</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231613390.png" alt="image-20220823161319262"></p><h3 id="反调度流程">反调度流程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231613269.png" alt="image-20220823161344162"></p><h3 id="反调度器与-Gang-调度器关系">反调度器与 Gang 调度器关系</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231614586.png" alt="image-20220823161425460"></p><h3 id="字节内部使用场景-2">字节内部使用场景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231614673.png" alt="image-20220823161435545"></p><h2 id="单集群规模突破-50K">单集群规模突破 50K</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231615200.png" alt="image-20220823161504101"></p><h3 id="为什么需要提升单集群规模">为什么需要提升单集群规模</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231617044.png" alt="image-20220823161540024"></p><h3 id="RPC-瓶颈">RPC 瓶颈</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231616844.png" alt="image-20220823161628711"></p><h3 id="Dispatcher-瓶颈">Dispatcher 瓶颈</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231616072.png" alt="image-20220823161635954"></p><h3 id="Scheduler-瓶颈">Scheduler 瓶颈</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231616605.png" alt="image-20220823161649487"></p><h3 id="心跳反压机制">心跳反压机制</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231617578.png" alt="image-20220823161720476"></p><h3 id="其他优化">其他优化</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231618107.png" alt="image-20220823161820950"></p><h1 id="课程总结">课程总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208231618398.png" alt="image-20220823161844259"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L15：浅谈分布式一致性协议</title>
      <link href="/2022/08/13/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL15%EF%BC%9A%E6%B5%85%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE/"/>
      <url>/2022/08/13/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL15%EF%BC%9A%E6%B5%85%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7130131931722678308#heading-0">【大数据专场 学习资料六】第四届字节跳动青训营 - 掘金</a></p></div></details><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221453135.png" alt="image-20220822145347793"></p><hr><h1 id="分布式系统">分布式系统</h1><h2 id="分布式系统面临的挑战">分布式系统面临的挑战</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221457059.png" alt="image-20220822145746777"></p><h2 id="理想中的分布式系统">理想中的分布式系统</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221459049.png" alt="image-20220822145913720"></p><h2 id="从-HDFS-开始">从 HDFS 开始</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221500292.png" alt="image-20220822150001014"></p><h2 id="案例-KV">案例 - KV</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221503618.png" alt="image-20220822150309318"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221503430.png" alt="image-20220822150341149"></p><h2 id="小结">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221503078.png" alt="image-20220822150358759"></p><h1 id="一致性与共识算法">一致性与共识算法</h1><h2 id="从复制开始">从复制开始</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221506550.png" alt="image-20220822150607320"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221508336.png" alt="image-20220822150802077"></p><p>最好不要都接受请求，应设置一个主一个从</p><h2 id="如何复制">如何复制</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221509937.png" alt="image-20220822150924695"></p><p>两种策略，但是第一种的代价太高了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221514791.png" alt="image-20220822151414557"></p><h2 id="关于读操作">关于读操作</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221515621.png" alt="image-20220822151548273"></p><h2 id="什么是一致性">什么是一致性</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221517075.png" alt="image-20220822151750713"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221520867.png" alt="image-20220822152025524"></p><h2 id="复制协议">复制协议</h2><h3 id="当失效发生">当失效发生</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221522490.png" alt="image-20220822152210106"></p><h3 id="小结-2">小结</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221522965.png" alt="image-20220822152228631"></p><h2 id="共识算法">共识算法</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221524031.png" alt="image-20220822152433682"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221526904.png" alt="image-20220822152624540"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221530801.png" alt="image-20220822153018454"></p><h2 id="小结-3">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221532453.png" alt="image-20220822153246105"></p><h1 id="从-Raft-入手">从 Raft 入手</h1><h2 id="Paxos">Paxos</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221533224.png" alt="image-20220822153349889"></p><h2 id="Raft">Raft</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221538223.png" alt="image-20220822153803011"></p><h2 id="复制状态机（RSM）">复制状态机（RSM）</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221541562.png" alt="image-20220822154158242"></p><h2 id="Raft-角色">Raft 角色</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221544691.png" alt="image-20220822154409422"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221546358.png" alt="image-20220822154629992"></p><ol><li>客户端向 s2 发送请求</li><li>s2 把请求转成 log ，然后发送给 follower</li><li>多数完成，就回复客户</li></ol><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221548055.png" alt="image-20220822154830700"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221549146.png" alt="image-20220822154906777"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221549580.png" alt="image-20220822154912209"></p><p>旧 leader 无响应后，发现的节点发起投票，获得半数投票即成为新 leader</p><h2 id="Raft-日志复制">Raft 日志复制</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221624889.png" alt="image-20220822162417760"></p><p>小箭头：确认已经提交了的 log</p><h2 id="Raft-从节点失效">Raft 从节点失效</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221629373.png" alt="image-20220822162917101"></p><p>没有真正对比 log 的内容，只需要对比 term 和 index</p><h2 id="Raft-Term">Raft Term</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221630209.png" alt="image-20220822163039984"></p><h2 id="Raft-主节点失效">Raft 主节点失效</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221632566.png" alt="image-20220822163259209"></p><h2 id="Raft-Leader-failure">Raft Leader failure</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221633129.png" alt="image-20220822163351819"></p><p>格子上面的数字是几号 term</p><p>为什么第一个状态 s1 的 term 都是 1 ？可以想象之前 s1 是 leader，然后突然卡死了，选了 s2 是新 leader</p><p>此时 s2 挂了，然后 s3 请求成为 leader  ，s1 的 term 后面也变成了 3</p><p>状态是怎么复制的呢？一直往前检查，如果有冲突就从节点服从主节点</p><h2 id="Raft-安全性">Raft 安全性</h2><h3 id="同-Term">同 Term</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221639534.png" alt="image-20220822163913255"></p><h3 id="跨-Term">跨 Term</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221640322.png" alt="image-20220822164004992"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221641786.png" alt="image-20220822164115470"></p><h2 id="小结-4">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221642535.png" alt="image-20220822164206256"></p><h1 id="实现细节以及未来">实现细节以及未来</h1><h2 id="案例-KV-2">案例 - KV</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221643687.png" alt="image-20220822164320371"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221646307.png" alt="image-20220822164605958"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221645358.png" alt="image-20220822164510110"></p><p>为什么读操作不能直接读的问题</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221646290.png" alt="image-20220822164655970"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221648380.png" alt="image-20220822164814066"></p><h2 id="回到共识算法">回到共识算法</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221649597.png" alt="image-20220822164912281"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221650231.png" alt="image-20220822165043920"></p><h2 id="共识算法的未来">共识算法的未来</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221651904.png" alt="image-20220822165133628"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221652649.png" alt="image-20220822165213310"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221652325.png" alt="image-20220822165246981"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221653918.png" alt="image-20220822165323591"></p><h2 id="小结-5">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221654035.png" alt="image-20220822165445629"></p><h1 id="课程总结">课程总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221655557.png" alt="image-20220822165524243"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L14：LSMT 存储引擎浅析</title>
      <link href="/2022/08/12/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL14%EF%BC%9ALSMT-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%B5%85%E6%9E%90/"/>
      <url>/2022/08/12/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL14%EF%BC%9ALSMT-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7127959128319885326/#heading-59">juejin.cn</a></p></div></details><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221238378.png" alt="image-20220822123817133"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221238785.png" alt="image-20220822123838558"></p><hr><h1 id="LSMT-与存储引擎介绍">LSMT 与存储引擎介绍</h1><h2 id="LSMT-的历史">LSMT 的历史</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221239108.png" alt="image-20220822123957828"></p><h2 id="LSMT-是什么">LSMT 是什么</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221240594.png" alt="image-20220822124020359"></p><h2 id="存储引擎是什么">存储引擎是什么</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221241968.png" alt="image-20220822124122732"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221241503.png" alt="image-20220822124148308"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221242635.png" alt="image-20220822124229465"></p><h1 id="LSMT-存储引擎的优势与实现">LSMT 存储引擎的优势与实现</h1><h2 id="LSMT-与-B-Tree-的异同">LSMT 与 B+ Tree 的异同</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221245662.png" alt="image-20220822124529478"></p><p>但 LSMT 是追加写，然后后台择机合并</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221245165.png" alt="image-20220822124555923"></p><p>二者在逻辑上实际是等价的</p><h2 id="为什么要采用-LSMT-模型？">为什么要采用 LSMT 模型？</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221248634.png" alt="image-20220822124850457"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221249918.png" alt="image-20220822124923709"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221250777.png" alt="image-20220822125008533"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221251565.png" alt="image-20220822125103361"></p><h2 id="LSMT-存储引擎的实现">LSMT 存储引擎的实现</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221251828.png" alt="image-20220822125147595"></p><h3 id="Write">Write</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221252940.png" alt="image-20220822125202705"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221252928.png" alt="image-20220822125227741"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221252236.png" alt="image-20220822125255065"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221253799.png" alt="image-20220822125312562"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221253765.png" alt="image-20220822125326560"></p><h3 id="Snapshot-Supervision">Snapshot &amp; Supervision</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221254387.png" alt="image-20220822125418158"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221254501.png" alt="image-20220822125443234"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221255971.png" alt="image-20220822125516762"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221255447.png" alt="image-20220822125529198"></p><h3 id="Get-BloomFilter">Get &amp; BloomFilter</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221256586.png" alt="image-20220822125641405"></p><p>又是熟悉的 BloomFilter（</p><h3 id="Compact">Compact</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221257999.png" alt="image-20220822125754763"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221259578.png" alt="image-20220822125923381"></p><p>用读放大的增加换取写放大的减小</p><h1 id="LSMT-模型理论分析">LSMT 模型理论分析</h1><h2 id="云原生的-LSMT-存储引擎-HBase">云原生的 LSMT 存储引擎 - HBase</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221302976.png" alt="image-20220822130201759"></p><h2 id="LSMT-模型算法复杂度分析">LSMT 模型算法复杂度分析</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221302297.png" alt="image-20220822130219008"></p><h3 id="Level">Level</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221303696.png" alt="image-20220822130315442"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221304408.png" alt="image-20220822130429135"></p><p>这个失效率的推导非常复杂</p><h3 id="Tier">Tier</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221305314.png" alt="image-20220822130542099"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221306090.png" alt="image-20220822130623846"></p><h3 id="思考题">思考题</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221307324.png" alt="image-20220822130706070"></p><p>这里建议看原视频，鄙人一直在听天书（</p><h3 id="总结">总结</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221309140.png" alt="image-20220822130906902"></p><h1 id="LSMT-存储引擎调优案例与展望">LSMT 存储引擎调优案例与展望</h1><h2 id="TerarkDB">TerarkDB</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221309076.png" alt="image-20220822130943805"></p><h2 id="TerarkDB-Abase-ByteGraph">TerarkDB&amp; Abase &amp; ByteGraph</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221310518.png" alt="image-20220822131038276"></p><h2 id="Flink">Flink</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221311671.png" alt="image-20220822131101472"></p><h2 id="新硬件">新硬件</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221311219.png" alt="image-20220822131156037"></p><h2 id="新模型">新模型</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221312708.png" alt="image-20220822131234463"></p><h2 id="新参数-新工况">新参数 / 新工况</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221312438.png" alt=""></p><p>这个是最复杂的</p><h1 id="总结-2">总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221313948.png" alt="image-20220822131325741"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L13：Parquet 与 ORC：高性能列式存储</title>
      <link href="/2022/08/10/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL13%EF%BC%9AParquet-%E4%B8%8E-ORC%EF%BC%9A%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%97%E5%BC%8F%E5%AD%98%E5%82%A8/"/>
      <url>/2022/08/10/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL13%EF%BC%9AParquet-%E4%B8%8E-ORC%EF%BC%9A%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%97%E5%BC%8F%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7127959128319885326/#heading-0">【大数据专场 学习资料五】第四届字节跳动青训营 - 掘金</a></p></div></details><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211553385.png" alt="image-20220821155352177"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211554046.png" alt="image-20220821155437887"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211555667.png" alt="image-20220821155508448"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211555327.png" alt="image-20220821155556171"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211556102.png" alt="image-20220821155618924"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211557634.png" alt="image-20220821155704412"></p><hr><h1 id="列存-vs-行存">列存 vs 行存</h1><h2 id="数据格式层概述">数据格式层概述</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211558747.png" alt="image-20220821155817550"></p><h2 id="分层视角下的数据形态">分层视角下的数据形态</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211559827.png" alt="image-20220821155902639"></p><h2 id="两种数据查询分析场景：OLTP-vs-OLAP">两种数据查询分析场景：OLTP vs OLAP</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211559409.png" alt="image-20220821155947223"></p><h2 id="OLTP：行式存储格式">OLTP：行式存储格式</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211601394.png" alt="image-20220821160112162"></p><h2 id="OLAP：列式存储格式">OLAP：列式存储格式</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211602976.png" alt="image-20220821160207772"></p><h2 id="总结">总结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211603784.png" alt="image-20220821160320631"></p><h1 id="Parquet-原理解释">Parquet 原理解释</h1><h2 id="Parquet-简介">Parquet 简介</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211603833.png" alt="image-20220821160357634"></p><h3 id="Parquet-in-Action">Parquet in Action</h3><h4 id="DDL">DDL</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211604405.png" alt="image-20220821160439203"></p><h4 id="Spark">Spark</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211605395.png" alt="image-20220821160537221"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211605860.png" alt="image-20220821160555682"></p><h4 id="Parquet-vs-Text-Format">Parquet vs Text Format</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211606456.png" alt="image-20220821160630277"></p><p>做了压缩，而且性能反而还会有提升</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211956831.png" alt="image-20220821195643599"></p><h2 id="Dremel-数据模型">Dremel 数据模型</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212017921.png" alt="image-20220821201734825"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212018910.png" alt="image-20220821201804781"></p><h2 id="数据布局">数据布局</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212019051.png" alt="image-20220821201927924"></p><h2 id="编码-Encoding">编码 Encoding</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212020137.png" alt="image-20220821202036022"></p><p>列基数不大：去重后的数据不多</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212023555.png" alt="image-20220821202313430"></p><h2 id="压缩-Compression">压缩 Compression</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212023735.png" alt="image-20220821202347632"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212024514.png" alt="image-20220821202459437"></p><h2 id="索引-Index">索引 Index</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212025832.png" alt="image-20220821202533711"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212026638.png" alt="image-20220821202637503"></p><p>这东西在第一节课也出现了</p><h2 id="排序-Ordering">排序 Ordering</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212027061.png" alt="image-20220821202756950"></p><h2 id="过滤下推-Predicate-PushDown">过滤下推 Predicate PushDown</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212028856.png" alt="image-20220821202858726"></p><h2 id="Spark-集成-向量化读">Spark 集成 - 向量化读</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212030976.png" alt="image-20220821203009869"></p><h2 id="深入-Dremel-数据模型">深入 Dremel 数据模型</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212030810.png" alt="image-20220821203054686"></p><p>老师说听不懂没关系，哈哈哈</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212032873.png" alt="image-20220821203257754"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208212034357.png" alt="image-20220821203401246"></p><h2 id="小结">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221029353.png" alt="image-20220822102926200"></p><h1 id="ORC-详解和对比">ORC 详解和对比</h1><h2 id="ORC-简介">ORC 简介</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221031029.png" alt="image-20220822103108934"></p><h2 id="数据模型">数据模型</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221031749.png" alt="image-20220822103117638"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221032639.png" alt="image-20220822103219545"></p><h2 id="数据布局-2">数据布局</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221033917.png" alt="image-20220822103327796"></p><h2 id="ACID-特性简介">ACID 特性简介</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221033470.png" alt="image-20220822103355362"></p><h2 id="AliORC">AliORC</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221037374.png" alt="image-20220822103747286"></p><h3 id="索引增强">索引增强</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221038445.png" alt="image-20220822103814354"></p><h3 id="小列聚合">小列聚合</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221039475.png" alt="image-20220822103937393"></p><h3 id="异步读取">异步读取</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221042376.png" alt="image-20220822104204283"></p><h3 id="思考">思考</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221042805.png" alt="image-20220822104228724"></p><h2 id="Parquet-vs-ORC">Parquet vs ORC</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221043917.png" alt="image-20220822104311813"></p><h3 id="性能">性能</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221043121.png" alt="image-20220822104354024"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221044049.png" alt="image-20220822104436946"></p><h3 id="选择">选择</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221044795.png" alt="image-20220822104448701"></p><h2 id="小结-2">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221045291.png" alt="image-20220822104545189"></p><h1 id="列存演进">列存演进</h1><h2 id="数仓中的列存">数仓中的列存</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221047325.png" alt="image-20220822104722224"></p><h2 id="存储侧下推">存储侧下推</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221048782.png" alt="image-20220822104848668"></p><h2 id="Column-Family-支持">Column Family 支持</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221049570.png" alt="image-20220822104949440"></p><h1 id="总结-2">总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208221050221.png" alt="image-20220822105000098"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L12：从 Kafka 到 Pulsar：数据流演进之路</title>
      <link href="/2022/08/09/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL12%EF%BC%9A%E4%BB%8E-Kafka-%E5%88%B0-Pulsar%EF%BC%9A%E6%95%B0%E6%8D%AE%E6%B5%81%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF/"/>
      <url>/2022/08/09/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL12%EF%BC%9A%E4%BB%8E-Kafka-%E5%88%B0-Pulsar%EF%BC%9A%E6%95%B0%E6%8D%AE%E6%B5%81%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7126813033602482190/#heading-54">【大数据专场 学习资料四】第四届字节跳动青训营 - 掘金</a></p></div></details><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201916571.png" alt="image-20220820191646359"></p><hr><h1 id="消息队列概述">消息队列概述</h1><h2 id="消息队列的应用场景">消息队列的应用场景</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201918962.png" alt="image-20220820191859709"></p><p>上下游解耦</p><h3 id="MQ-消息通道">MQ 消息通道</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201919450.png" alt="image-20220820191934211"></p><h3 id="Eventbridge-数据总线">Eventbridge 数据总线</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201920783.png" alt="image-20220820192025556"></p><h3 id="Data-Platform-流数据平台">Data Platform 流数据平台</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201920032.png" alt="image-20220820192053868"></p><h2 id="主流消息队列的相关介绍">主流消息队列的相关介绍</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201921003.png" alt="image-20220820192124836"></p><h1 id="Kafka-详解">Kafka 详解</h1><h2 id="架构介绍">架构介绍</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201924220.png" alt="image-20220820192420977"></p><h3 id="Zookeeper">Zookeeper</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201925679.png" alt="image-20220820192541469"></p><h3 id="Broker">Broker</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201925832.png" alt="image-20220820192552605"></p><h3 id="Controller">Controller</h3><h4 id="选举">选举</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201926796.png" alt="image-20220820192642593"></p><h4 id="作用">作用</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201927347.png" alt="image-20220820192746112"></p><h3 id="Coordinator">Coordinator</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201929126.png" alt="image-20220820192904912"></p><h2 id="高可用">高可用</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201929541.png" alt="image-20220820192925322"></p><h3 id="副本-ISR-机制">副本 ISR 机制</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201930477.png" alt="image-20220820193016250"></p><h3 id="写入-ACK-机制">写入 ACK 机制</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201931418.png" alt="image-20220820193131195"></p><h3 id="如何保证消息不丢">如何保证消息不丢</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201931416.png" alt="image-20220820193156151"></p><p>ACK = -1 并且 最少 ISR = 2</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201934877.png" alt="image-20220820193424632"></p><p>先看左下角，只有一个 leader 而没有 follwer 的情况，然后再看上面</p><p>结合右侧概念解释理解</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211333605.png" alt="image-20220821133358477"></p><p>第一个策略更注重一致性</p><p>第二个更注重可用性</p><h2 id="集群扩缩容">集群扩缩容</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211337082.png" alt="image-20220821133725961"></p><h3 id="扩容步骤">扩容步骤</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211338540.png" alt="image-20220821133825433"></p><h3 id="扩缩容问题">扩缩容问题</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211339927.png" alt="image-20220821133904826"></p><h2 id="未来演进之路">未来演进之路</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211340945.png" alt="image-20220821134053838"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211341918.png" alt="image-20220821134148801"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211343183.png" alt="image-20220821134352077"></p><h2 id="运维-调优经验介绍">运维/调优经验介绍</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211345313.png" alt="image-20220821134533217"></p><h3 id="单机吞吐">单机吞吐</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211346809.png" alt="image-20220821134643684"></p><p>in_sync_replica 看业务重要性，2或3</p><h3 id="集群参数配置">集群参数配置</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211348036.png" alt="image-20220821134811898"></p><h3 id="扩缩容优化">扩缩容优化</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211349831.png" alt="image-20220821134954720"></p><h3 id="指标可视化">指标可视化</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211351120.png" alt="image-20220821135102988"></p><h1 id="Pulsar-详解">Pulsar 详解</h1><h2 id="Pulsar-架构介绍">Pulsar 架构介绍</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211354092.png" alt="image-20220821135427981"></p><h3 id="Pulsar-Proxy">Pulsar Proxy</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211355929.png" alt="image-20220821135535812"></p><p>非必须，但是作用很大</p><h3 id="Pulsar-Broker">Pulsar Broker</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211357778.png" alt="image-20220821135710646"></p><h3 id="Pulsar-Storage">Pulsar Storage</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211359441.png" alt="image-20220821135953333"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211400251.png" alt="image-20220821140023137"></p><h3 id="Pulsar-IO">Pulsar IO</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211402372.png" alt="image-20220821140222237"></p><h3 id="Pulsar-Function">Pulsar Function</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211403547.png" alt="image-20220821140310433"></p><h2 id="Bookkeeper-介绍">Bookkeeper 介绍</h2><h3 id="整体架构">整体架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211404467.png" alt="image-20220821140401352"></p><h3 id="基本概念">基本概念</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211408455.png" alt="image-20220821140844325"></p><h3 id="Bookkeeper-Ledger">Bookkeeper Ledger</h3><h4 id="Bookkeeper-新建-Ledger">Bookkeeper 新建 Ledger</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211409104.png" alt="image-20220821140918983"></p><p>Quorum 写：副本之间没有主从概念，例如 3 副本同时写，2 副本完成就算完成</p><h4 id="Bookkeeper-Ledger-分布">Bookkeeper Ledger 分布</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211412527.png" alt="image-20220821141226391"></p><h3 id="写一致性">写一致性</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211413752.png" alt="image-20220821141350638"></p><h3 id="读一致性">读一致性</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211418509.png" alt="image-20220821141801387"></p><h3 id="读写分离">读写分离</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211418901.png" alt="image-20220821141850775"></p><h3 id="Bookkeeper-with-pulsar">Bookkeeper with pulsar</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211419103.png" alt="image-20220821141922991"></p><h2 id="Pulsar-特性介绍">Pulsar 特性介绍</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211422474.png" alt="image-20220821142249347"></p><h3 id="生产模式">生产模式</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211426119.png" alt="image-20220821142628006"></p><h3 id="消费模式">消费模式</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211427919.png" alt="image-20220821142732802"></p><h4 id="Exclusive">Exclusive</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211427463.png" alt="image-20220821142749340"></p><h4 id="Failover">Failover</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211428598.png" alt="image-20220821142808478"></p><h4 id="Shared">Shared</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211428442.png" alt="image-20220821142830329"></p><h4 id="Key-Shared">Key_Shared</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211428030.png" alt="image-20220821142855907"></p><h3 id="多租户">多租户</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211429781.png" alt="image-20220821142929677"></p><h3 id="Plugin">Plugin</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211430141.png" alt="image-20220821143054029"></p><h3 id="GEO-Relication">GEO Relication</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211432340.png" alt="image-20220821143240237"></p><h2 id="Pulsar-HA-Scale-up">Pulsar HA &amp; Scale-up</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211434508.png" alt="image-20220821143400392"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211434882.png" alt="image-20220821143458758"></p><h2 id="Pulsar-VS-Kafka">Pulsar VS Kafka</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211435616.png" alt="image-20220821143535476"></p><h3 id="存储计算分离">存储计算分离</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211436086.png" alt="image-20220821143635954"></p><h1 id="周边和生态">周边和生态</h1><h2 id="概览">概览</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211439440.png" alt="image-20220821143925357"></p><h2 id="Pulsar-IO-2">Pulsar IO</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211444579.png" alt="image-20220821144407491"></p><h2 id="Kafka-Schema">Kafka Schema</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211444908.png" alt="image-20220821144430794"></p><h2 id="Pulsar-SQL">Pulsar SQL</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211445855.png" alt="image-20220821144503728"></p><h1 id="总结">总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208211445805.png" alt="image-20220821144548672"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L11：数据湖三剑客：Delta Lake、Hudi 与 Iceberg 详解</title>
      <link href="/2022/08/07/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL11%EF%BC%9A%E6%95%B0%E6%8D%AE%E6%B9%96%E4%B8%89%E5%89%91%E5%AE%A2%EF%BC%9ADelta-Lake%E3%80%81Hudi-%E4%B8%8E-Iceberg-%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/08/07/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL11%EF%BC%9A%E6%95%B0%E6%8D%AE%E6%B9%96%E4%B8%89%E5%89%91%E5%AE%A2%EF%BC%9ADelta-Lake%E3%80%81Hudi-%E4%B8%8E-Iceberg-%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7126813033602482190/#heading-51">【大数据专场 学习资料四】第四届字节跳动青训营 - 掘金</a></p></div></details><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201818034.png" alt="image-20220820181812775"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201820267.png" alt="image-20220820182019069"></p><hr><h1 id="发展历史">发展历史</h1><h2 id="数据湖发展阶段1-Hadoop">数据湖发展阶段1 - Hadoop</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201821629.png" alt="image-20220820182152419"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201823580.png" alt="image-20220820182319407"></p><h2 id="数据湖发展阶段2-Hive">数据湖发展阶段2 - Hive</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201824050.png" alt="image-20220820182426800"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201825396.png" alt="image-20220820182507156"></p><h2 id="数据湖发展阶段3-湖仓一体">数据湖发展阶段3 - 湖仓一体</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201826577.png" alt="image-20220820182647320"></p><p>存储计算不分离、结构化数据</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201827559.png" alt="image-20220820182713372"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201828134.png" alt="image-20220820182842902"></p><h2 id="业界三大数据湖">业界三大数据湖</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201829444.png" alt="image-20220820182921250"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201829365.png" alt="image-20220820182943156"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201830771.png" alt="image-20220820183022508"></p><h2 id="关于“数据湖”">关于“数据湖”</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201831050.png" alt="image-20220820183110823"></p><h1 id="核心技术">核心技术</h1><h2 id="文件结构">文件结构</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201833268.png" alt="image-20220820183318059"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201834267.png" alt="image-20220820183414102"></p><h2 id="Time-travel">Time travel</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201834032.png" alt="image-20220820183429862"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201835503.png" alt="image-20220820183509195"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201835652.png" alt="image-20220820183544451"></p><h2 id="Transaction">Transaction</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201838244.png" alt="image-20220820183837033"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201839541.png" alt="image-20220820183903330"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201839169.png" alt="image-20220820183943915"></p><h3 id="原子性">原子性</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201842992.png" alt="image-20220820184204725"></p><h3 id="事务隔离">事务隔离</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201844595.png" alt="image-20220820184433319"></p><h2 id="Schema-Evolution">Schema Evolution</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201844221.png" alt="image-20220820184441068"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201845524.png" alt="image-20220820184538317"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201848168.png" alt="image-20220820184832961"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201848477.png" alt="image-20220820184841337"></p><h1 id="各有所长">各有所长</h1><h2 id="Iceberg">Iceberg</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201849180.png" alt="image-20220820184901022"></p><h3 id="Well-designed-Metadata-Layer">Well-designed Metadata Layer</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201849379.png" alt="image-20220820184945132"></p><p>s1 比 s0 多的就是最右边的一个 manifest file，而对应的就是最右边的 data files</p><h3 id="Data-File-Filter">Data File Filter</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201852495.png" alt="image-20220820185227251"></p><h3 id="Hidden-Partition">Hidden Partition</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201854661.png" alt="image-20220820185431385"></p><h2 id="Hudi">Hudi</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201856562.png" alt="image-20220820185655322"></p><h3 id="Timeline-Service-Upsert-Incremental">Timeline Service &amp; Upsert &amp; Incremental</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201857953.png" alt="image-20220820185748727"></p><p>这里建议看原视频，讲的还是很清楚的</p><h3 id="Copy-On-Write">Copy On Write</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201900834.png" alt="image-20220820190058620"></p><p>更新的时候把所有列读到内存，改完再塞回去</p><h3 id="Merge-On-Read">Merge On Read</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201902564.png" alt="image-20220820190217330"></p><p>更新的时候把变动放到旁边，然后读的时候再合并</p><h2 id="Delta-Lake">Delta Lake</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201904382.png" alt="image-20220820190438203"></p><h3 id="流批一体">流批一体</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201905940.png" alt="image-20220820190519682"></p><h1 id="总结场景">总结场景</h1><h2 id="三个数据湖的异同">三个数据湖的异同</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201906820.png" alt="image-20220820190655638"></p><h2 id="三个数据湖的热度">三个数据湖的热度</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201908158.png" alt="image-20220820190807973"></p><h2 id="技术选型">技术选型</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201908571.png" alt="image-20220820190840332"></p><h2 id="字节场景举例">字节场景举例</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201910993.png" alt="image-20220820191026714"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201911695.png" alt="image-20220820191144440"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201912466.png" alt="image-20220820191235197"></p><h2 id="课程总结">课程总结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208201913017.png" alt="image-20220820191308863"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L10：深入浅出 HBase 实战</title>
      <link href="/2022/08/06/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL10%EF%BC%9A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-HBase-%E5%AE%9E%E6%88%98/"/>
      <url>/2022/08/06/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL10%EF%BC%9A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-HBase-%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7126813033602482190/#heading-0">【大数据专场 学习资料四】第四届字节跳动青训营 - 掘金</a><a href="https://juejin.cn/post/7124948585614934029#heading-0">https://juejin.cn/post/7124948585614934029#heading-0</a>)</p></div></details><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191320258.png" alt="image-20220819132041152"></p><h1 id="HBase-适用场景">HBase 适用场景</h1><h2 id="什么是-HBase">什么是 HBase</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191323752.png" alt="image-20220819132320648"></p><h2 id="HBase-和关系型数据库的区别">HBase 和关系型数据库的区别</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191325844.png" alt="image-20220819132544770"></p><h2 id="HBase-数据模型">HBase 数据模型</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191334959.png" alt="image-20220819133440861"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191336258.png" alt="image-20220819133620157"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191337366.png" alt="image-20220819133715263"></p><p>这种类 JSON 的格式看上去也是很清晰的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191338762.png" alt="image-20220819133809671"></p><h2 id="使用场景">使用场景</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191341806.png" alt="image-20220819134111722"></p><h3 id="典型应用">典型应用</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191342396.png" alt="image-20220819134240310"></p><h3 id="半结构化-字典序有序索引的数据">半结构化 / 字典序有序索引的数据</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191344673.png" alt="image-20220819134403575"></p><h3 id="“近在线”-海量分布式-KV-宽表存储">“近在线” 海量分布式 KV / 宽表存储</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191346375.png" alt="image-20220819134652270"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191348302.png" alt="image-20220819134844204"></p><h3 id="写密集的高吞吐场景">写密集的高吞吐场景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191353667.png" alt="image-20220819135311548"></p><h2 id="HBase-数据模型的优缺点">HBase 数据模型的优缺点</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191354347.png" alt="image-20220819135424257"></p><h1 id="架构设计">架构设计</h1><h2 id="HBase-架构设计">HBase 架构设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191356658.png" alt="image-20220819135622564"></p><h2 id="HMaster-主要职责">HMaster 主要职责</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191359950.png" alt="image-20220819135901849"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191400697.png" alt="image-20220819140012561"></p><h2 id="RegionServer-主要职责">RegionServer 主要职责</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191402870.png" alt="image-20220819140227769"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191404299.png" alt="image-20220819140402196"></p><h2 id="ZooKeeper-主要职责">ZooKeeper 主要职责</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191405152.png" alt="image-20220819140526054"></p><h2 id="ThriftServer-主要职责">ThriftServer 主要职责</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191406927.png" alt="image-20220819140644834"></p><h1 id="大数据支撑">大数据支撑</h1><h2 id="HBase-在大数据生态的定位">HBase 在大数据生态的定位</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191530767.png" alt="image-20220819153008631"></p><h2 id="水平扩展能力">水平扩展能力</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191532499.png" alt="image-20220819153219304"></p><h2 id="Region-热点切分">Region 热点切分</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191533586.png" alt="image-20220819153352356"></p><h3 id="切分点选取">切分点选取</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191538899.png" alt="image-20220819153821719"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191539820.png" alt="image-20220819153935647"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191539636.png" alt="image-20220819153946427"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191540637.png" alt="image-20220819154003446"></p><h3 id="切分过程">切分过程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191542059.png" alt="image-20220819154214838"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191543848.png" alt="image-20220819154343648"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191543735.png" alt="image-20220819154349544"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191544952.png" alt="image-20220819154441766"></p><h3 id="流量设计">流量设计</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191545770.png" alt="image-20220819154527549"></p><h2 id="Region-碎片整合">Region 碎片整合</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191549918.png" alt="image-20220819154908679"></p><h3 id="流程设计">流程设计</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191550701.png" alt="image-20220819155054506"></p><h2 id="Region-负载均衡">Region 负载均衡</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191551954.png" alt="image-20220819155114756"></p><h3 id="调度策略">调度策略</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191553056.png" alt="image-20220819155331851"></p><h3 id="其他策略">其他策略</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191554801.png" alt="image-20220819155437624"></p><h2 id="故障恢复机制">故障恢复机制</h2><h3 id="HMaster">HMaster</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191612301.png" alt="image-20220819161200072"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191613567.png" alt="image-20220819161328339"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191614006.png" alt="image-20220819161359796"></p><h3 id="RegionServer">RegionServer</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191615614.png" alt="image-20220819161502360"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191615990.png" alt="image-20220819161537750"></p><h2 id="Distributed-Log-Split-原理">Distributed Log Split 原理</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191616153.png" alt="image-20220819161617008"></p><h3 id="具体流程">具体流程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191617107.png" alt="image-20220819161741925"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191618820.png" alt="image-20220819161848655"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191619455.png" alt="image-20220819161926159"></p><h3 id="优化空间">优化空间</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191620669.png" alt="image-20220819162048494"></p><h1 id="最佳实践">最佳实践</h1><h2 id="Rowkey-设计策略">Rowkey 设计策略</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191731611.png" alt="image-20220819173147503"></p><h2 id="Column-Family-设计策略">Column Family 设计策略</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191733211.png" alt="image-20220819173308095"></p><h2 id="参数调优经验">参数调优经验</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191733528.png" alt="image-20220819173359420"></p><h2 id="ByteTable-字节跳动自研分布式表格存储系统">ByteTable - 字节跳动自研分布式表格存储系统</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191735197.png" alt="image-20220819173505069"></p><h1 id="总结">总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191736558.png" alt="image-20220819173620465"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L9：HDFS 高可用和高扩展机制分析</title>
      <link href="/2022/08/05/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL9%EF%BC%9AHDFS-%E9%AB%98%E5%8F%AF%E7%94%A8%E5%92%8C%E9%AB%98%E6%89%A9%E5%B1%95%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/"/>
      <url>/2022/08/05/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL9%EF%BC%9AHDFS-%E9%AB%98%E5%8F%AF%E7%94%A8%E5%92%8C%E9%AB%98%E6%89%A9%E5%B1%95%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7124948585614934029#heading-24">【大数据专场 学习资料三】第四届字节跳动青训营 - 掘金</a></p></div></details><h1 id="元数据高可用">元数据高可用</h1><h2 id="高可用的需求">高可用的需求</h2><h3 id="服务高可用的需求">服务高可用的需求</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208052026501.png" alt="image-20220805202606209"></p><h3 id="高可用的衡量">高可用的衡量</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208052027150.png" alt="image-20220805202736923"></p><p>故障度量的指标</p><ul><li>MTTR（Mean Time To Repair）：平均修复时间，系统能多快恢复。</li><li>MTTF（Mean Time To Failure）：平均失效时间，运行到故障间的时间，一般用于不可修复的系统（制造业）</li><li>MTBF（Mean Time Between Failures）：平均无故障时间，两次故障间的间隔，一般用于可修复的系统（软件）</li></ul><h3 id="可用性的年化">可用性的年化</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208052029454.png" alt="image-20220805202943236"></p><h3 id="高可用的形式">高可用的形式</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208052031609.png" alt="image-20220805203118407"></p><h2 id="HDFS-主备同步实现">HDFS 主备同步实现</h2><h3 id="HDFS-NameNode-高可用架构">HDFS NameNode 高可用架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208052033929.png" alt="image-20220805203333753"></p><h3 id="理论基础-状态机复制和日志">理论基础 - 状态机复制和日志</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208052035207.png" alt="image-20220805203549996"></p><h3 id="NameNode-操作日志的生产消费">NameNode 操作日志的生产消费</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208052037982.png" alt="image-20220805203713795"></p><h3 id="NameNode-块状态维护">NameNode 块状态维护</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208241544204.png" alt="image-20220805203936939"></p><h2 id="HDFS-自动主备切换">HDFS 自动主备切换</h2><h3 id="分布式协调组件-ZooKeeper">分布式协调组件 - ZooKeeper</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208052043801.png" alt="image-20220805204326568"></p><h3 id="自动主备切换流程-Server-侧">自动主备切换流程 - Server 侧</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208052050382.png" alt="image-20220805205016116"></p><p>脑裂问题：多个节点都认为自己是 active，都会去写日志</p><p>Fence 机制：会阻止多个节点同时写日志</p><h3 id="自动主备切换流程-Client-侧">自动主备切换流程 - Client 侧</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208052051326.png" alt="image-20220805205154093"></p><p>过去，只存一个 ND 的地址，但现在会存一组，然后依次轮询，如果是 Standby 就一直往后找，直到找到一个 active</p><h2 id="日志系统-BookKeeper-简介">日志系统 BookKeeper 简介</h2><h3 id="BookKeeper-架构">BookKeeper 架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182103022.png" alt="image-20220805205346900"></p><h3 id="Quorum-机制">Quorum 机制</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131200722.png" alt="image-20220813120059594"></p><h3 id="BookKeeper-Quorum">BookKeeper Quorum</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131202547.png" alt="image-20220813120244437"></p><h3 id="BookKeeper-Ensemble">BookKeeper Ensemble</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131203575.png" alt="image-20220813120349472"></p><h1 id="数据存储高可用">数据存储高可用</h1><h2 id="单机存储的数据高可用机制">单机存储的数据高可用机制</h2><h3 id="RAID">RAID</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131205106.png" alt="image-20220813120525973"></p><h3 id="RAID-方案讲解">RAID 方案讲解</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131206588.png" alt="image-20220813120603448"></p><p>（梦回中学时代了属于是，之前 B 站见过讲了所有 RAID 的视频）</p><h2 id="HDFS-的数据高可用机制">HDFS 的数据高可用机制</h2><h3 id="HDFS-多副本">HDFS 多副本</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131209318.png" alt="image-20220813120936198"></p><h3 id="Erasure-Coding-原理">Erasure Coding 原理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131211067.png" alt="image-20220813121135961"></p><p>这个和哈希校验和是不一样的，它是大量的数据得到少量的数据，只能起到判断校验的作用。而这边，你的纠筛码的量级和数据的量级是相对接近的，这样可以用它做恢复</p><h3 id="HDFS-Erasure-Coding">HDFS Erasure Coding</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131215315.png" alt="image-20220813121532204"></p><p>将纠筛码的机制与条带化的机制结合起来</p><h2 id="考虑网络架构的数据高可用">考虑网络架构的数据高可用</h2><h3 id="初识网络架构">初识网络架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131218749.png" alt="image-20220813121801606"></p><h3 id="副本放置策略-机架感知">副本放置策略 - 机架感知</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131218065.png" alt="image-20220813121840952"></p><p>有很多不同的写入方式</p><h2 id="案例：字节跳动的-HDFS-多机房容灾方案简介">案例：字节跳动的 HDFS 多机房容灾方案简介</h2><h3 id="多机房实践">多机房实践</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131220943.png" alt="image-20220813122053817"></p><h3 id="容灾">容灾</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131221961.png" alt="image-20220813122141849"></p><h1 id="元数据高扩展性">元数据高扩展性</h1><h2 id="元数据扩展性挑战">元数据扩展性挑战</h2><h3 id="元数据节点扩展性的挑战">元数据节点扩展性的挑战</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131222234.png" alt="image-20220813122259116"></p><h3 id="常见的-Scale-Out-方案">常见的 Scale Out 方案</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131224926.png" alt="image-20220813122408816"></p><p>3 种方案</p><h2 id="社区的解决方案">社区的解决方案</h2><h3 id="BlockPool">BlockPool</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131225518.png" alt="image-20220813122507391"></p><h3 id="viewfs">viewfs</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131226443.png" alt="image-20220813122619321"></p><h2 id="字节跳动的-NNProxy-方案">字节跳动的 NNProxy 方案</h2><h3 id="字节跳动的-NNProxy">字节跳动的 NNProxy</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131228303.png" alt="image-20220813122826189"></p><h3 id="NNProxy-路由规则保存">NNProxy 路由规则保存</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131229256.png" alt="image-20220813122936136"></p><h3 id="NNProxy-路由转发实现">NNProxy 路由转发实现</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131230631.png" alt="image-20220813123026505"></p><h2 id="案例：小文件问题">案例：小文件问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131232335.png" alt="image-20220813123201217"></p><h1 id="存储数据高扩展性">存储数据高扩展性</h1><h2 id="超大集群的长尾问题">超大集群的长尾问题</h2><h3 id="延迟的分布和长尾延迟">延迟的分布和长尾延迟</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131236771.png" alt="image-20220813123614661"></p><h3 id="尾部延迟放大">尾部延迟放大</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131237176.png" alt="image-20220813123723067"></p><h3 id="长尾问题的表现">长尾问题的表现</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131238375.png" alt="image-20220813123821259"></p><p>后台维护服务经典：Java GC</p><h2 id="超大集群的可靠性问题">超大集群的可靠性问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131240610.png" alt="image-20220813124042489"></p><h3 id="Copyset">Copyset</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131241412.png" alt="image-20220813124147305"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131242776.png" alt="image-20220813124211668"></p><h2 id="超大集群的不均匀问题">超大集群的不均匀问题</h2><h3 id="负载均衡和数据迁移">负载均衡和数据迁移</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131242664.png" alt="image-20220813124239531"></p><h3 id="数据写入不均">数据写入不均</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131243488.png" alt="image-20220813124332342"></p><h3 id="数据读取不均">数据读取不均</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131244162.png" alt="image-20220813124404049"></p><h3 id="负载均衡和数据迁移的典型场景">负载均衡和数据迁移的典型场景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131245155.png" alt="image-20220813124511060"></p><h2 id="数据迁移工具速览">数据迁移工具速览</h2><h3 id="跨-NN-迁移">跨 NN 迁移</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131245640.png" alt="image-20220813124529516"></p><h3 id="Balancer">Balancer</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131246766.png" alt="image-20220813124606651"></p><h1 id="结语">结语</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208131246707.png" alt="image-20220813124648614"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L8：HDFS 原理与应用</title>
      <link href="/2022/08/03/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL8%EF%BC%9AHDFS-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/2022/08/03/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL8%EF%BC%9AHDFS-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7124948585614934029#heading-10">【大数据专场 学习资料三】第四届字节跳动青训营 - 掘金</a></p></div></details><h1 id="HDFS-基本介绍">HDFS 基本介绍</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051619368.png" alt="image-20220805161912247"></p><blockquote><p>HDFS: Hadoop Distribute File System，是 Hadoop 的一个组件</p></blockquote><h2 id="Windows-单机文件系统">Windows 单机文件系统</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051736333.png" alt="image-20220805162305140"></p><h2 id="Linux-单机文件系统">Linux 单机文件系统</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051623451.png" alt="image-20220805162329346"></p><h2 id="分布式文件系统">分布式文件系统</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051624446.png" alt="image-20220805162403372"></p><h2 id="分布式存储系统">分布式存储系统</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051625361.png" alt="image-20220805162531255"></p><h2 id="HDFS-功能特性">HDFS 功能特性</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051626954.png" alt="image-20220805162604813"></p><h2 id="演示环境">演示环境</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051736091.png" alt="image-20220805162916571"></p><p>前面两个组件是为了高可用的，本节课主要放在 NameNode 和 DataNode 上</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051632303.png" alt="image-20220805163201246"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051633389.png" alt="image-20220805163327315"></p><p>（一个演示视频）</p><h1 id="架构原理">架构原理</h1><h2 id="HDFS-组件">HDFS 组件</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051634226.png" alt="image-20220805163434128"></p><h2 id="Client-写流程">Client 写流程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051636649.png" alt="image-20220805163651544"></p><h2 id="Client-读流程">Client 读流程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051641299.png" alt="image-20220805164149196"></p><h2 id="元数据节点-NameNode">元数据节点 NameNode</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051642818.png" alt="image-20220805164230703"></p><p>知道 NameNode 很重要就可以了（</p><h2 id="数据节点-DataNode">数据节点 DataNode</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051644334.png" alt="image-20220805164421250"></p><h1 id="关键设计">关键设计</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051647079.png" alt="image-20220805164751957"></p><h2 id="NameNode-目录树维护">NameNode 目录树维护</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051654177.png" alt="image-20220805165457079"></p><p>思考题：为什么不直接在硬盘上修改 fsimage ？</p><h2 id="NameNode-数据放置">NameNode 数据放置</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051658934.png" alt="image-20220805165859832"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051700873.png" alt="image-20220805170018806"></p><p>（一个关于 block 的演示视频）</p><h2 id="DataNode">DataNode</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051702646.png" alt="image-20220805170214529"></p><p>后面两个绿框里面的编号是通过哈希算出来的</p><h2 id="HDFS-写异常处理">HDFS 写异常处理</h2><h3 id="Lease-Recovery">Lease Recovery</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051734362.png" alt="image-20220805170654424"></p><p>租约（Lease）就是一个锁</p><h3 id="Pipeline-Recovery">Pipeline Recovery</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051734395.png" alt="image-20220805171045180"></p><p>这是非常复杂的一部分</p><h2 id="Client-读异常处理">Client 读异常处理</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051713474.png" alt="image-20220805171311362"></p><h2 id="旁路系统">旁路系统</h2><p>异步地解决积累的问题</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051718053.png" alt="image-20220805171607913"></p><h2 id="控制面建设">控制面建设</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051734257.png" alt="image-20220805172008570"></p><h1 id="应用场景">应用场景</h1><h2 id="使用-HDFS-的公司">使用 HDFS 的公司</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051734591.png" alt="image-20220805172053343"></p><h2 id="初窥大数据生态">初窥大数据生态</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051734513.png" alt="image-20220805172141938"></p><h2 id="演示：PySpark-读写-HDFS-文件">演示：PySpark 读写 HDFS 文件</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051735846.png" alt="image-20220805172445776"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051735105.png" alt="image-20220805172504273"></p><p>（一个演示视频）</p><h2 id="ETL">ETL</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051728529.png" alt="image-20220805172837456"></p><h2 id="OLAP-查询引擎">OLAP 查询引擎</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051735777.png" alt="image-20220805172947072"></p><p>查询引擎很多种，但是都是要对 HDHS 提供支持</p><h2 id="HBase">HBase</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051735168.png" alt="image-20220805173030538"></p><h2 id="机器学习">机器学习</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051735689.png" alt="image-20220805173059042"></p><h2 id="通过存储应用">通过存储应用</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051731268.png" alt="image-20220805173152060"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L7：Presto 架构原理与优化介绍</title>
      <link href="/2022/08/02/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL7%EF%BC%9APresto-%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/08/02/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL7%EF%BC%9APresto-%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7124948585614934029#heading-0">【大数据专场 学习资料三】第四届字节跳动青训营 - 掘金</a></p></div></details><h1 id="概述">概述</h1><h2 id="大数据与-OLAP-的演进">大数据与 OLAP 的演进</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182226439.png" alt="image-20220818222614302"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182231869.png" alt="image-20220818223118733"></p><p>廉价机器：可以做到成本与性能的线性增长</p><p>存算分离：存储节点和计算节点可以不在一台物理机上</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182235693.png" alt="image-20220818223537551"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182238502.png" alt="image-20220818223832381"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182240044.png" alt="image-20220818224004913"></p><p>预计算：用空间换时间</p><h2 id="Presto-设计思想">Presto 设计思想</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182241613.png" alt="image-20220818224154492"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182243614.png" alt="image-20220818224328483"></p><h2 id="小结">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182243093.png" alt="image-20220818224355969"></p><h1 id="Presto-架构原理与优化介绍">Presto 架构原理与优化介绍</h1><h2 id="基础概念介绍">基础概念介绍</h2><h3 id="服务相关">服务相关</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182245864.png" alt="image-20220818224538754"></p><ul><li>黄色：数据源</li><li>绿色（深和浅）：服务</li><li>蓝色：用户</li></ul><h3 id="数据源相关">数据源相关</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182248267.png" alt="image-20220818224801146"></p><h3 id="Query-相关">Query 相关</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182249585.png" alt="image-20220818224938450"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182252687.png" alt="image-20220818225259561"></p><h3 id="数据传输相关">数据传输相关</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182256730.png" alt="image-20220818225620626"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182258456.png" alt="image-20220818225817350"></p><h2 id="核心组件架构介绍">核心组件架构介绍</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182259049.png" alt="image-20220818225920962"></p><h3 id="服务发现">服务发现</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182300163.png" alt="image-20220818230033049"></p><h3 id="通信协议">通信协议</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182301759.png" alt="image-20220818230131638"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182303171.png" alt="image-20220818230335043"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182304167.png" alt="image-20220818230419053"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182305571.png" alt="image-20220818230517460"></p><p>代表了我想要关闭（当前手上还有东西，设置为此状态时，不会再安排新 task ，设定一个超时时间，过后关闭）</p><h2 id="小结-2">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182309101.png" alt="image-20220818230915979"></p><h1 id="Presto-重要机制">Presto 重要机制</h1><h2 id="多租户资源管理">多租户资源管理</h2><h3 id="Case-介绍">Case 介绍</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182313240.png" alt="image-20220818231322108"></p><h3 id="Resource-Group">Resource Group</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182316775.png" alt="image-20220818231611658"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182320780.png" alt="image-20220818232047687"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182321690.png" alt="image-20220818232103579"></p><p>（这里在解读代码）</p><h2 id="多租户下的任务调度">多租户下的任务调度</h2><h3 id="物理计划生成">物理计划生成</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208182323888.png" alt="image-20220818232350774"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191046345.png" alt="image-20220819104606193"></p><h3 id="Stage-调度">Stage 调度</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191046469.png" alt="image-20220819104649343"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191046809.png" alt="image-20220819104656675"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191050409.png" alt="image-20220819105017273"></p><h3 id="Task-调度">Task 调度</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191051438.png" alt="image-20220819105116322"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191051887.png" alt="image-20220819105158768"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191055800.png" alt="image-20220819105551663"></p><p>实际使用中 90% 都是第3种</p><h3 id="Split-调度">Split 调度</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191058092.png" alt="image-20220819105834961"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191059624.png" alt="image-20220819105923489"></p><h2 id="内存计算">内存计算</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191103223.png" alt="image-20220819110301107"></p><h3 id="Pipeline-化数据处理">Pipeline 化数据处理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191105552.png" alt="image-20220819110509446"></p><h3 id="反压机制">反压机制</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191105421.png" alt="image-20220819110539300"></p><h2 id="多数据源联邦查询">多数据源联邦查询</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191107389.png" alt="image-20220819110707251"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191108206.png" alt="image-20220819110853083"></p><h2 id="小结-3">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191110666.png" alt="image-20220819111044542"></p><h1 id="性能优化实战">性能优化实战</h1><h2 id="常用性能分析工具">常用性能分析工具</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191113097.png" alt="image-20220819111340975"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191113630.png" alt="image-20220819111359508"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191115795.png" alt="image-20220819111547671"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191116694.png" alt="image-20220819111603584"></p><p>阿里巴巴开源的一个线上查询工具</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191117748.png" alt="image-20220819111716622"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191118613.png" alt="image-20220819111802475"></p><p>万物皆可火焰图（</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191118891.png" alt="image-20220819111846775"></p><h2 id="具体案例分析">具体案例分析</h2><h3 id="Case-1">Case 1</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191119117.png" alt="image-20220819111921997"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191120583.png" alt="image-20220819112027453"></p><p>每一段上去都有一个 copy 方法</p><p>说白了就是这个函数有问题</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191121322.png" alt="image-20220819112112193"></p><h3 id="Case-2">Case 2</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191122907.png" alt="image-20220819112232786"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191123124.png" alt="image-20220819112336987"></p><p>某些情况下，正则表达式的匹配是非常耗时的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191307323.png" alt="image-20220819130701188"></p><h2 id="字节内部优化实践">字节内部优化实践</h2><h3 id="Multi-Coordinator">Multi Coordinator</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191308457.png" alt="image-20220819130808361"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191308675.png" alt="image-20220819130831560"></p><h3 id="History-Server">History Server</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191310016.png" alt="image-20220819131022913"></p><h3 id="Support-Remote-UDF">Support Remote UDF</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191311782.png" alt="image-20220819131156651"></p><h3 id="Raptor-X-的多级缓存">Raptor X 的多级缓存</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191312326.png" alt="image-20220819131242190"></p><h2 id="小结-4">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208191313713.png" alt="image-20220819131350567"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L6：大数据 Shuffle 原理与实践</title>
      <link href="/2022/07/31/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL6%EF%BC%9A%E5%A4%A7%E6%95%B0%E6%8D%AE-Shuffle-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/07/31/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL6%EF%BC%9A%E5%A4%A7%E6%95%B0%E6%8D%AE-Shuffle-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7123908203590451207/#heading-46">【大数据专场 学习资料二】第四届字节跳动青训营</a></p></div></details><p>讲真，这节课大概都听不懂（</p><hr><h1 id="Shuffle-概述">Shuffle 概述</h1><h2 id="MapReduce-概述">MapReduce 概述</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181058824.png" alt="image-20220818105838700"></p><h2 id="Map">Map</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181102668.png" alt="image-20220818110201543"></p><p>三张 gif</p><h2 id="Shuffle">Shuffle</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181101216.png" alt="image-20220818110112097"></p><p>本质：通过哈希区别不同类型数据</p><h2 id="Reduce">Reduce</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181101926.png" alt="image-20220818110128825"></p><h2 id="为什么-Shuffle-对性能非常重要">为什么 Shuffle 对性能非常重要</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181103549.png" alt="image-20220818110332418"></p><h2 id="总结">总结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181105838.png" alt="image-20220818110546718"></p><p>批式计算的发展流程</p><h1 id="Shuffle-算子">Shuffle 算子</h1><h2 id="算子分类与应用">算子分类与应用</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181106085.png" alt="image-20220818110639976"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181108076.png" alt="image-20220818110821961"></p><p>这个例子中，把一个 txt 按行分割，然后统计每个单词的个数</p><p>reduceByKey 产生 Shuffle，做的是 A + B 的操作（有很多机器）</p><p>最后 collect，返回结果</p><h2 id="Spark-中对-Shuffle-的抽象-宽依赖、窄依赖">Spark 中对 Shuffle 的抽象 - 宽依赖、窄依赖</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181419371.png" alt="image-20220818141952223"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181421067.png" alt="image-20220818142111966"></p><h3 id="Shuffle-Dependency">Shuffle Dependency</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181422527.png" alt="image-20220818142234422"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181423994.png" alt="image-20220818142343877"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181425584.png" alt="image-20220818142501449"></p><h1 id="Shuffle-过程">Shuffle 过程</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181427537.png" alt="image-20220818142746399"></p><h2 id="Hash-Shuffle">Hash Shuffle</h2><h3 id="写数据">写数据</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181428448.png" alt="image-20220818142843344"></p><h3 id="写数据优化">写数据优化</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181429477.png" alt="image-20220818142945360"></p><p>把每个 Partition 映射到某个文件的片段</p><h2 id="Sort-Shuffle">Sort Shuffle</h2><h3 id="写数据-2">写数据</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181431971.png" alt="image-20220818143110849"></p><p>每个 task 只用一个文件存储真实数据</p><h2 id="读数据">读数据</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181453374.png" alt="image-20220818145317253"></p><h2 id="Shuffle-过程的触发流程">Shuffle 过程的触发流程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181453935.png" alt="image-20220818145333838"></p><p>前 5 行只是记录计算过程，在 Collect 的时候才会进行计算</p><h2 id="Shuffle-Handle-的创建">Shuffle Handle 的创建</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181455067.png" alt="image-20220818145540977"></p><h2 id="Shuttle-Handed-与-Shuffle-Writer-的对应关系">Shuttle Handed 与 Shuffle Writer 的对应关系</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181457198.png" alt="image-20220818145755080"></p><h2 id="Writer-实现">Writer 实现</h2><h3 id="BypassMergeShuffleWriter">BypassMergeShuffleWriter</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181458866.png" alt="image-20220818145844735"></p><p>仅适用于Partition较少的情况</p><h3 id="UnsafeShuffleWriter">UnsafeShuffleWriter</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181503808.png" alt="image-20220818150319693"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181508777.png" alt="image-20220818150809663"></p><h3 id="SortShuffleWriter">SortShuffleWriter</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181511617.png" alt="image-20220818151128495"></p><h2 id="Reader-实现">Reader 实现</h2><h3 id="网络时序图">网络时序图</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181514706.png" alt="image-20220818151420607"></p><h3 id="ShuffleBlockFetchIterator">ShuffleBlockFetchIterator</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181525027.png" alt="image-20220818152506891"></p><h3 id="External-Shuffle-Service">External Shuffle Service</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181528914.png" alt="image-20220818152853800"></p><h2 id="Shuffle-优化使用的技术">Shuffle 优化使用的技术</h2><h3 id="Zero-Copy">Zero Copy</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181542770.png" alt="image-20220818154218648"></p><h3 id="Natty-Zero-Copy">Natty Zero Copy</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181546017.png" alt="image-20220818154610873"></p><h2 id="常见问题">常见问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181548263.png" alt="image-20220818154808160"></p><h2 id="Shuffle-优化">Shuffle 优化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181552719.png" alt="image-20220818155233602"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181553992.png" alt="image-20220818155322854"></p><h2 id="Shuffle-参数优化">Shuffle 参数优化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181553716.png" alt="image-20220818155338573"></p><h2 id="Shuffle-倾斜优化">Shuffle 倾斜优化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181556214.png" alt="image-20220818155615083"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181557914.png" alt="image-20220818155736815"></p><h2 id="案例-参数优化">案例 - 参数优化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181558722.png" alt="image-20220818155837635"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181559355.png" alt="image-20220818155941258"></p><h1 id="Push-Shuffle">Push Shuffle</h1><p>上面讲的是 Spark 3.0 的算法</p><h2 id="为什么要-Push-Shuffle">为什么要 Push Shuffle</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181600611.png" alt="image-20220818160049502"></p><h2 id="Push-Shuffle-的实现">Push Shuffle 的实现</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181601397.png" alt="image-20220818160142293"></p><h2 id="Magnet-实现原理">Magnet 实现原理</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181602681.png" alt="image-20220818160232562"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181603928.png" alt="image-20220818160333799"></p><h2 id="Magnet-可靠性">Magnet 可靠性</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181605427.png" alt="image-20220818160513326"></p><h2 id="Cloud-Shuffle-Service-思想">Cloud Shuffle Service 思想</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181607567.png" alt="image-20220818160722457"></p><h2 id="Cloud-Shuffle-Service-架构">Cloud Shuffle Service 架构</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181607203.png" alt="image-20220818160738101"></p><h2 id="Cloud-Shuffle-Service-写入读取">Cloud Shuffle Service 写入读取</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181608332.png" alt="image-20220818160843239"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181610133.png" alt="image-20220818161051038"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181611731.png" alt="image-20220818161108643"></p><h2 id="实践案例-CSS-优化">实践案例 -  CSS 优化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181612644.png" alt="image-20220818161200511"></p><h1 id="总结-2">总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181612229.png" alt="image-20220818161226128"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L5：Spark 原理与实践</title>
      <link href="/2022/07/30/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL5%EF%BC%9ASpark-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/07/30/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL5%EF%BC%9ASpark-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7123908203590451207/#heading-25">【大数据专场 学习资料二】第四届字节跳动青训营</a></p></div></details><h1 id="大数据处理引擎-Spark">大数据处理引擎 Spark</h1><h2 id="大数据处理技术栈">大数据处理技术栈</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172223206.png" alt="image-20220817222324080"></p><h2 id="常见大数据处理链路">常见大数据处理链路</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172227245.png" alt="image-20220817222744155"></p><h2 id="开源大数据处理引擎">开源大数据处理引擎</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172228431.png" alt="image-20220817222843346"></p><h2 id="什么是-Spark？">什么是 Spark？</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172229980.png" alt="image-20220817222925889"></p><p>用于大规模数据处理的统一分析引擎</p><h2 id="Spark-版本演进">Spark 版本演进</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172232508.png" alt="image-20220817223231405"></p><h2 id="Spark-生态-特点">Spark 生态 &amp; 特点</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172236131.png" alt="image-20220817223633042"></p><h2 id="Spark-特点">Spark 特点</h2><h3 id="多语言支持">多语言支持</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172238996.png" alt="image-20220817223850913"></p><h3 id="丰富数据源">丰富数据源</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172239253.png" alt="image-20220817223905154"></p><h3 id="丰富的-API-算子">丰富的 API/算子</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172239648.png" alt="image-20220817223951555"></p><h2 id="Spark-运行架构">Spark 运行架构</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172240483.png" alt="image-20220817224044381"></p><h2 id="Spark-下载编译">Spark 下载编译</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172244511.png" alt="image-20220817224441404"></p><h2 id="Spark-包概览">Spark 包概览</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172244752.png" alt="image-20220817224458669"></p><h2 id="Spark-提交命令">Spark 提交命令</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172247770.png" alt="image-20220817224728662"></p><h2 id="提交一个简单任务">提交一个简单任务</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172248364.png" alt="image-20220817224808279"></p><h2 id="Spark-UI">Spark UI</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172248483.png" alt="image-20220817224822373"></p><h2 id="Spark-性能-benchmark">Spark 性能 benchmark</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172250344.png" alt="image-20220817225019259"></p><h1 id="SparkCore-原理解析">SparkCore 原理解析</h1><h2 id="SparkCore">SparkCore</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172251194.png" alt="image-20220817225107076"></p><h2 id="什么是-RDD">什么是 RDD</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172251632.png" alt="image-20220817225142505"></p><p>一个容错的可以并行执行的分布式处理集</p><h3 id="如何创建-RDD">如何创建 RDD</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172256232.png" alt="image-20220817225631111"></p><h3 id="RDD-算子">RDD 算子</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172257148.png" alt="image-20220817225729031"></p><h3 id="RDD-依赖">RDD 依赖</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172258014.png" alt="image-20220817225816895"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172301571.png" alt="image-20220817230123451"></p><h3 id="RDD-执行流程">RDD 执行流程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172303816.png" alt="image-20220817230317724"></p><h2 id="调度器">调度器</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172304111.png" alt="image-20220817230423988"></p><h2 id="内存管理">内存管理</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172307222.png" alt="image-20220817230702089"></p><h3 id="多任务间内存分配">多任务间内存分配</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172310835.png" alt="image-20220817231050716"></p><h2 id="Shuffle">Shuffle</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172311880.png" alt="image-20220817231111760"></p><h3 id="SortShuffleManager">SortShuffleManager</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208172314748.png" alt="image-20220817231448631"></p><h3 id="External-Shuffle-Service">External Shuffle Service</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181010502.png" alt="image-20220818101011256"></p><h1 id="SparkSQL-原理解析">SparkSQL 原理解析</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181012213.png" alt="image-20220818101209968"></p><p>这里就是第一节课的内容了</p><h2 id="Catalyst-优化器">Catalyst 优化器</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181026163.png" alt="image-20220818102630963"></p><h3 id="RBO">RBO</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181027162.png" alt="image-20220818102719914"></p><p>语法树遍历-&gt;模式匹配-&gt;等价转换</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181029596.png" alt="image-20220818102904355"></p><h3 id="CBO">CBO</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181031035.png" alt="image-20220818103119864"></p><h2 id="Adaptive-Query-Excution">Adaptive Query Excution</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181035697.png" alt="image-20220818103516571"></p><h3 id="Coalescing-Shuffle-Partition">Coalescing Shuffle Partition</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208241545022.png" alt="image-20220818103553998"></p><p>先设置比较大的 Partition 个数，然后后面再动态合并</p><h3 id="Switch-Join-Strategies">Switch Join Strategies</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181037551.png" alt="image-20220818103719405"></p><h3 id="Optimizing-Skew-Joins">Optimizing Skew Joins</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181038183.png" alt="image-20220818103823071"></p><h2 id="Runtime-Filter">Runtime Filter</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181039183.png" alt="image-20220818103948049"></p><p>这个和第一课里面讲的一样</p><h3 id="Bloom-Runtime-Filter">Bloom Runtime Filter</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181041507.png" alt="image-20220818104101402"></p><h2 id="Codgen">Codgen</h2><h3 id="Expression">Expression</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181042054.png" alt="image-20220818104245927"></p><h3 id="WholeStageCodegen">WholeStageCodegen</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181043628.png" alt="image-20220818104357518"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181045281.png" alt="image-20220818104509166"></p><h1 id="业界挑战与实践">业界挑战与实践</h1><h2 id="Shuffle-稳定性问题">Shuffle 稳定性问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181045208.png" alt="image-20220818104557100"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181046222.png" alt="image-20220818104623113"></p><h2 id="SQL-执行性能问题">SQL 执行性能问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181047576.png" alt="image-20220818104724462"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181049804.png" alt="image-20220818104953694"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181050910.png" alt="image-20220818105018802"></p><h2 id="参数推荐-作业诊断">参数推荐/作业诊断</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181050632.png" alt="image-20220818105045513"></p><h1 id="总结">总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208181052871.png" alt="image-20220818105249746"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th-大数据』L4：流计算中的 Window 计算</title>
      <link href="/2022/07/29/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL4%EF%BC%9A%E6%B5%81%E8%AE%A1%E7%AE%97%E4%B8%AD%E7%9A%84-Window-%E8%AE%A1%E7%AE%97/"/>
      <url>/2022/07/29/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL4%EF%BC%9A%E6%B5%81%E8%AE%A1%E7%AE%97%E4%B8%AD%E7%9A%84-Window-%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7123908203590451207/#heading-0">【大数据专场 学习资料二】第四届字节跳动青训营</a><a href="https://juejin.cn/post/7122754431371706404#heading-36">https://juejin.cn/post/7122754431371706404#heading-36</a>)</p></div></details><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171053054.png" alt="image-20220817105309948"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171053204.png" alt="image-20220817105315118"></p><h1 id="概述">概述</h1><h2 id="流式计算-VS-批式计算">流式计算 VS 批式计算</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171056457.png" alt="image-20220817105616383"></p><p>资源模型：批式跑完资源就释放了，流式是必须一直都占用的</p><h2 id="批处理">批处理</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171100953.png" alt="image-20220817110000806"></p><p>T+1：加 1 天</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171101789.png" alt="image-20220817110140679"></p><h2 id="处理时间窗口">处理时间窗口</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171101219.png" alt="image-20220817110153127"></p><h2 id="处理时间-VS-时间时间">处理时间 VS 时间时间</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171102276.png" alt="image-20220817110226171"></p><h2 id="事件事件窗口">事件事件窗口</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171103050.png" alt="image-20220817110312929"></p><p>有些数据会有延迟</p><h2 id="Watermark">Watermark</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171104172.png" alt="image-20220817110407083"></p><h2 id="小结">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171105248.png" alt="image-20220817110516141"></p><p>（感觉有点没听懂😂）</p><h1 id="Watermark-2">Watermark</h1><h2 id="什么是-Watermark">什么是 Watermark</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171105105.png" alt="image-20220817110556015"></p><h2 id="如何产生-Watermark">如何产生 Watermark</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171106881.png" alt="image-20220817110631779"></p><h2 id="如何传递-Watermark">如何传递 Watermark</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171107233.png" alt="image-20220817110717150"></p><p>每个算子根据上游输入的最小值</p><h2 id="如何通过-Flink-UI-观察-Watermark">如何通过 Flink UI 观察 Watermark</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171108226.png" alt="image-20220817110847127"></p><h2 id="典型问题一">典型问题一</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171109346.png" alt="image-20220817110935232"></p><h2 id="典型问题二">典型问题二</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171112351.png" alt="image-20220817111220241"></p><p>部分的分区断流（故障、晚上业务少等）的问题</p><h2 id="典型问题三">典型问题三</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171114539.png" alt="image-20220817111446426"></p><h1 id="Window">Window</h1><h2 id="Window-分类">Window 分类</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171117679.png" alt="image-20220817111728587"></p><h2 id="Window-使用">Window 使用</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171122878.png" alt="image-20220817112259775"></p><h2 id="滚动窗口">滚动窗口</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171132691.png" alt="image-20220817113252597"></p><h2 id="滑动窗口">滑动窗口</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171135971.png" alt="image-20220817113538880"></p><h2 id="会话窗口">会话窗口</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171138299.png" alt="image-20220817113856207"></p><h2 id="迟到数据">迟到数据</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171222023.png" alt="image-20220817122223906"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171224696.png" alt="image-20220817122443580"></p><h2 id="增量-VS-全量计算">增量 VS 全量计算</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171227179.png" alt="image-20220817122722076"></p><h2 id="EMIT-触发">EMIT 触发</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171229646.png" alt="image-20220817122941523"></p><h2 id="小结-2">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171231634.png" alt="image-20220817123138525"></p><h1 id="优化机制">优化机制</h1><h2 id="Mini-batch-优化">Mini-batch 优化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171232091.png" alt="image-20220817123229004"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171234393.png" alt="image-20220817123446298"></p><p>让算子攒一小批，然后再处理，避免高频读写</p><p>但是这样也会增加延迟，所以实际上会进行全局的协调</p><h2 id="倾斜优化-local-global">倾斜优化 local-global</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171759302.png" alt="image-20220817175901177"></p><h2 id="Distinct-计算状态复用">Distinct 计算状态复用</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171800947.png" alt="image-20220817180035841"></p><p>（听得不是很懂，还是建议看原视频）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171803295.png" alt="image-20220817180330209"></p><h2 id="Pane-优化">Pane 优化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171804873.png" alt="image-20220817180450789"></p><p>在滑动窗口里，每一条数据可能属于多个窗口</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171805390.png" alt="image-20220817180557292"></p><h2 id="小结-3">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171808122.png" alt="image-20220817180809010"></p><h1 id="案例分析">案例分析</h1><p>（基于真实场景的抽象）</p><h2 id="需求一">需求一</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171809940.png" alt="image-20220817180916823"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171813490.png" alt="image-20220817181300384"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171815710.png" alt="image-20220817181516597"></p><h2 id="需求二">需求二</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171816944.png" alt="image-20220817181631839"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171816113.png" alt="image-20220817181640002"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171817079.png" alt="image-20220817181736968"></p><h1 id="课程总结">课程总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208171817927.png" alt="image-20220817181757807"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th』L3：Exactly Once 语义在 Flink 中的实现</title>
      <link href="/2022/07/27/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL3%EF%BC%9AExactly-Once-%E8%AF%AD%E4%B9%89%E5%9C%A8-Flink-%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/07/27/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL3%EF%BC%9AExactly-Once-%E8%AF%AD%E4%B9%89%E5%9C%A8-Flink-%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7122754431371706404#heading-36">【大数据专场 学习资料一】第四届字节跳动青训营 - 掘金</a></p></div></details><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160905358.png" alt="image-20220816090515172"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160911351.png" alt="image-20220816091110127"></p><h1 id="数据流和动态表">数据流和动态表</h1><h2 id="随处可见的流式数据">随处可见的流式数据</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160911591.png" alt="image-20220816091140387"></p><h2 id="传统-SQL-和流处理">传统 SQL 和流处理</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160912077.png" alt="image-20220816091212849"></p><h2 id="数据流和动态图转换">数据流和动态图转换</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160915422.png" alt="image-20220816091527219"></p><p>先转换为动态表，再执行 SQL，再转为流</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160916695.png" alt="image-20220816091602466"></p><h2 id="连续查询">连续查询</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160917676.png" alt="image-20220816091725468"></p><h2 id="查询产生仅追加数据的动态表">查询产生仅追加数据的动态表</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160919619.png" alt="image-20220816091956386"></p><h2 id="两个连续查询对比">两个连续查询对比</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160921606.png" alt="image-20220816092110351"></p><h2 id="Retract-消息的产生">Retract 消息的产生</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160921685.png" alt="image-20220816092156470"></p><p>对之前的结果进行回撤</p><h2 id="状态">状态</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160922668.png" alt="image-20220816092236470"></p><h2 id="数据流和动态表转换回顾">数据流和动态表转换回顾</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160923330.png" alt="image-20220816092350091"></p><h2 id="不同数据处理保证的语义">不同数据处理保证的语义</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160924940.png" alt="image-20220816092410732"></p><h1 id="Exactly-Once-和-Checkpoint">Exactly-Once 和 Checkpoint</h1><h2 id="状态快照与恢复">状态快照与恢复</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160925812.png" alt="image-20220816092558614"></p><p>一个源源不断的数字流，分布对奇数和偶数进行累加和</p><p>现在要备份，需要记录现在消费的位点（Source 算子）与目前的和（两个 sum 算子）</p><p>保存这 3 个状态，发生故障后就可以通过最近的保存点恢复</p><h2 id="制作快照的时间点">制作快照的时间点</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160930100.png" alt="image-20220816093025847"></p><p>不能在任意时间点保存，必须等待下游数据全部处理完成</p><p>因为恢复时上游不会重复下发数据，而下游可能在快照时还没处理或收到</p><p>可见这种方法需要停止业务消费，有没有更好的方法？</p><h2 id="Chandy-Lamport-算法">Chandy - Lamport 算法</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160936028.png" alt="image-20220816093629827"></p><p>更复杂一点的场景，有两个数据流并行处理</p><h3 id="快照制作的开始">快照制作的开始</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160937940.png" alt="image-20220816093707765"></p><p>Source 收到 JM 发送的 Checkpoint Barrier 标识</p><h3 id="Source-算子的处理">Source 算子的处理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208160938490.png" alt="image-20220816093839247"></p><p>Source 短暂地停止处理，保存当前状态，然后继续向下游传递 Checkpoint Barrier 标识，然后就恢复数据的处理，不需要管下游</p><h3 id="Barrier-Alignment">Barrier Alignment</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162201790.png" alt="image-20220816220122674"></p><p>对于下游节点，两个 Source 的 Checkpoint Barrier 不一定是同时到的（例如对于这里的 Sum even，Source 1 的 Checkpoint Barrier 先到了，而 Source 2 的还在路上），这时就需要等待上游的所有 Checkpoint Barrier 都到达，并且等待的时候要把数据阻塞起来，不进行处理，这个过程称为 Barrier Alignment</p><h3 id="快照制作和处理数据的解耦">快照制作和处理数据的解耦</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162206904.png" alt="image-20220816220606790"></p><p>类似的过程也会发生在 Sink ，在这个过程中可以看见，快照的制作和处理数据是解耦的</p><h3 id="Checkpoint-的结束">Checkpoint 的结束</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162207100.png" alt="image-20220816220733993"></p><h2 id="Checkpoint-对作业性能的影响">Checkpoint 对作业性能的影响</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162208877.png" alt="image-20220816220845749"></p><h1 id="端到端-Exactly-Once-实现">端到端 Exactly-Once 实现</h1><h2 id="端到端-Exactly-Once-语义">端到端 Exactly-Once 语义</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162214441.png" alt="image-20220816221430335"></p><h2 id="两阶段提交协议">两阶段提交协议</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162224598.png" alt="image-20220816222408496"></p><h3 id="预提交阶段">预提交阶段</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162228328.png" alt="image-20220816222839223"></p><h3 id="提交阶段">提交阶段</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162231454.png" alt="image-20220816223134334"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162232703.png" alt="image-20220816223244595"></p><h2 id="Flink-中-2PC-Slink">Flink 中 2PC Slink</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162234098.png" alt="image-20220816223404997"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162238848.png" alt="image-20220816223840749"></p><p>预提交阶段，向 Source 发送 Checkpoint</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162239910.png" alt="image-20220816223924820"></p><p>向下游传递，每个节点开始制作快照，无论成功与否都向 JM 汇报结果</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162248830.png" alt="image-20220816224812738"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162248592.png" alt="image-20220816224841484"></p><p>图中的三个算子都汇报成功的话，JM 就认定为快照制作成功</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162250416.png" alt="image-20220816225002302"></p><p>这个方案整体来看还是有延迟的</p><h1 id="Flink-案例讲解">Flink 案例讲解</h1><h2 id="账单计算服务">账单计算服务</h2><h3 id="场景介绍">场景介绍</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162350267.png" alt="image-20220816235011157"></p><h3 id="当前方案">当前方案</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162352981.png" alt="image-20220816235233882"></p><h3 id="存在的问题">存在的问题</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162354389.png" alt="image-20220816235401289"></p><h3 id="Flink-解决方案">Flink 解决方案</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162356293.png" alt="image-20220816235600170"></p><h1 id="课程总结">课程总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208162358097.png" alt="image-20220816235820973"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th』L2：流/批/OLAP 一体的 Flink 引擎介绍</title>
      <link href="/2022/07/26/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL2%EF%BC%9A%E6%B5%81-%E6%89%B9-OLAP-%E4%B8%80%E4%BD%93%E7%9A%84-Flink-%E5%BC%95%E6%93%8E%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/07/26/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL2%EF%BC%9A%E6%B5%81-%E6%89%B9-OLAP-%E4%B8%80%E4%BD%93%E7%9A%84-Flink-%E5%BC%95%E6%93%8E%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7122754431371706404#heading-14">【大数据专场 学习资料一】第四届字节跳动青训营 - 掘金</a></p></div></details><h1 id="Flink-概述">Flink 概述</h1><h2 id="Apache-Flink-的诞生背景">Apache Flink 的诞生背景</h2><h3 id="什么是大数据">什么是大数据</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141039455.png" alt="image-20220814103915315"></p><h3 id="大数据计算架构发展历史">大数据计算架构发展历史</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141044670.png" alt="image-20220814104429535"></p><p>Hadoop 那里就是谷歌发的 3 篇论文，GFS， Map-Reduce 等</p><h3 id="为什么需要流式计算">为什么需要流式计算</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141047620.png" alt="image-20220814104741495"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141048704.png" alt="image-20220814104805579"></p><p>简单地说，就是业内需要流式计算，然后就有了 Flink</p><h2 id="为什么-Apache-Flink-会脱颖而出">为什么 Apache Flink 会脱颖而出</h2><h3 id="流式计算引擎发展历程">流式计算引擎发展历程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141050638.png" alt="image-20220814105009496"></p><h3 id="流式计算引擎对比">流式计算引擎对比</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141050916.png" alt="image-20220814105057810"></p><ul><li>At Least Once ：能保证数据至少能被处理一次</li><li>At Most Once ：数据最多被处理一次（可能没处理到）</li></ul><p>StateFul：不再依赖外部系统存储状态</p><h3 id="Why-Flink">Why Flink</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141056122.png" alt="image-20220814105641983"></p><p>牛啤一体可还行（</p><h2 id="Apache-Flink-开源生态">Apache Flink 开源生态</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141057059.png" alt="image-20220814105722912"></p><p>最左边：Flink 可以高性能地使用很多存储引擎</p><p>中间框：内部架构设计，下面会说</p><p>下面：部署模式</p><p>上面：基于 Flink 的其他框架</p><h1 id="Flink-整体架构">Flink 整体架构</h1><h2 id="Flink-分层架构">Flink 分层架构</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141102695.png" alt="image-20220814110211560"></p><p>最上面： SDK</p><ul><li>SQL 相关 API</li><li>Stream 相关 API</li><li>python 的 API</li></ul><p>中间：执行引擎层</p><h2 id="Flink-总体架构">Flink 总体架构</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141105975.png" alt="image-20220814110514839"></p><p>这张图很重要，必须要熟悉</p><p>首先你的代码会在客户端转为一张 DAG 图（逻辑执行图），然后发给 JM ，JM 转为物理执行图，并且根据这个图把不同的 task 调度到各个的 TM 中执行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141109500.png" alt="image-20220814110941378"></p><p>slot：插槽</p><h2 id="Flink-作业示例">Flink 作业示例</h2><p>这个示例就是一个 hello world 类示例</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141112267.png" alt="image-20220814111226165"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141115478.png" alt="image-20220814111524379"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141115912.png" alt="image-20220814111551801"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141118994.png" alt="image-20220814111853883"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141120414.png" alt="image-20220814112021283"></p><p>每个 Slot 是单独的一个线程在执行</p><h2 id="Flink-如何做到流批一体">Flink 如何做到流批一体</h2><h3 id="为什么需要流批一体">为什么需要流批一体</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141125956.png" alt="image-20220814112533818"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141126739.png" alt="image-20220814112622625"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141127239.png" alt="image-20220814112723103"></p><h3 id="流批一体的挑战">流批一体的挑战</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141128586.png" alt="image-20220814112813477"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141128276.png" alt="image-20220814112827157"></p><h3 id="Flink-如何做到流批一体-2">Flink 如何做到流批一体</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141129008.png" alt="image-20220814112909864"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141129028.png" alt="image-20220814112934921"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141130687.png" alt="image-20220814113022541"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141130486.png" alt="image-20220814113032355"></p><h3 id="流批一体的-Scheduler-层">流批一体的 Scheduler 层</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141131497.png" alt="image-20220814113148381"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141131980.png" alt="image-20220814113155870"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141134683.png" alt="image-20220814113438549"></p><p>12 个（</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141135893.png" alt="image-20220814113540756"></p><p>下面是最新的调度机制</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141136243.png" alt="image-20220814113621123"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141137747.png" alt="image-20220814113709614"></p><p>BLOCKING：数据不是实时传过去的，执行完先落盘，然后可以释放该节点的资源，分给下个节点</p><p>PIPELINED：不落盘</p><h3 id="流批一体的-Shuffle-Service-层">流批一体的 Shuffle Service 层</h3><p>Shuffle：用来连接上下游交换数据的过程</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141139473.png" alt="image-20220814113931350"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141141722.png" alt="image-20220814114151592"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141143108.png" alt="image-20220814114342967"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141144789.png" alt="image-20220814114442649"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141145110.png" alt="image-20220814114503988"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141145384.png" alt="image-20220814114525258"></p><h3 id="Flink-流批一体总结">Flink 流批一体总结</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141147338.png" alt="image-20220814114711217"></p><h1 id="Flink-架构优化">Flink 架构优化</h1><h2 id="流-批-OLAP-业务场景概述">流/批/OLAP 业务场景概述</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141148611.png" alt="image-20220814114841482"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141148206.png" alt="image-20220814114848064"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141149984.png" alt="image-20220814114920866"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141149659.png" alt="image-20220814114929550"></p><h2 id="为什么三种场景可以用一套引擎解决">为什么三种场景可以用一套引擎解决</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141150555.png" alt="image-20220814115004410"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141150714.png" alt="image-20220814115042615"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141151639.png" alt="image-20220814115111521"></p><h2 id="Flink-如何支持-OLAP-场景">Flink 如何支持 OLAP 场景</h2><h3 id="Flink-做-OLAP-的优势">Flink 做 OLAP 的优势</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141152337.png" alt="image-20220814115243200"></p><h3 id="Flink-OLAP-场景的挑战">Flink OLAP 场景的挑战</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141153149.png" alt="image-20220814115334025"></p><h3 id="Flink-OLAP-架构现状">Flink OLAP 架构现状</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141154932.png" alt="image-20220814115409793"></p><h3 id="Flink-在-OLAP-架构的问题和设想">Flink 在 OLAP 架构的问题和设想</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141156625.png" alt="image-20220814115606501"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141156024.png" alt="image-20220814115656885"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141158001.png" alt="image-20220814115837876"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141158590.png" alt="image-20220814115846461"></p><h3 id="总结">总结</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141159885.png" alt="image-20220814115920773"></p><h1 id="精选案例讲解">精选案例讲解</h1><h2 id="电商流批一体实践">电商流批一体实践</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141200949.png" alt="image-20220814120037832"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141200136.png" alt="image-20220814120057002"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141201939.png" alt="image-20220814120118799"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141201874.png" alt="image-20220814120134745"></p><h2 id="字节-Flink-OLAP-实践">字节 Flink OLAP 实践</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141202176.png" alt="image-20220814120221055"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141202019.png" alt="image-20220814120242890"></p><h1 id="课程总结">课程总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208141204284.png" alt="image-20220814120416153"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-4th』L1：SQL Optimizer 解析</title>
      <link href="/2022/07/24/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL1%EF%BC%9ASQL-Optimizer-%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/07/24/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-4th-%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%8FL1%EF%BC%9ASQL-Optimizer-%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>🎶 学员手册：<a href="https://juejin.cn/post/7122754431371706404#heading-0">【大数据专场 学习资料一】第四届字节跳动青训营 - 掘金</a></p></div></details><h1 id="大数据体系和-SQL">大数据体系和 SQL</h1><h2 id="大数据体系">大数据体系</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202207281838291.png" alt="image-20220728183845986"></p><p>其中消息队列用于解耦存储与计算，本次青训营会从分析引擎开始展开，然后是存储、消息队列与资源调度</p><p>那么，为什么要把 SQL 优化器放在第一节课讲呢？</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202207281851108.png" alt="image-20220728185137832"></p><ul><li>首先，SQL 是非常流行的，而且简单，包括数据分析师和挖掘师都在用，他们可能不会使用 Python之类的通用语言，但是他们可以很方便地使用一条 SQL 去处理数据，得到他们想要的结果</li><li>并且，SQL 是很多系统都支持的接口，而且 SQL 已经成为了大数据方面的通用接口。很多分析引擎一开始并不支持 SQL ，但现在都渐渐地提供了 SQL 接口</li></ul><blockquote><p>也就是说， One SQL rules big data all （通过 SQL 处理所有的大数据）</p></blockquote><p>所以 SQL 在大数据中是非常重要的，下面将介绍 SQL 的处理流程</p><h2 id="SQL-的处理流程">SQL 的处理流程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202207281853794.png" alt="image-20220728185321503"></p><p>首先，先通过 <code>Parser</code> 变成抽象语法树（Abstract Syntax Tree，AST），之后通过 <code>Analyzer</code> 变成逻辑计划（Logical Plan），再通过 <code>Optimizer</code> 变成物理计划（Physical Plan），最后交给 <code>Executor</code> 来执行</p><h3 id="Parser">Parser</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202207281912750.png" alt="image-20220728191252407"></p><p>死去的编译原理突然开始攻击我（bushi</p><h3 id="Analyzer">Analyzer</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208050938505.png" alt="image-20220805093818200"></p><p>逻辑地：只是说明了要干什么，但是没有确定用什么算法实现（例如排序）</p><h3 id="Optimizer">Optimizer</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208050940298.png" alt="image-20220805094021013"></p><h3 id="Executor">Executor</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051002987.png" alt="image-20220805100154293"></p><h2 id="小结">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051004464.png" alt="image-20220805100423140"></p><h1 id="常规的查询优化器">常规的查询优化器</h1><h2 id="查询优化器分类">查询优化器分类</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051007582.png" alt="image-20220805100759245"></p><p>两种分类方法</p><ul><li>按遍历树的方向分</li><li>按优化方法分</li></ul><h2 id="RBO（基于规则的优化）">RBO（基于规则的优化）</h2><p>这些规则只是经验规则，是总结出来的，甚至可能反向优化（</p><h3 id="前提知识：关系代数">前提知识：关系代数</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051010966.png" alt="image-20220805101049699"></p><h3 id="3-个优化原则">3 个优化原则</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051015364.png" alt="image-20220805101507540"></p><h3 id="优化规则1：列裁剪">优化规则1：列裁剪</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051020192.png" alt="image-20220805101817766"></p><p>只读取需要的列</p><h3 id="优化规则2：谓词下推">优化规则2：谓词下推</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051022473.png" alt="image-20220805102110852"></p><p>尽早过滤掉不必要的行，减少资源占用</p><h3 id="优化规则3：传递闭包">优化规则3：传递闭包</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051023983.png" alt="image-20220805102310659"></p><p>表达式的等值关系 + 过滤条件 = 新的过滤条件</p><h3 id="优化规则4：Runtime-Filter">优化规则4：Runtime Filter</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051055215.png" alt="image-20220805102637580"></p><p>提早过滤左边的数据，那么就能减少开销（网络、运算等）</p><p>JOIN 的时候得到右侧 JOIN 集合的一些特性（例如知道右侧 JOIN KEY 的范围），然后通过这些特性先过滤左侧的数据</p><ul><li>min-max：知道了右侧的范围是 0~100，那么左侧就只扫描 0~100 的范围（缺点：范围必须是很紧密的，不然意义不大）</li><li>in-list：如右侧的值很少，就可以使用 in-list ，使用集合包含过滤（缺点：右侧集合不能太大）</li><li>bloom filter：通过右侧来构建，效果是给我一个数，如果说不在那就是不在，说在是有可能在（具体细节在后面的课程介绍）</li></ul><h3 id="RBO-小结">RBO 小结</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051055555.png" alt="image-20220805104142945"></p><p>这里只讲了4 条经验规则，但一般实现都有几百条</p><p>优点是简单，但是缺点也很多（毕竟都是经验规则，不保证能得到最优的执行计划）</p><h2 id="CBO（基于代价的优化）">CBO（基于代价的优化）</h2><h3 id="概念">概念</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051055565.png" alt="image-20220805104643426"></p><h3 id="统计信息">统计信息</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051054926.png" alt="image-20220805105400574"></p><h3 id="统计信息的收集方式">统计信息的收集方式</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051109257.png" alt="image-20220805105649207"></p><h3 id="统计信息推导规则">统计信息推导规则</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051109367.png" alt="image-20220805110039676"></p><p>这个稍微看一下应该不难理解</p><h3 id="统计信息的问题">统计信息的问题</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051106677.png" alt="image-20220805110635341"></p><p>（如果是汉，那么必定是比亚迪的）</p><h3 id="执行计划枚举">执行计划枚举</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051109419.png" alt="image-20220805110905123"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051111731.png" alt="image-20220805111125417"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051111356.png" alt="image-20220805111143993"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051112977.png" alt="image-20220805111215594"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051112657.png" alt="image-20220805111240327"></p><h3 id="CBO-效果">CBO 效果</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051113272.png" alt="image-20220805111341957"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051113398.png" alt="image-20220805111349107"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051114427.png" alt="image-20220805111451179"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051115762.png" alt="image-20220805111515487"></p><h3 id="CBO-小结">CBO 小结</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051115010.png" alt="image-20220805111558667"></p><h2 id="小结-2">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051117237.png" alt="image-20220805111701885"></p><h1 id="社区开源实践">社区开源实践</h1><h2 id="概览">概览</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051118498.png" alt="image-20220805111806216"></p><h2 id="Apache-Calcite">Apache Calcite</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051120955.png" alt="image-20220805112013641"></p><p>作为一个优化器，下面可以对接各种系统</p><h3 id="Calcite-RBO">Calcite RBO</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051122935.png" alt="image-20220805112236593"></p><h3 id="Calcite-CBO">Calcite CBO</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051144653.png" alt="image-20220805112532539"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051128906.png" alt="image-20220805112830803"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051130984.png" alt="image-20220805113037882"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051132524.png" alt="image-20220805113212421"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051133008.png" alt="image-20220805113319891"></p><h2 id="小结-3">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051133043.png" alt="image-20220805113339924"></p><h1 id="前沿趋势">前沿趋势</h1><h2 id="Big-Data-Big-Money">Big Data, Big Money</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051134384.png" alt="image-20220805113451272"></p><h2 id="概览-2">概览</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051135498.png" alt="image-20220805113536393"></p><h2 id="DATA-AI">DATA + AI</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051139635.png" alt="image-20220805113945507"></p><h2 id="小结-4">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051142863.png" alt="image-20220805114238768"></p><h1 id="课程总结">课程总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202208051143904.png" alt="image-20220805114344817"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-4th-大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法拾遗』广度优先搜索（3）：BFS 与 A*</title>
      <link href="/2022/07/16/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%883%EF%BC%89%EF%BC%9ABFS-%E4%B8%8E-A/"/>
      <url>/2022/07/16/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%883%EF%BC%89%EF%BC%9ABFS-%E4%B8%8E-A/</url>
      
        <content type="html"><![CDATA[<h1 id="启发式搜索">启发式搜索</h1><p>还是从最简单的走网格开始吧，现在有一个包含障碍的方形网格，你需要求出从 S 点到 T 点的最短步数</p><p>很简单，不是吗？使用 BFS 就可以办到</p><p>但是，BFS 是一种盲目的搜索技术，它只会不断遍历周围的点，如果 T 点在 S 点的右上方，作为人的话肯定会把更多的精力放在往右上方搜索，一般这样能更快地找到路径，但是 BFS 并没有这种智能，那么能不能把这种智能交给程序呢？这就是启发式搜索，<mark class="hl-label green">A*算法是比较简单的一种，可以认为是BFS和贪心的结合</mark> </p><hr><h1 id="尝试贪心思想">尝试贪心思想</h1><p>运用贪心法可进行如下处理：在处理队列中的点时，始终选取与终点的曼哈顿距离最短的点优先处理，这样循环往复，就能不断向终点逼近，而那些南辕北辙的点自然会在队列中被挤到后面去，不会浪费搜索资源</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">8</span>, N = <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Manhattan_distance</span><span class="params">(<span class="type">int</span> ax, <span class="type">int</span> ay)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="type">int</span> dist, cost; <span class="comment">// 到终点的距离 从起点到目前的距离</span></span><br><span class="line">    <span class="type">int</span> f = dist;   <span class="comment">// 评估函数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">point</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> cost) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y), <span class="built_in">dist</span>(<span class="built_in">Manhattan_distance</span>(x, y)), <span class="built_in">cost</span>(cost) &#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> point &amp;rhs) <span class="type">const</span>  <span class="comment">// 运算符重载，根据 f 比较大小</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> f &gt; rhs.f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; S, T;</span><br><span class="line"><span class="type">int</span> board[M][N];</span><br><span class="line"><span class="type">bool</span> searched[M][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A_start</span><span class="params">(point start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;point, vector&lt;point&gt;, greater&lt;point&gt;&gt; q; <span class="comment">// 优先队列，f 小的排在前面</span></span><br><span class="line"></span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    board[start.x][start.y] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// print();</span></span><br><span class="line">        point cur = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        searched[cur.x][cur.y] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            point next = <span class="built_in">point</span>(cur.x + dx[i], cur.y + dy[i], cur.cost + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (next.x &lt; <span class="number">0</span> || next.x &gt;= M || next.y &lt; <span class="number">0</span> || next.y &gt;= N)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (board[next.x][next.y])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            board[next.x][next.y] = next.f;</span><br><span class="line">            q.<span class="built_in">push</span>(next);</span><br><span class="line">            <span class="keyword">if</span> (next.x == T.x &amp;&amp; next.y == T.y)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> search_count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (searched[i][j])</span><br><span class="line">                search_count++;</span><br><span class="line">            <span class="keyword">if</span> (S.x == i &amp;&amp; S.y == j)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; S&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (T.x == i &amp;&amp; T.y == j)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; T&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] == <span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; #&quot;</span>);</span><br><span class="line">            <span class="comment">// else if(board[i][j])</span></span><br><span class="line">            <span class="comment">//     printf(&quot;  1&quot;);</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, (<span class="type">int</span>)searched[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;search_count = %d\n&quot;</span>, search_count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> tmp = <span class="built_in">getchar</span>();</span><br><span class="line">            <span class="keyword">while</span> (tmp == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                tmp = <span class="built_in">getchar</span>();</span><br><span class="line">            <span class="keyword">if</span> (tmp == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                board[i][j] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (tmp == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">                S = <span class="built_in">point</span>(i, j, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (tmp == <span class="string">&#x27;T&#x27;</span>)</span><br><span class="line">                T = <span class="built_in">point</span>(i, j, INF);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">A_start</span>(S);</span><br><span class="line">    <span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Manhattan_distance</span><span class="params">(<span class="type">int</span> ax, <span class="type">int</span> ay)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(ax - T.x) + <span class="built_in">abs</span>(ay - T.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>听上去很好，不是吗？虽然这里也能找到终点，但是只有贪心还是不够的，这样很容易会陷入到局部最优中，搜一些不需要的点，而且有些题目中甚至无法到达终点</p><p>例如对于如下情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">..........</span><br><span class="line">..........</span><br><span class="line">..........</span><br><span class="line">.S........</span><br><span class="line">...#######</span><br><span class="line">.........T</span><br><span class="line">..........</span><br><span class="line">..........</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> 0 0 0 0 0 0 1 1 1 1</span><br><span class="line"> 0 0 0 0 0 1 1 1 1 1</span><br><span class="line"> 0 0 0 0 0 1 1 1 1 1</span><br><span class="line"> 0 S 1 1 1 1 1 1 1 1</span><br><span class="line"> 0 0 1 # # # # # # #</span><br><span class="line"> 0 0 1 1 1 1 1 1 1 T</span><br><span class="line"> 0 0 0 0 0 0 0 0 0 0</span><br><span class="line"> 0 0 0 0 0 0 0 0 0 0</span><br><span class="line">search_count = 31</span><br></pre></td></tr></table></figure><p>1 为被处理过，0 为未处理过（包括还在队列里面的），可以看到，右上角的点其实意义不大，但是还是搜索了</p><hr><h1 id="A-：综合考虑过去与将来">A*：综合考虑过去与将来</h1><p>而如果综合考虑 <code>到当前的代价</code> 与 <code>到目标的距离</code> ，结果会好很多</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int f = dist;</span></span><br><span class="line"><span class="type">int</span> f = dist + cost; <span class="comment">// 综合考虑过去与将来（滑稽）</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> 0 0 0 0 0 0 0 0 0 0</span><br><span class="line"> 0 0 0 0 0 0 0 0 0 0</span><br><span class="line"> 0 0 0 0 0 0 0 0 0 0</span><br><span class="line"> 0 S 1 1 1 1 1 1 1 1</span><br><span class="line"> 0 1 1 # # # # # # #</span><br><span class="line"> 0 1 1 1 1 1 1 1 1 T</span><br><span class="line"> 0 0 0 0 0 0 0 0 0 0</span><br><span class="line"> 0 0 0 0 0 0 0 0 0 0</span><br><span class="line">search_count = 19</span><br></pre></td></tr></table></figure><p>这就是 A* 算法，下面给出它的一般性描述：</p><blockquote><p>在搜索过程中，用一个估值函数对当前情况进行评估，得到最好的状态，从这个状态继续搜索直到到达目标</p></blockquote><p>设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 为当前所在的状态，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 为对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 的估值函数，有</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x) = g(x) + h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></span></p><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 表示从初识状态到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 的实际代价，它不体现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 和终点的关系</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 到终点的最优路径的评估，它就是“启发式”信息，把 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 称为启发函数，它决定了 A* 算法的优劣</p></li></ul><p>特别注意的是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 不能某掉最优解</p><p>在上面的例子中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 就是曼哈顿距离，这也是一种简单而且常用的启发函数</p><p>通过上面的式子也可以看出 A* 算法同时包含了 BFS 与贪心算法</p><ul><li>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">h(x)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x) = g(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> ，会按距离一圈一圈搜索，这就是朴素 BFS</li><li>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">g(x)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x) = h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> ，这就是纯贪心</li></ul><hr><h1 id="在八数码问题中使用-A-算法">在八数码问题中使用 A* 算法</h1><p>同样地，也可以在八数码中使用 A*算法</p><p>以不在目标位置的数码与目标位置的曼哈顿距离作为估值函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// using namespace std;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3</span>, M = <span class="number">4</span>, MAX = <span class="number">362880</span>, TARGRT = <span class="number">46233</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> FACT[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>, <span class="number">720</span>, <span class="number">5040</span>, <span class="number">40320</span>, <span class="number">362880</span>, <span class="number">3628800</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[M] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[M] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> dir[M] = &#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;u&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> board[N][N]; <span class="comment">// 0-8</span></span><br><span class="line">    <span class="type">int</span> x, y;        <span class="comment">// 0的位置</span></span><br><span class="line">    <span class="type">int</span> g, h;        <span class="comment">// g为当前步数，h为估价函数</span></span><br><span class="line">    <span class="type">int</span> Cantor;      <span class="comment">// Cantor展开</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载运算符，用于优先队列</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node &amp;a) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> g + h &lt; a.g + a.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Path</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> pre; <span class="comment">// 前驱节点</span></span><br><span class="line">    <span class="type">int</span> dir; <span class="comment">// 前驱节点到当前节点的移动方向</span></span><br><span class="line">&#125; path[MAX];</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> vis[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">swapNode</span><span class="params">(Node &amp;a, Node &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node t = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">abs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手写优先队列</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PriorityQueue</span></span><br><span class="line">&#123;</span><br><span class="line">    Node q[MAX];</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PriorityQueue</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(Node x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        q[++size] = x;</span><br><span class="line">        <span class="type">int</span> i = size;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">1</span> &amp;&amp; q[i] &lt; q[i / <span class="number">2</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swapNode</span>(q[i], q[i / <span class="number">2</span>]);</span><br><span class="line">            i /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        q[<span class="number">1</span>] = q[size--];</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i * <span class="number">2</span> &lt;= size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = i;</span><br><span class="line">            <span class="keyword">if</span> (q[i * <span class="number">2</span>] &lt; q[t])</span><br><span class="line">                t = i * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (i * <span class="number">2</span> + <span class="number">1</span> &lt;= size &amp;&amp; q[i * <span class="number">2</span> + <span class="number">1</span>] &lt; q[t])</span><br><span class="line">                t = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (t == i)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">swapNode</span>(q[i], q[t]);</span><br><span class="line">            i = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getCantor</span><span class="params">(Node e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[<span class="number">9</span>], k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) <span class="comment">//将数据排成一排，便于计算</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">            a[k++] = e.board[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">                count++;</span><br><span class="line">        &#125;</span><br><span class="line">        x += FACT[<span class="number">9</span> - i - <span class="number">1</span>] * count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getH</span><span class="params">(Node e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.board[i][j] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> x = (e.board[i][j] - <span class="number">1</span>) / N;</span><br><span class="line">            <span class="type">int</span> y = (e.board[i][j] - <span class="number">1</span>) % N;</span><br><span class="line">            res += <span class="built_in">abs</span>(x - i) + <span class="built_in">abs</span>(y - j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printPath</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (path[x].pre == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// printf(&quot;%c&quot;, dir[path[x].dir]);</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printPath</span>(path[x].pre);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, dir[path[x].dir]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AStar</span><span class="params">(Node now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    now.Cantor = <span class="built_in">getCantor</span>(now);</span><br><span class="line">    now.h = <span class="built_in">getH</span>(now);</span><br><span class="line">    q.<span class="built_in">push</span>(now);</span><br><span class="line">    vis[now.Cantor] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        Node now = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (now.Cantor == TARGRT)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printPath</span>(now.Cantor);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> nx = now.x + dx[i];</span><br><span class="line">            <span class="type">int</span> ny = now.y + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= N || ny &lt; <span class="number">0</span> || ny &gt;= N)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            Node next = now;</span><br><span class="line">            <span class="built_in">swap</span>(next.board[now.x][now.y], next.board[nx][ny]);</span><br><span class="line">            next.x = nx;</span><br><span class="line">            next.y = ny;</span><br><span class="line">            next.g++;</span><br><span class="line">            next.Cantor = <span class="built_in">getCantor</span>(next);</span><br><span class="line">            next.h = <span class="built_in">getH</span>(next);</span><br><span class="line">            <span class="keyword">if</span> (!vis[next.Cantor])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[next.Cantor] = <span class="literal">true</span>;</span><br><span class="line">                path[next.Cantor].pre = now.Cantor;</span><br><span class="line">                path[next.Cantor].dir = i;</span><br><span class="line">                q.<span class="built_in">push</span>(next);</span><br><span class="line">                <span class="keyword">if</span> (next.Cantor == TARGRT)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printPath</span>(next.Cantor);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(path, <span class="number">-1</span>, <span class="built_in">sizeof</span>(path));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> tmp[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">while</span> (std::cin.<span class="built_in">getline</span>(tmp, <span class="number">30</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 输入初始状态</span></span><br><span class="line">        Node start = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(tmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp[i] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (tmp[i] == <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// x设置为0,e点记录初始的x，y位置</span></span><br><span class="line">                start.board[j / <span class="number">3</span>][j % <span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">                start.x = j / <span class="number">3</span>;</span><br><span class="line">                start.y = j % <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                start.board[j / <span class="number">3</span>][j % <span class="number">3</span>] = tmp[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        start.g = <span class="number">0</span>;</span><br><span class="line">        start.h = <span class="built_in">getH</span>(start);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">        path[<span class="built_in">getCantor</span>(start)].pre = <span class="number">-1</span>;</span><br><span class="line">        q.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求逆序数</span></span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (start.board[i / <span class="number">3</span>][i % <span class="number">3</span>] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (start.board[j / <span class="number">3</span>][j % <span class="number">3</span>] == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (start.board[j / <span class="number">3</span>][j % <span class="number">3</span>] &gt; start.board[i / <span class="number">3</span>][i % <span class="number">3</span>])</span><br><span class="line">                    k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;unsolvable\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">AStar</span>(start);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法拾遗 </category>
          
          <category> 搜索技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法拾遗』康托展开</title>
      <link href="/2022/07/14/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/"/>
      <url>/2022/07/14/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<h1 id="简述">简述</h1><p>康托展开可以求出一个全排列在所有全排列中的字典序</p><p>也可以逆操作，通过元素个数和字典序，求出第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 个全排序状态</p><p>例如，对于 <code>&#123;1,2,3&#125;</code> 3 个数的全排列，共有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo stretchy="false">!</mo><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">3!=6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">3</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span> 种状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0: 1 2 3</span><br><span class="line">1: 1 3 2</span><br><span class="line">2: 2 1 3</span><br><span class="line">3: 2 3 1</span><br><span class="line">4: 3 1 2</span><br><span class="line">5: 3 2 1</span><br></pre></td></tr></table></figure><p>使用康托展开可以通过 <code>2 3 1</code> 求得值 <code>3</code> ，逆康托展开可以通过值 <code>4</code> 来求得 <code>3 1 2</code></p><hr><h1 id="核心算法">核心算法</h1><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>X</mi><mo>=</mo><msub><mi>A</mi><mn>1</mn></msub><mo>⋅</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo><mo>+</mo><msub><mi>A</mi><mn>2</mn></msub><mo>⋅</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo><mo>+</mo><mo>…</mo><mo>+</mo><msub><mi>A</mi><mi>n</mi></msub><mo>⋅</mo><mn>0</mn><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">X = A_{1}\cdot(n-1)! + A_{2}\cdot(n-2)! + \ldots + A_{n}\cdot0!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)!</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)!</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">0</span><span class="mclose">!</span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span> ：康托展开值，指此排列前面还有多少种排列</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> ：总共有多少数字</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ：第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 位上的数字</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ：在第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 位后面的数中，比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 小的数的个数</li></ul><blockquote><p>这个式子鄙人为了理解方便，稍微改动了一下</p></blockquote><h1 id="举例">举例</h1><h2 id="康托展开">康托展开</h2><h3 id="例一">例一</h3><p>求 <code>2143</code> 是 <code>&#123;1,2,3,4&#125;</code> 的全排列中第几大的数</p><ul><li>第一位是 2 ，后面比 2 小的有 1 个数，故写成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>3</mn><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">1\times3!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">3</span><span class="mclose">!</span></span></span></span></li><li>第二位是 1 ，后面没有比 1 小的数，故写成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>×</mo><mn>2</mn><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">0\times2!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">2</span><span class="mclose">!</span></span></span></span></li><li>第三位是 4 ，后面比 4 小的有 1 个数，故写成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">1\times1!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">1</span><span class="mclose">!</span></span></span></span></li><li>第四位是 3 ，后面没有数了，故写成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>×</mo><mn>0</mn><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">0\times0!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">0</span><span class="mclose">!</span></span></span></span></li></ul><p>计算：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>3</mn><mo stretchy="false">!</mo><mo>+</mo><mn>0</mn><mo>×</mo><mn>2</mn><mo stretchy="false">!</mo><mo>+</mo><mn>1</mn><mo>×</mo><mn>1</mn><mo stretchy="false">!</mo><mo>+</mo><mn>0</mn><mo>×</mo><mn>0</mn><mo stretchy="false">!</mo><mo>=</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">1\times3!+0\times2!+1\times1!+0\times0! = 7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">0</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">7</span></span></span></span></p><p>因为自然数是从 1 开始数的，所以 <code>2143</code> 是第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>7</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">7+1=8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">8</span></span></span></span> 大的排列</p><h3 id="例二">例二</h3><p>在 <code>&#123;1,2,3,4,5&#125;</code> 5个数的排列组合中，计算 <code>34152</code> 的康托展开值</p><ul><li>第一位是 3 ，后面有 1、2 两个， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mn>4</mn><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">2\times4!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">4</span><span class="mclose">!</span></span></span></span></li><li>第二位是 4 ，后面有 1、2 两个， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mn>3</mn><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">2\times3!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">3</span><span class="mclose">!</span></span></span></span></li><li>第三位是 1 ，后面没有比 1 小的， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>×</mo><mn>2</mn><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">0\times2!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">2</span><span class="mclose">!</span></span></span></span></li><li>第四位是 5 ，后面只有一个 2， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">1\times1!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">1</span><span class="mclose">!</span></span></span></span></li><li>最后一位，老样子是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>×</mo><mn>0</mn><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">0\times0!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">0</span><span class="mclose">!</span></span></span></span></li></ul><p>计算：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mn>4</mn><mo stretchy="false">!</mo><mo>+</mo><mn>2</mn><mo>×</mo><mn>3</mn><mo stretchy="false">!</mo><mo>+</mo><mn>0</mn><mo>×</mo><mn>2</mn><mo stretchy="false">!</mo><mo>+</mo><mn>1</mn><mo>×</mo><mn>1</mn><mo stretchy="false">!</mo><mo>+</mo><mn>0</mn><mo>×</mo><mn>0</mn><mo stretchy="false">!</mo><mo>=</mo><mn>61</mn></mrow><annotation encoding="application/x-tex">2\times4!+2\times3!+0\times2!+1\times1!+0\times0!=61</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">0</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">61</span></span></span></span></p><h2 id="逆康托展开">逆康托展开</h2><p>用上面那个例子，来逆运算一遍</p><p>在 <code>&#123;1,2,3,4,5&#125;</code> 5个数的排列组合中，计算 <code>61</code> 对应的排列状态</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>61</mn><mrow><mn>4</mn><mo stretchy="false">!</mo></mrow></mfrac></mstyle><mo>=</mo><mn>2</mn><mo>…</mo><mo>…</mo><mn>13</mn></mrow><annotation encoding="application/x-tex">\dfrac{61}{4!}=2\ldots\ldots13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">61</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">……</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">13</span></span></span></span> ，说明比第一位小的有两个数，故第一位为 3</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>13</mn><mrow><mn>3</mn><mo stretchy="false">!</mo></mrow></mfrac></mstyle><mo>=</mo><mn>2</mn><mo>…</mo><mo>…</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\dfrac{13}{3!}=2\ldots\ldots1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">13</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">……</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span></span></span></span> ，说明现在（3 已经被选走了）比第二位小的有两个数，故第二位为 4</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>2</mn><mo stretchy="false">!</mo></mrow></mfrac></mstyle><mo>=</mo><mn>0</mn><mo>…</mo><mo>…</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\dfrac{1}{2!}=0\ldots\ldots1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">……</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span></span></span></span> ，说明现在没有比第三位小的数，故第三位为 1</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>1</mn><mo stretchy="false">!</mo></mrow></mfrac></mstyle><mo>=</mo><mn>1</mn><mo>…</mo><mo>…</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\dfrac{1}{1!}=1\ldots\ldots0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">……</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span></span></span></span> ，说明现在比第四位小的只有一个，故第四位为 5</li><li>最后剩下一个 2，肯定就是最后一位</li></ul><p>故排列状态为 <code>34152</code></p><hr><h1 id="代码实现">代码实现</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> FACT[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>, <span class="number">720</span>, <span class="number">5040</span>, <span class="number">40320</span>, <span class="number">362880</span>, <span class="number">3628800</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Cantor</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">                count++;</span><br><span class="line">        &#125;</span><br><span class="line">        x += FACT[n - i - <span class="number">1</span>] * count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> *<span class="title">InverseCantor</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *a = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v; <span class="comment">// 存放当前可选数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        v.<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> r = x % FACT[i];</span><br><span class="line">        <span class="type">int</span> t = x / FACT[i];</span><br><span class="line">        x = r;</span><br><span class="line">        a[n - i - <span class="number">1</span>] = v[t];</span><br><span class="line">        v.<span class="built_in">erase</span>(v.<span class="built_in">begin</span>() + t); <span class="comment">// 移除选做当前位的数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">Cantor</span>(a, <span class="number">5</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> *b = <span class="built_in">InverseCantor</span>(<span class="number">7</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="为什么是这样？">为什么是这样？</h1><p>康托展开本质是不断枚举在此排列之前的所有排列</p><p>例如例二，<code>34152</code></p><p>从第一位看起，若要构造比当前小的，可以从后面的数字中选比 3 小的数字来放在第一位，有 <code>1xxxx</code> 和 <code>2xxxx</code> 两种可能，而后面四个位置是随意地全排列，自然是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mn>4</mn><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">2\times4!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">4</span><span class="mclose">!</span></span></span></span></p><p>在第一位已经固定为 3 的情况下看第二位，要比 4 小，可以是 <code>31xxx</code> 和 <code>32xxx</code> ，这里共有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mn>3</mn><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">2\times3!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">3</span><span class="mclose">!</span></span></span></span> 种排列</p><p>以此类推，第三位已经是最小了，不能变了</p><p>然后第四位，可以把 2 换过来，变成 <code>3412x</code> ，而 <code>x</code> 只可能是 5 ，共有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">1\times1!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">1</span><span class="mclose">!</span></span></span></span> 种</p><p>最后一位已经固定了，变不了了</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法拾遗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法拾遗』广度优先搜索（2）：状态图搜索</title>
      <link href="/2022/07/14/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%882%EF%BC%89%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E6%90%9C%E7%B4%A2/"/>
      <url>/2022/07/14/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%882%EF%BC%89%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="经典题目：八数码">经典题目：八数码</h1><p>广搜处理的对象不仅可以是一个数，还可以是一种状态，这里最经典的题目就是八数码</p><p>先来道<a href="https://www.luogu.com.cn/problem/P1379">基础的题目</a></p><details class="toggle" ><summary class="toggle-button" style="">点击查看题目</summary><div class="toggle-content"><ul><li><p>题目描述</p><p>在3×3的棋盘上，摆有八个棋子，每个棋子上标有1至8的某一数字。棋盘中留有一个空格，空格用0来表示。空格周围的棋子可以移到空格中。要求解的问题是：给出一种初始布局（初始状态）和目标布局（为了使题目简单,设目标状态为123804765），找到一种最少步骤的移动方法，实现从初始布局到目标布局的转变。</p></li><li><p>输入格式</p><p>输入初始状态，一行九个数字，空格用0表示</p></li><li><p>输出格式</p><p>只有一行，该行只有一个数字，表示从初始状态到目标状态需要的最少移动次数(测试数据中无特殊无法到达目标状态数据)</p></li><li><p>样例 #1</p><ul><li><p>样例输入 #1</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">283104765</span><br></pre></td></tr></table></figure></li><li><p>样例输出 #1</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></li></ul></li></ul></div></details><p>对于这道题，我们需要从给定的初始状态变化到目标状态，当我们在搜索的时候，可以直接将生成的子状态加入到队列中，每次再取出状态来处理，这就是所谓的状态图搜索</p><p>确定了思路，就有两个主要问题</p><ul><li>怎么表示状态</li><li>怎么去重</li></ul><h2 id="朴素做法">朴素做法</h2><p>因为洛谷上的这道题比较简单，对于第一个问题，可以直接将 3x3 的数组转换为一个 9 位的数字，使用 <code>int</code> 来保存</p><p>而去重的话，可以直接借助于 STL 中的 <code>map</code> 或者 <code>set</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> swap(a, b) &#123; int t = a; a = b; b = t; &#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">4</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> TARGRT = <span class="number">123804765</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[M] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[M] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; dist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">board2number</span><span class="params">(<span class="type">int</span> board[N][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">            number = number * <span class="number">10</span> + board[i][j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> point <span class="title">number2board</span><span class="params">(<span class="type">int</span> number, <span class="type">int</span> board[N][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point zero;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = N - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            board[i][j] = number % <span class="number">10</span>;</span><br><span class="line">            number /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                zero.x = i;</span><br><span class="line">                zero.y = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> zero;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> board[N][N];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    dist[start] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (now == TARGRT)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        point zero = <span class="built_in">number2board</span>(now, board);</span><br><span class="line">        point next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            next.x = zero.x + dx[i];</span><br><span class="line">            next.y = zero.y + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (next.x &gt;= <span class="number">0</span> &amp;&amp; next.x &lt; N &amp;&amp; next.y &gt;= <span class="number">0</span> &amp;&amp; next.y &lt; N)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(board[zero.x][zero.y], board[next.x][next.y]);</span><br><span class="line">                <span class="type">int</span> next_number = <span class="built_in">board2number</span>(board);</span><br><span class="line">                <span class="keyword">if</span> (dist.<span class="built_in">count</span>(next_number) == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dist[next_number] = dist[now] + <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(next_number);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">swap</span>(board[zero.x][zero.y], board[next.x][next.y]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> start;</span><br><span class="line">    cin &gt;&gt; start;</span><br><span class="line">    <span class="built_in">bfs</span>(start);</span><br><span class="line">    cout &lt;&lt; dist[TARGRT] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202207161826369.png" alt="image-20220716182603243"></p><h1 id="难度升级">难度升级</h1><p>接下来看一下升级了点难度的版本：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1043">hdu 1043</a></p><p>这道题除了变了一下输入格式，还有以下两点</p><ul><li>要求输出一个可行的解决方法（每次的动作）</li><li>有多组数据</li></ul><p>而这时，如果还使用上面的方法，就会 TLE</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> swap(a, b) \</span></span><br><span class="line"><span class="meta">    &#123;              \</span></span><br><span class="line"><span class="meta">        int t = a; \</span></span><br><span class="line"><span class="meta">        a = b;     \</span></span><br><span class="line"><span class="meta">        b = t;     \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3</span>, M = <span class="number">4</span>, TARGRT = <span class="number">123456780</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[M] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[M] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> dir[M] = &#123;<span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line">map&lt;<span class="type">int</span>, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; search_log; <span class="comment">// &lt;number, &lt;father, direction&gt;&gt;</span></span><br><span class="line"><span class="comment">// map&lt;int, int&gt; dist;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">board2number</span><span class="params">(<span class="type">int</span> board[N][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">            number = number * <span class="number">10</span> + board[i][j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> point <span class="title">number2board</span><span class="params">(<span class="type">int</span> number, <span class="type">int</span> board[N][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point zero;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = N - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            board[i][j] = number % <span class="number">10</span>;</span><br><span class="line">            number /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                zero.x = i;</span><br><span class="line">                zero.y = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> zero;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> board[N][N];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    <span class="comment">// dist[start] = 0;</span></span><br><span class="line">    search_log[start] = <span class="built_in">make_pair</span>(<span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (now == TARGRT)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        point zero = <span class="built_in">number2board</span>(now, board);</span><br><span class="line">        point next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            next.x = zero.x + dx[i];</span><br><span class="line">            next.y = zero.y + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (next.x &gt;= <span class="number">0</span> &amp;&amp; next.x &lt; N &amp;&amp; next.y &gt;= <span class="number">0</span> &amp;&amp; next.y &lt; N)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(board[zero.x][zero.y], board[next.x][next.y]);</span><br><span class="line">                <span class="type">int</span> next_number = <span class="built_in">board2number</span>(board);</span><br><span class="line">                <span class="keyword">if</span> (search_log.<span class="built_in">count</span>(next_number) == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// dist[next_number] = dist[now] + 1;</span></span><br><span class="line">                    search_log[next_number] = <span class="built_in">make_pair</span>(now, i);</span><br><span class="line">                    q.<span class="built_in">push</span>(next_number);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">swap</span>(board[zero.x][zero.y], board[next.x][next.y]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c  %c  %c  %c  %c  %c  %c  %c  %c&quot;</span>, &amp;c[<span class="number">0</span>], &amp;c[<span class="number">1</span>], &amp;c[<span class="number">2</span>], &amp;c[<span class="number">3</span>], &amp;c[<span class="number">4</span>], &amp;c[<span class="number">5</span>], &amp;c[<span class="number">6</span>], &amp;c[<span class="number">7</span>], &amp;c[<span class="number">8</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c[i] != <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">            number = number * <span class="number">10</span> + c[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            number = number * <span class="number">10</span> + <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string ans;</span><br><span class="line">    <span class="keyword">if</span> (search_log.<span class="built_in">count</span>(TARGRT) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;unsolvable\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> now = TARGRT;</span><br><span class="line">    <span class="type">int</span> father = search_log[now].first;</span><br><span class="line">    <span class="type">int</span> direction = search_log[now].second;</span><br><span class="line">    ans.<span class="built_in">push_back</span>(dir[direction]);</span><br><span class="line">    <span class="comment">// printf(&quot;%c&quot;, dir[direction]);</span></span><br><span class="line">    <span class="keyword">while</span> (father != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        now = father;</span><br><span class="line">        father = search_log[now].first;</span><br><span class="line">        direction = search_log[now].second;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(dir[direction]);</span><br><span class="line">        <span class="comment">// printf(&quot;%c&quot;, dir[direction]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    cout &lt;&lt; ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        search_log.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="type">int</span> start = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">bfs</span>(start);</span><br><span class="line">        <span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; dist[TARGRT] &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202207161907580.png" alt="image-20220716190719302"></p><h2 id="使用康托展开">使用康托展开</h2><p>为了解决 TLE 的问题，我减少了 STL 的使用，不再使用 <code>map</code> 去重和保存历史，而是使用简单的结构体数组</p><p>但是，这个数组要开多大呢？这取决于表示状态的方法，现在是直接将 9 宫格展开成数字，这样结构体下标就是 9 位数</p><p>但如果这样的话，这个数组就开会到 <code>search_log[1000000000]</code> ，内存直接爆炸，显然是不行的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202207161916438.png" alt="image-20220716191646096"></p><blockquote><p>当你尝试在 HDUOJ 上开一个超大数组（滑稽）</p></blockquote><p>如何解决这一问题呢？可以使用<a href="/2022/07/14/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/">康托展开</a></p><p>简单地说，康托展开可以求出某一排列在所有排列中的序号</p><p>例如， 9 个数的全排列共有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>9</mn><mo stretchy="false">!</mo><mo>=</mo><mn>362880</mn></mrow><annotation encoding="application/x-tex">9!=362880</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">9</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">362880</span></span></span></span> 种，使用康托展开可以将所有状态与编号一一对应，这样结构体的大小就降到了可以承受的地步，只用开到 <code>search_log[362880]</code></p><p>经过上述改进的版本如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> swap(a, b) \</span></span><br><span class="line"><span class="meta">    &#123;              \</span></span><br><span class="line"><span class="meta">        int t = a; \</span></span><br><span class="line"><span class="meta">        a = b;     \</span></span><br><span class="line"><span class="meta">        b = t;     \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3</span>, M = <span class="number">4</span>, MAX = <span class="number">362880</span>, TARGRT = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> FACT[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>, <span class="number">720</span>, <span class="number">5040</span>, <span class="number">40320</span>, <span class="number">362880</span>, <span class="number">3628800</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[M] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[M] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> dir[M] = &#123;<span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">log</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bool</span> vis;</span><br><span class="line">    <span class="type">int</span> father;</span><br><span class="line">    <span class="type">int</span> move_direction;</span><br><span class="line">&#125; search_log[MAX];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> state[<span class="number">9</span>];</span><br><span class="line">    point zero_pos;</span><br><span class="line">    <span class="type">int</span> CantorValue;</span><br><span class="line">&#125; start;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">To1D</span><span class="params">(point p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p.x * <span class="number">3</span> + p.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> point <span class="title">To2D</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point p;</span><br><span class="line">    p.x = x % <span class="number">3</span>;</span><br><span class="line">    p.y = x / <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Cantor</span><span class="params">(<span class="type">int</span> a[<span class="number">9</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">                count++;</span><br><span class="line">        &#125;</span><br><span class="line">        x += FACT[<span class="number">9</span> - i - <span class="number">1</span>] * count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//memset(search_log, 0, sizeof(search_log));</span></span><br><span class="line">    queue&lt;node&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    search_log[start.CantorValue].vis = <span class="literal">true</span>;</span><br><span class="line">    search_log[start.CantorValue].father = <span class="number">-1</span>;</span><br><span class="line">    search_log[start.CantorValue].move_direction = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (now.CantorValue == TARGRT)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            point swap_pos = now.zero_pos;</span><br><span class="line">            swap_pos.x += dx[i];</span><br><span class="line">            swap_pos.y += dy[i];</span><br><span class="line">            <span class="keyword">if</span> (swap_pos.x &lt; <span class="number">0</span> || swap_pos.x &gt;= <span class="number">3</span> || swap_pos.y &lt; <span class="number">0</span> || swap_pos.y &gt;= <span class="number">3</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            node next = now;</span><br><span class="line">            <span class="built_in">swap</span>(next.state[<span class="built_in">To1D</span>(swap_pos)], next.state[<span class="built_in">To1D</span>(now.zero_pos)]);</span><br><span class="line">            next.CantorValue = <span class="built_in">Cantor</span>(next.state);</span><br><span class="line">            <span class="keyword">if</span> (search_log[next.CantorValue].vis)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            search_log[next.CantorValue].vis = <span class="literal">true</span>;</span><br><span class="line">            next.zero_pos = swap_pos;</span><br><span class="line">            search_log[next.CantorValue].father = now.CantorValue;</span><br><span class="line">            search_log[next.CantorValue].move_direction = i;</span><br><span class="line">            q.<span class="built_in">push</span>(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">is_digit</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">9</span>], tmp = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i != <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">is_digit</span>(tmp) &amp;&amp; tmp != <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> ((tmp = <span class="built_in">getchar</span>()) == EOF)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        a[i] = tmp;</span><br><span class="line">        i++;</span><br><span class="line">        tmp = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// scanf(&quot;%c %c %c %c %c %c %c %c %c&quot;, &amp;a[0], &amp;a[1], &amp;a[2], &amp;a[3], &amp;a[4], &amp;a[5], &amp;a[6], &amp;a[7], &amp;a[8]);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            start.state[i] = a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            start.zero_pos = <span class="built_in">To2D</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            start.state[i] = <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    start.CantorValue = <span class="built_in">Cantor</span>(start.state);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> now = TARGRT;</span><br><span class="line">    <span class="keyword">if</span> (search_log[now].vis == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;unsolvable\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (now != start.CantorValue)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, dir[search_log[now].move_direction]);</span><br><span class="line">        now = search_log[now].father;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(search_log, <span class="number">0</span>, <span class="built_in">sizeof</span>(search_log));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">read</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// print start</span></span><br><span class="line">        <span class="comment">//  for (int i = 0; i &lt; 9; i++)</span></span><br><span class="line">        <span class="comment">//      printf(&quot;%d&quot;, start.state[i]);</span></span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="built_in">bfs</span>();</span><br><span class="line">        <span class="built_in">print</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是很不幸，由于依旧使用了 STL （ <code>queue</code> ） ，抑或是我的码风不好，面对这么多组数据还是败下阵来</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202207161932652.png" alt="image-20220716193237538"></p><h2 id="打表">打表</h2><p>现在怎么办？</p><p>俗话说的好：暴搜出奇迹，打表出省一！既然查询这么多，那么为何不直接从终点出发搜索，全跑一遍？这样后续的查询就全都是 <code>O(1)</code> 的了</p><p>下面的是改进后的版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> swap(a, b) \</span></span><br><span class="line"><span class="meta">    &#123;              \</span></span><br><span class="line"><span class="meta">        int t = a; \</span></span><br><span class="line"><span class="meta">        a = b;     \</span></span><br><span class="line"><span class="meta">        b = t;     \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3</span>, M = <span class="number">4</span>, MAX = <span class="number">362880</span>, TARGRT = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> FACT[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>, <span class="number">720</span>, <span class="number">5040</span>, <span class="number">40320</span>, <span class="number">362880</span>, <span class="number">3628800</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[M] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[M] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// const char dir[M] = &#123;&#x27;u&#x27;, &#x27;r&#x27;, &#x27;d&#x27;, &#x27;l&#x27;&#125;;</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> dir[M] = &#123;<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">log</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bool</span> vis;</span><br><span class="line">    <span class="type">int</span> father;</span><br><span class="line">    <span class="type">int</span> move_direction;</span><br><span class="line">&#125; search_log[MAX];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> state[<span class="number">9</span>];</span><br><span class="line">    point zero_pos;</span><br><span class="line">    <span class="type">int</span> CantorValue;</span><br><span class="line">&#125; start,target = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;,</span><br><span class="line">    &#123;<span class="number">2</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">To1D</span><span class="params">(point p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p.x * <span class="number">3</span> + p.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> point <span class="title">To2D</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point p;</span><br><span class="line">    p.x = x % <span class="number">3</span>;</span><br><span class="line">    p.y = x / <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Cantor</span><span class="params">(<span class="type">int</span> a[<span class="number">9</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">                count++;</span><br><span class="line">        &#125;</span><br><span class="line">        x += FACT[<span class="number">9</span> - i - <span class="number">1</span>] * count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// memset(search_log, 0, sizeof(search_log));</span></span><br><span class="line">    queue&lt;node&gt; q;</span><br><span class="line"></span><br><span class="line">    q.<span class="built_in">push</span>(target);</span><br><span class="line">    search_log[target.CantorValue].vis = <span class="literal">true</span>;</span><br><span class="line">    search_log[target.CantorValue].father = <span class="number">-1</span>;</span><br><span class="line">    search_log[target.CantorValue].move_direction = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            point swap_pos = now.zero_pos;</span><br><span class="line">            swap_pos.x += dx[i];</span><br><span class="line">            swap_pos.y += dy[i];</span><br><span class="line">            <span class="keyword">if</span> (swap_pos.x &lt; <span class="number">0</span> || swap_pos.x &gt;= <span class="number">3</span> || swap_pos.y &lt; <span class="number">0</span> || swap_pos.y &gt;= <span class="number">3</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            node next = now;</span><br><span class="line">            <span class="built_in">swap</span>(next.state[<span class="built_in">To1D</span>(swap_pos)], next.state[<span class="built_in">To1D</span>(now.zero_pos)]);</span><br><span class="line">            next.CantorValue = <span class="built_in">Cantor</span>(next.state);</span><br><span class="line">            <span class="keyword">if</span> (search_log[next.CantorValue].vis)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            search_log[next.CantorValue].vis = <span class="literal">true</span>;</span><br><span class="line">            next.zero_pos = swap_pos;</span><br><span class="line">            search_log[next.CantorValue].father = now.CantorValue;</span><br><span class="line">            search_log[next.CantorValue].move_direction = i;</span><br><span class="line">            q.<span class="built_in">push</span>(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">is_digit</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">9</span>], tmp = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i != <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">is_digit</span>(tmp) &amp;&amp; tmp != <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> ((tmp = <span class="built_in">getchar</span>()) == EOF)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        a[i] = tmp;</span><br><span class="line">        i++;</span><br><span class="line">        tmp = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// scanf(&quot;%c %c %c %c %c %c %c %c %c&quot;, &amp;a[0], &amp;a[1], &amp;a[2], &amp;a[3], &amp;a[4], &amp;a[5], &amp;a[6], &amp;a[7], &amp;a[8]);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            start.state[i] = a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            start.zero_pos = <span class="built_in">To2D</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            start.state[i] = <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    start.CantorValue = <span class="built_in">Cantor</span>(start.state);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!search_log[start.CantorValue].vis)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;unsolvable\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> now = start.CantorValue;</span><br><span class="line">        <span class="keyword">while</span> (search_log[now].father != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, dir[search_log[now].move_direction]);</span><br><span class="line">            now = search_log[now].father;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// void init()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     memset(search_log, 0, sizeof(search_log));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">read</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，终于过了，而且只花了 <code>78ms</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202207161940190.png" alt="image-20220716194012011"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法拾遗 </category>
          
          <category> 搜索技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法拾遗』广度优先搜索（1）：初尝 BFS</title>
      <link href="/2022/07/13/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%881%EF%BC%89%EF%BC%9A%E5%88%9D%E5%B0%9D-BFS/"/>
      <url>/2022/07/13/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%881%EF%BC%89%EF%BC%9A%E5%88%9D%E5%B0%9D-BFS/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>搜索一般来说主要分两种：深度优先搜索（DFS）和广度优先搜索（BFS）</p><p>比如说走迷宫，DFS 简单地说就是使用函数递归，先一条路走到底然后再考虑下一条，而 BFS 是从一点出发使用队列并行的往四面八方出发，所有方向是一起走的</p><hr><h1 id="正文">正文</h1><p>用一道例题来理解：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1312">hdu 1312 Red and Black</a></p><details class="toggle" ><summary class="toggle-button" style="">点击查看题目</summary><div class="toggle-content"><ul><li><p>Problem Description</p><p>There is a rectangular room, covered with square tiles. Each tile is colored either red or black. A man is standing on a black tile. From a tile, he can move to one of four adjacent tiles. But he can’t move on red tiles, he can move only on black tiles.</p><p>Write a program to count the number of black tiles which he can reach by repeating the moves described above.</p></li><li><p>Input</p><p>The input consists of multiple data sets. A data set starts with a line containing two positive integers W and H; W and H are the numbers of tiles in the x- and y- directions, respectively. W and H are not more than 20.</p><p>There are H more lines in the data set, each of which includes W characters. Each character represents the color of a tile as follows.</p><p>‘.’ - a black tile<br>‘#’ - a red tile<br>‘@’ - a man on a black tile(appears exactly once in a data set)</p></li><li><p>Output<br>For each data set, your program should output a line which contains the number of tiles he can reach from the initial tile (including itself).</p></li><li><p>Sample Input</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">6 9</span><br><span class="line">....#.</span><br><span class="line">.....#</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">#@...#</span><br><span class="line">.#..#.</span><br><span class="line">11 9</span><br><span class="line">.#.........</span><br><span class="line">.#.#######.</span><br><span class="line">.#.#.....#.</span><br><span class="line">.#.#.###.#.</span><br><span class="line">.#.#..@#.#.</span><br><span class="line">.#.#####.#.</span><br><span class="line">.#.......#.</span><br><span class="line">.#########.</span><br><span class="line">...........</span><br><span class="line">11 6</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..###</span><br><span class="line">..#..#..#@.</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..#..</span><br><span class="line">7 7</span><br><span class="line">..#.#..</span><br><span class="line">..#.#..</span><br><span class="line">###.###</span><br><span class="line">...@...</span><br><span class="line">###.###</span><br><span class="line">..#.#..</span><br><span class="line">..#.#..</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure></li><li><p>Sample Output</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">45</span><br><span class="line">59</span><br><span class="line">6</span><br><span class="line">13</span><br></pre></td></tr></table></figure></li></ul></div></details><p>简单地说还是走迷宫，遍历所有可能的位置，然后数格子，大概的算法如下</p><ol><li>将起点入队</li><li>从队中取出一个点</li><li>枚举它能前往的点，把这些点入队</li><li>重复 2~3 步</li></ol><p>这样子就能数出到所有能去往的点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">128</span>, M = <span class="number">128</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; <span class="comment">// 四方向</span></span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> Map[N][M];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125; start;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    queue&lt;point&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(start); <span class="comment">// q</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) <span class="comment">// 一批一批地处理，每一批都是步数相同的</span></span><br><span class="line">        &#123;</span><br><span class="line">            point now = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            ans++;</span><br><span class="line">            Map[now.x][now.y] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> Nx = now.x + dir[j][<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> Ny = now.y + dir[j][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (Nx &lt; <span class="number">0</span> || Nx &gt;= n || Ny &lt; <span class="number">0</span> || Ny &gt;= m || !Map[Nx][Ny])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                Map[Nx][Ny] = <span class="number">0</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;Nx, Ny&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; m &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> tmp = <span class="built_in">getchar</span>();</span><br><span class="line">                <span class="keyword">while</span> (tmp != <span class="string">&#x27;.&#x27;</span> &amp;&amp; tmp != <span class="string">&#x27;#&#x27;</span> &amp;&amp; tmp != <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">                    tmp = <span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (tmp == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                    Map[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (tmp == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                    Map[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (tmp == <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">                    start.x = i, start.y = j;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="built_in">bfs</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="练习题">练习题</h1><details class="toggle" ><summary class="toggle-button" style="">hdu 1240 Asteroids!</summary><div class="toggle-content"><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1240">hdu 1240 Asteroids!</a></p><p>模板题，只是变成了三维的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">16</span>;</span><br><span class="line"><span class="type">int</span> dir[<span class="number">6</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y, z;</span><br><span class="line">&#125; S, T;</span><br><span class="line"><span class="type">bool</span> Map[N][N][N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    queue&lt;point&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(S);</span><br><span class="line">    Map[S.x][S.y][S.z] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            point p = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (p.x == T.x &amp;&amp; p.y == T.y &amp;&amp; p.z == T.z)</span><br><span class="line">                <span class="keyword">return</span> len;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> x = p.x + dir[i][<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> y = p.y + dir[i][<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> z = p.z + dir[i][<span class="number">2</span>];</span><br><span class="line">                <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n &amp;&amp; z &gt;= <span class="number">0</span> &amp;&amp; z &lt; n &amp;&amp; !Map[x][y][z])</span><br><span class="line">                &#123;</span><br><span class="line">                    Map[x][y][z] = <span class="literal">true</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;x, y, z&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%*s %d&quot;</span>, &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(Map, <span class="number">0</span>, <span class="built_in">sizeof</span>(Map));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">                    <span class="keyword">while</span> (c != <span class="string">&#x27;O&#x27;</span> &amp;&amp; c != <span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">                        c = <span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (c == <span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">                        Map[j][k][i] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;S.x, &amp;S.y, &amp;S.z);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;T.x, &amp;T.y, &amp;T.z);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (S.x == T.x &amp;&amp; S.y == T.y &amp;&amp; S.z == T.z)</span><br><span class="line">            ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans = <span class="built_in">bfs</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO ROUTE\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, n, ans);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">hdu 4460 Friend Chains</summary><div class="toggle-content"><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4460">hdu 4460 Friend Chains</a></p><p>这道题还是有坑点的，首先图不能使用临界矩阵来存，会 TLE （我注释的做法）</p><p>然后因为英文题目，我一开始直接机翻，<code>There are multiple cases.</code> 给我翻译成 <code>有多种情况</code> ，搞得我有点看不懂，到了后面一直 WA 才知道这句话是有多组数据的意思，还是我太菜（</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(a, b) ((a) &gt; (b) ? (a) : (b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1024</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="comment">// bool Map[N][N];</span></span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> friendsList[N][N], dis[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int bfs(int id)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     memset(vis, 0, sizeof(vis));</span></span><br><span class="line"><span class="comment">//     queue&lt;int&gt; q;</span></span><br><span class="line"><span class="comment">//     q.push(id);</span></span><br><span class="line"><span class="comment">//     int sum = 0, len = 0;</span></span><br><span class="line"><span class="comment">//     while (!q.empty() &amp;&amp; sum != n)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         int size = q.size();</span></span><br><span class="line"><span class="comment">//         for (int k = 0; k &lt; size; k++)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             int now = q.front();</span></span><br><span class="line"><span class="comment">//             q.pop();</span></span><br><span class="line"><span class="comment">//             if (vis[now])</span></span><br><span class="line"><span class="comment">//                 continue;</span></span><br><span class="line"><span class="comment">//             vis[now] = 1;</span></span><br><span class="line"><span class="comment">//             sum++;</span></span><br><span class="line"><span class="comment">//             for (int i = 0; i &lt; n; i++)</span></span><br><span class="line"><span class="comment">//             &#123;</span></span><br><span class="line"><span class="comment">//                 if (Map[now][i] &amp;&amp; !vis[i])</span></span><br><span class="line"><span class="comment">//                 &#123;</span></span><br><span class="line"><span class="comment">//                     q.push(i);</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         len++;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     // for (int i = 0; i &lt; n; i++)</span></span><br><span class="line"><span class="comment">//     // &#123;</span></span><br><span class="line"><span class="comment">//     //     if (!vis[i])</span></span><br><span class="line"><span class="comment">//     //         return -1;</span></span><br><span class="line"><span class="comment">//     // &#125;</span></span><br><span class="line"><span class="comment">//     if (sum != n)</span></span><br><span class="line"><span class="comment">//         return -1;</span></span><br><span class="line"><span class="comment">//     else</span></span><br><span class="line"><span class="comment">//         return len - 1;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(vis, vis + n, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">fill</span>(dis, dis + n, INF);</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    vis[start] = <span class="number">1</span>;</span><br><span class="line">    dis[start] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= friendsList[now][<span class="number">0</span>]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> next = friendsList[now][i];</span><br><span class="line">            <span class="keyword">if</span> (!vis[next])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[next] = <span class="number">1</span>;</span><br><span class="line">                dis[next] = dis[now] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> maxDis = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dis[i] == INF)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        maxDis = <span class="built_in">max</span>(maxDis, dis[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxDis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            friendsList[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map&lt;string, <span class="type">int</span>&gt; Name2Id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            string s;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">            Name2Id[s] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            string s;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">            <span class="type">int</span> id1 = Name2Id[s];</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">            <span class="type">int</span> id2 = Name2Id[s];</span><br><span class="line">            <span class="comment">// Map[id1][id2] = true;</span></span><br><span class="line">            <span class="comment">// Map[id2][id1] = true;</span></span><br><span class="line">            friendsList[id1][++friendsList[id1][<span class="number">0</span>]] = id2;</span><br><span class="line">            friendsList[id2][++friendsList[id2][<span class="number">0</span>]] = id1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">bfs</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (tmp == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><hr><h1 id="总结">总结</h1><p>BFS 的一般框架</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化队列和其他存储结构</span></span><br><span class="line">    <span class="comment">// 将起点入列，标记已访问，步数为 0</span></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 取出首元素</span></span><br><span class="line">        <span class="comment">// 检查是否到达终点，可直接返回（某些题目）</span></span><br><span class="line">        <span class="keyword">for</span> (枚举找出它能通往的其他元素)</span><br><span class="line">            <span class="keyword">if</span> (此元素没有处理过或能被更新为更优的解)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 标记已访问</span></span><br><span class="line">                <span class="comment">// 记录它们的步数为当前步数 +1</span></span><br><span class="line">                <span class="comment">// 入队</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 收尾检查（某些题目）并返回结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记录步数的另一种方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化队列和其他存储结构</span></span><br><span class="line">    <span class="comment">// 将起点入列，标记已访问</span></span><br><span class="line">    <span class="comment">// 设置当前步数为 0</span></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (循环 size 次) <span class="comment">// 一批一批地处理，每一批都是步数相同的</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 取出首元素</span></span><br><span class="line">            <span class="comment">// 检查是否到达终点，可直接返回（某些题目）</span></span><br><span class="line">            <span class="keyword">for</span> (枚举找出它能通往的其他元素)</span><br><span class="line">                <span class="keyword">if</span> (此元素没有处理过或能被更新为更优的解)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 标记已访问</span></span><br><span class="line">                    <span class="comment">// 入队</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 步数自增 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 收尾检查（某些题目）并返回结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法拾遗 </category>
          
          <category> 搜索技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法拾遗』排列与组合</title>
      <link href="/2022/07/10/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E6%8E%92%E5%88%97%E4%B8%8E%E7%BB%84%E5%90%88/"/>
      <url>/2022/07/10/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E6%8E%92%E5%88%97%E4%B8%8E%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="排列">排列</h1><h2 id="求-n-个元素的全排列">求 n 个元素的全排列</h2><h3 id="使用-STL">使用 STL</h3><p>这东西最先想到的必然是直接使用 STL 中的 <code>next_permutation()</code> 了，每执行一次都会把数组内的序列改为下一个排列，最后会输出 <code>-1</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> data[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    sum++;</span><br><span class="line">    <span class="comment">// 得到一个结果</span></span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="built_in">next_permutation</span>(data,data+<span class="number">12</span>));</span><br></pre></td></tr></table></figure><h3 id="使用递归（法一，不推荐）">使用递归（法一，不推荐）</h3><p>这个方法应该是我高中的时候自己手搓出来的，性能很差劲，放在这里只是为了凑个数（</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>], v[<span class="number">1000</span>], n, k; <span class="comment">//A (n,k)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cnt, <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">//组合 for(int i = num+1; i &lt;= n ;i++)</span></span><br><span class="line">        <span class="keyword">if</span> (!v[i])</span><br><span class="line">        &#123;</span><br><span class="line">            a[cnt] = i;</span><br><span class="line">            v[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (cnt == k) <span class="comment">// 边界条件</span></span><br><span class="line">            &#123;</span><br><span class="line"><span class="comment">//                得到一个结果</span></span><br><span class="line"><span class="comment">//                for (int i = 1; i &lt;= k; i++)</span></span><br><span class="line"><span class="comment">//                    cout &lt;&lt; a[i];</span></span><br><span class="line"><span class="comment">//                cout &lt;&lt; endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">dfs</span>(cnt + <span class="number">1</span>, i);</span><br><span class="line">            v[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法只能生成数据为 <code>1~n</code> 的结果，而如果原始数据不是前 n 个数字的话，可以使用索引的方法，即 <code>cout &lt;&lt; data[a[i]];</code></p><h3 id="使用递归（法二，推荐）">使用递归（法二，推荐）</h3><p>这个方法就是书上的了，我测下来效果是最好的，基本思想就是拿每一层的第一个数跟后面的数依次交换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Perm</span><span class="params">(<span class="type">int</span> begin, <span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (begin == end) <span class="comment">// 得到一个结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = begin; i &lt;= end; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(data[begin], data[i]);</span><br><span class="line">        sum += <span class="built_in">Perm</span>(begin + <span class="number">1</span>, end);</span><br><span class="line">        <span class="built_in">swap</span>(data[begin], data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>swap()</code> 不建议使用 STL 里面的，建议自己写函数，当然最快的当然是使用宏 <code>#define swap(a, b) &#123;int t = a; a = b; b = t; &#125;</code></p><p>如果原始数据不是 <code>int</code> ，而是一些比较大的类型（直接 <code>swap()</code> 比较慢），可以考虑上面讲的索引的方法，先把索引数组构造出来，然后再索引原始数据</p><hr><p>跑了一遍测试  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>P</mi><mn>12</mn><mn>12</mn></msubsup></mrow><annotation encoding="application/x-tex">P_{12}^{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>，速度差别比较明显（依次为三种方法）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = 479001600</span><br><span class="line">14.138</span><br><span class="line">sum = 479001600</span><br><span class="line">27.141</span><br><span class="line">sum = 479001600</span><br><span class="line">5.653</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">原始代码</summary><div class="toggle-content"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> swap(a, b) \</span></span><br><span class="line"><span class="meta">    &#123;              \</span></span><br><span class="line"><span class="meta">        int t = a; \</span></span><br><span class="line"><span class="meta">        a = b;     \</span></span><br><span class="line"><span class="meta">        b = t;     \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>], v[<span class="number">1000</span>], n, k, sum;</span><br><span class="line"><span class="type">int</span> data[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cnt, <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">//组合 for(int i=num+1;i&lt;=n;i++)</span></span><br><span class="line">        <span class="keyword">if</span> (!v[i])</span><br><span class="line">        &#123;</span><br><span class="line">            a[cnt] = i;</span><br><span class="line">            v[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (cnt == k)</span><br><span class="line">            &#123;</span><br><span class="line">                sum++;</span><br><span class="line">                <span class="comment">// for (int i = 1; i &lt;= k; i++)</span></span><br><span class="line">                <span class="comment">//     cout &lt;&lt; a[i];</span></span><br><span class="line">                <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">dfs</span>(cnt + <span class="number">1</span>, i);</span><br><span class="line">            v[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Perm</span><span class="params">(<span class="type">int</span> begin, <span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (begin == end) <span class="comment">// 得到一个结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = begin; i &lt;= end; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(data[begin], data[i]);</span><br><span class="line">        sum += <span class="built_in">Perm</span>(begin + <span class="number">1</span>, end);</span><br><span class="line">        <span class="built_in">swap</span>(data[begin], data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; n &gt;&gt; k;</span></span><br><span class="line">    n = k = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">clock_t</span> start, end;</span><br><span class="line"></span><br><span class="line">    start = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(data, data + <span class="number">12</span>));</span><br><span class="line">    end = <span class="built_in">clock</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; (<span class="type">double</span>)(end - start) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(data, data + <span class="number">11</span>);</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    start = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    end = <span class="built_in">clock</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; (<span class="type">double</span>)(end - start) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    start = <span class="built_in">clock</span>();</span><br><span class="line">    sum = <span class="built_in">Perm</span>(<span class="number">0</span>, <span class="number">11</span>);</span><br><span class="line">    end = <span class="built_in">clock</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; (<span class="type">double</span>)(end - start) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="求-n-个元素中任意-m-个元素的全排列">求 n 个元素中任意 m 个元素的全排列</h2><p><code>next_permutation()</code> 必然是不能用了，而我手搓的方法虽然可以解决，但是效率感人，还是不能用</p><p>对于最后一个方法，只需改一个地方就能很好地完成任务，把边界条件改一下即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (begin == m) <span class="comment">// 得到一个结果（前 m 项就是结果）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h1 id="组合">组合</h1><h2 id="子集生成问题">子集生成问题</h2><p>组合问题，其实就是对某一个元素选或者不选的问题，这本质就是求子集问题</p><p>下面先来解决一个前置问题：如何枚举一个集合的所有子集</p><p>而其实这一问题可以轻松地使用二进制解决</p><p>譬如说，假如某个集合有 3 个元素：<strong>{A,B,C}</strong>，那么所有的子集就有  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">2^{3} = 8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">8</span></span></span></span>  种，可以使用下面对应的二进制数表示（0 表示不选，1 表示选）</p><table><thead><tr><th>子集</th><th>∅</th><th>{A}</th><th>{B}</th><th>{A,B}</th><th>{C}</th><th>{A,C}</th><th>{B,C}</th><th>{A、B、C}</th></tr></thead><tbody><tr><td>二进制</td><td>0 0 0</td><td>0 0 1</td><td>0 1 0</td><td>0 1 1</td><td>1 0 0</td><td>1 0 1</td><td>1 1 0</td><td>1 1 1</td></tr><tr><td>十进制</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr></tbody></table><p>所以说，如果想表示出有 n 个元素的所有集合，只需要以下两步：</p><ul><li>枚举 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{n}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 的每一个数</li><li>解析里面的 0 和 1</li></ul><p>第一步很简单，来个 <code>for</code> 即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">pow</span>(<span class="number">2</span>, n); i++)</span><br></pre></td></tr></table></figure><p>或者优雅一点，使用位运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++)</span><br></pre></td></tr></table></figure><p>而对于第二步，可以借助按位与（<code>&amp;</code>）</p><p>比如对于 <code>1 1 0</code> ，分别使用 <code>0 0 1</code> 、 <code>0 1 0</code> 、 <code>1 0 0</code> 来进行与运算，这样就能依次判断每一个位有没有 <code>1</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">    <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; j))</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>把这两步组合一下，就可以解决枚举子集问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_subset</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; j))</span><br><span class="line">                cout &lt;&lt; j &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求-n-个元素中任意-m-个元素的全组合">求 n 个元素中任意 m 个元素的全组合</h2><p>解决了子集问题，那么求 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>m</mi></msubsup></mrow><annotation encoding="application/x-tex">C_{n}^{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9303em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-2.453em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span> 就方便了：本质就是仅选取元素个数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 的子集，也就是限定 <code>i</code> 中的 1 的个数只有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 个</p><p>那么如何来数 1 的个数呢？最笨的方法还是使用按位与，然后数有多少个结果不为 0 的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">0</span>, kk = i;</span><br><span class="line"><span class="keyword">while</span> (kk)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (kk &amp; <span class="number">1</span>)</span><br><span class="line">        num++;</span><br><span class="line">    kk &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (num == m)</span><br><span class="line">&#123;</span><br><span class="line">    ... <span class="comment">// 解析 i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是还有更快的方法，使用一个神奇的操作：<code>kk = kk &amp; (kk - 1);</code></p><p>它的作用是从右向左依次删除其中的 1，每执行一次就删一个，所以只需要数一共删了几次就行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">0</span>, kk = i;</span><br><span class="line"><span class="keyword">while</span> (kk)</span><br><span class="line">&#123;</span><br><span class="line">    kk = kk &amp; (kk - <span class="number">1</span>);</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (num == m)</span><br><span class="line">&#123;</span><br><span class="line">    ... <span class="comment">// 解析 i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合一下，就是下面的结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_subset</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>, kk = i;</span><br><span class="line">        <span class="keyword">while</span> (kk)</span><br><span class="line">        &#123;</span><br><span class="line">            kk = kk &amp; (kk - <span class="number">1</span>);</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num == m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; j))</span><br><span class="line">                    cout &lt;&lt; j &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">print_subset</span>(n, m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法拾遗 </category>
          
          <category> 搜索技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排列组合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（十三）迭代器与生成器</title>
      <link href="/2022/07/09/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2022/07/09/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>B 站上讲得真的清楚，暂时没时间整理了，先贴个链接在这里</p><ul><li><a href="https://www.bilibili.com/video/BV1ca411t7A9?spm_id_from=333.999.0.0&amp;vd_source=e2613baf768b2432fcb2b9edd79c0c68">【python】对迭代器一知半解？看完这个视频就会了。涉及的每个概念，都给你讲清楚！</a></li><li><a href="https://www.bilibili.com/video/BV1KS4y1D7Qb/?spm_id_from=333.788&amp;vd_source=e2613baf768b2432fcb2b9edd79c0c68">【python】生成器是什么？怎么用？能干啥？一期视频解决你所有疑问！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（十二）包与模块</title>
      <link href="/2022/07/06/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E5%8C%85%E4%B8%8E%E6%A8%A1%E5%9D%97/"/>
      <url>/2022/07/06/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E5%8C%85%E4%B8%8E%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="模块">模块</h1><h2 id="基本概念">基本概念</h2><h3 id="模块的定义">模块的定义</h3><p>一般情况下，模块（module）是一个以 <code>.py</code> 为后缀的文件，其他可作为 module 的文件类型还有 <code>.pyo</code> 、<code>.pyc</code> 、<code>.pyd</code> 、<code>.so</code> 、<code>.dll</code> ，但初学者几乎用不到</p><p>在模块中能定义函数、类、变量，也能包含可执行的代码，在导入的时候会把模块完整地先执行一遍</p><h3 id="模块的作用">模块的作用</h3><p>隐藏代码细节，提高可维护性</p><h3 id="模块的分类">模块的分类</h3><ul><li>Python 的官方标准库（直接 <code>import</code> 就能开用）</li><li>第三方模块（用 <code>pip</code> 下载的包里面的模块等）</li><li>自己写的模块（下面来试一试）</li></ul><hr><h2 id="初尝模块">初尝模块</h2><p>首先，在当前目录新建一个 <code>calc.py</code> ，再在里面保存一些函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a*b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a/b</span><br></pre></td></tr></table></figure><p>现在我们在其他文件中引用它，在同一目录新建一个 <code>.py</code> 文件</p><h3 id="import-…">import …</h3><p>导入整个模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calc</span><br><span class="line"></span><br><span class="line">result = calc.add(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># 30</span></span><br></pre></td></tr></table></figure><p>使用这种方法，在调用其中的函数或类时，必须加上模块名的前缀</p><h3 id="from-…-import-…">from … import …</h3><p>导入特定的内容，使用时不用前缀</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> calc <span class="keyword">import</span> add, sub <span class="comment"># 可以导入任意个</span></span><br><span class="line"></span><br><span class="line">result = add(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># 30</span></span><br></pre></td></tr></table></figure><h3 id="from-…-import">from … import *</h3><p>这会把模块中的所有函数、类、变量等全部导进来，虽然方便，但是不建议使用（可能与已有的内容冲突）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> calc <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">result = mul(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><hr><h2 id="稍稍深入">稍稍深入</h2><h3 id="取别名">取别名</h3><p>在导入的时候可以给模块或者函数使用 <code>as</code> 取别名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calc <span class="keyword">as</span> c <span class="comment"># 这样在下面都可以使用 c 来代替 calc 了</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> calc <span class="keyword">import</span> add <span class="keyword">as</span> a <span class="comment"># 这样在下面都可以使用 c 来代替 add 了</span></span><br></pre></td></tr></table></figure><p>（下面的包也可以这样操作，可以把前面冗长的前缀如 <code>包名.子包名.模块名</code> 简化成一个词）</p><h3 id="路径问题">路径问题</h3><p>现在，你已经学会如何导入模块了，但是，python 是从哪里找到这些模块的呢？</p><p>答案是去 <code>sys.path </code> 中查找，这个列表的第一个元素是当前路径，然后还有一些预定义的路径</p><p>使用下面的命令查看 <code>sys.path</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>.join(sys.path))</span><br><span class="line"></span><br><span class="line"><span class="comment"># d:\Study\Python</span></span><br><span class="line"><span class="comment"># C:\Users\Nick\AppData\Local\Programs\Python\Python39\python39.zip</span></span><br><span class="line"><span class="comment"># C:\Users\Nick\AppData\Local\Programs\Python\Python39\DLLs</span></span><br><span class="line"><span class="comment"># C:\Users\Nick\AppData\Local\Programs\Python\Python39\lib</span></span><br><span class="line"><span class="comment"># C:\Users\Nick\AppData\Local\Programs\Python\Python39</span></span><br><span class="line"><span class="comment"># C:\Users\Nick\AppData\Local\Programs\Python\Python39\lib\site-packages</span></span><br><span class="line"><span class="comment"># C:\Users\Nick\AppData\Local\Programs\Python\Python39\lib\site-packages\win32</span></span><br><span class="line"><span class="comment"># C:\Users\Nick\AppData\Local\Programs\Python\Python39\lib\site-packages\win32\lib</span></span><br><span class="line"><span class="comment"># C:\Users\Nick\AppData\Local\Programs\Python\Python39\lib\site-packages\Pythonwin</span></span><br></pre></td></tr></table></figure><p>若要手动添加路径到 <code>sys.path</code> 里面，可以使用 <code>sys.path.append()</code> 方法</p><p>而且这个一般会结合 <code>os.path.dirname(__file__)</code>  和  <code>os.path.abspath(__file__)</code> 来使用，可以尝试下面的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path1 = os.path.abspath(__file__)   <span class="comment"># 获取当前执行脚本的完整路径。只有当在脚本中执行的时候，os.path.abspath(__file__)才会起作用。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;path1 = &quot;</span>, path1)</span><br><span class="line"></span><br><span class="line">path2 = os.path.dirname(__file__)  <span class="comment"># 获取当前运行脚本的绝对路径</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;path2 = &quot;</span>, path2)</span><br><span class="line"></span><br><span class="line">path3 = os.path.dirname(os.path.abspath(__file__))  <span class="comment"># 先获取当前执行脚本的完整路径，再去掉最后1个路径(相当于：获取当前运行脚本的绝对路径)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;path3 = &quot;</span>, path3)</span><br><span class="line"></span><br><span class="line">path4 = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))   <span class="comment"># 先获取当前执行脚本的完整路径，再去掉最后2个路径(相当于：获取当前运行脚本的绝对路径,再去掉1个路径)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;path4 = &quot;</span>, path4)</span><br><span class="line"></span><br><span class="line">path5 = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))  <span class="comment"># 先获取当前执行脚本的完整路径，再去掉最后2个路径(相当于：获取当前运行脚本的绝对路径,再去掉1个路径)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;path5 = &quot;</span>, path5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># path1 =  d:\Study\Python\test.py</span></span><br><span class="line"><span class="comment"># path2 =  d:\Study\Python</span></span><br><span class="line"><span class="comment"># path3 =  d:\Study\Python</span></span><br><span class="line"><span class="comment"># path4 =  d:\Study</span></span><br><span class="line"><span class="comment"># path5 =  d:\</span></span><br></pre></td></tr></table></figure><p>联合使用这三者可以将要导入的模块的绝对路径添加到 <code>sys.path</code> 里面，这样能够保证可以找到你所要导入的模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path5 = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))  <span class="comment"># 先获取当前执行脚本的完整路径，再去掉最后2个路径(相当于：获取当前运行脚本的绝对路径,再去掉1个路径)</span></span><br><span class="line"></span><br><span class="line">sys.path.append(path5)  <span class="comment"># 把你要导入的那个模块所在的绝对路径添加到sys.path中</span></span><br></pre></td></tr></table></figure><h3 id="name-属性">_<em>name</em>_  属性</h3><p>在很多地方，你都会看见这样一句话，它与模块的导入有关</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br></pre></td></tr></table></figure><p><code>__name__</code> 属性可以理解为一个全局变量，它的值在各种地方是不同的</p><ul><li>当该模块被其它模块调用时， <code>__name__</code> 的值当前模块的名字</li><li>当该模块被当做执行脚本时（也就是程序从这个模块开始运行），<code>__name__</code> 的值为 <code>__main__</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Filename: using_name.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;程序自身在运行&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;我来自另一模块&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python using_name.py</span><br><span class="line">程序自身在运行</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line">&gt;&gt;&gt; import using_name</span><br><span class="line">我来自另一模块</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="包">包</h1><h2 id="基本概念-2">基本概念</h2><p>为避免模块名冲突，Python 引入了按目录组织模块的方法，称之为包（package）</p><p>模块与包的关系就如文件与文件夹的关系，文件夹的层次是用斜杠或者反斜杠来表示的，而包是用 <code>.</code> 来分隔层次的</p><p>你可以导入整个包，或仅仅只是导入包中的模块</p><h2 id="如何导入">如何导入</h2><p>如果你想导入包，可以使用 <code>import 包名</code> 或 <code>import 包名.子包名</code> 等</p><p>如果想导入模块，可以使用  <code>import 包名.模块名</code> （使用时必须有前缀） 或 <code>from 包名 import 模块名</code> （推荐用法）</p><h2 id="如何构建">如何构建</h2><h3 id="init-py">_<em>init</em>_.py</h3><p>在一个文件下同时有 <code>__init__.py</code> 文件和其他模块文件时，该文件夹即看作一个包</p><p>如果导入的对象是包，会执行那个包的 <code>__init__ .py</code> 文件</p><h3 id="all-属性">_<em>all</em>_ 属性</h3><p>这东西在模块里其实也是有意义的，但一般都用在 <code>__init__ .py</code> 里</p><p>在模糊导入包或模块时（ <code>from pacakge_1 import *</code> ），仅仅会导入 <code>__all__</code>  中指定的包和模块（如果没有指定，那么什么都不会被导入）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;surround&quot;</span>, <span class="string">&quot;reverse&quot;</span>] <span class="comment"># 指定模块</span></span><br><span class="line">__all__ = [<span class="string">&quot;file_a&quot;</span>, <span class="string">&quot;file_b&quot;</span>]            <span class="comment"># 指定子包</span></span><br></pre></td></tr></table></figure><h2 id="例子">例子</h2><p><a href="https://www.runoob.com/python3/python3-module.html">菜鸟教程</a>最底下的那个例子就挺好的</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Python』单下划线开头、双下划线开头</title>
      <link href="/2022/07/06/%E3%80%8EPython%E3%80%8F%E5%8D%95%E4%B8%8B%E5%88%92%E7%BA%BF%E5%BC%80%E5%A4%B4%E3%80%81%E5%8F%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E5%BC%80%E5%A4%B4/"/>
      <url>/2022/07/06/%E3%80%8EPython%E3%80%8F%E5%8D%95%E4%B8%8B%E5%88%92%E7%BA%BF%E5%BC%80%E5%A4%B4%E3%80%81%E5%8F%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E5%BC%80%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转载自 <a href="https://blog.csdn.net/lzkzls/article/details/118093381?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1-118093381-blog-113651870.pc_relevant_multi_platform_whitelistv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1-118093381-blog-113651870.pc_relevant_multi_platform_whitelistv2&amp;utm_relevant_index=2">Python 单下划线开头、双下划线开头</a></p><p>好文章，感觉写得不错</p></blockquote><h1 id="单下划线开头的变量：半私有变量">单下划线开头的变量：半私有变量</h1><p>以此类名称命名的对象，需要分为两种情况：</p><p>类外：类外的半私有对象、私有对象，功能一致，均是在本模块中可以正常使用，但是不能被直接导入并调用。如果要在模块外使用，那么需要导入本模块，然后使用（模块名.变量名）进行调用。</p><p>类中：</p><p>类中的半私有对象，仅仅是概念上的私有，默认不要在类外进行调用</p><p>实际上，在类外，均可以使用（实例名.变量名/类名.变量名）进行调用。</p><h1 id="双下划线开头的变量：私有变量">双下划线开头的变量：私有变量</h1><p>也需要分为两种情况：</p><p>类外：</p><p>与半私有对象相同</p><p>类中：</p><p>类中的私有对象，在类外均不可直接调用，可以理解为真私有，但是，Python 中没有完全私有的对象，此种对象也是可以在类外进行调用的，这里涉及到一个概念：矫直。</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202207062257996.png" alt="img"></p><h1 id="以双下划线开头，双下划线结尾的对象：Python-内置属性名或者魔法方法名">以双下划线开头，双下划线结尾的对象：Python 内置属性名或者魔法方法名</h1><p>是 Python 自己实现的属性和方法，一般不允许自定义类似此种命名方式的属性或者方法。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『VSCode』常用快捷键</title>
      <link href="/2022/07/06/%E3%80%8EVSCode%E3%80%8F%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/07/06/%E3%80%8EVSCode%E3%80%8F%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>有些快捷键总是忘记，而且要想半天，特此记录，慢慢补充</p><ul><li>多行的行首同时增加/减少制表符：先选中一些行，然后 <kbd>Tab</kbd> / <kbd>Shift</kbd> + <kbd>Tab</kbd></li><li>多行同时注释/取消注释：先选中一些行，然后 <kbd>Ctrl</kbd> + <kbd>/</kbd></li></ul>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（十一）面向对象</title>
      <link href="/2022/07/06/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/07/06/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象基础">面向对象基础</h1><p>面向对象（OOP）这种烂大街东西我觉得应该没什么必要再赘述了，就简单地搬运一下菜鸟教程里面的说明</p><ul><li><strong>类(Class)：</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li><li><strong>方法：</strong> 类中定义的函数。</li><li><strong>类变量：</strong> 类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li><li><strong>数据成员：</strong> 类变量或者实例变量用于处理类及其实例对象的相关的数据。</li><li><strong>方法重写：</strong> 如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li><li><strong>局部变量：</strong> 定义在方法中的变量，只作用于当前实例的类。</li><li><strong>实例变量：</strong> 在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。</li><li><strong>继承：</strong> 即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个 Dog 类型的对象派生自 Animal 类，这是模拟 “是一个（is-a）” 关系（例如，Dog 是一个 Animal）。</li><li><strong>实例化：</strong> 创建一个类的实例，类的具体对象。</li><li><strong>对象：</strong> 通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li></ul><p>杭助的 <a href="https://github.com/hduhelp/backend_guide/blob/main/common/oop/oop_started.md#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A">Guide</a> 也可以看一下，OOP 是一种思想，很多语言都有支持</p><hr><h1 id="初尝类与实例">初尝类与实例</h1><h2 id="创建一个简单的类">创建一个简单的类</h2><p>先讲一下基本的模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span>:  <span class="comment"># 类名的首字母要大写，这是约定，然后因为这里没有继承（从父类创建新类），所以后面没有括号</span></span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt; <span class="comment"># --第 1 条描述--</span></span><br><span class="line">    .             <span class="comment"># 类定义里面可以放一堆的属性（类中的变量）、方法（附着在这个类上的专属函数）</span></span><br><span class="line">    .             <span class="comment"># 属性可以直接定义，但是如果这样的话不够优雅</span></span><br><span class="line">    .             <span class="comment"># 比较常见的做法是在 __init__() 方法中定义，这样方便在创建的时候个性化每个实例的属性</span></span><br><span class="line">    &lt;statement-N&gt; <span class="comment"># --第 N 条描述--</span></span><br></pre></td></tr></table></figure><p>下面创建一个 <code>Dog</code> 类，它有名字和年龄两个属性，还有蹲下和打滚两个方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):  <span class="comment"># 初始化属性</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>): <span class="comment"># 模拟蹲下</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is now sitting.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>): <span class="comment"># 模拟打滚</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> rolled over!&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>__init__()</code> 是一个特殊方法，它会在每次实例化的时候自动执行，<mark class="hl-label green">它的第一个参数指代实例本身</mark> （不一定是 <code>self</code> ，但是一般都用这个词），然后你就可以使用 <code>self.name</code> 来操纵实例内的 <code>name</code> 属性</p><p>下面的两个方法为了简单都只有打印语句的功能，和上面的方法一样，必须在开头多一个参数，来表示实例本身（就和 <code>__init__()</code> 一样），这是类中的方法与普通函数的一个特殊的区别</p><h2 id="通过类创建和使用实例">通过类创建和使用实例</h2><h3 id="访问属性">访问属性</h3><p>下面先来创建一个实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_dog = Dog(<span class="string">&quot;Rex&quot;</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;My dog&#x27;s name is <span class="subst">&#123;my_dog.name&#125;</span>.&quot;</span>)    <span class="comment"># My dog&#x27;s name is Rex.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;My dog is <span class="subst">&#123;my_dog.age&#125;</span> years old.&quot;</span>)  <span class="comment"># My dog is 6 years old.</span></span><br></pre></td></tr></table></figure><p>首先，通过 <code>Dog()</code> 来自动调用 <code>__init__()</code> 方法创建了一个 <code>Dog</code> 的实例 <code>my_dog</code> ，它的名称是 <code>Rex</code> ，年龄是 <code>6</code></p><p>接下来，你就可以使用诸如 <code>my_dog.name</code> 的方式来访问实例中的属性了</p><h3 id="调用方法">调用方法</h3><p>实例化一个类之后，你便可以调用其中的方法</p><p>比如命令小狗下蹲和打滚</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_dog.sit()        <span class="comment"># Rex is now sitting.</span></span><br><span class="line">my_dog.roll_over()  <span class="comment"># Rex rolled over!</span></span><br></pre></td></tr></table></figure><h3 id="创建多个实例">创建多个实例</h3><p>一旦定义好了类，创建多少个实例都可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">my_dog = Dog(<span class="string">&quot;Rex&quot;</span>, <span class="number">6</span>)</span><br><span class="line">your_dog = Dog(<span class="string">&quot;Lucy&quot;</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;My dog&#x27;s name is <span class="subst">&#123;my_dog.name&#125;</span>.&quot;</span>)    <span class="comment"># My dog&#x27;s name is Rex.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;My dog is <span class="subst">&#123;my_dog.age&#125;</span> years old.&quot;</span>)  <span class="comment"># My dog is 6 years old.</span></span><br><span class="line">my_dog.sit()        <span class="comment"># Rex is now sitting.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nYour dog&#x27;s name is <span class="subst">&#123;your_dog.name&#125;</span>.&quot;</span>)  <span class="comment"># Your dog&#x27;s name is Lucy.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Your dog is <span class="subst">&#123;your_dog.age&#125;</span> years old.&quot;</span>)  <span class="comment"># Your dog is 3 years old.</span></span><br><span class="line">your_dog.sit()        <span class="comment"># Lucy is now sitting.</span></span><br></pre></td></tr></table></figure><hr><h1 id="稍微深入">稍微深入</h1><h2 id="属性默认值">属性默认值</h2><p>下面来编写一个表示汽车的类，它存储了有关汽车的信息，还有返回基本信息与打印里程的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, model, year</span>): <span class="comment"># 初始化对象属性</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span>  <span class="comment"># 设置汽车里程数的默认值为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>): <span class="comment"># 返回整洁的描述性信息</span></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.name + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>): <span class="comment"># 打印一条消息，指出汽车里程</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>) <span class="comment"># 实例化</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name()) <span class="comment"># 2016 Audi A4</span></span><br><span class="line">my_new_car.read_odometer() <span class="comment"># This car has 0 miles on it.</span></span><br></pre></td></tr></table></figure><p>在这里设置了属性的默认值 <code>self.odometer_reading = 0</code> ，它表示汽车的初始里程为 0</p><h2 id="修改属性的值">修改属性的值</h2><p>属性的值毋庸置疑是可以修改的，下面来看几个例子，以修改汽车的里程为例</p><h3 id="直接手动修改">直接手动修改</h3><p>最为简单粗暴的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_new_car.odometer_reading = <span class="number">23</span> <span class="comment"># 手动修改实例的属性</span></span><br><span class="line">my_new_car.read_odometer() <span class="comment"># This car has 23 miles on it.</span></span><br></pre></td></tr></table></figure><h3 id="通过方法更新新值">通过方法更新新值</h3><p>新加一个方法，用于修改里程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>): <span class="comment"># 用于修改里程数</span></span><br><span class="line">    self.odometer_reading = mileage</span><br></pre></td></tr></table></figure><p>然后你可以这样使用它，这种方法明显更加优雅</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_new_car.update_odometer(<span class="number">23</span>) <span class="comment"># 修改实例的属性</span></span><br></pre></td></tr></table></figure><p>当然，你还可以扩展一下，增加一些逻辑，比如禁止将里程回滚</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>): <span class="comment"># 用于修改里程数</span></span><br><span class="line">    <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">        self.odometer_reading = mileage</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br></pre></td></tr></table></figure><p>还可以更优雅嘛？可以的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>): <span class="comment"># 用于增加里程数</span></span><br><span class="line">    self.odometer_reading += miles</span><br></pre></td></tr></table></figure><p>使用这个方法，可以只给出里程的增量，然后这个方法会自动求值并修改属性</p><hr><h1 id="继承与重写">继承与重写</h1><h2 id="初尝继承">初尝继承</h2><p>在编写类时，并非总要从空白开始，如果要编写的类是另一个现成类的特殊版本，可以使用继承</p><p>原有的类被称为父类或基类，而新类被称为子类或派生类，基本的格式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>(<span class="title class_ inherited__">BaseClassName</span>):</span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure><p>子类与父类必须定义在一个作用域内，如果父类在另一个模块内，可以这样写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>(modname.BaseClassName):</span><br></pre></td></tr></table></figure><hr><p>现在来尝试一下，从汽车类（ <code>Car</code> ）的基础上创建一个新的电动车类（ <code>ElectricCar</code> ），并且暂时不添加新的属性与方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, model, year</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, model, year) <span class="comment"># 没有 self</span></span><br></pre></td></tr></table></figure><p>这里的 <code>super()</code> 为调用父类，你也可以选择下面这种写法，但是没有前者规范</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Car.__init__(self, name, model, year) <span class="comment"># 有 self</span></span><br></pre></td></tr></table></figure><p>现在测试一下有没有问题，能否使用父类的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2019</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name()) <span class="comment"># 2019 Tesla Model S</span></span><br></pre></td></tr></table></figure><p>没有问题，下面可以接着添加子类的特有属性和方法了</p><hr><p>下面添加一个电动车特有的属性（电瓶容量），以及一个查看容量的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, model, year</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, model, year)</span><br><span class="line">        self.battery_size = <span class="number">70</span> <span class="comment"># 看这里</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery.&quot;</span>)</span><br><span class="line">        </span><br><span class="line"> <span class="built_in">print</span>(my_tesla.battery_size) <span class="comment"># 70，成功返回</span></span><br></pre></td></tr></table></figure><p>正如你所见，现在的子类已经能实现父类没有的功能了</p><hr><p>还可以更优雅嘛？当然可以</p><p>当使用代码模拟实物的时候，你会发现要添加的细节越来越多，属性和方法以及文件会越来越长。在这种情况下，可以将类的一部分提取出来，作为一个单独的类</p><p>例如，在不断给 <code>ElectricCar</code> 添加细节的时候，有关电瓶的内容会越来越多，现在先尝试把这些内容提取出来，放到 <code>Battery</code> 类中，然后再将 <code>Battery</code> 作为 <code>ElectricCar</code> 的一个属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Battery</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, battery_size=<span class="number">70</span></span>):</span><br><span class="line">        self.battery_size = battery_size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, model, year</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, model, year)</span><br><span class="line">        self.battery = Battery()</span><br></pre></td></tr></table></figure><p>然后可以这样使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2019</span>)</span><br><span class="line">my_tesla.battery.describe_battery()  <span class="comment"># This car has a 70-kWh battery.</span></span><br></pre></td></tr></table></figure><h2 id="方法重写">方法重写</h2><p>如果父类的某个方法不能满足子类的要求，子类中可以重新定义该方法，父类中的将被覆盖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:        <span class="comment"># 定义父类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myMethod</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;调用父类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>):  <span class="comment"># 定义子类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myMethod</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;调用子类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = Child()          <span class="comment"># 子类实例</span></span><br><span class="line">c.myMethod()         <span class="comment"># 子类调用重写方法</span></span><br><span class="line"><span class="built_in">super</span>(Child, c).myMethod()  <span class="comment"># 用子类对象调用父类已被覆盖的方法</span></span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用子类方法</span><br><span class="line">调用父类方法</span><br></pre></td></tr></table></figure><h2 id="多继承">多继承</h2><p>Python 支持多继承形式，多继承的类定义形如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>(Base1, Base2, Base3):</span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure><p>需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，python 从左至右搜索</p><p>即方法在子类中未找到时，从左到右查找父类中是否包含方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line">    <span class="comment">#定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name,self.age))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#单继承示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">people</span>):</span><br><span class="line">    grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w,g</span>):</span><br><span class="line">        <span class="comment">#调用父类的构函</span></span><br><span class="line">        people.__init__(self,n,a,w)</span><br><span class="line">        self.grade = g</span><br><span class="line">    <span class="comment">#覆写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span>%(self.name,self.age,self.grade))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#另一个类，多重继承之前的准备</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">speaker</span>():</span><br><span class="line">    topic = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,t</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.topic = t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我叫 %s，我是一个演说家，我演讲的主题是 %s&quot;</span>%(self.name,self.topic))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#多重继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sample</span>(speaker,student):</span><br><span class="line">    a =<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w,g,t</span>):</span><br><span class="line">        student.__init__(self,n,a,w,g)</span><br><span class="line">        speaker.__init__(self,n,t)</span><br><span class="line"> </span><br><span class="line">test = sample(<span class="string">&quot;Tim&quot;</span>,<span class="number">25</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">test.speak()   <span class="comment">#方法名同，默认调用的是在括号中参数位置排前父类的方法</span></span><br></pre></td></tr></table></figure><p>执行以上程序输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我叫 Tim，我是一个演说家，我演讲的主题是 Python</span><br></pre></td></tr></table></figure><h1 id="下划线的含义">下划线的含义</h1><h2 id="私有与公有">私有与公有</h2><p>这里可以康下面两个链接</p><ul><li><a href="https://www.bilibili.com/video/BV1z94y1U7j9?spm_id_from=333.999.0.0&amp;vd_source=e2613baf768b2432fcb2b9edd79c0c68">Python 中各种下划线的骚操作：_、<em>xx、xx</em>、__xx、<strong>xx</strong>、_classname__xx</a></li><li><a href="/2022/07/06/%E3%80%8EPython%E3%80%8F%E5%8D%95%E4%B8%8B%E5%88%92%E7%BA%BF%E5%BC%80%E5%A4%B4%E3%80%81%E5%8F%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E5%BC%80%E5%A4%B4/">『Python』单下划线开头、双下划线开头</a></li></ul><h2 id="运算符重载">运算符重载</h2><p>Python 同样支持运算符重载，我们可以对类的专有方法进行重载，实例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b</span>):</span><br><span class="line">      self.a = a</span><br><span class="line">      self.b = b</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Vector (%d, %d)&#x27;</span> % (self.a, self.b)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self,other</span>):</span><br><span class="line">      <span class="keyword">return</span> Vector(self.a + other.a, self.b + other.b)</span><br><span class="line"> </span><br><span class="line">v1 = Vector(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line">v2 = Vector(<span class="number">5</span>,-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> (v1 + v2)</span><br></pre></td></tr></table></figure><p>以上代码执行结果如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vector(7,8)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『GitHub』学生身份认证问题</title>
      <link href="/2022/06/29/%E3%80%8EGitHub%E3%80%8F%E5%AD%A6%E7%94%9F%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E9%97%AE%E9%A2%98/"/>
      <url>/2022/06/29/%E3%80%8EGitHub%E3%80%8F%E5%AD%A6%E7%94%9F%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>因为 Copilot 准备收费了，而学生还是可以免费用的，所以去申请了好几次教育认证，今天终于把 GitHub 教育认证弄好了（而且是秒过）</p><p>下面是鄙人的个人经历，可供参考，<mark class="hl-label green">但是我也不一定包你能过，我只能说我是这样过的</mark> </p><p>下面开始，并且全程不要用梯子</p><hr><h1 id="登录">登录</h1><p>首先前往 <a href="https://education.github.com/">https://education.github.com/</a> 并登录你的 GitHub 账户</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206290934794.png" alt="image-20220629093418602"></p><p>选择学生，并且下一步</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206290934174.png" alt="image-20220629093442077"></p><h1 id="确认邮箱和学校">确认邮箱和学校</h1><p>大学生应该都有教育邮箱罢，选择了你学校的邮箱之后就自动把学校填了</p><p>（而且这里如果用的不是学校的邮箱的话，后面可能没有上传图片的选项，只能拍照）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206290935521.png" alt="image-20220629093508422"></p><details class="toggle" ><summary class="toggle-button" style="">如果这里没有你的教育邮箱</summary><div class="toggle-content"><p>如果这里没有你的教育邮箱的话，请前往 GitHub 给自己的账户<a href="https://github.com/settings/emails">添加你的邮箱</a></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206291019354.png" alt="image-20220629101927238"></p></div></details><h1 id="上传照片">上传照片</h1><p>接下来就是上传照片了，是最重要的一步</p><p>我选择的是去<a href="https://my.chsi.com.cn/archive/index.jsp">学信网</a>，登录之后来到学籍信息</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206291021089.jpg" alt="5"></p><p>然后点击查看验证报告</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206291021151.jpg" alt="2"></p><p>在这个页面使用浏览器把信息都翻译成英文，然后截图（上传的图片应当是不打码的）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206291021822.jpg" alt="1"></p><p>回到教育认证页面，上传图片，类型选第一个就行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206291022026.jpg" alt="3"></p><details class="toggle" ><summary class="toggle-button" style="">如果我只能拍照怎么办？</summary><div class="toggle-content"><p>很奇怪，有些账号是只有拍照这一个选项的，那就只能在手机上重来一遍然后用手机拍照了~</p><p>有人说可以直接把照片拖进去（也不知道行不行</p></div></details><p>为什么要翻译呢？因为不翻译的话我会提示这个</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206291023766.png" alt="img"></p><p>而翻译之后就好了，<mark class="hl-label green">确认没有提示任何问题之后再提交</mark> </p><h1 id="顺利通过">顺利通过</h1><p>提交之后秒过，终于搞定了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206291024868.png" alt="image-20220629102431704"></p><details class="toggle" ><summary class="toggle-button" style="">如果我没能顺利通过怎么办？</summary><div class="toggle-content"><p>如果你没能通过，请检查以下几点：</p><ul><li><p>正如开头所说，全程不能用梯子</p></li><li><p>是否有翻译成英文</p></li><li><p>提交的时候是否有提示缺少某些信息，如果有的话请检查截图/拍照的时候有没有提供这些信息</p></li><li><p>设备应尽量提供位置信息（？）这个我是听说的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202209241214649.png" alt="image-20220924121458615"></p><p>这个选 Other 也可以试试，定位权限尽量提供就是了</p></li></ul></div></details><details class="toggle" ><summary class="toggle-button" style="">我不知道有没有通过怎么办？</summary><div class="toggle-content"><p>照理来说一般都是机器审核的，结果应当秒出</p><ul><li>GitHub 会发邮件给你（是你用的邮箱，用的是教育邮箱就去教育邮箱找）</li><li>结果一般会在申请首页的右侧显示，如果你一访问就跳到传照片的页面，可以退回到首页</li></ul></div></details><p>前往 <a href="https://github.com/features/copilot">https://github.com/features/copilot</a> 免费领取 Copilot</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206291210946.png" alt="image-20220629121032828"></p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『MySQL』主键与唯一键</title>
      <link href="/2022/06/28/%E3%80%8EMySQL%E3%80%8F%E4%B8%BB%E9%94%AE%E4%B8%8E%E5%94%AF%E4%B8%80%E9%94%AE/"/>
      <url>/2022/06/28/%E3%80%8EMySQL%E3%80%8F%E4%B8%BB%E9%94%AE%E4%B8%8E%E5%94%AF%E4%B8%80%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="概念">概念</h1><h2 id="唯一键（unique）">唯一键（unique）</h2><ul><li>不能重复</li><li>一个表中可以有多个</li></ul><h2 id="主键（primary-key）">主键（primary key）</h2><ul><li>不能重复、不能为空（会自动加上 <code>NOT NULL</code> 属性）</li><li>用于区分表中的每一条数据，方便让外键来引用，且一个表中只能有一个</li></ul><h2 id="要点提示">要点提示</h2><ul><li>MySQL 的术语里面『键』就等于『索引』，这就是为什么你在看唯一键的创建语句时跟你实际创建的语句可能不一样</li><li>主键 = <code>NOT NULL</code> + 唯一键</li><li>主键和唯一键都可以建立在某一个字段或某几个字段上（几个字段共同组成主键/唯一键，下面会讲）</li><li>自增长（<code>AUTO_INCREMENT</code>）属性必须定义在主键上</li></ul><hr><h1 id="使用">使用</h1><h2 id="创建">创建</h2><h3 id="建表前">建表前</h3><ul><li><p>直接在字段后加上 <code>PRIMARY KEY</code> / <code>UNIQUE</code> （注意没有 <code>KEY</code> ）</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu4(</span><br><span class="line">    id1 <span class="type">int</span> <span class="keyword">primary</span> key,<span class="operator">&lt;</span><span class="comment">------#直接指定主键字段</span></span><br><span class="line">    id2 <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> stu2(</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span> <span class="operator">&lt;</span><span class="comment">------#建表时字段后⾯添加unique，name不可以添加重复数据</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>在所有字段之后增加 <code>PRIMARY KEY (字段或字段列表)</code> / <code>UNIQUE KEY (字段或字段列表)</code></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu5(</span><br><span class="line">    id1 <span class="type">int</span>,</span><br><span class="line">    id2 <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">primary</span> key(id1)<span class="operator">&lt;</span><span class="comment">------#语句最后指定主键字段</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> stu(</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">unique</span> key(name)<span class="operator">&lt;</span><span class="comment">------#语句最后添加，name不可以添加重复数据</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>  <details class="toggle" ><summary class="toggle-button" style="">联合主键 / 唯一键</summary><div class="toggle-content"><p>正如上文所述，可以使用几个字段共同组成主键/唯一键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu7(</span><br><span class="line">    id1 <span class="type">int</span>,</span><br><span class="line">    id2 <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">primary</span> key(id1,id2)<span class="operator">&lt;</span><span class="comment">------#主键由两个字段组成</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu7(</span><br><span class="line">    id1 <span class="type">int</span>,</span><br><span class="line">    id2 <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">unique</span> key(id1,id2)<span class="operator">&lt;</span><span class="comment">------#唯一键由两个字段组成，不等同于分别将两个字段加上 UNIQUE 属性</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>总结：将字段改为字段列表就可以了，建表后也可创建</p></div></details></li></ul><h3 id="建表后">建表后</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu6 <span class="keyword">add</span> <span class="keyword">primary</span> key(id1);<span class="operator">&lt;</span><span class="comment">------#表创建完成后添加主键</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">add</span> <span class="keyword">unique</span>(name);<span class="operator">&lt;</span><span class="comment">------#建表完成指定唯⼀键</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index UserNameIndex <span class="keyword">on</span> <span class="string">&#x27;t_user&#x27;</span> (<span class="string">&#x27;username&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="删除">删除</h2><p>主键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure><p>唯一键（用删除索引的方法删除）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> index  唯⼀键字段名;</span><br><span class="line">⽰例</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu11 <span class="keyword">drop</span> index name;</span><br><span class="line">错误示例</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu11 <span class="keyword">drop</span> <span class="keyword">unique</span> key name;<span class="operator">/</span><span class="operator">/</span>错误的</span><br></pre></td></tr></table></figure><h2 id="修改">修改</h2><p>没法直接修改，只能先删除再添加</p><p>或者创一个新表，把结构建好，然后把数据搬过去</p><h2 id="查看">查看</h2><ul><li><p>查看表结构 <code>desc 表名;</code></p></li><li><p>查看表的创建语句 <code>show create table 表名;</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 数据类型之数值</title>
      <link href="/2022/06/28/MySQL-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E5%80%BC/"/>
      <url>/2022/06/28/MySQL-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="总览表">总览表</h1><p>MySQL 支持标准 SQL 中所有的数据类型，此外还拓展了一些，总体来说可分为整数、浮点数、定点数和位，如下表所示</p><ul><li><p>整数类型</p><table><thead><tr><th>名称</th><th style="text-align:center">字节</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td style="text-align:center">1</td><td>有符号 -128<br />无符号 0</td><td>有符号 127<br />无符号 255</td></tr><tr><td><code>SMALLINT</code></td><td style="text-align:center">2</td><td>有符号 -32768<br />无符号 0</td><td>有符号 32767<br />无符号 65535</td></tr><tr><td><code>MEDIUMINT</code></td><td style="text-align:center">3</td><td>有符号 -8388608<br />无符号 0</td><td>有符号 -8388607<br />无符号 1677215</td></tr><tr><td><code>INT</code> 或 <code>INTEGER</code></td><td style="text-align:center">4</td><td>有符号 -2147483648<br />无符号 0</td><td>有符号 2147483647<br />无符号 4294967295</td></tr><tr><td><code>BIGINT</code></td><td style="text-align:center">8</td><td>有符号 -9223372036854775808<br />无符号 0</td><td>有符号 -9223372036854775807<br />无符号 18446744073709551615</td></tr></tbody></table><blockquote><p>说明：有符号/无符号 指的是这一字段是否有 <code>UNSIGNED</code> 这一属性</p></blockquote></li><li><p>浮点数类型</p><table><thead><tr><th>名称</th><th style="text-align:center">字节</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td><code>FLOAT</code></td><td style="text-align:center">4</td><td>±1.175494351E-38</td><td>±3.402823466E+38</td></tr><tr><td><code>DOUBLE</code></td><td style="text-align:center">8</td><td>±2.2250738585072014E-308</td><td>±1.7976931348623157E+308</td></tr></tbody></table></li><li><p>定点数类型</p><table><thead><tr><th>名称</th><th style="text-align:center">字节</th><th>描述</th></tr></thead><tbody><tr><td><code>DEC(M,D)</code> 或 <code>DECIMAL(M,D)</code></td><td style="text-align:center">M+2</td><td>最大取值与 <code>DOUBLE</code> 相同， <code>DEC</code> 的有效取值范围由 <code>M</code> 和 <code>D</code> 决定</td></tr></tbody></table></li><li><p>位类型</p><table><thead><tr><th>名称</th><th style="text-align:center">字节</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td><code>BIT(M)</code></td><td style="text-align:center">1~8</td><td><code>BIT(1)</code></td><td><code>BIT(64)</code></td></tr></tbody></table></li></ul><hr><h1 id="整数类型">整数类型</h1><p>整数类型分为 5 个：<code>TINYINT</code> 、<code>SMALLINT</code> 、<code>MEDIUMINT</code> 、<code>INT</code> 、<code>BIGINT</code>，它们的大小在上表中，非常简洁明了</p><p>下面将介绍有关它的三个属性</p><h2 id="ZEROFILL（补零）">ZEROFILL（补零）</h2><blockquote><p>这个在当前版本已经不建议使用了，并且会在未来的版本中删除，但是还是讲一下</p></blockquote><p>对于整型数据，MySQL 支持 <mark class="hl-label green">使用小括号来指示显示宽度</mark> （这里的括号含义只是显示宽度，与存储没关系，记住啦！）并且这个一般是配合 <code>ZEROFILL</code> 属性使用的，例如 <code>INT(5)</code> 的意思是要显示的时候如果不足 5 位，就在前面补宽度到 5 位，如果不手动指定显示宽度的话默认是 <code>INT(11)</code></p><p>下面来演示一下，先建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (id1 <span class="type">INT</span>, id2 <span class="type">INT</span>(<span class="number">5</span>));</span><br></pre></td></tr></table></figure><p>然后插入数据，并且发现格式没有变化（但是有些样例会补空格，我不知道是为什么）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206281632626.png" alt="image-20220628163218578"></p><p>然后给它们加上 <code>ZEROFILL</code> 属性，可以发现有效果了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t1 MODIFY id1 <span class="type">INT</span> ZEROFILL;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t1 MODIFY id2 <span class="type">INT</span>(<span class="number">5</span>) ZEROFILL;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206281634204.png" alt="image-20220628163421141"></p><p>要记住，这个只是规定了显示补零的位数，不改变存储的大小</p><p>并且，如果数据超过了这个位数，那么宽度格式就没有意义了，按照原样输出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span>(<span class="number">1234567</span>,<span class="number">1234567</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206281636651.png" alt="image-20220628163618590"></p><h2 id="UNSIGNED（无符号）">UNSIGNED（无符号）</h2><p>所有的整数都可以有一个属性  <code>UNSIGNED</code>（无符号），使用该属性时最小值位 0，最大值翻倍（就如上表所示）</p><p>并且，如果已经有了 <code>ZEROFILL</code> 属性， MySQL 会自动为该列添加 <code>UNSIGNED</code></p><h2 id="AUTO-INCREMENT（自增）">AUTO_INCREMENT（自增）</h2><p>需要产生唯一标识符或顺序值时，可以使用该属性</p><p><code>AUTO_INCREMENT</code> 的值一般从 1 开始，当欲插入 NULL 或 DEFAULT 到一个使用了该属性的列时，MySQL 会插入一个比该列中最大值大 1 的值</p><p>关于该属性，有下面几点说明：</p><ol><li><p>只有整数类型才能使用该属性</p></li><li><p>必须同时有 <code>NOT NULL</code> 属性，建议同时使用 <code>UNSIGNED</code> 属性</p></li><li><p>只有<a href="/2022/06/28/%E3%80%8EMySQL%E3%80%8F%E4%B8%BB%E9%94%AE%E4%B8%8E%E5%94%AF%E4%B8%80%E9%94%AE/">主键（primary key）或唯一键（unique）</a>或为它们的一部分才能使用该属性（其实与上一条一个意思）</p></li><li><p>建表时，可以使用 <code>AUTO_INCREMENT= N </code> 来指定自增起始值，建表后可用 <code>ALTER TABLE table_name AUTO_INCREMENT= N</code> 来重设自增的起始值</p></li><li><p>当插入/更新记录时，如果为 <code>AUTO_INCREMENT</code> 数据列明确指定了一个数值，则会出现两种情况</p><ul><li>如果插入/更新的值与已有的编号重复，则会出现出错信息，因为 <code>AUTO_INCREMENT</code> 数据列的值必须是唯一的</li><li>如果插入/更新的值大于已编号的值，则会把该值插入/更新到数据列中，并使在下一个编号将从这个新值开始递增。也就是说，可以跳过一些编号</li></ul></li><li><p>如果自增序列的最大值被删除了，则在插入新记录时，该值被重用</p></li></ol><hr><h1 id="小数类型（浮点与定点）">小数类型（浮点与定点）</h1><p>对于小数，MySQL 有两种方式：浮点与定点。浮点包括 <code>FLOAT</code> 和 <code>DOUBLE</code> ，定点数只有 <code>DECIMAL</code> 一种。定点数以字符串的形式存放，比浮点数精确，适合用来表示货币等精度高的数据</p><p>与整型类似，小数后面也可以加带括号的后缀，但是含义是不同的</p><p>首先是与整型的不同，整数和浮点数后面的括号形如 <code>(M,D)</code> ，精度 <code>M</code> 表示一共有多少位（整数加小数），标度 <code>D</code> 表示其中小数有多少位，</p><ul><li>对于浮点数，正如上表所述，这个类型的存储大小是不受这个后缀改变的，只是当保存数据的时候，会按照这个后缀的精度进行四舍五入保存，并且如果超过了长度限制（即使这个类型原本是能装下的）就会报错</li><li>对于定点数，这个后缀会同时决定类型的大小和存储规则</li></ul><p>如果不指定精度的话，浮点数会按照实际的精度（有实际的软硬件决定）显示，定点数默认为 <code>(10,0)</code></p><hr><p>下面是一个例子，来比较 <code>FLOAT</code> 、 <code>DOUBLE</code> 和 <code>DECIMAL</code> 三者的不同</p><p>首先建个表，字段分别为 <code>float(5,2)</code> 、 <code>double(5,2)</code> 和 <code>decimal(5,2)</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (</span><br><span class="line">    id1 <span class="type">float</span>(<span class="number">5</span>,<span class="number">2</span>) <span class="keyword">default</span> <span class="keyword">NULL</span>,</span><br><span class="line">    id2 <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>) <span class="keyword">default</span> <span class="keyword">NULL</span>,</span><br><span class="line">    id3 <span class="type">decimal</span>(<span class="number">5</span>,<span class="number">2</span>) <span class="keyword">default</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后分别插入数据 <code>1.23</code> ，可以看见数据都正确地被插入了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span>(<span class="number">1.23</span>,<span class="number">1.23</span>,<span class="number">1.23</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206302155699.png" alt="image-20220630215501621"></p><p>接下来尝试数据 <code>1.234</code> ，可以看见前两个浮点类型舍去了最后一位，并且定点类型报警被截断了</p><p>（如果是在传统的 <code>SQLMode</code> ，这条记录是无法被插入的）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span>(<span class="number">1.234</span>,<span class="number">1.234</span>,<span class="number">1.234</span>);</span><br><span class="line"><span class="keyword">SHOW</span> WARNINGS;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206302157491.png" alt="image-20220630215739437"></p><p>现在把三个字段的精度和标度全部去掉，再插入一次数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t1 MODIFY id1 <span class="type">FLOAT</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t1 MODIFY id2 <span class="keyword">DOUBLE</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t1 MODIFY id3 <span class="type">DECIMAL</span>;</span><br><span class="line"><span class="keyword">DESC</span> t1;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span>(<span class="number">1.234</span>,<span class="number">1.234</span>,<span class="number">1.234</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206302213491.png" alt="image-20220630221310419"></p><hr><h1 id="位类型">位类型</h1><p>对于 <code>BIT</code>（位）类型，顾名思义用于存放位， <code>BIT(M)</code> 可以存放多位二进制数，<code>M</code> 的范围为 <code>1~64</code> ，默认值为 <code>1</code></p><p>对于位字段，可以使用 <code>SELECT</code> 查询 16 进制结果（但在 MySQL 5.7 中是不显示的），也可以使用 <code>BIN()</code> 或 <code>HEX()</code> 函数读取</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t2 (id BIT);</span><br><span class="line"><span class="keyword">DESC</span> t2;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t2 <span class="keyword">VALUES</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t2;</span><br><span class="line"><span class="keyword">SELECT</span> BIN(id),HEX(id) <span class="keyword">FROM</span> t2;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202207012247190.png" alt="image-20220701224711079"></p><p>插入数据时，首先会将数字转换为二进制然后插入， 如果位数不够就会报错</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t2 <span class="keyword">VALUES</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t2 MODIFY id BIT(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t2 <span class="keyword">VALUES</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> BIN(id),HEX(id) <span class="keyword">FROM</span> t2;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202207012249158.png" alt="image-20220701224916068"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『面试八股文』2：数据库自增 ID 用完了会咋样？</title>
      <link href="/2022/06/26/%E3%80%8E%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87%E3%80%8F2%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%87%AA%E5%A2%9E-ID-%E7%94%A8%E5%AE%8C%E4%BA%86%E4%BC%9A%E5%92%8B%E6%A0%B7%EF%BC%9F/"/>
      <url>/2022/06/26/%E3%80%8E%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87%E3%80%8F2%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%87%AA%E5%A2%9E-ID-%E7%94%A8%E5%AE%8C%E4%BA%86%E4%BC%9A%E5%92%8B%E6%A0%B7%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>先说结论：</p><p>数据库自增主键用完后分两种情况</p><ul><li>有主键，报主键冲突</li><li>无主键，InnDB 会自动生成一个全局的row_id。它到达最大值后会从 0 开始算，遇到 row_id 一样时，新数据覆盖旧数据。所以，我们还是尽量给表设置主键。</li></ul><p>FROM:<a href="https://juejin.cn/post/6984275678761844743#heading-5">https://juejin.cn/post/6984275678761844743#heading-5</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试八股文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十八）使用视图</title>
      <link href="/2022/06/25/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E4%BD%BF%E7%94%A8%E8%A7%86%E5%9B%BE/"/>
      <url>/2022/06/25/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E4%BD%BF%E7%94%A8%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>这一节将讲述什么是视图，它们怎样工作，何时使用它们，并且如何使用它们简化前几篇中执行的某些 SQL 操作</p><h1 id="视图">视图</h1><p>视图是虚拟的表，与包含数据的表不一样，视图只包含使用的动态检索数据的查询</p><details class="toggle" ><summary class="toggle-button" style="">说明：SQLite 的视图</summary><div class="toggle-content"><p>SQLite 仅支持只读视图，所以视图可以创建，可以读，但不能通过视图更改原表的内容</p></div></details><p>理解视图的最好方法是看例子，在第 12 节中，我们通过下面的语句从三个表中检索数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers, Orders, OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line">  <span class="keyword">AND</span> OrderItems.order_num <span class="operator">=</span> Orders.order_num</span><br><span class="line">  <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>此查询用来检索订购了某种产品的顾客，任何需要这个数据的人都必须理解相关表的结构，知道如何创建查询和对表进行联结。检索其他产品（或多个产品）的相同数据，必须修改最后的 <code>WHERE</code> 子句</p><p>现在，假如可以把整个查询包装成一个名为 <code>ProductCustomers</code> 的虚拟表，则可以如下轻松地检索出相同的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> ProductCustomers</span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这就是视图的作用，<code>ProductCustomers</code> 是一个视图，作为视图，它不包含任何列或数据，包含的是一个查询（与上面用以正确联结表的查询相同）</p><h2 id="为什么使用视图">为什么使用视图</h2><p>我们已经看到了视图引用的一个例子，下面是视图的一些常见应用</p><ul><li>重用 SQL 语句</li><li>简化复杂的 SQL 操作。在编写查询后，可以方便地重用它而不必知道其基本查询细节</li><li>使用表的一部分而不是整个表</li><li>保护数据，可以授予用户访问表的特点部分的权限，而不是整个表的权限</li><li>更改数据格式和表示，视图可返回底层表的表示和格式不同的数据</li></ul><p>创建视图之后，可以用与表基本相同的方式使用它们。可以对视图执行 <code>SELECT</code> 操作，过滤和排序数据，将视图联结到其他视图或表，甚至添加其他数据（添加和更新数据存在某些限制，关于这个内容稍后做介绍）</p><details class="toggle" ><summary class="toggle-button" style="">说明：性能问题</summary><div class="toggle-content"><p>因为视图不包含数据，所以每次使用视图时，都必须处理查询执行时需要的所有查询。如果你用多个联结和过滤创建了复杂的视图或者嵌套了视图，性能可能下降得很厉害。因此，在部署使用了大量视图的应用前，应该进行测试</p></div></details><h2 id="视图的规则和限制">视图的规则和限制</h2><p>创建视图之前，应该知道它的一些限制，不过还是那句话，详情请见具体的 DBMS 文档（</p><ul><li>与表一样，视图必须唯一命名</li><li>对于可以创建的视图的数目没有限制</li><li>创建视图，必须具有足够的访问权限</li><li>视图可以嵌套，所允许的嵌套层数在不同的 DBMS 中有不同</li><li>许多 DBMS 禁止在视图查询中使用 <code>ORDER BY</code> 子句（这应该说的是视图内部？）</li><li>有些 DBMS 要求对返回的所有列进行命名，如果是计算字段，需要使用别名</li><li>视图不能索引，也不能有关联的触发器或默认值</li><li>有些 DBMS 把视图作为只读的查询，这表示不能进行导致某些行不再属于视图的插入或更新。例如某个视图只检索有电子邮箱的顾客，如果通过此视图更新某个顾客，删除它的电子邮箱（使他不再属于该视图），一般情况下是允许的，但有些 DBMS 不允许这么做</li></ul><h1 id="创建视图">创建视图</h1><p>视图用 <code>CREATE VIEW</code> 来创建，与 <code>CREATE TABLE</code> 类似，你只能创建不存在的视图</p><details class="toggle" ><summary class="toggle-button" style="">说明：视图修改</summary><div class="toggle-content"><p>删除视图可以使用 <code>DROP</code> 语句： <code>DROP VIEW viewname;</code></p><p>覆盖或更新视图，必须先删除它，然后重新创建</p></div></details><h2 id="利用视图简化复杂的联结">利用视图简化复杂的联结</h2><p>一个最常见的视图应用是隐藏复杂的 SQL，这通常涉及联结</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> ProductCustomers <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, prod_id</span><br><span class="line"><span class="keyword">FROM</span> Customers, Orders, OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line">  <span class="keyword">AND</span> OrderItems.order_num <span class="operator">=</span> Orders.order_num;</span><br></pre></td></tr></table></figure><p>如果执行 <code>SELECT * FROM ProductCustomers;</code> ，将列出订购了任意产品的顾客</p><p>检索订购了产品 <code>RGAN01</code> 的顾客，可如下进行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> ProductCustomers</span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206251051280.png" alt="image-20220625105156195"></p><h2 id="用视图重新格式化检索出的数据">用视图重新格式化检索出的数据</h2><p>视图的另一常见用途是重新格式化检索出的数据，下面的语句来自第 7 节，在单个组合计算列中返回供应商名和位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(vend_name ,<span class="string">&#x27;(&#x27;</span> , vend_country , <span class="string">&#x27;)&#x27;</span>) <span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure><p>现在假设经常需要这个格式的结果，可以选择创建一个视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> VendorLocations <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> Concat(vend_name ,<span class="string">&#x27;(&#x27;</span> , vend_country , <span class="string">&#x27;)&#x27;</span>) <span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure><p>然后可以这样使用它</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> VendorLocations</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206251115579.png" alt="image-20220625111527525"></p><h2 id="用视图过滤不想要的数据">用视图过滤不想要的数据</h2><p>例如，定义 <code>CustomersEMailList</code> 视图，过滤没有电子邮箱的顾客</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> CustomersEMailList <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> cust_id, cust_name, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>现在，可以像使用其他表一样使用视图 <code>CustomersEMailList</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> CustomersEMailList;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206251126716.png" alt="image-20220625112640662"></p><h2 id="使用视图与计算字段">使用视图与计算字段</h2><p>同理，视图也可以简化计算字段的使用，下面是第 7 节的一条语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, </span><br><span class="line">       quantity, </span><br><span class="line">       item_price, </span><br><span class="line">       quantity <span class="operator">*</span> item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20008</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206251130673.png" alt="image-20220625113059605"></p><p>将其转换为一个视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> OrderItemsExpanded <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> order_num,</span><br><span class="line">   prod_id, </span><br><span class="line">       quantity, </span><br><span class="line">       item_price, </span><br><span class="line">       quantity <span class="operator">*</span> item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> OrderItems;</span><br></pre></td></tr></table></figure><p>检索订单 20008 的详细内容，如下进行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> OrderItemsExpanded</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20008</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206251133104.png" alt="image-20220625113307013"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十七）创建和操纵表</title>
      <link href="/2022/06/24/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E5%88%9B%E5%BB%BA%E5%92%8C%E6%93%8D%E7%BA%B5%E8%A1%A8/"/>
      <url>/2022/06/24/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E5%88%9B%E5%BB%BA%E5%92%8C%E6%93%8D%E7%BA%B5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>本节将讲述创建、更改和删除表的基础知识</p><h1 id="创建表">创建表</h1><p>创建表的话，最好是通过图形化的管理工具来创建，但也可以手动通过 SQL 语句创建</p><p>本节不会介绍创建表时可以使用的所有选项，只会给出一些基本选项，详细的信息还是去翻对应的 DBMS 文档吧（</p><h2 id="表创建基础">表创建基础</h2><p>利用 <code>CREATE TABLE</code> 创建表，必须给出以下信息：</p><ul><li>新表的名字，在关键字 <code>CREATE TABLE</code> 之后给出</li><li>表列的名字和定义，用逗号分隔</li><li>有点 DBMS 还要求指定表的位置</li></ul><p>下面的 SQL 语句创建了样例中的 Products 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Products</span><br><span class="line">(</span><br><span class="line">    prod_id        <span class="type">CHAR</span>(<span class="number">10</span>)         <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    vend_id        <span class="type">CHAR</span>(<span class="number">10</span>)         <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    prod_name      <span class="type">CHAR</span>(<span class="number">254</span>)        <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    prod_price     <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    prod_desc      <span class="type">VARCHAR</span>(<span class="number">1000</span>)    <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="使用-NULL-值">使用 NULL 值</h2><p>某一列是否能为 NULL 值可以在创建时设置，就如上面的那样</p><p>如果缺省的话，大多数 DBMS 都会设置为 <code>NULL</code> ，而不是 <code>NOT NULL</code>  ，当然也有一些例外，并且有些 DBMS 必须要你指定是 <code>NULL</code> 还是 <code>NOT NULL</code>，所有为了兼容性，建议始终指定这一项</p><h2 id="指定默认值">指定默认值</h2><p>类似地，可以指定默认值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> OrderItems</span><br><span class="line">(</span><br><span class="line">    order_num      <span class="type">INTEGER</span>           <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    order_item     <span class="type">INTEGER</span>           <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    prod_id        <span class="type">CHAR</span>(<span class="number">10</span>)          <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    quantity       <span class="type">INTEGER</span>           <span class="keyword">NOT</span> <span class="keyword">NULL</span>     <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">    item_price     <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>默认值经常用于日期或者时间戳列，设定获取当前时间的函数为默认值，这样在插入时就可以自动写入时间了</p><h2 id="从检索的数据创建表">从检索的数据创建表</h2><p>之前讲了可以使用 <code>INSERT SELECT</code> 将检索数据添加到一个已经存在的表，而 <code>CREATE SELECT</code> 能将使用检索数据创建一个新表（有些 DBMS 可以覆盖已存在的表）</p><p>下面的例子说明如何使用 <code>CREATE SELECT</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CustCopy <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure><p>若是使用 SQL Server，可以这么写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> CustCopy <span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure><p>这条 <code>SELECT</code>  语句创建一个名为 <code>CustCopy</code> 的新表，并把 <code>Customers</code> 表的整个内容复制到新表中。因为这里用的是 <code>SELECT *</code> ，所以每一列都是相同的。如果只想复制部分列，可以给出列名</p><details class="toggle" ><summary class="toggle-button" style="">提示：进行表的复制</summary><div class="toggle-content"><p>在试验新的 SQL 语句之前，可以先复制出来一份出来测试，<code>CREATE SELECT</code> 是很好的工具</p></div></details><h1 id="更新表">更新表</h1><p>更新表定义，可以使用 <code>ALTER TABLE</code> 语句。虽然所有的 DBMS 都支持，但它们所允许更新的内容差别很大，以下是使用 <code>ALTER TABLE</code> 时需要考虑的事情</p><ul><li>在理想情况下，不要在表中包括数据时对其进行更新。应该在表的设计过程中充分考虑未来可能的需求，避免今后对表的结果做出大改动</li><li>所有的 DBMS 都允许给现有的表增加列，不过对所增加列的数据类型，以及 NULL 和 DEFAULT 的使用有所限制</li><li>许多 DBMS 不允许删除或更改表中的列</li><li>多数 DBMS 允许重命名表中的列</li><li>许多 DBMS 限制对已经填有数据的列进行改变，对未填有数据的列几乎没有限制</li></ul><p>可以看出，对已有的表做出更改既复杂又不统一，需要参考具体的 DBMS 文档</p><p>使用 <code>ALTER TABLE</code> 更改表结构，必须给出下面的信息：</p><ul><li>在 <code>ALTER TABLE</code> 之后给出要更改的表名</li><li>列出要做出哪些更改</li></ul><p>因为给已有的表增加列可能是所有 DBMS 都支持的唯一操作，所以举下面这个例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Vendors</span><br><span class="line"><span class="keyword">ADD</span> vend_phone <span class="type">CHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>而这个例子就并非对所有 DBMS 都有效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Vendors</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> vend_phone;</span><br></pre></td></tr></table></figure><p>如果要更改复杂的表结构，建议使用下面的步骤</p><ul><li>用新的列布局创建一个新表</li><li>使用 <code>INSERT SELECT</code> 把数据搬过去</li><li>检验包含所需数据的新表</li><li>把旧表重命名或者删掉</li><li>用旧表原来的名字重命名新表</li><li>根据需要，重新创建触发器、存储过程、索引和外键</li></ul><details class="toggle" ><summary class="toggle-button" style="">说明：ALTER TABLE 和 SQLite</summary><div class="toggle-content"><p>在 SQLite 中，不允许使用 <code>ALTER TABLE</code> 定义主键和外键，这些必须在最初创建表时指定</p></div></details><details class="toggle" ><summary class="toggle-button" style="">注意：小心使用 ALTER TABLE</summary><div class="toggle-content"><p>使用 <code>ALTER TABLE</code> 要极为小心，建议先备份，因为数据库表的更改不能撤销</p></div></details><h1 id="删除表">删除表</h1><p>非常简单，使用 <code>DROP TABLE</code> 即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> CustCopy;</span><br></pre></td></tr></table></figure><h1 id="重命名表">重命名表</h1><p>每个 DBMS 对表重命名的支持有所不同，对于这个操作不存在严格的标准。DB2、MySQL、Oracle 和 PostgreSQL 使用 <code>RENAME</code> 语句，SQL Server 使用 <code>sp_rename</code> 存储过程，SQLite 使用 <code>ALTER TABLE</code> 语句，具体的还得看文档</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十六）更新和删除数据</title>
      <link href="/2022/06/24/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/06/24/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>本节将记录如何使用 UPDATE 和 DELETE 来进一步操纵表</p><p>鄙人感觉这两个语句是非常简单并且直观的</p><h1 id="更新数据">更新数据</h1><p>使用 <code>UPDATE</code> 非常简单，你只需给出三个信息：</p><ul><li>要更新的表</li><li>列名和它的新值</li><li>确定要更新哪些行的过滤条件</li></ul><p>例如，一位顾客有了新的电子邮件地址，因此记录需要更新</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Customers                        # 表名</span><br><span class="line"><span class="keyword">SET</span> cust_email <span class="operator">=</span> <span class="string">&#x27;kim@thetoystore.com&#x27;</span>  # 新的值</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">1000000005</span>;             # 指定对象，不然就是更新整个表了<span class="operator">~</span></span><br></pre></td></tr></table></figure><p>当然，可以一次更新多个列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Customers</span><br><span class="line"><span class="keyword">SET</span> cust_contact <span class="operator">=</span> <span class="string">&#x27;Sam Roberts&#x27;</span>,</span><br><span class="line">    cust_email <span class="operator">=</span> <span class="string">&#x27;sam@toyland.com&#x27;</span>  </span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">1000000006</span>;</span><br></pre></td></tr></table></figure><p>记住只需要一个 <code>SET</code> ，并且每对数据直接要用逗号分隔</p><details class="toggle" ><summary class="toggle-button" style="">提示：在 UPDATE 语句中使用子查询</summary><div class="toggle-content"><p>在 <code>UPDATE</code> 语句中可以使用子查询，这样可以用 <code>SELECT</code> 的检索结果更新数据</p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：FROM 关键字</summary><div class="toggle-content"><p>某些 DBMS 支持在 <code>UPDATE</code> 中使用 <code>FROM</code> 子句，用一个表的数据更新另一个表的行</p></div></details><h1 id="删除数据">删除数据</h1><p>与 <code>UPDATE</code> 类似， <code>DELETE</code> 也非常简单，<s>但是一定不要忘了 <code>WHERE</code> 子句，不然就全删完了</s></p><p>下面的语句从 Customers 表中删除一行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">1000000006</span>;</span><br></pre></td></tr></table></figure><p>关于 DELETE 的几个知识点：</p><ul><li><code>DELETE</code> 不需要列名或通配符</li><li><code>DELETE</code> 删除整行而不是删除列</li><li><code>DELETE</code> 删除的是表的内容而不是表，你可以删除表中的所有行，但不能删除表本身</li></ul><details class="toggle" ><summary class="toggle-button" style="">提示：友好的外键</summary><div class="toggle-content"><p>在第 12 节中讲解了联结，简单联结两个表只需要这两个表中的公共字段。也可以让 DBMS 通过使用外键来严格实施关系。存在外键时，DBMS 使用它们实施引用完整性。例如要向 Products 表中插入一个新产品，DBMS 不允许通过未知的供应商 ID 插入它。因为 vend_id 列是作为外键连接到 Vendors 表的。而在删除时也是同理，例如要从 Products 表中删除一个产品，而这个产品用在 OrderItems 的已有订单中，那么 <code>DELETE</code> 语句将抛出错误并终止。这是总要定义外键的一个理由</p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：更快地删除</summary><div class="toggle-content"><p>如果需要删除所有的行，可使用 <code>TRUNCATE TABLE</code> ，它更快，因为不记录数据的变动</p></div></details>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十五）插入数据</title>
      <link href="/2022/06/24/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/06/24/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>这一节将讲述如何使用 <code>INSERT</code> 插入数据</p><h1 id="数据插入">数据插入</h1><p>顾名思义， <code>INSERT</code> 用来将行插入（或添加）到数据库表，插入有几种方式：</p><ul><li>插入完整的行</li><li>插入行的一部分</li><li>插入某些查询的结果</li></ul><h2 id="插入完整的行">插入完整的行</h2><p>插入完整的行，可以不指定字段名，靠次序来定位，也可以指定字段名，这样可以更安全（也允许乱序）</p><ul><li><p>不指定字段名（不推荐）</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers # 这个 <span class="keyword">INTO</span> 在某些 DBMS 是可以选的，但还是建议加上</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1000000006</span>,</span><br><span class="line">      <span class="string">&#x27;Toy Land&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;123 Any Street&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;NY&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;11111&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;USA&#x27;</span>,</span><br><span class="line">      <span class="keyword">NULL</span>,</span><br><span class="line">      <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure></li><li><p>指定字段名</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers(cust_id,</span><br><span class="line">                      cust_name,</span><br><span class="line">                      cust_address,</span><br><span class="line">                      cust_city,</span><br><span class="line">                      cust_state,</span><br><span class="line">                      cust_zip,</span><br><span class="line">                      cust_country,</span><br><span class="line">                      cust_contact,</span><br><span class="line">                      cust_email)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1000000006</span>,</span><br><span class="line">      <span class="string">&#x27;Toy Land&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;123 Any Street&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;NY&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;11111&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;USA&#x27;</span>,</span><br><span class="line">      <span class="keyword">NULL</span>,</span><br><span class="line">      <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><p>（因为主键是不能重复的，所以你不能插入两次）</p></li></ul><h2 id="插入部分行">插入部分行</h2><p>指定列名时，如果表允许的话，可以省略部分列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers(cust_id,</span><br><span class="line">                      cust_name,</span><br><span class="line">                      cust_address,</span><br><span class="line">                      cust_city,</span><br><span class="line">                      cust_state,</span><br><span class="line">                      cust_zip,</span><br><span class="line">                      cust_country)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1000000006</span>,</span><br><span class="line">      <span class="string">&#x27;Toy Land&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;123 Any Street&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;NY&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;11111&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;USA&#x27;</span>);</span><br></pre></td></tr></table></figure><p>如果省略，则会被填入默认值或 NULL 值，如果表没有设定默认值又不允许 NULL 值，就会报错</p><h2 id="插入检索出的数据">插入检索出的数据</h2><p>使用 <code>INSERT SELECT</code> ，可以向表中插入检索的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers(cust_id,</span><br><span class="line">                      cust_name,</span><br><span class="line">                      cust_address,</span><br><span class="line">                      cust_city,</span><br><span class="line">                      cust_state,</span><br><span class="line">                      cust_zip,</span><br><span class="line">                      cust_country)</span><br><span class="line"><span class="keyword">SELECT</span> cust_id, # 其实这里的列名没必要与上面的相同，只是按顺序对号入座而已</span><br><span class="line">       cust_name,</span><br><span class="line">       cust_address,</span><br><span class="line">       cust_city,</span><br><span class="line">       cust_state,</span><br><span class="line">       cust_zip,</span><br><span class="line">       cust_country</span><br><span class="line"><span class="keyword">FROM</span> CustNew # 不存在这张表，只是示例</span><br></pre></td></tr></table></figure><p>一般来说 <code>INSERT</code> 只会插入一行，但是 <code>INSERT SELECT</code> 会把检索的所有结果都插入</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十四）组合查询</title>
      <link href="/2022/06/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E7%BB%84%E5%90%88%E6%9F%A5%E8%AF%A2/"/>
      <url>/2022/06/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E7%BB%84%E5%90%88%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>本节将讲述如何利用 <code>UNION</code> 操作符将多条 <code>SELECT</code> 语句的结果组合成一个结果集</p><h1 id="组合查询">组合查询</h1><p>多数 SQL 查询只包含从一个或多个表中返回数据的单条 <code>SELECT</code> 语句。但是，SQL 也允许执行多个查询（多条 <code>SELECT</code> 语句），并将结果作为一个查询结果返回。这些组合查询通常被称为 <code>并（union）</code> 或 <code>复合查询（compound query）</code></p><p>主要有两种情况需要使用组合查询：</p><ul><li>在一个查询中从不同的表返回数据结构</li><li>对一个表执行多个查询，按一个查询返回数据</li></ul><details class="toggle" ><summary class="toggle-button" style="">说明：组合查询和多个 WHERE 条件</summary><div class="toggle-content"><p>多数情况下，组合相同表的两个查询所完成的工作与具有多个 WHERE 子句条件的一个查询所完成的工作相同。换句话说，任何具有多个 <code>WHERE</code> 子句的 <code>SELECT</code> 语句都可以作为一个组合查询，在下面可以看到这一点</p></div></details><h1 id="创建组合查询">创建组合查询</h1><h2 id="使用-UNION">使用 UNION</h2><p>很简单，只需要在各条 <code>SELECT</code> 之间加上 <code>UNION</code> 就好了</p><p>举个例子，假如需要 Illinois、Indian 和 Michigan 等美国几个州的所有顾客的报表，还想包括不管位于那个州的所有的 Fun4All</p><p>这当然可以使用 <code>WHERE</code> 子句，例如下面这样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">&#x27;IL&#x27;</span>,<span class="string">&#x27;IN&#x27;</span>,<span class="string">&#x27;MI&#x27;</span>) <span class="keyword">OR</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Fun4All&#x27;</span>;</span><br></pre></td></tr></table></figure><p>而如果使用 <code>UNION</code> ，则会是这样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">&#x27;IL&#x27;</span>,<span class="string">&#x27;IN&#x27;</span>,<span class="string">&#x27;MI&#x27;</span>)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Fun4All&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206232219763.png" alt="image-20220623221928698"></p><p>在这个简单的例子中，使用 <code>UNION</code> 的确比使用 <code>WHERE</code> 更加复杂。但是对于较复杂的过滤条件，或从多个表（而不是一个表）中检索数据的情形，使用 <code>UNION</code> 可能会更简单</p><details class="toggle" ><summary class="toggle-button" style="">提示：UNION 的限制</summary><div class="toggle-content"><p>使用 <code>UNION</code> 组合 <code>SELECT</code> 语句的数目，SQL 没有标准限制，但是 DBMS 可能会有限制</p></div></details><h2 id="UNION-规则">UNION 规则</h2><p>可以看到，<code>UNION</code> 非常容易使用，但在进行组合时需要注意几条规则</p><ul><li><code>UNION</code> 必须由两条或两条以上的 <code>SELECT</code> 语句组成，语句之间使用 <code>UNION</code> 分隔</li><li><code>UNION</code> 中的每个查询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）</li><li>列数据类型必须兼容：类型不必完全相同，但是必须是 DBMS 可以隐式转换的类型</li></ul><details class="toggle" ><summary class="toggle-button" style="">提示：UNION 的列名</summary><div class="toggle-content"><p>如果结合的两个查询使用不同的列名，那会返回什么名字呢？例如第一个语句是 SELECT <code>prod_name</code>，而第二个是 <code>SELECT productname</code></p><p>答案是使用第一个名字，举得这个例子会返回 <code>prod_name</code> ，而不管第二个名字。这意味着你可以对第一个名字使用别名，而自定义返回的列名。同时如果排序的话也只能使用第一个名字</p></div></details><h2 id="包含或取消重复的行">包含或取消重复的行</h2><p>如果你单独执行上面被组合起来的两个查询语句，你会发现第一条会返回 3 行，第二条会返回 2 行，而且这两组结果中有一行是相同的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206232220334.png" alt="image-20220623222047270"></p><p>但是将这两个组合在一起，就只会返回 4 行，而不是 5 行，可见 <code>UNION</code> 默认会自动去重</p><p>如果需要改变这一点，可以使用 <code>UNION ALL</code>  ，这样会返回所有的匹配行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">&#x27;IL&#x27;</span>,<span class="string">&#x27;IN&#x27;</span>,<span class="string">&#x27;MI&#x27;</span>)</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Fun4All&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206232224915.png" alt="image-20220623222419864"></p><p>前面说过， <code>UNION</code> 几乎总是完成与多个 <code>WHERE</code> 条件相同的工作。但是 <code>UNION ALL</code> 作为 <code>UNION</code> 的一种形式，它能完成 <code>WHERE</code> 不能完成的工作</p><h2 id="对组合查询结果排序">对组合查询结果排序</h2><p><code>SELECT</code> 语句使用 <code>ORDER BY</code> 子句排序，在用 <code>UNION</code> 组合查询时，只能用一条 <code>ORDER</code> BY 子句，它必须在最后一条 <code>SELET</code> 语句之后。对于结果集，不能使用一种方式排序一部分，而又用另一种方式排序另一部分，因此不允许使用多条 <code>ORDER BY</code> 子句</p><p>下面的例子对前面 UNION 返回的结果进行排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">&#x27;IL&#x27;</span>,<span class="string">&#x27;IN&#x27;</span>,<span class="string">&#x27;MI&#x27;</span>)</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Fun4All&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name, cust_contact;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206232240586.png" alt="image-20220623224041528"></p><p>虽然 <code>ORDER BY</code> 子句看上去只是最后一条 <code>SELECT</code> 的一部分，但实际上它对整个结果集进行排序</p><details class="toggle" ><summary class="toggle-button" style="">说明：其他类型的 UNION</summary><div class="toggle-content"><p>某些 DBMS 还支持另外两种 <code>UNION</code> ：</p><ul><li><code>EXCEPT</code>（有时称为 <code>MINUS</code> ），检索只在第一个表中存在而第二个表中不存在的行</li><li><code>INTERSECT</code> ，检索两个表中都存在的行</li></ul><p>实际上，这些 <code>UNION</code> 很少使用，因为相同的结果可以通过联结得到</p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：操作多个表</summary><div class="toggle-content"><p>本节的例子都是使用 <code>UNION</code> 来组合查询一个表，但是 <code>UNION</code> 在需要组合多个表的数据时也很有用，即使是有不匹配的列名的表</p></div></details>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十三）创建高级联结</title>
      <link href="/2022/06/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E5%88%9B%E5%BB%BA%E9%AB%98%E7%BA%A7%E8%81%94%E7%BB%93/"/>
      <url>/2022/06/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E5%88%9B%E5%BB%BA%E9%AB%98%E7%BA%A7%E8%81%94%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="使用表别名">使用表别名</h1><p>第 7 节介绍了如何使用别名引用被检索的表列，给列起别名的语法如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(vend_name ,<span class="string">&#x27;(&#x27;</span> , vend_country , <span class="string">&#x27;)&#x27;</span>) <span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name ;</span><br></pre></td></tr></table></figure><p>SQL 除了可以对列名和计算字段使用别名，还允许<mark class="hl-label green">给表名起别名</mark> ，这样做有两个理由</p><ul><li>缩短 SQL 语句</li><li>允许在一条 <code>SELECT</code> 语句中多次使用相同的表</li></ul><p>多次使用相同的表？是不是听上去很奇怪？别急，后面会有例子，但是先来尝试一下给表取别名</p><p>从上一篇的代码为例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers, Orders, OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line">  <span class="keyword">AND</span> OrderItems.order_num <span class="operator">=</span> Orders.order_num</span><br><span class="line">  <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>下面给表名取别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> C, Orders <span class="keyword">AS</span> O, OrderItems <span class="keyword">AS</span> OI # 取别名</span><br><span class="line"><span class="keyword">WHERE</span> C.cust_id <span class="operator">=</span> O.cust_id</span><br><span class="line">  <span class="keyword">AND</span> OI.order_num <span class="operator">=</span> O.order_num</span><br><span class="line">  <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>运行结果和上面是一样的，在这个例子中，别名只用于 <code>WHERE</code> 子句，但其实还可以用在 <code>SELECT</code> 、<code>ORDER BY</code> 以及其他部分。并且表别名只在查询执行中使用，与列别名不同，表别名不返回到客户端</p><details class="toggle" ><summary class="toggle-button" style="">注意：Oracle 中没有 AS</summary><div class="toggle-content"><p>在 Oracle 中使用别名，不需要 <code>AS</code> ，简单地指定列名即可（因此，应该是 <code>Customers C</code>，而不是 <code>Customers AS C</code></p></div></details><hr><h1 id="使用不同类型的联结">使用不同类型的联结</h1><h2 id="自联结">自联结</h2><p>如前所述，使用表别名的一个主要原因是能在一条 <code>SELECT</code> 语句中不止一次引用相同的表，下面是一个例子</p><p>假如要给与 Jim Jones 同一公司的所有顾客发送一封信件。这个查询需要首先找出 Jim Jones 工作的公司，然后找出在公司工作的顾客，下面是一种解决方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cust_id, cust_name, cust_contact # 鄙人按：cust_name 是公司名，cust_contact 应该是联系人名</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> (<span class="keyword">SELECT</span> cust_name</span><br><span class="line">                   <span class="keyword">FROM</span> Customers</span><br><span class="line">                   <span class="keyword">WHERE</span> cust_contact <span class="operator">=</span> <span class="string">&#x27;Jim Jones&#x27;</span>);</span><br></pre></td></tr></table></figure><p>现在来看看使用自联结的写法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c1.cust_id, c1.cust_name, c1.cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> c1, Customers <span class="keyword">AS</span> c2</span><br><span class="line"><span class="keyword">WHERE</span> c1.cust_name <span class="operator">=</span> c2.cust_name</span><br><span class="line">  <span class="keyword">AND</span> c2.cust_contact <span class="operator">=</span> <span class="string">&#x27;Jim Jones&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206231614688.png" alt="image-20220623161409611"></p><p>在此查询中需要的两个表实际上是相同的表，但是是有必要使用别名的，写的时候可以认为是复制出来了两张名字不同的表</p><h2 id="自然联结">自然联结</h2><p>这部分我看得有点迷，书上讲的跟网上讲的也不一样，而且我感觉这东西没什么用（</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> C.<span class="operator">*</span>, O.order_num, O.order_date,</span><br><span class="line">       OI.prod_id, OI.quantity, OI.item_price</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> C, Orders <span class="keyword">AS</span> O, OrderItems <span class="keyword">AS</span> OI</span><br><span class="line"><span class="keyword">WHERE</span> C.cust_id <span class="operator">=</span> O.cust_id</span><br><span class="line">  <span class="keyword">AND</span> OI.order_num <span class="operator">=</span> O.order_num</span><br><span class="line">  <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="外联结">外联结</h2><p>许多联结将表中的行与另一个表中的行相关联，但有时需要包含没有关联的那些行。例如，可能需要使用联结完成以下工作：</p><ul><li>对每个顾客下的订单进行计数，包括那些至今尚未下单的顾客</li><li>列出所有产品以及订购数量，包括没有人订购的产品</li><li>计算平均销售规模，包括那些至今尚未下订单的顾客</li></ul><details class="toggle" ><summary class="toggle-button" style="">注意：语法差别</summary><div class="toggle-content"><p>创建外联结的语法在不同的 SQL 实现中可能稍有不同，下面的语法形式覆盖了大多数实现</p></div></details><p>先从一个内联结开始，它检索所有顾客及其订单</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders <span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id;</span><br></pre></td></tr></table></figure><p>外联结语法类似，要检索包括没有订单顾客在内的所有顾客，可如下进行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders <span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206232021217.png" alt="image-20220623202109152"></p><p>类似于内联结，外联结使用 <code>OUTER JOIN</code> 来指定联结类型。与内连接关联两个表中的行不同的是，外联结还包含没有关联行的行。在使用  <code>OUTER JOIN</code> 时，必须使用 <code>RIGHT</code> 或者 <code>LEFT</code> 关键字指定那个表应该包含所有行。像这里，想要列出所有的顾客情况，而顾客表在左边，所有使用 <code>LEFT</code> ，又称为左联结，相对地，也有右联结</p><details class="toggle" ><summary class="toggle-button" style="">注意：SQLite 外联结</summary><div class="toggle-content"><p>SQLite 支持 <code>LEFT OUTER JOIN</code> ，但是不支持 <code>LEFT OUTER JOIN</code> ，但这两个联结的不同也就只是顺序的区别，调换一下表的顺序即可</p></div></details><h1 id="使用带聚集函数的联结">使用带聚集函数的联结</h1><p>聚集函数用来汇总数据，但至今为止的例子都只是从一个表中汇总数据，其实聚集函数可以与联结一起使用</p><p>来看个例子，要检索所有顾客及每个顾客所下的订单数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, <span class="built_in">COUNT</span>(Orders.order_num) <span class="keyword">AS</span> num_order</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders <span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customers.cust_id;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206232055503.png" alt="image-20220623205546448"></p><p>聚集函数还可以与其他联结一起使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, <span class="built_in">COUNT</span>(Orders.order_num) <span class="keyword">AS</span> num_ord</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders <span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customers.cust_id;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206232100689.png" alt="image-20220623210031626"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十二）联结表</title>
      <link href="/2022/06/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E8%81%94%E7%BB%93%E8%A1%A8/"/>
      <url>/2022/06/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E8%81%94%E7%BB%93%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="联结">联结</h1><p>SQL 最强大的功能之一就是能在数据查询的执行中 <code>联结 (join)</code> 表。联结是利用SQL的 <code>SELECT</code> 能执行的最重要的操作，很好地理联结以及其法是学习 SOL 的极为重要的部分</p><p>在能够有效地使用联结前，必须了解关系表以及关系数据库设计的基础知识。下面的介绍并不能涵盖这一主题的所有内容，但作为入门经够了</p><h2 id="关系表">关系表</h2><p>理解关系表，最好是来看个例子。有一个包含产品目录的数据库表，其中每类物品占一行。对于每一种物品，要存储的信息包括产品描述、价格，以及供应商</p><p>现在有同一供应商生产的多种物品，那么在何处存储供应商名、地址、联系方式呢？将这些数据与产品信息分开存储的理由是：</p><ul><li>同一供应商生产的每个商品，其供应商数据都是相同的，对每个产品重复此信息既浪费时间又浪费存储空间</li><li>如果供应商信息发生变化，例如供应商迁址或电话号码变动，只需修改一次即可</li><li>如果有重复数据（即每种产品都存储供应商信息），则很难保证每次输入该数据的方式都相同，不一致的数据在报表中就很难利用</li></ul><p>关健是，相同的数据出现多次决不是一件好事，这是关系数据库设计的基础。关系表的设计就是要把信息分解成多个表，一类数据一个表。各表通过某些共同的值互相关联（所以才叫关系数据库）</p><p>在这个例子中可建立两个表：一个存储供应商信息，另一个存储产品信息。<code>Vendors</code> 表包含所有供应商信息，每个供应商占一行，具有唯一的标识。此标识称为 <code>主键（primary key)</code> ，可以是供应商 ID 或任何其他唯一值</p><p><code>Products</code> 表只存储产品信息，除了存储供应商 ID（Vendors 表的主键）外，它不存储其他有关供应商的信息。Vendors 表的主键将 Vendors 表与 Products 表关联，利用供应商 ID 能从 Vendors 表中找出相应供应商的详细信息。<br>这样做的好处是：</p><ul><li>供应商信息不重复，不会浪费时间和空间</li><li>如果供应商信息变动，可以只更新 Vendors 表中的单个记录，相关表中的数据不用改动</li><li>由于数据不重复，数据显然是一致的，使得处理数据和生成报报表更简单</li></ul><h2 id="为什么使用联结">为什么使用联结</h2><p>如前所述，将数据分解为多个表能更有效地存储，更方便地处理，并且可伸缩性更好，但这些好处是有代价的</p><p>如果数据存储在多个表中，怎样用一条 <code>SELECT</code> 语句就检索出数据呢？</p><p>答案是使用联结。<mark class="hl-label green">简单说，联结是一种机制，用来在一条语句中关系表，因此称为联结</mark> 。使用特珠的语法，可以联结多个表返一组输出，联结在运行时关联表中正确的行</p><details class="toggle" ><summary class="toggle-button" style="">说明：使用交互式 DBMS 工具</summary><div class="toggle-content"><p>重要的是，要理解联结不是物理实体。换句话说，它在实际的数据库表中并不存在。DBMS 会根据需要建立联结，它在查询执行期间一直存在。许多 DBMS 提供图形界面，用来交互式地定义表关系。这些工具族来有助于维护引用完整性。在使用关系表时，仅在关系列中插入合法数据是非常重要的。回到这里的例子，如果 Products 表中存储了无效的供应商 ID，则相应的产品不可访问，因为它们没有关联到某个供应商。为避免这种情况发生，可指示数据库只允许在 Products 表的供应商 ID列中出现合法值（即出现在 Vendors 表中的供应商)。引用完整性表示 DBMS 强制实施数据完整性规则，这些规则一般由提供了完整界面的 DBMS 管理</p></div></details><h1 id="创建联结">创建联结</h1><p>创建联结非常简单，<mark class="hl-label green">指定要联结的所有表以及它们的方式即可</mark> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Vendors, Products</span><br><span class="line"><span class="keyword">WHERE</span> Vendors.vend_id <span class="operator">=</span> Products.vend_id;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206230905097.png" alt="image-20220623090516030"></p><p>可以看到，<code>SELECT</code> 语句与之前的都不同，它指定的 3 列并不在同一个表中，因此在 <code>FROM</code> 子句中有两个表，并且这两个表用 <code>WHERE</code> 子句联结在一起</p><p><code>WHERE</code> 子句指示 DBMS 将 <code>Vendors</code> 表中的 vend_id 与 <code>Products</code> 表中的 vend_id 匹配起来</p><details class="toggle" ><summary class="toggle-button" style="">警告：完全限定列名</summary><div class="toggle-content"><p>在引用的列可能出现歧义时（例如这个例子），必须使用完全限定列名，不然大多数 DBMS 会返回错误</p></div></details><h2 id="WHERE-子句的重要性">WHERE 子句的重要性</h2><p>使用 <code>WHERE</code> 子句建立联结可能有些奇怪，但是实际上有个很充分的理由：<code>WHERE</code> 子句是用来过滤的</p><p>可以试一下没有这一子句的情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Vendors, Products;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206230920290.png" alt="image-20220623092007222"></p><p>答案是，直接返回了两表的笛卡尔积，将第一个表的每一行都与第二个表的每一行匹配，这也被称为<code>叉联积（cross join） </code>，但在这里明显不是我们想要的</p><p>而 <code>WHERE Vendors.vend_id = Products.vend_id</code> 就是用来过滤出那些恰当的行</p><h2 id="内联积">内联积</h2><p>到目前为止使用的联结称为<code>等值联结（equijoin）</code> ，它基于两个表之间的相等测试，这种联结也被称为<code>内联结（inner join）</code></p><p>其实，可以对这种联结使用稍微不同的语法，明确指定联结的类型，下面的 SELECT 语句返回与前面例子完全相同的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Products <span class="keyword">ON</span> Vendors.vend_id <span class="operator">=</span> Products.vend_id;</span><br></pre></td></tr></table></figure><p>此语句中的 <code>SELECT</code> 与的面的 <code>SELECT</code> 语句相同，但 <code>FROM</code> 子句不同。这里，两个表之间的关系是以 <code>INNER JOIN</code> 指定的部分 <code>FROM</code> 子句。在做用这种语法时，联结系件用特定的 <code>ON</code> 子句而不是 <code>WHERE</code> 子句给出。至于选用哪种语法，请参阅具体的 DBMS 文档。</p><details class="toggle" ><summary class="toggle-button" style="">说明：“正确的”语法</summary><div class="toggle-content"><p>ANST SQL 规范首选 <code>INNER JOIN</code> 语法，之前使用的是简单的等值语法。其实，SQL语言纯正论者是用鄙视的眼光看待简单语法的。这就是说，DBMS 的确支持简单格式和标准格式，我建议你理解这两种<br>格式，具体使用就看你用哪个更顺手了。</p></div></details><h2 id="联结多个表">联结多个表</h2><p>SQL 不限制一条 SELECT 语句中可以联结的表的数目，创建联结的基本规则也相同：首先列出所有表，然后定义表之间的关系</p><p>来回顾上一节的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cust_id</span><br><span class="line">                  <span class="keyword">FROM</span> Orders</span><br><span class="line">                  <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line">                                      <span class="keyword">FROM</span> OrderItems</span><br><span class="line">                                      <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>));</span><br></pre></td></tr></table></figure><p>正如上一节所述，子查询并不是执行复杂 SELECT 操作的最有效方法，下面是使用联结的相同查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers, Orders, OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line">  <span class="keyword">AND</span> OrderItems.order_num <span class="operator">=</span> Orders.order_num</span><br><span class="line">  <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">注意：性能考虑</summary><div class="toggle-content"><p>不要联结不必要的表，联结的表越多，性能下降越厉害</p></div></details><details class="toggle" ><summary class="toggle-button" style="">注意：联结中表的最大数目</summary><div class="toggle-content"><p>虽然 SQL 本身不限制每个联结的约束中表的最大数目，但实际上许多 DBMS 都有限制，请参阅具体的 DBMS 文档以了解其限制</p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：多做实验</summary><div class="toggle-content"><p>可以看到，执行任一给定的 SQL 操作一般不止一种方法。很少有绝对正确或绝对错误的方法。性能可能会受到操作类型、所使用的 DBMS 、表中数据量、是否存在索引或键等条件的影响。因此，有必要试验不同的选择机制，找出最合适具体情况的方法</p></div></details><details class="toggle" ><summary class="toggle-button" style="">说明：联结的列名</summary><div class="toggle-content"><p>在上述所有的例子中，联结的几个列的名字都是一样的，但这实际上不是必须的</p></div></details>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十一）使用子查询</title>
      <link href="/2022/06/22/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%BD%BF%E7%94%A8%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
      <url>/2022/06/22/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%BD%BF%E7%94%A8%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="子查询">子查询</h1><p><code>SELECT</code> 语句是 SQL 的查询，我们迄今为止所看到的所有 <code>SELECT</code> 语句都是简单查询，即从单个数据库表中检索的简单语句</p><p>SQL 还允许创建 <code>子查询（subquery）</code> ，即嵌套在其他查询中的查询（将一个查询的结果作为另一个查询的一部分），理解子查询的最好方法自然是看几个例子</p><h1 id="利用子查询进行过滤">利用子查询进行过滤</h1><p>我们样例的数据表都是关系表，例如订单存储在两个表中每个订单包含订单编号、客户 ID、订单日期，在 <code>orders</code> 表中存储为一行。各订单的物品存储在相关的 <code>Order Items</code> 表中。<code>Orders</code> 表不存储顾客信息，只存储顾客 ID，顾客的实际信息存储在 <code>Customers</code> 表中</p><p>现在，假如你需要列出订购物品 RGAN01 的所有顾客，应该怎样检索？</p><ol><li><p>在 <code>Order Items</code> 表中检索包含 RGAN01 的所有订单编号</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222159977.png" alt="image-20220622215935874"></p></li><li><p>依靠订单编号查找所以的顾客 ID</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222200486.png" alt="image-20220622220048420"></p></li><li><p>去 <code>Customers</code> 表中依靠顾客 ID 返回顾客信息</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222201098.png" alt="image-20220622220121046"></p></li></ol><p>上述每个步骤都可以单独作为一个查询来执行，把一条语句的结果用于另一条语句的 WHERE 子句</p><p>也可以使用子查询来把 3 个查询组合成一条语句</p><hr><p>现在分别使用两种方法来感受一下</p><p>先去 <code>Order Items</code> 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在得到 20007 和 20008 这两个编号之后，再去查 <code>Orders</code> 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="number">20007</span>,<span class="number">20008</span>);</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222245854.png" alt="image-20220622224519778"></p><p>现在，试图结合这两个查询，把第一个查询变为子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line">                    <span class="keyword">FROM</span> OrderItems</span><br><span class="line">                    <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222248025.png" alt="image-20220622224824961"></p><p>成功运行，现在尝试加上最后一层，先尝试硬编码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="number">1000000004</span>,<span class="number">1000000005</span>);</span><br></pre></td></tr></table></figure><p>再尝试结合子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cust_id</span><br><span class="line">                  <span class="keyword">FROM</span> Orders</span><br><span class="line">                  <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line">                                      <span class="keyword">FROM</span> OrderItems</span><br><span class="line">                                      <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222253052.png" alt="image-20220622225331981"></p><p>如你所见，子查询的嵌套数目没有限制，但是实际使用时由于性能的原因，不能嵌套太多的子查询</p><details class="toggle" ><summary class="toggle-button" style="">注意：只能是单列</summary><div class="toggle-content"><p>作为子查询的 SELECT 语句只能查询单个列，企图检索多个列将返回错误</p></div></details><details class="toggle" ><summary class="toggle-button" style="">注意：子查询和性能</summary><div class="toggle-content"><p>对于这个例子，子查询并不是最佳的方法，更好的方法将在下一篇讲到</p></div></details><h1 id="作为计算字段使用子查询">作为计算字段使用子查询</h1><p>使用子查询的另一方法是创建计算字段，例如需要显示 <code>Customers</code> 表中每个顾客的订单总数</p><p>对于这个例子，一共有两步：</p><ol><li><p>从 <code>Customers</code> 表中获得每个用户的 ID</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222322603.png" alt="image-20220622232244539"></p></li><li><p>去 <code>Orders</code> 表中统计数目</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222323794.png" alt="image-20220622232305732"></p></li></ol><p>先编写内层</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> orders</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">1000000001</span>;</span><br></pre></td></tr></table></figure><p>然后把它作为子查询，同时 WHERE 子句需要进行联结操作（这将是下一篇的重点内容）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name,</span><br><span class="line">       cust_state,</span><br><span class="line">       (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> orders</span><br><span class="line">        <span class="keyword">FROM</span> Orders</span><br><span class="line">        <span class="keyword">WHERE</span> Orders.cust_id <span class="operator">=</span> Customers.cust_id ) <span class="keyword">AS</span> orders</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222318482.png" alt="image-20220622231827397"></p><details class="toggle" ><summary class="toggle-button" style="">提示：不止一种解决方法</summary><div class="toggle-content"><p>同样，这个例子中使用子查询也不是最优方案，更好的方案在后面会讲到</p></div></details>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『大学物理1』期末复习</title>
      <link href="/2022/06/22/%E3%80%8E%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E3%80%8F%E5%A4%A7%E4%B8%80%E4%B8%8B%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/06/22/%E3%80%8E%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E3%80%8F%E5%A4%A7%E4%B8%80%E4%B8%8B%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>电通量：场强乘以面积</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206212142516.png" alt="image-20220621214211394"></p><p>安培环路定理：</p><p>空间中有一些电流，它们激发出磁场。对于任意回路，它的环流等于内部净电流乘以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\mu _{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>静电场的高斯定理：</p><p>任意闭合面的电通量等于内部净电荷乘以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><msub><mi>ε</mi><mn>0</mn></msub></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{1}{\varepsilon _{0}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.1574em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206211430250.png" alt="image-20220621143046181"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 大学物理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『Linux』允许使用 SSH 远程连接 root 用户</title>
      <link href="/2022/06/18/%E3%80%8ELinux%E3%80%8F%E5%85%81%E8%AE%B8%E4%BD%BF%E7%94%A8-SSH-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-root-%E7%94%A8%E6%88%B7/"/>
      <url>/2022/06/18/%E3%80%8ELinux%E3%80%8F%E5%85%81%E8%AE%B8%E4%BD%BF%E7%94%A8-SSH-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-root-%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<p>编辑 <code>/etc/ssh/sshd_config</code> 即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>在 <code>#PermitRootLogin prohibit-password</code> 下方加上这一句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206182016925.png" alt="image-20220618201626869"></p><p>保存，然后重启即可</p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『高等数学』P4：幂级数</title>
      <link href="/2022/06/18/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP4%EF%BC%9A%E5%B9%82%E7%BA%A7%E6%95%B0/"/>
      <url>/2022/06/18/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP4%EF%BC%9A%E5%B9%82%E7%BA%A7%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181922687.png" alt="image-20220618192237468"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181930776.png" alt="image-20220618193043647"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181932900.png" alt="image-20220618193200802"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181932423.png" alt="image-20220618193219316"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181934291.png" alt="image-20220618193427111"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181938967.png" alt="image-20220618193854702"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181946930.png" alt="image-20220618194655563"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181951108.png" alt="image-20220618195136981"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181954362.png" alt="image-20220618195429210"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181955083.png" alt="image-20220618195542983"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206182006774.png" alt="image-20220618200657534"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『高等数学』P3：常数项级数</title>
      <link href="/2022/06/18/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP3%EF%BC%9A%E5%B8%B8%E6%95%B0%E9%A1%B9%E7%BA%A7%E6%95%B0/"/>
      <url>/2022/06/18/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP3%EF%BC%9A%E5%B8%B8%E6%95%B0%E9%A1%B9%E7%BA%A7%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181603099.png" alt="image-20220618160339849"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181605541.png" alt="image-20220618160514455"><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181605323.png" alt="image-20220618160528206"><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181606115.png" alt="image-20220618160628982"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181607785.png" alt="image-20220618160706669"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181608379.png" alt="image-20220618160836097"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181611130.png" alt="image-20220618161118835"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181612807.png" alt="image-20220618161243754"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181613857.png" alt="image-20220618161303743"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181614388.png" alt="image-20220618161430235"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181625625.png" alt="image-20220618162541556"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181626794.png" alt="image-20220618162603551"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181631930.png" alt="image-20220618163126835"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181630415.png" alt="image-20220618163038243"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181634347.png" alt="image-20220618163455138"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181635752.png" alt="image-20220618163522669"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181636761.png" alt="image-20220618163641631"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181637025.png" alt="image-20220618163758754"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『高等数学』P2：多元函数求导</title>
      <link href="/2022/06/17/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP2%EF%BC%9A%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC/"/>
      <url>/2022/06/17/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP2%EF%BC%9A%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="复合函数链式求导">复合函数链式求导</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172128316.png" alt="image-20220617212847098"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172130410.png" alt="image-20220617213020341"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172132659.png" alt="image-20220617213225538"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172137437.png" alt="image-20220617213710214"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172150711.png" alt="image-20220617215016468"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172204041.png" alt="image-20220617220432975"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172205372.png" alt="image-20220617220532141"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172210302.png" alt="image-20220617221034108"></p><p>（最后不要忘合并）</p><h1 id="隐函数求导">隐函数求导</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172225865.png" alt="image-20220617222531624"></p><p>（例1略）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172229170.png" alt="image-20220617222954960"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172233808.png" alt="image-20220617223348555"></p><p>（雅各比行列式）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172237398.png" alt="image-20220617223704288"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172238177.png" alt="image-20220617223851013"></p><h1 id="练习题">练习题</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181011595.png" alt="image-20220618101106457"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181013084.png" alt="image-20220618101322992"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181017110.png" alt="image-20220618101710931"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181025842.png" alt="image-20220618102558553"></p><p>我圈出来的地方应该是写错了的，应该是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>z</mi><mn>2</mn></msup><mo>−</mo><mi>x</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">z^{2}-xy</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『高等数学』P1：空间几何、多元函数极限、偏导</title>
      <link href="/2022/06/16/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP1%EF%BC%9A%E7%A9%BA%E9%97%B4%E5%87%A0%E4%BD%95%E3%80%81%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90%E3%80%81%E5%81%8F%E5%AF%BC/"/>
      <url>/2022/06/16/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP1%EF%BC%9A%E7%A9%BA%E9%97%B4%E5%87%A0%E4%BD%95%E3%80%81%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90%E3%80%81%E5%81%8F%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="平面与空间直线">平面与空间直线</h1><h2 id="平面">平面</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161557206.png" alt="image-20220616155711049"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161558630.png" alt="image-20220616155803544"></p><h2 id="直线">直线</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161559836.png" alt="image-20220616155933728"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161601775.png" alt="image-20220616160100713"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161603113.png" alt="image-20220616160259870"></p><p>表示直线的时候 0 是可以在分母上的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161606515.png" alt="image-20220616160618391"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161607942.png" alt="image-20220616160702824"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161608858.png" alt="image-20220616160826608"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161611564.png" alt="image-20220616161115439"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161616560.png" alt="image-20220616161649451"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161617074.png" alt="image-20220616161732013"></p><h1 id="二元函数的极限">二元函数的极限</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161620080.png" alt="image-20220616162024018"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161625968.png" alt="image-20220616162554815"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161626650.png" alt="image-20220616162623560"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161627318.png" alt="image-20220616162753247"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161628112.png" alt="image-20220616162810056"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172243659.png" alt="image-20220617224314516"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161628002.png" alt="image-20220616162845904"></p><h1 id="偏导数">偏导数</h1><p>（略）</p><h1 id="全微分">全微分</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161641187.png" alt="image-20220616164125070"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161647478.png" alt="image-20220616164724416"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161642160.png" alt="image-20220616164224065"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161643616.png" alt="image-20220616164328506"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161644064.png" alt="image-20220616164425977"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161646470.png" alt="image-20220616164626376"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161646541.png" alt="image-20220616164650496"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161648220.png" alt="image-20220616164807119"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161649231.png" alt="image-20220616164923091"></p><h1 id="练习题">练习题</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172118208.png" alt="image-20220617211831146"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172119289.png" alt="image-20220617211909119"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172119738.png" alt="image-20220617211956663"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172122028.png" alt="image-20220617212258930"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『随笔』618桌面改造计划</title>
      <link href="/2022/06/14/%E3%80%8E%E9%9A%8F%E7%AC%94%E3%80%8F618%E6%A1%8C%E9%9D%A2%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/"/>
      <url>/2022/06/14/%E3%80%8E%E9%9A%8F%E7%AC%94%E3%80%8F618%E6%A1%8C%E9%9D%A2%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="前情提要">前情提要</h1><p>鄙人自开学以来桌面一直是没有放显示器的，毕竟从小到大一直用小屏的笔记本电脑打游戏，上了大学也没有什么感觉。我高考后买的一台屏幕 13 寸的 ROG 幻13，可以 360° 旋转，还支持触控，加上一支微软的 Surface Pen，上课记笔记就变得十分方便，也就一直用到了现在，直到——</p><p>直到我参加了字节跳动的青训营（笑）</p><p>青训营最后有一个小组项目，然后我发现一个小屏就不够我看的了，因为要一边写代码，一边看文档，一边还要关注群里面的最新消息，这是我第一次这么急切地想要一个大屏幕，最好能来个双屏</p><p>并且，我平时桌面是很乱的，一堆乱七八糟的东西，还有一堆充电线，真的看着都影响工作效率，必须要有行之有效的解决方法</p><p>并且还有看书的问题，如果我想看书的话，必须把电脑往里面推，屏幕就隔得很远，不容易看清。而且如果以后要放一个大屏的话，支架肯定会占据很大一块桌面空间，纸质资料很多的话可能顶着支架，很烦（杭电的桌子不大，经我测量约为 100*50*40，长宽高）</p><p>所以，这次改造一共要解决三个痛点：</p><ul><li>屏幕不够大</li><li>桌面太乱</li><li>看书体验不够舒适</li></ul><p>那么，我最后有没有解决这些问题呢？</p><hr><h1 id="成品演示">成品演示</h1><blockquote><p>这应该是我目前能想到的最优解了，那个键盘其实还可以往里推，还是有点深度的</p></blockquote><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206141922073.jpg" alt="67a9e11604d71d8c45b4f7aa91502d9"></p><p>看一下全景</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202207121206682.jpg" alt="acbe36eba8736da83955ea80f54968a"></p><p>其实后面也是有一堆乱七八糟的线的，只是屏幕挡住了，眼不见心不烦</p><p>可以迁一个 USB Hub 出来放桌面上，但其实平时没有很多拔插的需求</p><hr><h1 id="分步讲解">分步讲解</h1><h2 id="买台子">买台子</h2><p>首先，综合各方面考虑，我必须为我的屏幕买一个台子</p><p>这样就不会因为它的支架而困扰，台子下面可以放很多东西</p><p>而且不能太高，杭电的桌面高度很低，上面有个大书架</p><p>经过我的一番寻找，下单了一件 8mm 高的显示器增高台</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142011931.png" alt="image-20220614201141806"></p><hr><h2 id="买屏幕">买屏幕</h2><p>屏幕自然是要买的，在估算高度后，我发现显示器的合理大小是 24 寸，小屏幕不够大，大屏幕放不下</p><p>之后在 B 站逛了一圈后，我选择了创维的F24G3。第一，它价格相对亲民，第二，虽然只有1080p，但它的刷新率够高，打战雷的时候不会卡就行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142005667.png" alt="+"></p><p>（现在看的时候发现比我买的便宜了30块，简直血亏）</p><hr><h2 id="重新买台子-买屏幕支架">重新买台子+买屏幕支架</h2><p>因为是京东自营的，快递极快无比，显示器早上下单下午就到，晚上我拿了快递准备装的时候，却发现了一个严重的问题</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142022915.png" alt="img"></p><p>无奈，只能重新开始思考，下一步需要怎么办</p><p>舍友建议我退货，但是我肯定是要想想能不能变通一下的</p><p>最终，我选择了买一个可调节高度的支架，加一个更矮的台子（5 mm）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142031001.png" alt="image-20220614203133839"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142032938.png" alt="image-20220614203202795"></p><p>这一次，在我精密的细算下，应该是不会再出什么幺蛾子了</p><p>而之前的那个台子呢？我选择把它放在上面的书柜，这样桌面上的乱七八糟的东西都可以放在上面</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142040988.png" alt="img"></p><hr><h2 id="买屏幕挂灯">买屏幕挂灯</h2><p>下一步，为了替代之前的台灯，屏幕挂灯是肯定需要的</p><p>了解了一下主流品牌的价格，明基的 1k+，直接贵死，唯一的选择就是小米（现在的价格比我买的时候贵了20块）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142044316.png" alt="image-20220614204424174"></p><p>本来想拍个视频演示一下的，无奈手机镜头太差劲，拍不好，结论就是非常好用就是了，十分推荐</p><hr><h2 id="买键盘">买键盘</h2><p>键盘根据初中同学的推荐自己组装了一个机械的，为了舍友着想入了静音轴</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142104486.png" alt="image-20220614210450344"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142105628.png" alt="image-20220614210557487"></p><p>在同学的帮助下手忙脚乱地装好了，正好装废两个轴（</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142107183.png" alt="img"></p><p>对这把键盘的评价我只能说一般般，可能是因为我之前一直用的是笔记本的薄膜键盘，刚上手机械有些不适应，而且有些键位换了</p><hr><h2 id="买桌下纸巾盒">买桌下纸巾盒</h2><p>这个是在 B 站上学到的，感觉还是挺方便的，便宜东西，随便买</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142110689.png" alt="image-20220614211058545"></p><hr><h1 id="购买清单">购买清单</h1><p>最后，来看看我这次一共花了多少钱</p><table><thead><tr><th>产品</th><th>价格</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://item.jd.com/100021861365.html#none">创维 F24G3</a></td><td>￥799（12期免息）</td><td>23.8寸，1080p，144赫兹</td></tr><tr><td><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.200f2e8dFwNL0f&amp;id=667573291250&amp;_u=82027lusvpda35">桌面美学黑胡桃16077379木显示器增高台架办公颈室式电护屏幕抬高</a></td><td>¥11.91</td><td>颜色分类：40cm长单层白色材料，40*20*8（长宽高）</td></tr><tr><td><a href="https://detail.tmall.com/item.htm?id=577100722027&amp;spm=a1z09.2.0.0.200f2e8dFwNL0f&amp;_u=82027lusvpdea1">实木电脑显示器台式屏幕增高架办公室垫高底座桌面键盘收纳置物架</a></td><td>￥29.90</td><td>颜色分类：#款式B1（单层），54.9*19.9*5.4（长宽高）</td></tr><tr><td><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.58de2e8dwAhcGl&amp;id=520388310322&amp;_u=e2027lusvpf2be">电脑显示器底座底座液晶升降触摸屏</a></td><td>￥45.00</td><td>颜色分类：12-27寸高度调节</td></tr><tr><td><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.58de2e8dwAhcGl&amp;id=652102082248&amp;_u=e2027lusvpda02">CIY Tester68试轴器TES68机械轴热插拔轴座双模客制化套件套装</a></td><td>￥96.00</td><td>轴体：无轴体套件颜色分类：白色套餐类型：套餐一</td></tr><tr><td><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.58de2e8dwAhcGl&amp;id=669730759677&amp;_u=e2027lusvp198a">高特静音水蜜桃轴青柠轴水晶轴海洋轴熊猫轴防尘银轴客制化DIY轴</a></td><td>￥70.00</td><td>轴体：无颜色分类：高特静音水蜜桃轴70个[送拔轴器]套餐类型：官方标</td></tr><tr><td><a href="https://item.jd.com/10051630613784.html">米家 小米显示器挂灯 台灯 金属灯体 磁吸旋转灯寝室书桌阅读灯电脑挂灯 米家显示器挂</a></td><td>¥179.00（3期免息）</td><td>一代的，非二代</td></tr><tr><td><a href="https://item.taobao.com/item.htm?id=672212398395&amp;_u=e2027lusvp02e0">纸巾盒壁挂式抽纸盒放洗脸巾挂壁收纳厕所挂墙厨房倒挂免打孔桌下</a></td><td>￥4.30</td><td>颜色分类：壁挂抽纸盒&amp;mdash：白色（不一定要放桌底，我是粘在侧面）</td></tr><tr><td><a href="https://item.taobao.com/item.htm?id=613437552544&amp;_u=e2027lusvp3cd3">同款万次纳米胶带无痕魔力加厚透明胶高粘度双面不伤透明款</a></td><td>￥2.90</td><td>颜色分类：厚1mm宽2cm长1米</td></tr><tr><td><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.58de2e8dwAhcGl&amp;id=661754512152&amp;_u=e2027lusvpc220">治迅Type-C公对母延长线弯头90度充电数据线转换器USB3.1Gen2超短转接头母口PD快充100W母头扩展坞接</a></td><td>￥24.00</td><td>长度：1m颜色分类：弯头尼龙线丨100W功率丨20V5A丨E-maker芯片丨USB3.1Gen2丨10Gbps传输丨4k视频</td></tr></tbody></table><ul><li>总价：￥1262.01，但是大头其实分了很多期，经济压力也不算太大，个人来说比较满意</li></ul><hr><h1 id="Q-A">Q&amp;A</h1><p>装好之后发了一篇朋友圈，有些同学来问我一些细节问题，在此也记录一下</p><h2 id="Q1：你的耳机的充电器是什么">Q1：你的耳机的充电器是什么</h2><details class="toggle" ><summary class="toggle-button" style="">Answer</summary><div class="toggle-content"><p>那个只是个壳子，自己走线，是之前买的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142052358.jpg" alt="4d9308b1699a8fc6b9d8885dbbbf642"></p><p>链接：<a href="https://m.tb.cn/h.fuazZp1?tk=ls4Q2NrmQdl">https://m.tb.cn/h.fuazZp1?tk=ls4Q2NrmQdl</a></p></div></details><h2 id="Q2：磁吸灯你是怎么装的">Q2：磁吸灯你是怎么装的</h2><details class="toggle" ><summary class="toggle-button" style="">Answer</summary><div class="toggle-content"><p>这是一个侧面图</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142055476.jpg" alt="96c78d58456901657e9f271dabcf172"></p><p>（后面是一个金属吊篮，里面有一个排插还有一堆线）</p></div></details><h2 id="Q3：你这样夹着最上面是不是会挡住一点？">Q3：你这样夹着最上面是不是会挡住一点？</h2><details class="toggle" ><summary class="toggle-button" style="">Answer</summary><div class="toggle-content"><p>挡了一丁点，但我觉得没什么感觉</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142059143.jpg" alt="2a46be3242f1ea935cd673b82d35900"></p></div></details>]]></content>
      
      
      <categories>
          
          <category> 随笔与总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 618好物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』结营感想（待后续）</title>
      <link href="/2022/06/12/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8F%E7%BB%93%E8%90%A5%E6%84%9F%E6%83%B3/"/>
      <url>/2022/06/12/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8F%E7%BB%93%E8%90%A5%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">福利</summary><div class="toggle-content"><p>鄙人平时上课的时候使用 IDM 把视频爬了下来，各位可以使用下面的链接访问！</p><blockquote><p>阿里云：<a href="https://www.aliyundrive.com/s/xW4crbwj2f2">https://www.aliyundrive.com/s/xW4crbwj2f2</a> （被反馈貌似无法下载）<br>提取码: 5m2g</p><p>百度云：<a href="https://pan.baidu.com/s/1nAhcW__vhYPQfOGYXUO-Xg">https://pan.baidu.com/s/1nAhcW__vhYPQfOGYXUO-Xg</a><br>提取码：89nn</p></blockquote></div></details><hr><p>呼！为期一个多月的课程已经结束了，我们的小组项目也进入了收尾阶段，是时候来写一篇总结了</p><h1 id="课程方面">课程方面</h1><h2 id="总体的课程安排">总体的课程安排</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206121029032.png" alt="image-20220612102953823"></p><p>一个月的时间，从 Golang 的入门开始，到网络，到架构，到存储，真的可以说是收获颇丰</p><p>从5月7日到5月17日，我们学习了Go 语言原理与实践，最后的那一天还做了个小项目</p><p>从5月17日到5月24日，我们学习的是网络与部署的相关内容</p><p>25日上了算法课，讲了一种老师的新排序算法，可以取各种主流算法的长处，并被 Golang 的新版本采用</p><p>从27日到29日，连上三节课，讲的是框架方面的内容，而且很多东西都是学校里学不到的，比如微服务之类的，学校肯定不会给你教这个</p><p>接着，从5月31日到6月2日，开始讲中间件，消息队列的两种主流处理方式的的确确吸引到了我</p><p>最后一部分便是存储与数据库了，从最简单的单机存储，一种讲到分布式对象存储，算是开眼了，了解了很多此前闻所未闻的东西</p><h2 id="我的感受">我的感受</h2><p>总的来说，这门课我能给满分，毕竟讲得是真的好，下面是几个本次课程给我最大的几个点</p><h3 id="讲师资历深厚">讲师资历深厚</h3><p>来给我们上课的老师都是字节内部工作了很久的老员工，比如给我们讲对象存储的老师介绍自己说是18年来字节的，是对象存储的早期成员，一路见证了字节对象存储容量的持续爆炸和架构的持续演进。再例如给我们讲 GORM 的老师张⾦柱，他本人就是 GORM 的作者，还有谁能比作者还有资格向你介绍 GORM ？再比如说曾负责阿里巴巴红包的王老师，累计发放数十亿现金，这个简历简直不要太霸气（</p><h3 id="老师们都很有耐心">老师们都很有耐心</h3><p>老师上课非常有耐心回答同学的问题，每节课都有 QA 环节，而且对于基础班还有 QA 文档可以在上面提问，不管是有关课程的还是有关项目的</p><h3 id="纯干货，传授的都是前沿知识">纯干货，传授的都是前沿知识</h3><p>我记得开营班会的时候说课程讲的都会是干货，不会去复述网上的博客，拿着10年前的解决方案给大家讲。课上的确也是这样的，介绍的都是业界现在最领先、最优解的做法。而且与实际生产相结合，我在课上能看到字节内部的后端同学的日常都是怎样的，而在讲OSS的时候，直接给我们看字节内部的对象存储平台如何使用，非常的接地气</p><h1 id="项目方面">项目方面</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206121138668.png" alt="image-20220612113808554"></p><p>本次有两个项目可选，分别是抖音和搜索引擎，对于我们这种菜鸡自然要选更简单的抖音项目了</p><p>这次项目中我负责了三个接口，和杭助后端的成员一起开发，效率也很高，使用 Apifox 来更新项目情况，项目进度一目了然</p><p>在项目中锻炼了我的 git 技能，此前一直不太熟练，这次算是熟练了</p><h1 id="证书-纪念品">证书&amp;纪念品</h1><p>请见 <a href="https://www.nickxu.top/2022/09/10/%E3%80%8E%E9%9A%8F%E7%AC%94%E3%80%8F%E5%86%99%E5%9C%A8%E6%96%B0%E5%AD%A6%E5%B9%B4%E4%BC%8A%E5%A7%8B/#%E9%9D%92%E8%AE%AD%E8%90%A5%E9%A1%BA%E5%88%A9%E7%BB%93%E8%90%A5">『随笔』写在新学年伊始#青训营顺利结营</a></p><h1 id="个人总结">个人总结</h1><ul><li>提升了业务能力，还锻炼了团队协作的能力</li><li>了解了很多基础框架和前沿知识，不少东西都是学校不会教的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Golang』import 中下划线，点，别名的作用</title>
      <link href="/2022/06/11/%E3%80%8EGolang%E3%80%8Fimport-%E4%B8%AD%E4%B8%8B%E5%88%92%E7%BA%BF%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
      <url>/2022/06/11/%E3%80%8EGolang%E3%80%8Fimport-%E4%B8%AD%E4%B8%8B%E5%88%92%E7%BA%BF%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="下划线">下划线</h1><p>众所周知，在 Golang 中如果 import 了一个包，会自动运行它的 init() 函数，并且如果你不在你的代码中使用该包，就无法编译</p><p>而如果你只需要它的 init() 函数，不需要使用它内部其他组件，就可以加一个下划线</p><p>例如在使用 GORM 时，不仅要引入 GORM 的包，还要引入数据库驱动</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  _ <span class="string">&quot;example.com/my_mysql_driver&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="点">点</h1><p>加点后，在调用时可以省略包名前缀</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="别名">别名</h1><p>别名就更简单了，就是取别名的意思</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> f <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f.Println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『面试八股文』1：如何在40亿个整数中寻找一个数字</title>
      <link href="/2022/06/06/%E3%80%8E%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87%E3%80%8F1%EF%BC%9A%E5%A6%82%E4%BD%95%E5%9C%A840%E4%BA%BF%E4%B8%AA%E6%95%B4%E6%95%B0%E4%B8%AD%E5%AF%BB%E6%89%BE%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97/"/>
      <url>/2022/06/06/%E3%80%8E%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87%E3%80%8F1%EF%BC%9A%E5%A6%82%E4%BD%95%E5%9C%A840%E4%BA%BF%E4%B8%AA%E6%95%B4%E6%95%B0%E4%B8%AD%E5%AF%BB%E6%89%BE%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>前情提要：</p><ul><li>本篇来源于B站视频：<a href="https://www.bilibili.com/video/BV1aP4y1P7PH">漫画面试系列-如何在40亿个整数中寻找一个数字</a></li><li>整数是 32 位的 int</li><li>机器只有 2G 内存</li><li>可以使用很多机器</li></ul><hr><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206062250505.png" alt="image-20220606225015382"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206062250549.png" alt="image-20220606225030411"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206062250467.png" alt="image-20220606225050357"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206062251582.png" alt="image-20220606225106441"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206062251705.png" alt="image-20220606225126587"></p>]]></content>
      
      
      <categories>
          
          <category> 面试八股文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『大学物理』叉乘的计算</title>
      <link href="/2022/06/05/%E3%80%8E%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E3%80%8F%E5%8F%89%E4%B9%98%E7%9A%84%E8%AE%A1%E7%AE%97/"/>
      <url>/2022/06/05/%E3%80%8E%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E3%80%8F%E5%8F%89%E4%B9%98%E7%9A%84%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>感谢 B 站视频：<a href="https://www.bilibili.com/video/BV1S741157cb">叉乘/向量积的右手螺旋法则</a></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>a</mi><mo stretchy="true">→</mo></mover><mo>×</mo><mover accent="true"><mi>b</mi><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\overrightarrow{a}\times \overrightarrow{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0359em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2164em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span></span></span></span></span></p><h1 id="方向判定">方向判定</h1><p>伸直右手，四指向前，大拇指垂直，将四指指向 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\overrightarrow{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9526em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span></span></span></span> 的方向，然后向 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>b</mi><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\overrightarrow{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2164em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span></span></span></span> 的方向弯曲，大拇指的方向就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo stretchy="true">→</mo></mover><mo>×</mo><mover accent="true"><mi>b</mi><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\overrightarrow{a}\times \overrightarrow{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0359em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2164em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span></span></span></span> 的方向</p><h1 id="大小判定">大小判定</h1><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">∣</mo><mover accent="true"><mi>a</mi><mo stretchy="true">→</mo></mover><mo>×</mo><mover accent="true"><mi>b</mi><mo stretchy="true">→</mo></mover><mo fence="true">∣</mo></mrow><mo>=</mo><mrow><mo fence="true">∣</mo><mover accent="true"><mi>a</mi><mo stretchy="true">→</mo></mover><mo fence="true">∣</mo></mrow><mo>⋅</mo><mrow><mo fence="true">∣</mo><mover accent="true"><mi>b</mi><mo stretchy="true">→</mo></mover><mo fence="true">∣</mo></mrow><mo>⋅</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow><annotation encoding="application/x-tex">\left| \overrightarrow{a}\times \overrightarrow{b}\right| =\left| \overrightarrow{a}\right| \cdot \left| \overrightarrow{b}\right| \cdot \sin \theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.8665em;vertical-align:-0.65em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span style="top:-3.15em;"><span class="pstrut" style="height:3.8em;"></span><span style="width:0.333em;height:1.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.333em' height='1.800em' viewBox='0 0 333 1800'><path d='M145 15 v585 v600 v585 c2.667,10,9.667,15,21,15c10,0,16.667,-5,20,-15 v-585 v-600 v-585 c-2.667,-10,-9.667,-15,-21,-15c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v600 v585 h43z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.65em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span style="top:-3.15em;"><span class="pstrut" style="height:3.8em;"></span><span style="width:0.333em;height:1.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.333em' height='1.800em' viewBox='0 0 333 1800'><path d='M145 15 v585 v600 v585 c2.667,10,9.667,15,21,15c10,0,16.667,-5,20,-15 v-585 v-600 v-585 c-2.667,-10,-9.667,-15,-21,-15c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v600 v585 h43z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.65em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.8em;vertical-align:-0.65em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span style="top:-3.15em;"><span class="pstrut" style="height:3.8em;"></span><span style="width:0.333em;height:1.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.333em' height='1.800em' viewBox='0 0 333 1800'><path d='M145 15 v585 v600 v585 c2.667,10,9.667,15,21,15c10,0,16.667,-5,20,-15 v-585 v-600 v-585 c-2.667,-10,-9.667,-15,-21,-15c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v600 v585 h43z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.65em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span style="top:-3.15em;"><span class="pstrut" style="height:3.8em;"></span><span style="width:0.333em;height:1.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.333em' height='1.800em' viewBox='0 0 333 1800'><path d='M145 15 v585 v600 v585 c2.667,10,9.667,15,21,15c10,0,16.667,-5,20,-15 v-585 v-600 v-585 c-2.667,-10,-9.667,-15,-21,-15c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v600 v585 h43z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.65em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.8665em;vertical-align:-0.65em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span style="top:-3.15em;"><span class="pstrut" style="height:3.8em;"></span><span style="width:0.333em;height:1.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.333em' height='1.800em' viewBox='0 0 333 1800'><path d='M145 15 v585 v600 v585 c2.667,10,9.667,15,21,15c10,0,16.667,-5,20,-15 v-585 v-600 v-585 c-2.667,-10,-9.667,-15,-21,-15c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v600 v585 h43z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.65em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span style="top:-3.15em;"><span class="pstrut" style="height:3.8em;"></span><span style="width:0.333em;height:1.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.333em' height='1.800em' viewBox='0 0 333 1800'><path d='M145 15 v585 v600 v585 c2.667,10,9.667,15,21,15c10,0,16.667,-5,20,-15 v-585 v-600 v-585 c-2.667,-10,-9.667,-15,-21,-15c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v600 v585 h43z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.65em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></span></p><h1 id="使用行列式计算">使用行列式计算</h1><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo stretchy="true">→</mo></mover><mo>×</mo><mover accent="true"><mi>b</mi><mo stretchy="true">→</mo></mover><mo>=</mo><mrow><mo fence="true">∣</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>i</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>j</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>k</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>z</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>z</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">\overrightarrow{a}\times \overrightarrow{b}=\begin{vmatrix}i &amp; j &amp; k \\a_{x} &amp; a_{y} &amp; a_{z} \\b_{x} &amp; b_{y} &amp; b_{z}\end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0359em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2164em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.333em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.333em' height='3.600em' viewBox='0 0 333 3600'><path d='M145 15 v585 v2400 v585 c2.667,10,9.667,15,21,15c10,0,16.667,-5,20,-15 v-585 v-2400 v-585 c-2.667,-10,-9.667,-15,-21,-15c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v2400 v585 h43z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.333em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.333em' height='3.600em' viewBox='0 0 333 3600'><path d='M145 15 v585 v2400 v585 c2.667,10,9.667,15,21,15c10,0,16.667,-5,20,-15 v-585 v-2400 v-585 c-2.667,-10,-9.667,-15,-21,-15c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v2400 v585 h43z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 大学物理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L20：Tos 对象存储实战</title>
      <link href="/2022/06/05/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL20%EF%BC%9ATos-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%AE%9E%E6%88%98/"/>
      <url>/2022/06/05/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL20%EF%BC%9ATos-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="抖音背后的存储">抖音背后的存储</h1><h2 id="重任来袭">重任来袭</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051005774.png" alt="image-20220605100518664"></p><h2 id="短视频架构初探">短视频架构初探</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051005124.png" alt="image-20220605100539031"></p><h2 id="存储需求">存储需求</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051006772.png" alt="image-20220605100625664"></p><h2 id="存储需求量细化">存储需求量细化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051007446.png" alt="image-20220605100737345"></p><h2 id="寻找天选存储">寻找天选存储</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051008451.png" alt="image-20220605100831365"></p><h1 id="为什么对象存储">为什么对象存储</h1><h2 id="前情回顾">前情回顾</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051009240.png" alt="image-20220605100942155"></p><h2 id="存储对比">存储对比</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051011486.png" alt="image-20220605101104399"></p><h2 id="分布式存储选型">分布式存储选型</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051012585.png" alt="image-20220605101213487"></p><h2 id="易用性">易用性</h2><h3 id="接口对比">接口对比</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051015226.png" alt="image-20220605101508130"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051016194.png" alt="image-20220605101612042"></p><p>（听上去好像真的很方便）</p><h2 id="适应环境">适应环境</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051019536.png" alt="image-20220605101915455"></p><h1 id="对象存储怎么用">对象存储怎么用</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051019597.png" alt="image-20220605101947519"></p><h2 id="申请-Bucket">申请 Bucket</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051021340.png" alt="image-20220605102146263"></p><p>（链接是一个视频，实操如何在字节内部创建 Bucket）</p><h2 id="Restful-接口">Restful 接口</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051023208.png" alt="image-20220605102302103"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051024148.png" alt="image-20220605102444063"></p><p>（也是一个内部视频，你可用看见这个视频本身就是放在 TOS 上的）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051026776.png" alt="image-20220605102608575"></p><h2 id="MultiUpload-接口">MultiUpload 接口</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051026321.png" alt="image-20220605102631210"></p><h2 id="Listprefix-接口">Listprefix 接口</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051027857.png" alt="image-20220605102759746"></p><h1 id="TOS字节内部实践">TOS字节内部实践</h1><p>（这是讲师18年来到字节后积累的经验）</p><h2 id="开发一个对象存储">开发一个对象存储</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051030882.png" alt="image-20220605103001784"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051031308.png" alt="image-20220605103132211"></p><h2 id="可扩展性之-Partition">可扩展性之 Partition</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051033131.png" alt="image-20220605103348032"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051034085.png" alt="image-20220605103417975"></p><h2 id="持久度之-Replication">持久度之 Replication</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051036547.png" alt="image-20220605103621456"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051037307.png" alt="image-20220605103727202"></p><h2 id="成本之-EC">成本之 EC</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051038697.png" alt="image-20220605103852598"></p><p>（任何一块坏了，可以从其他块推导出这一块的内容）</p><h2 id="成本之温热转换">成本之温热转换</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051040019.png" alt="image-20220605104031936"></p><h2 id="架构细化">架构细化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051040965.png" alt="image-20220605104058824"></p><h2 id="存储需求量细化-2">存储需求量细化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051042887.png" alt="image-20220605104222802"></p><h2 id="高可用之拆分">高可用之拆分</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051043706.png" alt="image-20220605104329597"></p><h2 id="高可用之粤核酸的启发">高可用之粤核酸的启发</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051044219.png" alt="image-20220605104416125"></p><h2 id="高可用之镜像灾备">高可用之镜像灾备</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051044046.png" alt="image-20220605104455961"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051045460.png" alt="image-20220605104515372"></p><h2 id="未来展望">未来展望</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051045513.png" alt="image-20220605104535427"></p><h1 id="课后总结">课后总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051047928.png" alt="image-20220605104704842"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051048702.png" alt="image-20220605104815621"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L19：深入理解 RDBMS</title>
      <link href="/2022/06/04/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL19%EF%BC%9A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-RDBMS/"/>
      <url>/2022/06/04/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL19%EF%BC%9A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-RDBMS/</url>
      
        <content type="html"><![CDATA[<h1 id="经典案例">经典案例</h1><h2 id="从一场红包雨说起">从一场红包雨说起</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041013608.png" alt="image-20220604101302483"></p><h2 id="RDBMS-事务-ACID">RDBMS 事务 ACID</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041014766.png" alt="image-20220604101434666"></p><h2 id="红包雨-与-ACID">红包雨 与 ACID</h2><h3 id="原子性">原子性</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041016581.png" alt="image-20220604101615515"></p><h3 id="一致性">一致性</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041017763.png" alt="image-20220604101705696"></p><h3 id="隔离性">隔离性</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041018519.png" alt="image-20220604101853441"></p><h3 id="持久性">持久性</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041019384.png" alt="image-20220604101958299"></p><h2 id="红包雨-与-高并发">红包雨 与 高并发</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041021593.png" alt="image-20220604102123522"></p><h2 id="红包雨-与-高可靠">红包雨 与 高可靠</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041022953.png" alt="image-20220604102254872"></p><h1 id="发展历史">发展历史</h1><h2 id="前DBMS时代">前DBMS时代</h2><h3 id="人工管理">人工管理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041025656.png" alt="image-20220604102529481"></p><h3 id="文件系统">文件系统</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041026108.png" alt="image-20220604102629994"></p><p>（打开记事本记录）</p><h2 id="DMBS时代">DMBS时代</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041027278.png" alt="image-20220604102756210"></p><h3 id="网状模型">网状模型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041030929.png" alt="image-20220604103015828"></p><h3 id="层次模型">层次模型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041031272.png" alt="image-20220604103159182"></p><h3 id="关系模型">关系模型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041034233.png" alt="image-20220604103428112"></p><h2 id="DBMS数据模型">DBMS数据模型</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041035307.png" alt="image-20220604103506234"></p><h2 id="SQL语言">SQL语言</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041041054.png" alt="image-20220604104124972"></p><h2 id="历史回顾">历史回顾</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041044549.png" alt="image-20220604104428469"></p><h1 id="关键技术">关键技术</h1><h2 id="一条SQL的一生">一条SQL的一生</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041048790.png" alt="image-20220604104836717"></p><h2 id="SQL引擎">SQL引擎</h2><h3 id="Parser">Parser</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041051385.png" alt="image-20220604105105304"></p><h3 id="Optimizer">Optimizer</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041054098.png" alt="image-20220604105402009"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041055621.png" alt="image-20220604105538517"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041058106.png" alt="image-20220604105815022"></p><h3 id="Executor">Executor</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041102338.png" alt="image-20220604110219268"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041104488.png" alt="image-20220604110458405"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041105833.png" alt="image-20220604110554754"></p><h2 id="存储引擎">存储引擎</h2><h3 id="InnoDB">InnoDB</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041108751.png" alt="image-20220604110850659"></p><h3 id="Buffer-Pool">Buffer Pool</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041109465.png" alt="image-20220604110926376"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041111051.png" alt="image-20220604111114979"></p><h3 id="Page">Page</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041113210.png" alt="image-20220604111332140"></p><h3 id="B-Tree">B+ Tree</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041114060.png" alt="image-20220604111422982"></p><p>B+树是真的太妙了</p><h2 id="事务引擎">事务引擎</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041114345.png" alt="image-20220604111447278"></p><h3 id="Atomicity-与-Undo-Log">Atomicity 与 Undo Log</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041116155.png" alt="image-20220604111621071"></p><h3 id="Isolation-与-锁">Isolation 与 锁</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041117586.png" alt="image-20220604111738502"></p><h3 id="Isolation-与-MVCC">Isolation 与 MVCC</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041118679.png" alt="image-20220604111834607"></p><h3 id="Durability-与-Redo-Log">Durability 与 Redo Log</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041120236.png" alt="image-20220604112035159"></p><h1 id="企业实践">企业实践</h1><h2 id="红包雨挑战">红包雨挑战</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041122515.png" alt="image-20220604112249446"></p><h2 id="大流量">大流量</h2><h3 id="Sharding">Sharding</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041124009.png" alt="image-20220604112414932"></p><h2 id="流量突增">流量突增</h2><h3 id="扩容">扩容</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041127173.png" alt="image-20220604112729090"></p><h3 id="代理连接池">代理连接池</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041128367.png" alt="image-20220604112836297"></p><h2 id="高可用-高可靠">高可用&amp;高可靠</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041129357.png" alt="image-20220604112953267"></p><h3 id="3AZ高可用">3AZ高可用</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041131245.png" alt="image-20220604113104168"></p><h3 id="HA管理">HA管理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041131311.png" alt="image-20220604113149231"></p><h1 id="课程总结">课程总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041132108.png" alt="image-20220604113201034"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L18：带你认识存储 &amp; 数据库</title>
      <link href="/2022/06/03/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL18%EF%BC%9A%E5%B8%A6%E4%BD%A0%E8%AE%A4%E8%AF%86%E5%AD%98%E5%82%A8-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/06/03/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL18%EF%BC%9A%E5%B8%A6%E4%BD%A0%E8%AE%A4%E8%AF%86%E5%AD%98%E5%82%A8-%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="经典案例">经典案例</h1><h2 id="数据的产生">数据的产生</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031600504.png" alt="image-20220603160032422"></p><h2 id="数据的流动">数据的流动</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031602755.png" alt="image-20220603160231674"></p><h2 id="数据的持久化">数据的持久化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031604733.png" alt="image-20220603160416665"></p><h2 id="潜在的问题">潜在的问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031605581.png" alt="image-20220603160509513"></p><h1 id="存储-数据库简介">存储 &amp; 数据库简介</h1><h2 id="存储系统">存储系统</h2><h3 id="系统概览">系统概览</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031608150.png" alt="image-20220603160831080"></p><h3 id="系统特点">系统特点</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031609990.png" alt="image-20220603160942927"></p><ul><li>简单：业务逻辑</li><li>复杂：错误处理</li></ul><h3 id="存储器层级结构">存储器层级结构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031613962.png" alt="image-20220603161316888"></p><p>越往上，容量越小，性能越好，越贵</p><h3 id="数据怎么从应用到存储介质">数据怎么从应用到存储介质</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031613484.png" alt="image-20220603161352410"></p><h3 id="RAID-技术">RAID 技术</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031619053.png" alt="image-20220603161934973"></p><h2 id="数据库">数据库</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031620221.png" alt="image-20220603162053150"></p><h3 id="概览">概览</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031622181.png" alt="image-20220603162245107"></p><ul><li>DSL：领域专用语言（人说人话，狗说狗话）</li></ul><h3 id="关系型数据库特点">关系型数据库特点</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031624206.png" alt="image-20220603162402135"></p><h3 id="非关系型数据库特点">非关系型数据库特点</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031624569.png" alt="image-20220603162451483"></p><h2 id="数据库-VS-经典存储">数据库 VS 经典存储</h2><h3 id="结构化数据管理">结构化数据管理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031627997.png" alt="image-20220603162700919"></p><h3 id="事务能力">事务能力</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031627475.png" alt="image-20220603162714397"></p><h3 id="复杂查询能力">复杂查询能力</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031630654.png" alt="image-20220603163054567"></p><h2 id="数据库的使用方式">数据库的使用方式</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031631053.png" alt="image-20220603163137985"></p><h1 id="主流产品刨析">主流产品刨析</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031638377.png" alt="image-20220603163807301"></p><h2 id="单机存储">单机存储</h2><h3 id="概览-2">概览</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031639054.png" alt="image-20220603163917984"></p><h4 id="本地文件系统">本地文件系统</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031639167.png" alt="image-20220603163930081"></p><h4 id="key-value-存储">key-value 存储</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031642626.png" alt="image-20220603164232540"></p><h2 id="分布式存储">分布式存储</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031709816.png" alt="image-20220603170913748"></p><h3 id="HDFS">HDFS</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031712998.png" alt="image-20220603171212917"></p><h3 id="Ceph">Ceph</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031714057.png" alt="image-20220603171400978"></p><h2 id="单机数据库">单机数据库</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031714683.png" alt="image-20220603171421609"></p><h3 id="关系型数据库">关系型数据库</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031714595.png" alt="image-20220603171456511"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031717577.png" alt="image-20220603171741484"></p><h3 id="非关系型数据库">非关系型数据库</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031718186.png" alt="image-20220603171841095"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031722017.png" alt="image-20220603172255935"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031724154.png" alt="image-20220603172447067"></p><h2 id="分布式数据库">分布式数据库</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031726906.png" alt="image-20220603172627835"></p><h3 id="解决容量问题">解决容量问题</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031728489.png" alt="image-20220603172806399"></p><h3 id="解决弹性问题">解决弹性问题</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031729398.png" alt="image-20220603172938290"></p><h3 id="解决性价比问题">解决性价比问题</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031731064.png" alt="image-20220603173118945"></p><h3 id="More-to-Do">More to Do</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031732843.png" alt="image-20220603173252780"></p><h1 id="新技术演进">新技术演进</h1><h2 id="概览-3">概览</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031733282.png" alt="image-20220603173336210"></p><h2 id="SPDK">SPDK</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031735894.png" alt="image-20220603173533815"></p><h2 id="AI-Storage">AI &amp; Storage</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031738947.png" alt="image-20220603173802860"></p><h2 id="高性能硬件">高性能硬件</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031738002.png" alt="image-20220603173858910"></p><h1 id="总结">总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031740364.png" alt="image-20220603174028277"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031741653.png" alt="image-20220603174105549"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L17：分布式定时任务那些事儿</title>
      <link href="/2022/06/02/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL17%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>/2022/06/02/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL17%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><h2 id="春节集卡瓜分20亿">春节集卡瓜分20亿</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022013074.png" alt="image-20220602201318788"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022015215.png" alt="image-20220602201543064"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022017032.png" alt="image-20220602201702902"></p><h1 id="发展历程">发展历程</h1><h2 id="Windows-批处理">Windows 批处理</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022020514.png" alt="image-20220602202047388"></p><h2 id="Windows-任务计划程序">Windows 任务计划程序</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022021938.png" alt="image-20220602202140771"></p><h2 id="Linux命令-CronJob">Linux命令-CronJob</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022024157.png" alt="image-20220602202407039"></p><h2 id="单机定时任务">单机定时任务</h2><h3 id="Timer、Ticker">Timer、Ticker</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022025947.png" alt="image-20220602202506801"></p><h3 id="ScheduledExecutorService">ScheduledExecutorService</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022028547.png" alt="image-20220602202846383"></p><h2 id="任务调度">任务调度</h2><h3 id="Quartz">Quartz</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022029786.png" alt="image-20220602202910677"></p><h2 id="分布式定时任务">分布式定时任务</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022031899.png" alt="image-20220602203124729"></p><h3 id="定义">定义</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022034361.png" alt="image-20220602203417216"></p><h3 id="特点">特点</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022034787.png" alt="image-20220602203442631"></p><h3 id="执行方式">执行方式</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022034835.png" alt="image-20220602203453660"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022038969.png" alt="image-20220602203813834"></p><h2 id="业内定时任务框架">业内定时任务框架</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022038822.png" alt="image-20220602203839684"></p><h3 id="Xxl-job">Xxl-job</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022041794.png" alt="image-20220602204149632"></p><h3 id="SchedulerX">SchedulerX</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022042472.png" alt="image-20220602204217344"></p><h3 id="TCT">TCT</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022042730.png" alt="image-20220602204240534"></p><h2 id="知识面扩充">知识面扩充</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022043724.png" alt="image-20220602204352511"></p><h2 id="02小结">02小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022046061.png" alt="image-20220602204604824"></p><h1 id="实现原理">实现原理</h1><h2 id="核心架构（重要）">核心架构（重要）</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022048316.png" alt="image-20220602204821128"></p><h3 id="数据流">数据流</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022051241.png" alt="image-20220602205106110"></p><h3 id="功能架构">功能架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031507589.png" alt="image-20220603150737504"></p><h2 id="控制台">控制台</h2><h3 id="基本概念">基本概念</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031511889.png" alt="image-20220603151139815"></p><ul><li><p>为什么 1 个任务对应 n 个任务实例：</p><p>因为一个任务可以执行多次</p></li><li><p>为什么 1 个任务结构对应 n 个任务结果：</p><p>因为每次调度都可能会失败，这时就要重试，每试一次都有结果</p></li></ul><h3 id="任务元数据">任务元数据</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031514019.png" alt="image-20220603151445933"></p><h3 id="任务实例">任务实例</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031518768.png" alt="image-20220603151828690"></p><h2 id="触发器">触发器</h2><h3 id="核心指责">核心指责</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031520798.png" alt="image-20220603152009718"></p><h3 id="方案1">方案1</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031521881.png" alt="image-20220603152122813"></p><h3 id="方案2">方案2</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031521405.png" alt="image-20220603152145312"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031522866.png" alt="image-20220603152202797"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031522883.png" alt="image-20220603152249803"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031524288.png" alt="image-20220603152401224"></p><p>（鄙人感觉是非常巧妙的操作）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031525061.png" alt="image-20220603152544991"></p><h3 id="高可用">高可用</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031528306.png" alt="image-20220603152833219"></p><h4 id="问题引出">问题引出</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031529194.png" alt="image-20220603152951115"></p><h4 id="数据库行锁模式">数据库行锁模式</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031531787.png" alt="image-20220603153111702"></p><h4 id="分布式锁模式">分布式锁模式</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031532129.png" alt="image-20220603153200045"></p><h2 id="调度器">调度器</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031532859.png" alt="image-20220603153237798"></p><h3 id="资源来源">资源来源</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031533601.png" alt="image-20220603153306509"></p><h3 id="资源调度">资源调度</h3><h4 id="节点选择">节点选择</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031536437.png" alt="image-20220603153600343"></p><h4 id="任务分片">任务分片</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031537631.png" alt="image-20220603153724556"></p><h3 id="高级特性">高级特性</h3><h4 id="任务编排">任务编排</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031538244.png" alt="image-20220603153802175"></p><h4 id="故障转移">故障转移</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031540427.png" alt="image-20220603154032351"></p><h3 id="高可用-2">高可用</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031541328.png" alt="image-20220603154128253"></p><h2 id="执行器">执行器</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031541317.png" alt="image-20220603154142251"></p><h2 id="03小结">03小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031542805.png" alt="image-20220603154256722"></p><h1 id="业务应用">业务应用</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031543841.png" alt="image-20220603154358763"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031545670.png" alt="image-20220603154516588"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031545318.png" alt="image-20220603154559241"></p><h1 id="课程回顾">课程回顾</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031548041.png" alt="image-20220603154834966"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Go』区分 GoLand 代理和 go proxy</title>
      <link href="/2022/06/01/%E3%80%8EGo%E3%80%8F%E5%8C%BA%E5%88%86-GoLand-%E4%BB%A3%E7%90%86%E5%92%8C-go-proxy/"/>
      <url>/2022/06/01/%E3%80%8EGo%E3%80%8F%E5%8C%BA%E5%88%86-GoLand-%E4%BB%A3%E7%90%86%E5%92%8C-go-proxy/</url>
      
        <content type="html"><![CDATA[<p>先说结论，这两个完全不是一个东西</p><h1 id="GoLand-代理">GoLand 代理</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011557416.png" alt="image-20220601155701323"></p><p>指的是在 GoLand 进行通信时的代理（如 copilot，更新，登录，集成的 Git 或其他操作）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011602676.png" alt="image-20220601160217567"></p><p>（如这种操作）</p><p>但请注意集成终端可能不使用这个代理，这时就需要通过重新指定代理</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011600988.png" alt="image-20220601160009922"></p><p>（建议将这条命令直接加到终端启动时执行）</p><h1 id="Go-proxy">Go proxy</h1><p>这是 Go 在下载依赖时的优先顺序，可以使用 <code>go env</code> 来查看</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011607451.png" alt="image-20220601160708373"></p><p>详细内容可以看<a href="/2022/05/09/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5-3rd%E3%80%8FL2%EF%BC%9AGo-%E8%AF%AD%E8%A8%80%E4%B8%8A%E6%89%8B-%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/#%E4%BE%9D%E8%B5%96%E5%88%86%E5%8F%91-proxy">这篇</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L16：走进消息队列</title>
      <link href="/2022/05/31/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL16%EF%BC%9A%E8%B5%B0%E8%BF%9B%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/2022/05/31/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL16%EF%BC%9A%E8%B5%B0%E8%BF%9B%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="引子">引子</h1><h2 id="四个案例">四个案例</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312057193.png" alt="image-20220531205709120"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312057399.png" alt="image-20220531205729335"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312058600.png" alt="image-20220531205805499"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312058270.png" alt="image-20220531205819201"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312058129.png" alt="image-20220531205849066"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312058013.png" alt="image-20220531205857947"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312059668.png" alt="image-20220531205931609"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312059902.png" alt="image-20220531205937836"></p><p>本地日志丢掉了，怎么办？</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312100131.png" alt="image-20220531210004058"></p><h2 id="解决方案">解决方案</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312100562.png" alt="image-20220531210054490"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312101607.png" alt="image-20220531210126547"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312101526.png" alt="image-20220531210156465"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312103088.png" alt="image-20220531210303031"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312103796.png" alt="image-20220531210335730"></p><h1 id="前世今生">前世今生</h1><h2 id="发展历程">发展历程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312104382.png" alt="image-20220531210434316"></p><h2 id="业界对比">业界对比</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312111940.png" alt="image-20220531211121850"></p><h1 id="消息队列-Kafka">消息队列-Kafka</h1><h2 id="使用场景">使用场景</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311915918.png" alt="image-20220531191521763"></p><h2 id="如何使用-Kafka">如何使用 Kafka</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311916021.png" alt="image-20220531191607884"></p><h2 id="基本概念">基本概念</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311916553.png" alt="image-20220531191643396"></p><h3 id="Offset">Offset</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311917542.png" alt="image-20220531191740421"></p><p>每个消息都有编号</p><h3 id="Replica">Replica</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311918154.png" alt="image-20220531191804042"></p><p>复制多份副本，如果 Leader 所在的机器挂了，就在 ISR 中的副本重新选一个 Leader</p><h2 id="数据复制">数据复制</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311919733.png" alt="image-20220531191919615"></p><p>由 Controller 分配复制</p><h2 id="Kafka-架构">Kafka 架构</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311920337.png" alt="image-20220531192008229"></p><h2 id="一条消息的自述">一条消息的自述</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311920165.png" alt="image-20220531192027072"></p><h2 id="思考">思考</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311920544.png" alt="image-20220531192046420"></p><p>不能一个一个发，应该要一起发送</p><h2 id="Producer">Producer</h2><h3 id="批量发送">批量发送</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311921540.png" alt="image-20220531192119423"></p><h3 id="数据压缩">数据压缩</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311921359.png" alt="image-20220531192144266"></p><p>最好的是 ZSTD</p><h2 id="Broker">Broker</h2><h3 id="数据的存储">数据的存储</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311923189.png" alt="image-20220531192302105"></p><h3 id="消息文件结构">消息文件结构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311923640.png" alt="image-20220531192315548"></p><h3 id="磁盘结构">磁盘结构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311924170.png" alt="image-20220531192438022"></p><h3 id="顺序写">顺序写</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311925375.png" alt="image-20220531192520280"></p><h3 id="如何找到消息">如何找到消息</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311925891.png" alt="image-20220531192557784"></p><h3 id="偏移量索引文件">偏移量索引文件</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311926340.png" alt="image-20220531192627242"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311926423.png" alt="image-20220531192642328"></p><h3 id="时间戳索引文件">时间戳索引文件</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311927645.png" alt="image-20220531192735513"></p><h3 id="传统数据拷贝">传统数据拷贝</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311927473.png" alt="image-20220531192757345"></p><h3 id="零拷贝">零拷贝</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311928163.png" alt="image-20220531192838069"></p><h2 id="Consumer">Consumer</h2><h3 id="消息的接收端">消息的接收端</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311930593.png" alt="image-20220531193034477"></p><h3 id="Low-Level-手动分配">Low Level 手动分配</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311931704.png" alt="image-20220531193112562"></p><p>优点：方便快捷</p><p>问题：</p><ol><li>如果某个 Consumer 挂掉了，那它负责的那些 Partition 直接阻塞</li><li>如果某个 Consumer 能力不够，想其他 Consumer 来接替，必会出现机器的启停</li></ol><h3 id="High-Level-自动分配">High Level 自动分配</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311932621.png" alt="image-20220531193210526"></p><h2 id="Consumer-Rebalance">Consumer Rebalance</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311933066.png" alt="image-20220531193342965"></p><p>（这个流程有点复杂，可以去查找更多资料学习）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311939127.png" alt="image-20220531193958034"></p><hr><p>下面是一些缺点</p><h2 id="数据复制问题">数据复制问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311941215.png" alt="image-20220531194102108"></p><h2 id="重启操作">重启操作</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311941163.png" alt="image-20220531194124057"></p><p>（重启一个节点要很久，重启所有节点要数天甚是数周）</p><p>不能并发重启，可能一个片放在两个机器上</p><h2 id="替换、扩容、缩容">替换、扩容、缩容</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311943483.png" alt="image-20220531194313382"></p><p>（只要有节点的变动，就有复制的成本）</p><h2 id="负载不均衡">负载不均衡</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311943436.png" alt="image-20220531194352353"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311944899.png" alt="image-20220531194401807"></p><p>（想解决 IO 问题，引入了新的 IO 问题）</p><h2 id="问题总结">问题总结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311944230.png" alt="image-20220531194442112"></p><h1 id="消息队列-BMQ">消息队列-BMQ</h1><h3 id="BMQ-简介">BMQ 简介</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312051280.png" alt="image-20220531205159212"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312052562.png" alt="image-20220531205206499"></p><p>读写分离</p><h2 id="运维操作对比">运维操作对比</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312054447.png" alt="image-20220531205428375"></p><h2 id="HDFS-写文件流程">HDFS 写文件流程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312055642.png" alt="image-20220531205503584"></p><h2 id="BMQ-文件结构">BMQ 文件结构</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312056517.png" alt="image-20220531205621450"></p><p>同一个节点会打散到很多机器当中</p><h2 id="Broker-2">Broker</h2><h3 id="Partition-状态机">Partition 状态机</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312220785.png" alt="image-20220531222013714"></p><p>（听得有点迷）</p><h3 id="写文件流程">写文件流程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312223252.png" alt="image-20220531222344184"></p><p>（有点迷）</p><h3 id="写文件-Failover">写文件 Failover</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312229448.png" alt="image-20220531222922382"></p><h2 id="Proxy">Proxy</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312230572.png" alt="image-20220531223012504"></p><h2 id="多机房部署">多机房部署</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312233186.png" alt="image-20220531223305121"></p><h2 id="BMQ-的高级特性">BMQ 的高级特性</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312250600.png" alt="image-20220531224959648"></p><h3 id="泳道消息">泳道消息</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312251914.png" alt="image-20220531225108853"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312251434.png" alt="image-20220531225150367"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312252701.png" alt="image-20220531225221626"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312253815.png" alt="image-20220531225308731"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312254561.png" alt="image-20220531225418485"></p><h3 id="Databus">Databus</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312256709.png" alt="image-20220531225604630"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312257996.png" alt="image-20220531225710931"></p><h3 id="Mirror">Mirror</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312258253.png" alt="image-20220531225803184"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312258478.png" alt="image-20220531225857412"></p><h3 id="Index">Index</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312259891.png" alt="image-20220531225945829"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312300852.png" alt="image-20220531230010786"></p><h3 id="Parquet">Parquet</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312301268.png" alt="image-20220531230108198"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312301809.png" alt="image-20220531230146740"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312302985.png" alt="image-20220531230240919"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312302120.png" alt="image-20220531230248046"></p><h1 id="消息队列-RocketMQ">消息队列- RocketMQ</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312303257.png" alt="image-20220531230318188"></p><h2 id="RocketMQ-基本概念">RocketMQ 基本概念</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312303559.png" alt="image-20220531230342484"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312304850.png" alt="image-20220531230453785"></p><h2 id="RocketMQ-架构">RocketMQ 架构</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312305001.png" alt="image-20220531230510936"></p><h2 id="存储模型">存储模型</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312305634.png" alt="image-20220531230555571"></p><h2 id="高级特性">高级特性</h2><h3 id="事务场景">事务场景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312306265.png" alt="image-20220531230647201"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312307420.png" alt="image-20220531230731353"></p><h3 id="延迟发送">延迟发送</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312308148.png" alt="image-20220531230843088"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312309476.png" alt="image-20220531230926414"></p><h3 id="重试和死信队列">重试和死信队列</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312310428.png" alt="image-20220531231016360"></p><p>（右下角的内容错了，应该是死信队列）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312311464.png" alt="image-20220531231113397"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312311344.png" alt="image-20220531231125281"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Redis』缓存与数据库的一致性问题</title>
      <link href="/2022/05/31/%E3%80%8ERedis%E3%80%8F%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/"/>
      <url>/2022/05/31/%E3%80%8ERedis%E3%80%8F%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天在 B 站上刷到了这个问题，但是没有时间总结，先把视频放这</p><ul><li><a href="https://www.bilibili.com/video/BV1R44y1u7rD?spm_id_from=333.851.header_right.fav_list.click">面试官：缓存和数据库如何保证一致性</a></li><li><a href="https://www.bilibili.com/video/BV1Pt4y1x727?spm_id_from=333.851.header_right.fav_list.click">你们项目中如何保证 Redis 与 MySQL 的数据一致性？</a></li><li><a href="https://www.bilibili.com/video/BV1CD4y1X75a/?spm_id_from=333.788.recommend_more_video.0&amp;vd_source=e2613baf768b2432fcb2b9edd79c0c68">MySQL和Redis的双写一致性</a></li></ul><hr><h1 id="结论">结论</h1><h2 id="先更新数据库，再删除缓存">先更新数据库，再删除缓存</h2><p>并且结合延时双删或者消息队列</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『总结』2022年5月30日阶段性总结</title>
      <link href="/2022/05/30/%E3%80%8E%E6%80%BB%E7%BB%93%E3%80%8F2022%E5%B9%B45%E6%9C%8830%E6%97%A5%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/"/>
      <url>/2022/05/30/%E3%80%8E%E6%80%BB%E7%BB%93%E3%80%8F2022%E5%B9%B45%E6%9C%8830%E6%97%A5%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>前几天比赛太累了，今天直接摆了一天<br>睡前又感觉过意不去，做了个简单的阶段性总结</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311538972.jpg" alt="屏幕截图 2022-05-31 005318"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔与总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L15：微服务架构原理与治理实践</title>
      <link href="/2022/05/29/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL15%EF%BC%9A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B2%BB%E7%90%86%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/05/29/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL15%EF%BC%9A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B2%BB%E7%90%86%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="微服务架构介绍">微服务架构介绍</h1><h2 id="系统架构演进历史">系统架构演进历史</h2><p>为什么系统架构需要演进？</p><ul><li>互联网的爆炸性发展</li><li>硬件设施的快速发展</li><li>需求复杂性的多样化</li><li>开发人员的急剧增加</li><li>计算机理论及技术的发展</li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056648.png" alt="image-20220609160002559"></p><h3 id="单体架构">单体架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202211012025360.png" alt="image-20221101202521310"></p><blockquote><p>All in one process</p></blockquote><p>优势：</p><ol><li>性能最高</li><li>冗余小</li></ol><p>劣势：</p><ol><li>debug 困难</li><li>模块相互影响</li><li>模块分工、开发流程</li></ol><h3 id="垂直应用架构">垂直应用架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056037.png" alt="img"></p><blockquote><p>按照业务线垂直划分</p></blockquote><p>优势：</p><ol><li>业务独立开发维护</li></ol><p>劣势：</p><ol><li>不同业务存在冗余</li><li>每个业务还是单体</li></ol><h3 id="分布式架构">分布式架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056029.png" alt="img"></p><blockquote><p>抽出业务无关的公共模块</p></blockquote><p>优势：</p><ol><li>业务无关的独立服务</li></ol><p>劣势：</p><ol><li>服务模块bug可导致全站瘫痪</li><li>调用关系复杂</li><li>不同服务冗余</li></ol><h3 id="SOA架构（Service-Oriented-Architecture）">SOA架构（Service Oriented  Architecture）</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056696.png" alt="img"></p><blockquote><p>面向服务</p></blockquote><p>优势：</p><ol><li>服务注册</li></ol><p>劣势：</p><ol><li>整个系统是中心化的</li><li>需要从上至下设计</li><li>重构困难</li></ol><h3 id="微服务架构">微服务架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056716.png" alt="img"></p><blockquote><p>彻底的服务化</p></blockquote><p>优势：</p><ol><li>开发效率</li><li>业务独立设计</li><li>自下而上</li><li>故障隔离</li></ol><p>劣势：</p><ol><li>治理、运维难度</li><li>观测挑战</li><li>安全性</li><li>分布式系统</li></ol><h2 id="微服务架构概览">微服务架构概览</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056690.png" alt="img"></p><h2 id="微服务架构核心要素">微服务架构核心要素</h2><h3 id="服务治理">服务治理</h3><ul><li>服务注册</li><li>服务发现</li><li>负载均衡</li><li>扩缩容</li><li>流量治理</li><li>稳定性治理</li><li>…</li></ul><h3 id="可观察性">可观察性</h3><ul><li>日志采集</li><li>日志分析</li><li>监控打点</li><li>监控大盘</li><li>异常报警</li><li>链路追踪</li><li>…</li></ul><h3 id="安全">安全</h3><ul><li>身份验证</li><li>认证授权</li><li>访问令牌</li><li>审计</li><li>传输加密</li><li>黑产攻击</li><li>…</li></ul><h1 id="微服务架构原理及特征">微服务架构原理及特征</h1><h2 id="基本概念">基本概念</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056172.png" alt="img"></p><ul><li><p>服务（Service）</p><p>一组具有相同逻辑的运行实体</p></li><li><p>实例（Instance）</p><p>一个服务中，每个运行实体即为一个实例</p></li><li><p>实例与进程的关系</p><p>实例与进程直接没有必然对应关系，一个实例可以对应一个或多个进程（反之不常见）</p></li><li><p>集群（Cluster）</p><p>通常指服务内部的逻辑划分，包含多个实例</p></li><li><p>常见的实例承载形式</p><p>进程、VM、k8s pod…</p></li><li><p>有状态/无状态服务</p><p>服务的实例是否存储了可持久化的数据（例如磁盘文件）</p></li><li><p>服务间通信</p><p>对于单体服务，不同模块通信只是简单的函数调用</p><p>对于微服务，服务间通信意味着网络传输</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056355.png" alt="img"></p></li></ul><hr><p>例：如果将 HDFS 看做一组微服务：</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056772.png" alt="img"></p><hr><h2 id="服务注册与发现">服务注册与发现</h2><h3 id="服务注册">服务注册</h3><blockquote><p>问题：在代码层面，如何指定调用一个目标服务的地址（ip:port）？</p></blockquote><ul><li><p>hardcode?</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056068.png" alt="img"></p><p>问题：如果写死了，就只能使用一个实例</p></li><li><p>DNS?</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056572.png" alt="img"></p><p>问题：</p><ol><li><p>本地 DNS 存在缓存，导致延时</p></li><li><p>负载均衡问题</p></li><li><p>不支持服务实例的探活检查</p></li><li><p>域名无法配置接口</p></li></ol></li></ul><hr><p>解决思路：新增一个统一的服务注册中心，用于存储服务名到服务实例的映射</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056990.png" alt="img"></p><h3 id="服务发现">服务发现</h3><p>（服务上线及下线过程）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056798.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056437.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056946.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056141.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056986.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056210.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056190.png" alt="img"></p><h2 id="流量特征">流量特征</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056771.png" alt="img"></p><ul><li>统一网关入口</li><li>内网通信多采用PRC</li><li>网状调用链路</li></ul><h2 id="总结">总结</h2><ul><li>微服务架构中基本组件及术语</li><li>服务注册及发现</li><li>无损的服务示例上下线流程</li><li>微服务架构中的基本流量特征</li></ul><h1 id="核心服务治理功能">核心服务治理功能</h1><h2 id="服务发布">服务发布</h2><p>服务发布（Deployment），指让一个服务升级运行新的代码的过程</p><p>服务发布的难点</p><ul><li><p>服务不可用</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056580.png" alt="img"></p></li><li><p>服务抖动</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056682.png" alt="img"></p></li><li><p>服务回滚</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056008.png" alt="img"></p></li></ul><h3 id="蓝绿部署">蓝绿部署</h3><p>先用另一个集群接替工作，原集群升级完毕后再切回来</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056209.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056223.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056367.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056690.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056065.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056215.png" alt="img"></p><p>简单、稳定，但是需要双倍资源</p><h3 id="灰度发布（金丝雀发布）">灰度发布（金丝雀发布）</h3><p>让一些流量先适用新版本，再逐步扩大比例</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056430.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056212.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056116.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056384.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056428.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206091928147.png" alt="img"></p><p>占用资源小，但是也有不足，如某些问题是达到一定规模之后才能发现的，如果更新了99%才发现重大bug，那么要回滚会非常麻烦</p><h2 id="流量治理">流量治理</h2><p>在微服务架构下，我们可以基于地区、集群、实例、请求等维度，对端到端流量的路由路径进行精确控制</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056170.png" alt="img"></p><h2 id="负载均衡">负载均衡</h2><p>负载均衡（Load Balance）负责分配请求在每个下游实例上的分布</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056214.png" alt="img"></p><p>常见的 LB 策略：</p><ul><li>Round Robin</li><li>Random</li><li>Ring Hash</li><li>Least Request</li><li>…</li></ul><h2 id="稳定性治理">稳定性治理</h2><p>线上服务总是会出问题的，这与程序的正确性无关</p><ul><li>网络攻击</li><li>流量突增</li><li>机房断电</li><li>光纤被挖</li><li>机器故障</li><li>网络故障</li><li>机房空调故障</li><li>…</li></ul><p>微服务架构中典型的稳定性治理功能：</p><h3 id="限流">限流</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056358.png" alt="img"></p><p>（根据流量限度，该拒绝的拒绝，不能让服务卡死宕机）</p><h3 id="熔断">熔断</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056401.png" alt="img"></p><p>（下游联系不到时，直接拒绝上游请求，不然上游会一直重试）</p><h3 id="过载保护">过载保护</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056368.png" alt="img"></p><p>（根据负载限度，该拒绝的拒绝，不能让服务卡死宕机）</p><h3 id="降级">降级</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056595.png" alt="img"></p><p>（对比服务的重要性，拒绝一些请求）</p><h2 id="总结-2">总结</h2><ul><li>服务发布：蓝绿发布、灰度发布</li><li>基于地区、集群、实例、请求等多维度的流量治理功能</li><li>几种常见的负载均衡策略</li><li>微服务架构中的稳定性治理功能</li></ul><h1 id="字节跳动服务治理实践">字节跳动服务治理实践</h1><h2 id="重试的意义">重试的意义</h2><p>本地函数调用如果出错，重试没有意义，远程函数调用才有意义</p><ul><li><p>降低错误率</p><p>假设单次请求的错误概率为0.01，那么连续两次错误的概率为0.0001</p></li><li><p>降低长尾延时</p><p>对于偶尔耗时较长的请求，重试请求有机会提前返回</p></li><li><p>容忍暂时性错误</p><p>可尽量规避网络抖动</p></li><li><p>避开下游故障实例</p><p>一个服务中可能会有少量实例故障，重试其他实例可以成功</p></li></ul><h2 id="重试的难点">重试的难点</h2><p>既然重试有这么多好处，为什么默认不用呢</p><ul><li><p>幂等性（多次执行的结果是否相同，如对数据库中添加记录，连续执行两次就添加了两条记录）</p></li><li><p>重试风暴</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056020.png" alt="img"></p><p>（如果每一次都无脑重试3次）</p></li><li><p>超时设置</p></li></ul><h2 id="重试策略">重试策略</h2><h3 id="限制重试比例">限制重试比例</h3><p>设定一个重试比例阈值（例如1%），重试次数占所有请求比例不超过该阈值</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056024.png" alt="img"></p><h3 id="防止链路重试">防止链路重试</h3><p>链路层面的防重试风暴的核心是限制每层都发生重试，理想情况下只有最下一层发生重试，可以返回特殊的 status 表面 “请求失败，但别重试”</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056243.png" alt="img"></p><h3 id="Hedged-Request">Hedged Request</h3><p>对于可能超时（或延时高）的请求，重新向另一个下游实例发送一个相同的请求，并等待先到的响应</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056457.png" alt="img"></p><h2 id="重试效果验证">重试效果验证</h2><p>实践验证经过上述重试策略后，在链路上发生的重试放大效应</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056396.jpeg" alt="img"></p><h2 id="总结-3">总结</h2><ul><li>重试的意义及难点</li><li>应对重试风暴的策略</li></ul><details class="toggle" ><summary class="toggle-button" style="">原视频截图</summary><div class="toggle-content"><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032149338.png" alt="image-20220603214941247"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032150062.png" alt="image-20220603215003990"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032150228.png" alt="image-20220603215051155"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032154057.png" alt="image-20220603215406969"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032154026.png" alt="image-20220603215448935"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032156062.png" alt="image-20220603215629975"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032158669.png" alt="image-20220603215830585"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032202705.png" alt="image-20220603220222622"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032202966.png" alt="image-20220603220233888"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032206206.png" alt="image-20220603220638113"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032210260.png" alt="image-20220603221057175"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032212023.png" alt="image-20220603221226932"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032213819.png" alt="image-20220603221355737"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032214155.png" alt="image-20220603221414071"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032214361.png" alt="image-20220603221455281"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032217125.png" alt="image-20220603221734043"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032218088.png" alt="image-20220603221839011"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032220462.png" alt="image-20220603222006386"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032220765.png" alt="image-20220603222017689"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032220839.png" alt="image-20220603222032762"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032221670.png" alt="image-20220603222108577"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032221754.png" alt="image-20220603222120677"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032221726.png" alt="image-20220603222142652"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032223555.png" alt="image-20220603222358493"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032225686.png" alt="image-20220603222506593"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032226846.png" alt="image-20220603222649761"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032229630.png" alt="image-20220603222913566"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032229018.png" alt="image-20220603222942947"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032229527.png" alt="image-20220603222947460"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032229614.png" alt="image-20220603222954548"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032231915.png" alt="image-20220603223116821"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032231469.png" alt="image-20220603223127375"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032237381.png" alt="image-20220603223719285"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032238608.png" alt="image-20220603223846532"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032239719.png" alt="image-20220603223935627"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032241250.png" alt="image-20220603224105179"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032241132.png" alt="image-20220603224126050"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032245235.png" alt="image-20220603224508158"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032245584.png" alt="image-20220603224558490"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032247525.png" alt="image-20220603224732443"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032248943.png" alt="image-20220603224826855"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032249852.png" alt="image-20220603224917767"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032251066.png" alt="image-20220603225102994"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032252611.png" alt="image-20220603225208540"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032253228.png" alt="image-20220603225336155"></p><p>（如果每一次都无脑重试3次）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032255064.png" alt="image-20220603225513996"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032257934.png" alt="image-20220603225716845"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032258002.png" alt="image-20220603225838931"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032300008.png" alt="image-20220603230039932"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032301850.png" alt="image-20220603230156787"></p></div></details>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L14：HTTP 框架修炼之道</title>
      <link href="/2022/05/28/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL14%EF%BC%9AHTTP-%E6%A1%86%E6%9E%B6%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/"/>
      <url>/2022/05/28/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL14%EF%BC%9AHTTP-%E6%A1%86%E6%9E%B6%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h1 id="再谈-HTTP-协议">再谈 HTTP 协议</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012034538.png" alt="image-20220601203428459"></p><h2 id="为什么要协议">为什么要协议</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012037561.png" alt="image-20220601203719489"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012037437.png" alt="image-20220601203726376"></p><h2 id="协议里有什么">协议里有什么</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012037724.png" alt="image-20220601203750653"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012043503.png" alt="image-20220601204348429"></p><ul><li>PUT：完整更新</li><li>PATCH：部分更新（不幂等）</li></ul><h3 id="一个-Demo">一个 Demo</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012043386.png" alt="image-20220601204359321"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012044658.png" alt="image-20220601204430588"></p><h2 id="请求流程">请求流程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012047843.png" alt="image-20220601204705765"></p><h2 id="不足和展望">不足和展望</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012047255.png" alt="image-20220601204717183"></p><h2 id="01总结">01总结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012049642.png" alt="image-20220601204902585"></p><h1 id="HTTP-框架的设计与实现">HTTP 框架的设计与实现</h1><h2 id="分层设计">分层设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012101731.png" alt="image-20220601210120651"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012102149.png" alt="image-20220601210249064"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012105756.png" alt="image-20220601210506658"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012105243.png" alt="image-20220601210519164"></p><h2 id="应用层设计">应用层设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012106041.png" alt="image-20220601210641965"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012110576.png" alt="image-20220601211051502"></p><h2 id="中间件设计">中间件设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012111700.png" alt="image-20220601211129618"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012111360.png" alt="image-20220601211141289"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012112347.png" alt="image-20220601211207278"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012112598.png" alt="image-20220601211248520"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012113995.png" alt="image-20220601211311919"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012113301.png" alt="image-20220601211352216"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012114597.png" alt="image-20220601211459526"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012115569.png" alt="image-20220601211507507"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012116000.png" alt="image-20220601211633929"></p><h2 id="路由设计">路由设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012117658.png" alt="image-20220601211724581"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012117083.png" alt="image-20220601211729008"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012119568.png" alt="image-20220601211902487"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012119433.png" alt="image-20220601211910341"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012120538.png" alt="image-20220601212045469"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012121278.png" alt="image-20220601212104218"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012121395.png" alt="image-20220601212141330"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012122560.png" alt="image-20220601212215491"></p><h2 id="如何做设计">如何做设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012122739.png" alt="image-20220601212240665"></p><h2 id="协议层设计">协议层设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012124597.png" alt="image-20220601212436520"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012125895.png" alt="image-20220601212534823"></p><h2 id="网络层设计">网络层设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012126180.png" alt="image-20220601212600105"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012128836.png" alt="image-20220601212820763"></p><p>（避免阻塞）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012128192.png" alt="image-20220601212851128"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012129899.png" alt="image-20220601212939827"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012130686.png" alt="image-20220601213034628"></p><h2 id="02总结">02总结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012131927.png" alt="image-20220601213101854"></p><h1 id="性能修炼之道">性能修炼之道</h1><h2 id="针对网络库的优化">针对网络库的优化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012141397.png" alt="image-20220601214101333"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012141262.png" alt="image-20220601214107186"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012142422.png" alt="image-20220601214226356"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012143969.png" alt="image-20220601214310900"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012144239.png" alt="image-20220601214425171"></p><h2 id="针对协议的优化">针对协议的优化</h2><h3 id="Headers-解析">Headers 解析</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012147586.png" alt="image-20220601214757504"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012148252.png" alt="image-20220601214828179"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012148950.png" alt="image-20220601214859855"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012150015.png" alt="image-20220601215054947"></p><h3 id="Header-key-规范化">Header key 规范化</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012153186.png" alt="image-20220601215352073"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012154276.png" alt="image-20220601215456206"></p><h2 id="热点资源池化">热点资源池化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012156036.png" alt="image-20220601215600974"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012156834.png" alt="image-20220601215650776"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012156123.png" alt="image-20220601215655058"></p><h2 id="03总结">03总结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012201188.png" alt="image-20220601220125124"></p><h1 id="企业实践">企业实践</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012233840.png" alt="image-20220601223327779"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L13：深入浅出 RPC 框架</title>
      <link href="/2022/05/27/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL13%EF%BC%9A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-RPC-%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/05/27/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL13%EF%BC%9A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-RPC-%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>学员手册：<a href="https://juejin.cn/post/7099665398655615006/#heading-0">第十三节：深入浅出 RPC 框架</a></p></div></details><h1 id="基本概念">基本概念</h1><h2 id="本地函数调用">本地函数调用</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011853935.png" alt="image-20220601185342832"></p><h2 id="远程函数调用">远程函数调用</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011854202.png" alt="image-20220601185428128"></p><h2 id="RPC-概念模型">RPC 概念模型</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011856156.png" alt="image-20220601185659044"></p><h2 id="一次-RPC-的完整过程">一次 RPC 的完整过程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011858511.png" alt="image-20220601185832411"></p><h2 id="RPC-的好处">RPC 的好处</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011901402.png" alt="image-20220601190107309"></p><h2 id="RPC-的问题">RPC 的问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011903899.png" alt="image-20220601190311810"></p><h2 id="01小结">01小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011904776.png" alt="image-20220601190421701"></p><h1 id="分层设计">分层设计</h1><h2 id="以-Apache-Thrift-为例">以 Apache Thrift 为例</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011905574.png" alt="image-20220601190538495"></p><h2 id="编解码层">编解码层</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011906952.png" alt="image-20220601190632867"></p><h3 id="生成代码">生成代码</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011906854.png" alt="image-20220601190645772"></p><h3 id="数据格式">数据格式</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011907826.png" alt="image-20220601190718753"></p><h3 id="二进制编码">二进制编码</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011909151.png" alt="image-20220601190915065"></p><h3 id="选型">选型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011914693.png" alt="image-20220601191422623"></p><h2 id="协议层">协议层</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011916254.png" alt="image-20220601191636168"></p><h3 id="概念">概念</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011917811.png" alt="image-20220601191707742"></p><h3 id="协议构造">协议构造</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011918890.png" alt="image-20220601191836792"></p><p>多路复用：一个连接内有多个请求流</p><h3 id="协议解析">协议解析</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011920344.png" alt="image-20220601192057283"></p><h2 id="网络通信层">网络通信层</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011921444.png" alt="image-20220601192155370"></p><h3 id="Sockets-API">Sockets API</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011922965.png" alt="image-20220601192218879"></p><h2 id="网络库">网络库</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011925684.png" alt="image-20220601192514608"></p><h2 id="02小结">02小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011926143.png" alt="image-20220601192641077"></p><h1 id="关键指标">关键指标</h1><h2 id="稳定性">稳定性</h2><h3 id="保障策略">保障策略</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011927685.png" alt="image-20220601192751598"></p><h3 id="请求成功率">请求成功率</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011930415.png" alt="image-20220601193035335"></p><h3 id="长尾请求">长尾请求</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011932851.png" alt="image-20220601193218785"></p><h3 id="注册中间件">注册中间件</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011935102.png" alt="image-20220601193539010"></p><h2 id="易用性">易用性</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011936929.png" alt="image-20220601193630834"></p><h2 id="扩展性">扩展性</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011938175.png" alt="image-20220601193838093"></p><h2 id="观察性">观察性</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011940936.png" alt="image-20220601194028853"></p><h2 id="高性能">高性能</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011943452.png" alt="image-20220601194319380"></p><h2 id="03小结">03小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011945472.png" alt="image-20220601194557393"></p><h1 id="企业实践">企业实践</h1><h2 id="Kitex">Kitex</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011949416.png" alt="image-20220601194935339"></p><h2 id="自研网络库">自研网络库</h2><h3 id="背景">背景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011952331.png" alt="image-20220601195218257"></p><h3 id="Netpoll">Netpoll</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011953211.png" alt="image-20220601195315141"></p><h2 id="扩展性设计">扩展性设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011954663.png" alt="image-20220601195410592"></p><h2 id="性能优化">性能优化</h2><h3 id="网络库优化">网络库优化</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011956078.png" alt="image-20220601195603008"></p><h3 id="编解码优化">编解码优化</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011957321.png" alt="image-20220601195736225"></p><h2 id="合并部署">合并部署</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012002109.png" alt="image-20220601200231030"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012005672.png" alt="image-20220601200546571"></p><h2 id="04小结">04小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012007922.png" alt="image-20220601200715858"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Git』如何使用 Git 参与杭助的项目</title>
      <link href="/2022/05/26/%E3%80%8EGit%E3%80%8F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Git-%E5%8F%82%E4%B8%8E%E6%9D%AD%E5%8A%A9%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/05/26/%E3%80%8EGit%E3%80%8F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Git-%E5%8F%82%E4%B8%8E%E6%9D%AD%E5%8A%A9%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>前情提要：</p><p>​这几天开始参与字节跳动青训营的小组项目，沿用的是助手的团队开发模式，鄙人因为不熟悉 Git 的而吃了亏（基本上是学一次忘一次，下次一定好好做笔记），特写本文总结一套正确的操作逻辑，也同时为后来人指路</p><p>首先，你可以根据个人喜欢使用 GoLand 的图形界面或者纯命令行，二者的效果是相同的</p><p>PS：下图中我的 GoLand 是换过主题的，但是按钮的位置没有变，大差不差</p><hr><h1 id="怎么将项目克隆到本地？">怎么将项目克隆到本地？</h1><div class="tabs" id="怎么将项目克隆到本地"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#怎么将项目克隆到本地-1">使用图形界面</button></li><li class="tab"><button type="button" data-href="#怎么将项目克隆到本地-2">使用命令行</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="怎么将项目克隆到本地-1"><p>打开 GoLand ，点击『从 VCS 获取』</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205272005022.png" alt="image-20220527200548932"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205272008986.png" alt="image-20220527200727648"></p><p>然后输入仓库 URL ，建议是 SSH 格式的，可以从 GitHub 找到</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205272008541.png" alt="image-20220527200834430"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="怎么将项目克隆到本地-2"><p>本步对应的命令行是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:h68u/h68u-tiktok-app.git</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>这里还牵扯到创建并把 SSH 密钥添加到 GitHub 之类的，在此不赘述</p><hr><h1 id="怎么为项目贡献我的代码？">怎么为项目贡献我的代码？</h1><p>助手的标准规范是：</p><ol><li>从主分支新建 dev 分支，并以你的名字命名（如 <code>NX-dev</code>）</li><li>在这个分支上修改项目</li><li>提交本地分支到本地 git 储存库，再推送至 GitHub</li><li>在 GitHub 上合并到主分支，完成对主分支的更改</li></ol><p>接下来详细说明</p><h2 id="新建你的个人分支（git-checkout）">新建你的个人分支（<code>git checkout</code>）</h2><p>点击右下角的「Git 分支」 按钮，从主分支新建分支</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205272019142.png" alt="image-20220526085736913"></p><p>本步对应的命令为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b NX-dev</span><br></pre></td></tr></table></figure><h2 id="将更新提交到本地储存库（git-commit）">将更新提交到本地储存库（<code>git commit</code>）</h2><p>在工具栏中找到 「Git」-&gt;「提交」，或者从右上角的按钮中找到提交</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205272039618.png" alt="image-20220526194917134"></p><p>核对一下本次的变更内容，并且在左下角标注本次提交的信息，然后提交</p><details class="toggle" ><summary class="toggle-button" style="">注意：可能的 Git Add</summary><div class="toggle-content"><p>如果你在项目中新建了文件，照理应当手动使用 <code>git add</code> 命令把新文件纳入 git</p><p>但实际上，靠谱的 IDE 在你建文件的时候就会跳出来问你要不要添加</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205272045323.png" alt="image-20220527202726303"></p></div></details><h2 id="将本地的变动推送至云端（git-push）">将本地的变动推送至云端（<code>git push</code>）</h2><p>和上面一样在菜单栏或者工具栏中找到推送</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205272051457.png" alt="image-20220526194959034"></p><p>核对好要推送的内容就可以推送了</p><h2 id="合并至主分支（PR）">合并至主分支（PR）</h2><p>在浏览器中打开项目地址，可以看见提 PR 的提示</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011636713.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011637373.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011637942.png" alt=""></p><h1 id="别人提交了更新，我要怎么更新本地代码？">别人提交了更新，我要怎么更新本地代码？</h1><p>先更新主分支</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011638138.png" alt=""></p><p>然后合并到自己的分支上</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011639562.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L12：数据结构与算法</title>
      <link href="/2022/05/25/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL12%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2022/05/25/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL12%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>因为参加数模比赛去了，所以没时间记录</p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L11：Git 的正确使用姿势与最佳实践</title>
      <link href="/2022/05/24/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL11%EF%BC%9AGit-%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/05/24/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL11%EF%BC%9AGit-%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-是什么">Git 是什么</h1><h2 id="版本控制">版本控制</h2><p>版本控制是什么？</p><p>一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统</p><h3 id="本地版本控制">本地版本控制</h3><ul><li>代表：RCS</li><li>依托于本地磁盘进行版本控制</li></ul><h3 id="集中式版本控制">集中式版本控制</h3><ul><li>代表：SVN</li><li>存在一个统一的远端服务器，用于版本控制，本地不存储版本控制</li></ul><h3 id="分布式版本控制">分布式版本控制</h3><ul><li>代表：Git</li><li>每个库都拥有所有的版本控制信息，远端服务器用于不同库之间进行版本信息同步</li></ul><h2 id="Git-发展历史">Git 发展历史</h2><p>最初版由 Liunx 创始人 Linus Torvalds 花两周时间开发而成，主要是为了用于 Linux 项目的维护</p><h1 id="Git-基本使用方式">Git 基本使用方式</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251548072.png" alt="image-20220525154853031"></p><h2 id="Git-目录介绍">Git 目录介绍</h2><p>项目初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>其他参数</p><ul><li><code>--initial-branch</code>  初始化的分支</li><li><code>--bare</code> 创建裸仓库（纯 Git 目录，没用工作目录）</li><li><code>--template</code> 通过模板构建自定义 git 目录</li></ul><hr><p>观察 <code>.git</code> 目录</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251558910.png" alt="image-20220525155845823"></p><ul><li><p>HEAD：当前的分支</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251602059.png" alt="image-20220525160214027"></p></li><li><p>config：配置</p></li><li><p>objects：文件信息</p></li><li><p>refs：分支信息</p></li></ul><p>hooks 里面的一堆 <code>.sample</code> 文件是例子，不会执行</p><hr><p>工作区和暂存区</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251603860.png" alt="image-20220525160351818"></p><h3 id="Git-Config">Git Config</h3><p>不同级别的 Git 配置：全局、系统、当前</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251605871.png" alt="image-20220525160529835"></p><p>低级别可以覆盖高级别</p><h3 id="常见的-Git-配置">常见的 Git 配置</h3><ul><li><p>用户名配置</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --global user.email xxx@xxx.com</span><br></pre></td></tr></table></figure></li><li><p>Instead of 配置</p><p>相当于替换</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global url git@github.com:.insseadOf https://github.com/</span><br></pre></td></tr></table></figure></li><li><p>Git 命令别名配置</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.cin <span class="string">&quot;commit --amend --no-edit&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Git-Remote">Git Remote</h2><ul><li><p>查看</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li><li><p>添加</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin_ssh git@github.com:git/git.git</span><br><span class="line">git remote add origin_http https://github.com/git/git.git</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251616811.png" alt="image-20220525161645758"></p><p>这时再看 config，就会发现多了两个配置</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251618627.png" alt="image-20220525161800582"></p><hr><p>可以同一个 Origin 设置不同的 Push 和 Fetch URL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:git/git.git</span><br><span class="line">git remote set-url --add --push origin git@github.com:my_repo/git.git</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251622116.png" alt="image-20220525162258054"></p><hr><h3 id="HTTP-Remote">HTTP Remote</h3><p>出于安全性，一般不使用这种方式</p><p>URL： <code>https://github.com/git/git.git</code></p><p>免密配置：</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251632770.png" alt="image-20220525163200720"></p><h3 id="SSH-Remote">SSH Remote</h3><p>URL： <code>git@github.com:git/git.git</code></p><p>免密配置</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251633814.png" alt="image-20220525163338738"></p><hr><p>生成并查看公钥，之后存到 GitHub 上即可</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251634946.png" alt="image-20220525163444895"></p><p>可以创建多对公私钥</p><h2 id="Git-Add">Git Add</h2><p>将文件添加至暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> readme.md</span><br><span class="line">nano readme.md // 写入 <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p>之后查看 <code>.git</code> 目录，可以看见多两个文件</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251642748.png" alt="image-20220525164201687"></p><p>这个文件的内容实际上就是我们修改的内容</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251642716.png" alt="image-20220525164255689"></p><h2 id="Git-Commit">Git Commit</h2><p>把修改从暂存区提交到储存库中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;add readme&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251645234.png" alt="image-20220525164501205"></p><p>检查 <code>.git</code> 目录，发现多了两个文件，分别存储 blob 类型和 tree 类型</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251645955.png" alt="image-20220525164541833"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251648345.png" alt="image-20220525164813305"></p><h2 id="Objects">Objects</h2><p>commit、tree 和 blob 在 git 里统一称为 Object，除此之外还有一个 Object，在下文会提到</p><h3 id="Blob">Blob</h3><p>存储文件的内容</p><h3 id="Tree">Tree</h3><p>存储文件目录信息</p><h3 id="Commit">Commit</h3><p>存储提交信息，一个 Commit 可以对应唯一版本的代码</p><hr><p>如何把这三个信息串联在一起？</p><ol><li>通过 Commit 寻找 Tree</li><li>通过 Tree 寻找若干 Blob</li><li>通过若干 Blob 获取对应文件内容</li></ol><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251657343.png" alt="image-20220525165743302"></p><h2 id="Refs">Refs</h2><h3 id="Refs-中存储的内容">Refs 中存储的内容</h3><p>refs 的内容就是对应的 Commit ID</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251659760.png" alt="image-20220525165957720"></p><p>因此把 ref 当作指针，指向对应的 Commit 来表示当前对应的版本</p><hr><h3 id="Branch-和-Tag">Branch 和 Tag</h3><ul><li><p>Branch</p><p>分支一般用于开发阶段，可以不断添加 Commit 来迭代</p></li><li><p>Tag</p><p>标签一般表示一个稳定版本，指向的 Commit 一般不会变更</p></li></ul><hr><p>新建分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>创建好后，可以在 refs 中看见</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251701110.png" alt="image-20220525170140076"></p><p>新建标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v0.0.1</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251708697.png" alt="image-20220525170835658"></p><h2 id="Annotation-Tag">Annotation Tag</h2><p>附注标签：一种特殊的 Tag，可以提供一些额外的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v0.0.2 -m <span class="string">&quot;add feature 1&quot;</span></span><br></pre></td></tr></table></figure><p>创建之后，发现 objects 中也新建了一个文件，而这个附注标签就是指向这个文件的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251713847.png" alt="image-20220525171336802"></p><p>这个文件就属于上文中的第四种 object —— Tag Object，指向的是一个 commit，内容是一些附加信息</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251715516.png" alt="image-20220525171522477"></p><h2 id="追溯历史版本">追溯历史版本</h2><ul><li><p>获取当前版本代码</p><p>通过 Ref 指向的 Commit 可以获取唯一的代码版本</p></li><li><p>获取历史版本代码</p><p>现在修改一下 <a href="http://readme.md">readme.md</a> ，在开头加一个井号，之后提交</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252108582.png" alt="image-20220525210827540"></p><p>查看 <code>object </code>文件夹，又多了三个文件</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252109295.png" alt="image-20220525210911251"></p><p>通过 <code>git log</code> ，找到这次提交的编号</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252110664.png" alt="image-20220525211021615"></p><p>检查这次提交，发现多了一个 parent 值，这就关联到了历史版本</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252112378.png" alt="image-20220525211207339"></p></li></ul><h2 id="修改历史版本">修改历史版本</h2><ol><li><p>commit --amend</p><p>修改最近的一次 commit 信息，修改后 commit id 会变</p></li><li><p>rebase</p><p>通过 <code>git rebase -i HEAD~3</code>  可以实现对最近三个 commit 的修改</p><ul><li>合并 commit</li><li>修改具体的 commit message</li><li>删除某个 commit</li></ul></li><li><p>filter --branch</p><p>可以指定删除所有提交中的某个文件或者全局修改邮件地址等操作</p></li></ol><p>这里尝试一下第一个命令，执行后会打开文本编辑窗口让你修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252116646.png" alt="image-20220525211603557"></p><p>可以看见 commit id 已经改变了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252117252.png" alt="image-20220525211742208"></p><p>而老的 commit 其实就已经没有 ref 去指向了，这时就变成了一个悬空的 object，可以使用下面的命令来查找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fsck --lost-found</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252120073.png" alt="image-20220525212035044"></p><h2 id="Git-GC">Git GC</h2><h3 id="GC">GC</h3><p>删除一些不需要的 object，已经会对 object 进行一些打包压缩来减少仓库体积</p><p>使用 <code>--prune</code> 参数指定修剪多久之前的对象，默认是两周</p><h3 id="Reflog">Reflog</h3><p>记录操作日志，防止误操作后数据丢失，</p><hr><p>尝试以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog expire --expire=now --all</span><br><span class="line">git gc --prune=now</span><br></pre></td></tr></table></figure><p>然后观察目录变化，发现变化很大</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252125168.png" alt="image-20220525212536083"></p><h2 id="完整的-Git-视图">完整的 Git 视图</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252126370.png" alt="image-20220525212629318"></p><h2 id="Git-Clone-Pull-Fetch">Git Clone &amp; Pull &amp; Fetch</h2><h3 id="Clone">Clone</h3><p>拉取完整的仓库到本地，可以指定分支、深度</p><h3 id="Fetch">Fetch</h3><p>将远程某些分支最新代码拉取到本地，不会 merge</p><p>会修改 refs/remote 内的分支信息，如果需要和本地代码合并需要手动操作</p><h3 id="Pull">Pull</h3><p>拉取并合并，相当于 <code>git fetch</code> + <code>git merge</code></p><p>也可以通过 <code>git pull --rebase</code> 完成 <code>git fetch +get rebase</code> 操作</p><h2 id="Git-Push">Git Push</h2><h3 id="常用命令">常用命令</h3><p>一般使用 <code>git push orgin master</code> 即可</p><h3 id="冲突问题">冲突问题</h3><ol><li>如果本地的 commit 记录和远端的 commit 记录历史不一致，则会产生冲突</li><li>如果该分支就自己一个人使用，或团队内确认可以修改历史则可以通过 <code>-f</code> 参数强制推送</li></ol><h3 id="推送限制规则">推送限制规则</h3><p>可以通过保护分支，来配置一些保护规则</p><h1 id="Git-研发流程">Git 研发流程</h1><h2 id="不同的工作流">不同的工作流</h2><ul><li><p>集中式工作流</p><p>代表：SVN，Gerrit</p><p>只依托于主干分支进行开发，不存在其他分支</p></li><li><p>分支管理工作流</p><p>代表GitHub，Gitlab</p><p>可以定义不同特性的开发分支，上线分支，在分支开发完成后在通过 MR/PR 合入主分支</p></li></ul><h2 id="集中式工作流">集中式工作流</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252140227.png" alt="image-20220525214004158"></p><h3 id="Gerrit">Gerrit</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252141123.png" alt="image-20220525214128038"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252142812.png" alt="image-20220525214214758"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252142980.png" alt="image-20220525214222928"></p><h2 id="分支管理工作流">分支管理工作流</h2><table><thead><tr><th>工作流</th><th>特点</th></tr></thead><tbody><tr><td>Git Flow</td><td>分支类型丰富，规范严格</td></tr><tr><td>GitHub Flow</td><td>只有主干和分发分支，规则简单</td></tr><tr><td>GitLab Flow</td><td>在主干分支和开发分支之上构建环境分支，版本分支，满足不同发布和环境的需要</td></tr></tbody></table><h3 id="Git-Flow">Git Flow</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252146125.png" alt="17cda4db-cc5d-46d0-adeb-7cdd32f3a05f"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252147398.png" alt="image-20220525214528516"></p><h3 id="GitHub-Flow">GitHub Flow</h3><p>只有一个主干，基于 Pull Request 往主干分支提交代码</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252148636.png" alt="image-20220525214814587"></p><h3 id="GitLab-Flow">GitLab Flow</h3><p>GitLab 推荐的工作流是上面两者的优化</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252157590.png" alt="image-20220525215728533"></p><h2 id="代码合并">代码合并</h2><h3 id="Fast-Forward">Fast-Forward</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge <span class="built_in">test</span> --ff-only</span><br></pre></td></tr></table></figure><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252158965.png" style="zoom:50%;" /><h3 id="Tree-Way-Merge">Tree-Way Merge</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git marge <span class="built_in">test</span> --no-ff</span><br></pre></td></tr></table></figure><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252200980.png" alt="913d1ef3-be50-4d89-9306-9fdc17756cac" style="zoom:50%;" /><h2 id="如何选择合适的工作流">如何选择合适的工作流</h2><p>没有最好的，只有最合适的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252203988.png" alt="image-20220525220355920"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『离散数学』数理逻辑：谓词逻辑</title>
      <link href="/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E8%B0%93%E8%AF%8D%E9%80%BB%E8%BE%91/"/>
      <url>/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E8%B0%93%E8%AF%8D%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231129706.png" alt="image-20220523112908319"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231130568.png" alt="image-20220523113015113"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231131624.png" alt="image-20220523113114288"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231132201.png" alt="image-20220523113248663"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231134250.png" alt="image-20220523113419823"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231150718.png" alt="image-20220523115046363"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231151126.png" alt="image-20220523115135907"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231153211.png" alt="image-20220523115349740"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231522623.png" alt="image-20220523152250464"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231524984.png" alt="image-20220523152435920"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231524284.png" alt="image-20220523152450104"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231526165.png" alt="image-20220523152608081"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231526671.png" alt="image-20220523152622577"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231527583.png" alt="image-20220523152750487"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231529494.png" alt="image-20220523152930360"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231531462.png" alt="image-20220523153104241"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231533419.png" alt="image-20220523153340169"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231534309.png" alt="image-20220523153455226"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231535504.png" alt="image-20220523153544403"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231536376.png" alt="image-20220523153646182"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『离散数学』数理逻辑：命题逻辑推理理论</title>
      <link href="/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E6%8E%A8%E7%90%86%E7%90%86%E8%AE%BA/"/>
      <url>/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E6%8E%A8%E7%90%86%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231110981.png" alt="image-20220523111022566"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231112865.png" alt="image-20220523111200554"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231113802.png" alt="image-20220523111312489"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231115052.png" alt="image-20220523111557416"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231117707.png" alt="image-20220523111724508"></p><p>​<img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231120189.png" alt="image-20220523112053612"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231122132.png" alt="image-20220523112203807"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231124842.png" alt="image-20220523112408143"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『离散数学』数理逻辑：命题逻辑等值演算</title>
      <link href="/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%AD%89%E5%80%BC%E6%BC%94%E7%AE%97/"/>
      <url>/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%AD%89%E5%80%BC%E6%BC%94%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="等值式">等值式</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231043609.png" alt="image-20220523104347434"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231045064.png" alt="image-20220523104507955"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231046311.png" alt="image-20220523104621950"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231047237.png" alt="image-20220523104735044"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231048958.png" alt="image-20220523104854777"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231049280.png" alt="image-20220523104935117"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231050458.png" alt="image-20220523105039173"></p><h1 id="析取范式和合取范式">析取范式和合取范式</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231052320.png" alt="image-20220523105210074"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231055728.png" alt="image-20220523105528444"></p><h1 id="主析取范式和主合取范式">主析取范式和主合取范式</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231056977.png" alt="image-20220523105650810"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231058103.png" alt="image-20220523105810948"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231059349.png" alt="image-20220523105917111"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231059867.png" alt="image-20220523105947759"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231100242.png" alt="image-20220523110043016"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231101179.png" alt="image-20220523110140952"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231102968.png" alt="image-20220523110209834"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231104423.png" alt="image-20220523110425797"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231105189.png" alt="image-20220523110540454"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231107301.png" alt="image-20220523110732617"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『离散数学』数理逻辑：命题的基本概念</title>
      <link href="/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E5%91%BD%E9%A2%98%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E5%91%BD%E9%A2%98%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="命题的概念">命题的概念</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231028142.png" alt="image-20220523102845721"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231029909.png" alt="image-20220523102936685"></p><h1 id="命题联结词">命题联结词</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231032968.png" alt="image-20220523103204640"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231033792.png" alt="image-20220523103311453"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231034369.png" alt="image-20220523103414086"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231035929.png" alt="image-20220523103517653"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231036559.png" alt="image-20220523103605290"></p><h1 id="公式的类型">公式的类型</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231038427.png" alt="image-20220523103806152"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231040232.png" alt="image-20220523104023054"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231041261.png" alt="image-20220523104112871"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L10：架构初探-谁动了我的蛋糕</title>
      <link href="/2022/05/22/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL10%EF%BC%9A%E6%9E%B6%E6%9E%84%E5%88%9D%E6%8E%A2-%E8%B0%81%E5%8A%A8%E4%BA%86%E6%88%91%E7%9A%84%E8%9B%8B%E7%B3%95/"/>
      <url>/2022/05/22/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL10%EF%BC%9A%E6%9E%B6%E6%9E%84%E5%88%9D%E6%8E%A2-%E8%B0%81%E5%8A%A8%E4%BA%86%E6%88%91%E7%9A%84%E8%9B%8B%E7%B3%95/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>学员笔记：<a href="https://juejin.cn/post/7098182433941651492#heading-0">第十节：架构初探 - 谁动了我的蛋糕</a></p></div></details><h1 id="什么是架构">什么是架构</h1><h2 id="架构定义">架构定义</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221526713.png" alt="image-20220522152651578"></p><h2 id="问题">问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221517706.jpg" alt=""></p><h2 id="单机">单机</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221522253.png" alt="image-20220522152257154"></p><h2 id="单体、垂直应用-垂直切分">单体、垂直应用 | 垂直切分</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221527118.png" alt="image-20220522152713026"></p><h2 id="SOA、微服务-水平切分">SOA、微服务 | 水平切分</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221529008.png" alt="image-20220522152919895"></p><h2 id="小结">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221534315.png" alt="image-20220522153402247"></p><ul><li>竖着切：分不同种类事情</li><li>横着切：同一件事分几步</li></ul><h1 id="企业级后端架构剖析">企业级后端架构剖析</h1><h2 id="背景">背景</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221536741.png" alt="image-20220522153601666"></p><h2 id="云计算">云计算</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221536712.png" alt="image-20220522153610572"></p><h2 id="云原生">云原生</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221557529.png" alt="image-20220522155712434"></p><h3 id="弹性资源">弹性资源</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221557984.png" alt="image-20220522155727877"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221559563.png" alt="image-20220522155929469"></p><h3 id="DevOps">DevOps</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221603017.png" alt="image-20220522160259916"></p><h3 id="微服务架构">微服务架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221606533.png" alt="image-20220522160610445"></p><h3 id="服务网格">服务网格</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221608264.png" alt="image-20220522160805171"></p><h2 id="云原生蛋糕店">云原生蛋糕店</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221610880.png" alt="image-20220522161043804"></p><h1 id="企业级后端架构的挑战">企业级后端架构的挑战</h1><h2 id="问题-2">问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221611421.png" alt="image-20220522161101352"></p><h2 id="离在线资源并池">离在线资源并池</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221616925.png" alt="image-20220522161618837"></p><h2 id="自动扩缩容">自动扩缩容</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221620848.png" alt="image-20220522162016762"></p><h2 id="微服务亲合性部署">微服务亲合性部署</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221622519.png" alt="image-20220522162225432"></p><h2 id="流量治理">流量治理</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221623040.png" alt="image-20220522162320964"></p><h2 id="CPU-水位负载均衡">CPU 水位负载均衡</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221625590.png" alt="image-20220522162520509"></p><h1 id="后端架构实践">后端架构实践</h1><h2 id="问题背景">问题背景</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221626620.png" alt="image-20220522162659546"></p><h2 id="问题提炼">问题提炼</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221627389.png" alt="image-20220522162747311"></p><h2 id="自适应静态权重">自适应静态权重</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221629879.png" alt="image-20220522162902794"></p><h2 id="自适应动态权重-Alpha">自适应动态权重 Alpha</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221629038.png" alt="image-20220522162952950"></p><h2 id="自适应动态权重-Beta">自适应动态权重 Beta</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221631396.png" alt="image-20220522163130300"></p><h2 id="自适应动态权重-Release">自适应动态权重 Release</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221635074.png" alt="image-20220522163523977"></p><h2 id="尾声">尾声</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221636580.png" alt="image-20220522163651513"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Others』苏系坦克 T-64/72/80/90 型号辨别</title>
      <link href="/2022/05/22/%E3%80%8EOthers%E3%80%8F%E8%8B%8F%E7%B3%BB%E5%9D%A6%E5%85%8B-T-64-72-80-90-%E5%9E%8B%E5%8F%B7%E8%BE%A8%E5%88%AB/"/>
      <url>/2022/05/22/%E3%80%8EOthers%E3%80%8F%E8%8B%8F%E7%B3%BB%E5%9D%A6%E5%85%8B-T-64-72-80-90-%E5%9E%8B%E5%8F%B7%E8%BE%A8%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>❤️本期内容整理自B站视频<a href="https://www.bilibili.com/video/BV1Ls411e7Ta?spm_id_from=333.999.0.0">【军事科普】如何识别T-64/72/80和T-90</a></p></blockquote><p>一般来说，战雷里遇到这些苏系锅盖头都是直接打驾驶员观察口，都怎么区分具体型号</p><p>今天逛 B 站看见了这个视频，感觉有必要记一下笔记</p><p>但是太忙了，简单地说就是炮塔，屁股，首上，负重轮，红外大眼的区别</p><p>等有空去战雷里截点图来展示一下</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『WSL』在 WSL 中使用主机的代理（以 Clash 为例）</title>
      <link href="/2022/05/21/%E3%80%8EWSL%E3%80%8F%E5%9C%A8WSL%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BB%A3%E7%90%86/"/>
      <url>/2022/05/21/%E3%80%8EWSL%E3%80%8F%E5%9C%A8WSL%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>困惑了我很久的问题今天终于被我解决惹~让我赶紧把它记录下来</p><h1 id="确保-Windows-上的代理可用">确保 Windows 上的代理可用</h1><p>运行 Clash，打开 <code>Allow LAN</code> 和 <code>System Proxy</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211501993.jpg" alt=""></p><p>然而我发现 Profiles 里 <code>allow-lan</code> 还是 <code>false</code>，安全起见还是手动给它编辑一下</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211516260.jpg" alt=""></p><p>在终端中试一下有没有代理</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211524645.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211525355.jpg" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://www.google.com</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211526777.jpg" alt=""></p><h1 id="在-WSL-中连接主机的代理">在 WSL 中连接主机的代理</h1><p>将下面函数加入到<code>~/.profile</code>中，记得编辑端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> hostip=$(<span class="built_in">cat</span> /etc/resolv.conf |grep -oP <span class="string">&#x27;(?&lt;=nameserver\ ).*&#x27;</span>) <span class="comment">#获得网关地址</span></span><br><span class="line"><span class="built_in">export</span> proxyPort=1080 <span class="comment">#端口</span></span><br><span class="line"><span class="built_in">alias</span> proxy=<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    export https_proxy=&quot;http://$&#123;hostip&#125;:$&#123;proxyPort&#125;&quot;;</span></span><br><span class="line"><span class="string">    export http_proxy=&quot;http://$&#123;hostip&#125;:$&#123;proxyPort&#125;&quot;;</span></span><br><span class="line"><span class="string">    export all_proxy=&quot;http://$&#123;hostip&#125;:$&#123;proxyPort&#125;&quot;;</span></span><br><span class="line"><span class="string">    echo -e &quot;Acquire::http::Proxy \&quot;http://$&#123;hostip&#125;:$&#123;proxyPort&#125;\&quot;;&quot; | sudo tee -a /etc/apt/apt.conf.d/proxy.conf &gt; /dev/null;</span></span><br><span class="line"><span class="string">    echo -e &quot;Acquire::https::Proxy \&quot;http://$&#123;hostip&#125;:$&#123;proxyPort&#125;\&quot;;&quot; | sudo tee -a /etc/apt/apt.conf.d/proxy.conf &gt; /dev/null;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    unset https_proxy;</span></span><br><span class="line"><span class="string">    unset http_proxy;</span></span><br><span class="line"><span class="string">    unset all_proxy;</span></span><br><span class="line"><span class="string">    sudo sed -i -e &quot;/Acquire::http::Proxy/d&quot; /etc/apt/apt.conf.d/proxy.conf;</span></span><br><span class="line"><span class="string">    sudo sed -i -e &quot;/Acquire::https::Proxy/d&quot; /etc/apt/apt.conf.d/proxy.conf;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>测试可用性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.profile <span class="comment">#加载环境</span></span><br><span class="line">proxy <span class="comment">#执行函数 代理生效</span></span><br><span class="line">curl https://www.google.com <span class="comment">#请求Google 网址</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211534896.jpg" alt=""></p><p>如果你一路顺风的话，那么恭喜你已经完成了</p><p>但是如果你和我之前一样一直卡住的话，可以尝试关闭 Windows 防火墙</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211537909.jpg" alt=""></p><p>我就是在关了防火墙之后就好了</p><p>但是也不能一直关着防火墙是吧，我选择恢复防火墙的默认设置，然后用管理员重新打开 Clash，之后批准权限即可</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211541217.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
            <tag> Clash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L9：将我的服务开放给用户</title>
      <link href="/2022/05/21/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL9%EF%BC%9A%E5%B0%86%E6%88%91%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%94%BE%E7%BB%99%E7%94%A8%E6%88%B7/"/>
      <url>/2022/05/21/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL9%EF%BC%9A%E5%B0%86%E6%88%91%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%94%BE%E7%BB%99%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>学员笔记：<a href="https://juejin.cn/post/7097126973163454494#heading-39">第九节：将我的服务开放给用户</a></p></div></details><details class="toggle" ><summary class="toggle-button" style="">课前准备 （摘自学员笔记）</summary><div class="toggle-content"><blockquote><p>专有名词</p></blockquote><ul><li><p>权威DNS：保存了相应域名的权威信息。权威DNS即通俗上“这个域名我说了算”的服务器</p></li><li><p>LocalDNS：缓存+递归查询，运营商（集团网）部署的本地DNS服务器，直接接受网内客户端请求</p></li><li><p>根DNS服务器：全球有13台，LocalDNS未命中缓存查询的起点服务器，其公网地址具体可参考<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.iana.org%2Fdomains%2Froot%2Fservers">www.iana.org/domains/roo…</a></p></li><li><p>DNS Update：DNS主服务器master接受外部的变更指令</p></li><li><p>DNS Notify：DNS主服务器master接受变更命令后，会自增自身的serial号，同时将变更的serial号告知从服务器slave</p></li><li><p>DNS IXFR：DNS从服务器slave以增量的形式向master要求获取本次变更的内容</p></li><li><p>DNS AXFR：DNS从服务器slave以全量的形式向master要求获取当前的全量数据</p></li><li><p>对称加密：使用相同的秘钥来加密传输内容，一端加密后，对端收到数据会用相同的秘钥来解密</p></li><li><p>非对称加密：如果用公钥对数据进行加密，只有用对应的私钥才能解密；如果用私钥对数据进行加密，那么只有用对应的公钥才能解密。</p></li><li><p>静态加速：针对视频、图片等不变的内容，将其缓存在靠近用户的边缘节点，缓存预热后用户直接从边缘获取，从而加速访问速度；</p></li><li><p>动态加速DCDN：针对API类返回值不同的请求，通过特殊的网络优化方式（路由优化、传输优化）等技术加速其达到源站的速度。</p></li><li><p>VIP：虚拟IP，一般作为四层反向代理的入口，client看起来一直在与VIP交互</p></li><li><p>RS：Real Server，VIP后实际承受client请求的服务，可能是物理机/虚拟机/容器POD</p></li><li><p>DPDK：Data Plane Development Kit，主要用户4层负载均衡，用于转发的网络加速领域比较多；以极大提高网卡报文的处理性能和吞吐量，提高数据平面应用程序的工作效率</p></li><li><p>SSL/TLS：(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议</p></li><li><p>DPDK：Data Plane Development Kit，一种从数据面去加速网络报文处理的工具，可以极大提高数据处理性能和吞吐量，提高数据平面应用程序的工作效率</p></li></ul><blockquote><p>实验工具准备</p></blockquote><p>基础条件：使用Linux/MacOS操作系统，windows可以安装虚拟机，Ubuntu或者Centos都行</p><p>开源软件：bind9、nginx、ngrok(<a href="https://link.juejin.cn?target=https%3A%2F%2Fngrok.com%2Fdownload">ngrok.com/download</a>)</p><p>备注：bind9和nginx使用apt-get或者yum命令安装即可</p></div></details><hr><h1 id="企业接入升级打怪之路">企业接入升级打怪之路</h1><h2 id="域名系统">域名系统</h2><h3 id="Host-管理">Host 管理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211617436.jpg" alt=""></p><p>example 公司在建立之初建立了一些内部站点，如办公、文档等</p><p>他们的网络运维人员靠一张 Host 表来管理从 host 到 IP 的映射</p><p>也就是说，运维编辑表，然后员工使用 FTP 协议拉取这个表</p><p>但是随着 example 公司越来越多，这一方法出现了越来越多的问题</p><ul><li>流量和负载大</li><li>靠人工避免域名冲突</li><li>时效性差</li></ul><h3 id="使用域名系统">使用域名系统</h3><p>所以 example 公司的运维打算使用域名系统替换 hosts 文件</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211624159.jpg" alt=""></p><h3 id="域名购买和配置迁移">域名购买和配置迁移</h3><p>之后， example 公司去购买了域名，解决了 Host 方案的一系列问题</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211625322.jpg" alt=""></p><h3 id="如何开发外部用户访问">如何开发外部用户访问</h3><p>随着公司的增长，example 公司打算开发一个外部网站，具体方案如下图</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211627888.jpg" alt=""></p><h2 id="自建-DNS-服务器">自建 DNS 服务器</h2><h3 id="问题背景">问题背景</h3><p>前面说到，example 公司使用域名系统替换了 Host 文件解决方案，解决了一系列问题，最终把外部网站开发给了用户，但是也出现了一些问题</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211632251.jpg" alt=""></p><p>所以公司的运维开始研究 DNS 系统的工作模型</p><h3 id="DNS-查询过程">DNS 查询过程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211636734.jpg" alt=""></p><p>本地 DNS -&gt; 权威 DNS</p><h3 id="DNS-记录类型">DNS 记录类型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211638479.jpg" alt=""></p><h3 id="权威-DNS-系统架构">权威 DNS 系统架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211644531.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211646310.jpg" alt=""></p><h2 id="HTTPS-协议">HTTPS 协议</h2><h3 id="问题背景-2">问题背景</h3><p>随着 example 公司的不断壮大和发展，最近收到了很多用户的投诉，最后发现是由 HTTP 协议造成的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211648900.jpg" alt=""></p><h3 id="对称加密和非对称加密">对称加密和非对称加密</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211652658.jpg" alt=""></p><h3 id="SSL-的通信过程">SSL 的通信过程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211653438.jpg" alt=""></p><h3 id="证书链">证书链</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211656027.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211657192.jpg" alt=""></p><h3 id="使用-https">使用 https</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211659103.jpg" alt=""></p><p>example 公司在使用了 https 协议之后，就不用担心明文公网传输的问题了</p><h2 id="接入全站加速">接入全站加速</h2><h3 id="问题背景-3">问题背景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211704114.jpg" alt=""></p><h3 id="解决方案">解决方案</h3><ul><li>源站容量问题：增加后端机器扩容，使用静态加速缓存</li><li>网络传输问题：动态加速 DCDN</li><li>全站加速：静态加速+动态加速</li></ul><h3 id="静态加速-CDN">静态加速 CDN</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211712326.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211714627.jpg" alt=""></p><h3 id="动态加速-DCDN">动态加速 DCDN</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211716461.jpg" alt=""></p><h3 id="DCDN-原理">DCDN 原理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211720742.jpg" alt=""></p><h3 id="使用全站加速">使用全站加速</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211721566.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211722571.jpg" alt=""></p><h2 id="四层负载均衡">四层负载均衡</h2><h3 id="问题背景-4">问题背景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211723275.jpg" alt=""></p><h3 id="什么是四层负载均衡？">什么是四层负载均衡？</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211726280.jpg" alt=""></p><h3 id="常见的调度算法原理">常见的调度算法原理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211727629.jpg" alt=""></p><h3 id="常见的实现方式-FULLNAT">常见的实现方式 FULLNAT</h3><p>在内部做一次 IP 端口的转换</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211730553.jpg" alt=""></p><h3 id="四层负载均衡特点">四层负载均衡特点</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211730231.jpg" alt=""></p><h3 id="使用四层负载均衡">使用四层负载均衡</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211732527.jpg" alt=""></p><h2 id="七层负载均衡">七层负载均衡</h2><h3 id="问题背景-5">问题背景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211733791.jpg" alt=""></p><h3 id="Nginx-简介">Nginx 简介</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211735192.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211736196.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211737341.jpg" alt=""></p><h3 id="Nginx-反向代理示意图">Nginx 反向代理示意图</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211738334.jpg" alt=""></p><h3 id="Nginx-内部结构">Nginx 内部结构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211738677.jpg" alt=""></p><h3 id="事件驱动模型">事件驱动模型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211742097.jpg" alt=""></p><h3 id="异步非阻塞">异步非阻塞</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211744108.jpg" alt=""></p><h3 id="Nginx-简单调优">Nginx 简单调优</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211744374.jpg" alt=""></p><h3 id="别让-OS-限制了-Nginx-的性能">别让 OS 限制了 Nginx 的性能</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211746308.jpg" alt=""></p><h3 id="提升-CPU-使用效率">提升 CPU 使用效率</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211747538.jpg" alt=""></p><h3 id="提升网络效率">提升网络效率</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211751870.jpg" alt=""></p><h3 id="使用七层负载均衡">使用七层负载均衡</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211752214.jpg" alt=""></p><h1 id="动手实践">动手实践</h1><p>（以下内容鄙人全程在 WSL 中操作）</p><h2 id="准备一个-Http-服务">准备一个 Http 服务</h2><p>我使用 gin 框架写了个 hello world，来提供 http 服务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个默认的路由引擎</span></span><br><span class="line">r := gin.Default()</span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World!&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 启动 web 服务</span></span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212110151.jpg" alt=""></p><p>可以看见正常运行</p><h2 id="host-劫持实验">host 劫持实验</h2><p>众所周知，hosts 文件的优先级高于 DNS 服务器，所以可以在本地将域名劫持到特定的 ip 上，以用来调试目的，下面来验证这个原理</p><p>编辑 <code>/etc/hosts</code> ，加入下面这一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.23.245.154  www.toutiao.com</span><br></pre></td></tr></table></figure><p>然后就能看到效果</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212115684.jpg" alt=""></p><p>测试完成后记得把这一行删掉</p><h2 id="搭建-DNS-服务器">搭建 DNS 服务器</h2><h3 id="权威侧-zone-文件准备">权威侧 zone 文件准备</h3><p>新建 zone 文件 <code>/etc/bind/example.com.zone</code>，并编辑为以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$TTL 10M</span><br><span class="line">@   IN    SOA    ns1.example.com    admin.example.com. (</span><br><span class="line">        0       ; serial</span><br><span class="line">        1D      ; refresh</span><br><span class="line">        1H      ; retry</span><br><span class="line">        1W      ; expire</span><br><span class="line">        3H )    ; minimum</span><br><span class="line"></span><br><span class="line">@    IN    NS   ns1.example.com.</span><br><span class="line">; 这里ns1主机的ip地址可以换成本机地址</span><br><span class="line">ns1        A    172.23.245.154</span><br><span class="line">; 这里www主机的ip地址可以换成本机地址</span><br><span class="line">www        A    172.23.245.154     </span><br></pre></td></tr></table></figure><h3 id="bind9-配置准备">bind9 配置准备</h3><p>直接编辑 <code>/etc/bind/named.conf</code> 即可，配置参考如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">logging &#123;</span><br><span class="line"> channel default_log &#123;</span><br><span class="line">        #这里注意提前创建log目录</span><br><span class="line">        file &quot;/var/log/named/named.log&quot; versions 10 size 200m;</span><br><span class="line">        severity dynamic;</span><br><span class="line">        print-category yes;</span><br><span class="line">        print-severity yes;</span><br><span class="line">        print-time yes;</span><br><span class="line">    &#125;;</span><br><span class="line">    channel query_log &#123;</span><br><span class="line">        file &quot;/var/log/named/query.log&quot; versions 10 size 200m;</span><br><span class="line">        severity dynamic;</span><br><span class="line">        print-category yes;</span><br><span class="line">        print-severity yes;</span><br><span class="line">        print-time yes;</span><br><span class="line">    &#125;;</span><br><span class="line">    channel resolver_log &#123;</span><br><span class="line">        file &quot;/var/log/named/resolver.log&quot; versions 10 size 200m;</span><br><span class="line">        severity dynamic;</span><br><span class="line">        print-category yes;</span><br><span class="line">        print-severity yes;</span><br><span class="line">        print-time yes;</span><br><span class="line">    &#125;;</span><br><span class="line">    category default &#123;default_log;&#125;;</span><br><span class="line">    category queries &#123;query_log;&#125;;</span><br><span class="line">    category query-errors &#123;query_log;&#125;;</span><br><span class="line">    category resolver &#123;resolver_log;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">options &#123;</span><br><span class="line">    #这里的ip地址可以换成本机地址</span><br><span class="line">    listen-on port 8053 &#123; 127.0.0.1; &#125;; // 鄙人按：这个服务的端口要记着</span><br><span class="line">    directory &quot;/etc/bind&quot;;</span><br><span class="line">    dnssec-validation no;</span><br><span class="line">    #支持递归查询</span><br><span class="line">    recursion yes;</span><br><span class="line">    #转发到公共DNS优先，而不是自己去迭代查询，节省网络IO资源消耗</span><br><span class="line">    forward first;</span><br><span class="line">    forwarders &#123;</span><br><span class="line">        223.5.5.5;</span><br><span class="line">        223.6.6.6;</span><br><span class="line">    &#125;;</span><br><span class="line">    allow-query &#123; any; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;example.com&quot; &#123;  // 权威 DNS</span><br><span class="line">    type master;</span><br><span class="line">    file &quot;example.com.zone&quot;; // 匹配上这个域名就去找上面编辑的 example.com.zone 文件</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>前车之鉴：一定要把默认有的三行 include 给注释掉</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212158124.jpg" alt=""></p><h3 id="运行-bind6">运行 bind6</h3><p>用下面这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo named -g</span><br></pre></td></tr></table></figure><p>如果有报错的话，自己排查一下</p><h3 id="使用-dig-命令验证">使用 dig 命令验证</h3><ul><li><p>验证权威 DNS 服务</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @127.0.0.1 -p 8053 www.example.com <span class="comment"># 从本机的 8053 端口找域名</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212208235.jpg" alt=""></p></li><li><p>验证 LocalDNS 服务</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @127.0.0.1 -p 8053 www.toutiao.com </span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212212931.jpg" alt=""></p><p>未命中本地托管的 zone 数据，直接向任一 forwarders（公共DNS）请求，获取结果后缓存到本地</p></li></ul><h2 id="四层负载均衡实验">四层负载均衡实验</h2><p>正经的四层负载均衡要使用 LVS+keepalived ，但是配置专业的东西过于麻烦，这里就使用 nginx 来演示一下</p><p>四层的负载均衡就是一个网关的机子转发流量到内部的机子里，但是我们现在只有一台机子，也就只能将就着玩一下</p><p>目前我们一个有了两个服务：</p><ul><li>8053 端口的 DNS 服务</li><li>8080 端口的 http 服务</li></ul><p>现在我们把 53 端口的 udp 报文转发到 8053 去，80 端口的 tcp 报文转发到 8080 去</p><p>编辑 <code>/etc/nginx/nginx.conf</code> ，新增stream模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#四层转发，tcp/udp协议转发</span><br><span class="line">stream &#123;</span><br><span class="line">    log_format proxy &#x27;$remote_addr [$time_local] &#x27;</span><br><span class="line">                 &#x27;$protocol $status $bytes_sent $bytes_received &#x27;</span><br><span class="line">                 &#x27;$session_time &quot;$upstream_addr&quot; &#x27;</span><br><span class="line">                 &#x27;&quot;$upstream_bytes_sent&quot; &quot;$upstream_bytes_received&quot; &quot;$upstream_connect_time&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  proxy;</span><br><span class="line">    open_log_file_cache off;</span><br><span class="line"></span><br><span class="line">    upstream dns_proxy &#123;</span><br><span class="line">        server 127.0.0.1:8053; # 发送到本地的 8053</span><br><span class="line">    &#125;</span><br><span class="line">    upstream hello_proxy &#123;</span><br><span class="line">        server 127.0.0.1:8080; # 发到本地的 1080</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 53 udp reuseport;  # 监听 53 端口</span><br><span class="line">        proxy_pass dns_proxy;     # 发送到 dns_proxy</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 81;# 监听 81 端口</span><br><span class="line">        proxy_connect_timeout 1s;</span><br><span class="line">        proxy_timeout 300s;</span><br><span class="line">        proxy_pass hello_proxy;  # 发到 hello_proxy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流量转发验证">流量转发验证</h3><ul><li><p>UDP 流量</p><p>看，请求 53 端口照样可以找到 DNS 服务</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212228439.jpg" alt=""></p></li><li><p>TCP 流量</p><p>可以看见 81 端口也正常地转发了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212233599.jpg" alt=""></p></li></ul><h2 id="七层负载均衡实验">七层负载均衡实验</h2><p>也是转发，但是是在第七层</p><p>继续编辑 nginx 的配置文件，把 880 端口的 http 请求转发到 8080 去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">       server 127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       880;</span><br><span class="line">        server_name  www.example.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">             proxy_set_header HOST $host;</span><br><span class="line">             proxy_connect_timeout 60;</span><br><span class="line">             proxy_send_timeout 60;</span><br><span class="line">             proxy_read_timeout 60;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用下面的命令重载 nginx 的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>然后检查，可以看见能够成功转发</p><p>而且是真的在第 7 层转发的，有日志记录</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212251910.jpg" alt=""></p><h2 id="SSL-自签证书实验">SSL 自签证书实验</h2><p>（略，感觉平时会怎么配 SSL 证书就够了）</p><p>但是这个是在七层负载的同时上 SSL 证书，感兴趣的也可以去试一下</p><h2 id="将本地服务开放外网访问">将本地服务开放外网访问</h2><p>（略，感觉会 frp，nps之类的也够了）</p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』青训营 x 掘金技术社区专场班会</title>
      <link href="/2022/05/20/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8F%E9%9D%92%E8%AE%AD%E8%90%A5-x-%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%E4%B8%93%E5%9C%BA%E7%8F%AD%E4%BC%9A/"/>
      <url>/2022/05/20/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8F%E9%9D%92%E8%AE%AD%E8%90%A5-x-%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%E4%B8%93%E5%9C%BA%E7%8F%AD%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在掘金高效学习">如何在掘金高效学习</h1><p>一个帮助开发者成长的社区</p><ol><li>学习的价值：编程技术处于高速更新换代中</li><li>分享的价值：在分享中成长，鼓励开源精神</li><li>掘金社区要解决的问题：<ul><li>定位：面向全球中文开发者提供优质技术内容</li><li>文化：坚信善于分享和学习优质内容的开发者会成长得越来越好</li><li>规则：激励持续输出原创优质内容的用户</li></ul></li></ol><h2 id="高效获取内容">高效获取内容</h2><ul><li>多平台</li><li>标签体系</li><li>优秀技术团队/创作者</li><li>干货直播</li><li>学习课程</li></ul><h2 id="高效笔记">高效笔记</h2><ul><li>使用掘金插件写笔记</li><li>持续写文章</li></ul><h2 id="休闲交流">休闲交流</h2><ul><li>JYM，欢迎来沸点摸鱼</li><li>各种活动</li></ul><h1 id="从-Go-菜鸟到-Go-专家">从 Go 菜鸟到 Go 专家</h1><h2 id="技术深入">技术深入</h2><h3 id="成为专家的路线">成为专家的路线</h3><ol><li>学习基础语法与使用</li><li>学习问题与解决方法</li><li>学习原理和底层设计</li></ol><h3 id="必须掌握的工具">必须掌握的工具</h3><ol><li>各种 IDE</li><li>GitHub</li><li>Go 的调试器 DELVE</li><li>性能分析工具</li></ol><h2 id="邻域拓展">邻域拓展</h2><ul><li><p>一手的消息源</p></li><li><p>理性看待技术文章</p></li></ul><h2 id="社区参与">社区参与</h2><h3 id="了解开源技术组织和社区">了解开源技术组织和社区</h3><ul><li>工业界广为接受的开源技术组织<ul><li>Apache</li><li>CNCF</li><li>etc</li></ul></li><li>Go 语言本身的技术社区<ul><li>golang-nuts</li><li>golang-dev</li></ul></li></ul><h3 id="为什么要参与开源社区">为什么要参与开源社区</h3><h3 id="哪些社区项目值得参与">哪些社区项目值得参与</h3><ul><li>我喜欢的</li><li>星星多的</li><li>名气大的</li><li>我想去的公司的项目</li></ul><h2 id="思考总结">思考总结</h2><h3 id="为什么要总结">为什么要总结</h3><h3 id="科学的总结方法">科学的总结方法</h3><ul><li>卡片笔记</li><li>个人代码库</li><li>体系化总结</li></ul><h2 id="多做技术方面的输出">多做技术方面的输出</h2><ul><li>将笔记内容组织为文章输出</li><li>打造个人品牌</li><li>著书立说</li></ul>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L8：打开抖音互联网会发生什么</title>
      <link href="/2022/05/19/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL8%EF%BC%9A%E6%89%93%E5%BC%80%E6%8A%96%E9%9F%B3%E4%BA%92%E8%81%94%E7%BD%91%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/"/>
      <url>/2022/05/19/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL8%EF%BC%9A%E6%89%93%E5%BC%80%E6%8A%96%E9%9F%B3%E4%BA%92%E8%81%94%E7%BD%91%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h1 id="刷抖音网络是怎么交互的">刷抖音网络是怎么交互的</h1><h2 id="网络接入">网络接入</h2><h3 id="互联网">互联网</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0f09630e48e496a8dac275d49f46ffe~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h3 id="路由">路由</h3><p>路由发包原理</p><ul><li><p>同网段：配置网段即可默认添加静态路由。获取对端MAC直接发包</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8ff9962042d40af90b44043769a4d35~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p></li><li><p>跨网段：配置网关路由。获取网关MAC地址发包</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b1d492dc8ef42058763844ced47dfdd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p></li><li><p>动态路由：BGP/OSPF等，路由表在动态变化</p></li><li><p>路由是网状的，不一定是对称的</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/424335633234423fa5e2cc28a24848bc~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p></li></ul><p>路由传递时，始末 IP 是不变的， 始末 MAC 地址是一直改变的</p><h3 id="ARP协议">ARP协议</h3><ul><li>ARP广播/应答：协议原理</li><li>免费ARP：主动广播告知MAC地址</li><li>ARP代理：虚拟网络/伪造MAC地址</li></ul><p>ARP 的本质是查找下一跳的 MAC ，不是请求目标地址</p><h3 id="IP-协议">IP 协议</h3><p>Q：为什么不能用 MAC 代替 IP 地址？</p><p>MAC 协议是在第二层的，但是第二层还有很多其他的协议，为了兼容其他二层的协议就又封装了一层 IP</p><p>Q：IPv4不够用，除了IPv6还有什么方法</p><p>使用 NAT</p><h3 id="NAT">NAT</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/692cef58a45d4985853cc2e6a8518b19~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>NAT 是不是就改了改 IP 地址呢？</p><p>NAT 同时改了 IP + 端口</p><h2 id="网络传输">网络传输</h2><h3 id="数据包">数据包</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/013082ead9da4eb690f53f8f507e868f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>本质上是一段内存，里面存储的内存是有序的，一般是按照TCP/IP的多层协议去封装。拆包/封包都是按照协议去写内存/读内存。</p><h3 id="数据包发送">数据包发送</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a46805c16bf94698bdd85f331ca3066e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h3 id="先请求-DNS">先请求 DNS</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7993e66dbda7423a839bcb3440202e4e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>递归迭代解析</p><h3 id="DNS-的传输协议-UDP">DNS 的传输协议 UDP</h3><ul><li><p>协议简单</p><p>想发什么包，就分配一个 UDP 的头，把 payload 里面塞数据发出去就好</p></li><li><p>需要考虑可靠性的场景使用复杂</p><p>每次发多少？怎么避免分片？</p><p>怎么知道没丢包？</p><p>怎么权衡传输效率和质量？</p></li></ul><h3 id="TCP-三次握手">TCP 三次握手</h3><p>什么是 TCP 连接？</p><p>拔了网线，连接会断吗？（靠心跳包探活）</p><p>你真的了解 TCP 三次握手吗？</p><p>三次握手：确认传输的序列号/MSS/Option字段，建立连接</p><p>TCP连接：是一个虚拟的概念，本质上两倍维持一段内存，记录连接状态，就是session</p><h3 id="TCP-传输">TCP 传输</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205191937376.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205191944421.jpg" alt=""></p><p>TCP传输：理解sequence number/acknowledge number</p><p>丢包重传：理解丢包怎么感知并重传，理解快速重传发生在什么时候</p><p>滑动窗口：课后自学</p><p>流量控制：课后自学</p><h3 id="HTTP-HTTP1-1">HTTP/HTTP1.1</h3><ul><li>HTTP比TCP好在哪里：方便</li><li>HTTP1.1的优化：长连接是重点</li></ul><p>HTTP 只是多加了一层规程，HTTP 依然是 TCP ，只是这个规则让用户更清晰</p><p>HTPP 和 TCP 的关系就和中文和军事专业语类似</p><h3 id="HTTPS">HTTPS</h3><p>加密/可靠/防劫持</p><h3 id="SSL-TLS-握手">SSL/TLS 握手</h3><p>非对称加密/对称加密</p><h1 id="刷抖音为什么又快又稳">刷抖音为什么又快又稳</h1><p>（网络架构怎么给抖音提质）</p><h2 id="网络提速">网络提速</h2><h3 id="HTTP2-0">HTTP2.0</h3><p>多路复用</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66acfabaa6c2440abbed06fa6eb1b791~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h3 id="怎么理解多路复用-stream？">怎么理解多路复用/stream？</h3><p>麻烦的对头阻塞问题</p><h3 id="QUIC-HTTP3-0">QUIC/HTTP3.0</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a4a8209ed3447cfa0bb1d3dd2d64e8b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><ul><li>为什么在用户态实现？内核的更新迭代频率较低，不好推广</li><li>为什么用UDP？TCP的队头阻塞问题不好解决，推倒重来&amp;复用所有操作系统基本都支持的底层协议</li></ul><p>除了协议优化，还能不能做路径优化呢？</p><h3 id="数据中心分布">数据中心分布</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07ff0064ed4641f78b996236c748f052~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h3 id="同运营商访问">同运营商访问</h3><p>针对中国互联网现状，通过 IP 智能解析</p><h3 id="静态资源（图片等）路径优化（CDN）">静态资源（图片等）路径优化（CDN）</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b4a0cd9558f4a56b50ef233aafedd7d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>CDN静态缓存系统：边缘机房的建设，优先访问边缘机房，缓存命中视频/图片等静态内容</p><h3 id="动态API（播放-评论接口）路径优化（DSA）">动态API（播放/评论接口）路径优化（DSA）</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4967033dde7341c889f5f0f5bc7a616e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>DSA动态加速系统：分四层/七层动态加速。核心在于利用可控节点做路径探测和规划。</p><h2 id="网络稳定">网络稳定</h2><h3 id="容灾概念">容灾概念</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6233cb626a134485a28cae32397732a5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h4 id="网络容灾的具体案例一">网络容灾的具体案例一</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f4297370dee4b7bb748dedc9423d94b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>机房专线故障：环路容灾，避免某条专线故障导致机房孤岛问题（专线是连接各个机房的网络物理路径）</p><h4 id="网络容灾的具体案例二">网络容灾的具体案例二</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c7f5c495bb74964814f2929ea5a19e7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>单机房接入节点故障：DNS容灾，摘除故障的节点-字节GTM系统</p><h4 id="网络容灾的具体案例三">网络容灾的具体案例三</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/704b49bdb93140f9955431f1aed225e7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>云控容灾：云端交互，服务器/云上下发命令到终端-字节TNC系统</p><p>假如有一个机房不可用，指挥下游服务不使用该机房</p><h4 id="网络容灾的具体案例四">网络容灾的具体案例四</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db7ecf3d1f8649608fb6ff34f9a0d7db~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>cache 容灾：源站不可用，降级到之前的缓存内容-字节TLB/ByteCDN等系统的容灾建设</p><p>当发现后面不通的时候，先返回缓存的数据</p><h3 id="故障明确">故障明确</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3e5d7e5dfc64520be005d881c0e1843~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><ul><li>什么业务？什么接口故障？</li><li>故障提醒在哪里？</li><li>访问其他目标是否正常？</li><li>是否是修改导致的异常？</li></ul><h3 id="故障止损">故障止损</h3><p>先止损再排查</p><ul><li>用户体验第一</li><li>对公司收入的影响是按分钟甚至秒来算的</li></ul><p>如何止损</p><ul><li>组件没有容灾，但是系统有没有？</li><li>降级（如抖音推荐接口坏了，改为随机推送视频）</li></ul><h3 id="分段排查">分段排查</h3><p>客户端排查</p><ul><li>客户端访问其他服务没问题吗？</li><li>其他客户端访问目标服务没问题吗？</li></ul><p>服务端排查</p><ul><li>服务端监控/指标都正常吗？</li><li>手动访问一下正常吗？</li><li>分组件排查</li></ul><p>中间链路排查</p><ul><li>服务端跟客户端确保都没问题</li><li>中间网络设备有没有问题？（交换机/路由器/网关LB）</li><li>旁路的 DNS 有没有问题？</li></ul><h3 id="网络故障排查常用指令">网络故障排查常用指令</h3><ul><li>dig 查询 DNS 问题</li><li>ping/telnet/nmap 查询三层/四层连通性</li><li>Traceroute 排查中间链路</li><li>iptabels</li><li>tcpdump</li></ul><h4 id="网络故障排查案例一">网络故障排查案例一</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3e3472cb75747d792ea028c0dfd1c06~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>服务端配置异常（健康检查异常，即误摘掉了正常的服务器）</p><p>客户端异常-&gt;服务端自测正常-&gt;网关转发异常-&gt;健康检查异常</p><h4 id="网络故障排查案例二">网络故障排查案例二</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8943233b5124102890da70b553e9783~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>客户端某个例异常（客户端自己配置错误）</p><h4 id="网络故障排查案例三">网络故障排查案例三</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0027176e5204873878ecd683509fb7f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>外部运营商故障</p><p>安徽电信报障 APP 无法使用-&gt;检测后端服务正常</p><p>安徽电信流量突降-&gt;安徽电信客户端 ping  不通目标服务-&gt;电缆被挖断</p><h4 id="网络故障排查案例四">网络故障排查案例四</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8fd9767c0a2644eea2d4b9bef0f960ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>复杂故障的排查：需要抓包，具体问题具体分析</p><p>某 APP 故障-&gt;后端服务器反馈服务正常-&gt;网络转发设备异常-&gt;抓包-&gt;路由不对称</p><h3 id="故障预防很重要">故障预防很重要</h3><ul><li>监控警报</li><li>故障演练/预案</li><li>故障降级/止损</li></ul>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『离散数学』集合论：二元关系</title>
      <link href="/2022/05/18/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E9%9B%86%E5%90%88%E8%AE%BA%EF%BC%9A%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/"/>
      <url>/2022/05/18/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E9%9B%86%E5%90%88%E8%AE%BA%EF%BC%9A%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>本篇源于 B 站的<a href="https://www.bilibili.com/video/BV1Ma411e73u?p=6">【离散数学】3.5h让你离散数学不挂科</a>，感谢老师！</p><hr><h1 id="概念">概念</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182237549.jpg" alt=""></p><p>补充：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>A</mi></msub></mrow><annotation encoding="application/x-tex">L_{A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 小于等于关系</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>A</mi></msub></mrow><annotation encoding="application/x-tex">D_{A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 整除关系</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mo lspace="0em" rspace="0em">⊆</mo></msub></mrow><annotation encoding="application/x-tex">R_{\subseteq}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9285em;vertical-align:-0.2452em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2952em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mrel mtight">⊆</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2452em;"><span></span></span></span></span></span></span></span></span></span> 包含关系</li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182240833.jpg" alt=""></p><p>补充：关系的运算</p><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>o</mi><mi>m</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">domR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>：定义域</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>a</mi><mi>n</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">ranR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">an</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>：值域</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>l</mi><mi>d</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">fldR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>：域，等于定义域并上值域</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>R</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">R^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>：R 的逆</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>∘</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">F\circ G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span>：复合关系</p></li></ul><p>例：设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>=</mo><mo stretchy="false">{</mo><mo>&lt;</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>6</mn><mo separator="true">,</mo><mn>2</mn><mo>&gt;</mo><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>G</mi><mo>=</mo><mo stretchy="false">{</mo><mo>&lt;</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">F = \{&lt;3,3&gt;,&lt;6,2&gt;\},G = \{&lt;2,3&gt;\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">}</span></span></span></span></p><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>F</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mo stretchy="false">{</mo><mo>&lt;</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>2</mn><mo separator="true">,</mo><mn>6</mn><mo>&gt;</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">F^{-1} = \{&lt;3,3&gt;,&lt;2,6&gt;\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">}</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>∘</mo><mi>G</mi><mo>=</mo><mrow><mo>&lt;</mo><mn>6</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo></mrow></mrow><annotation encoding="application/x-tex">F\circ G = {&lt;6,3&gt;}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span></span></span></span>（6-&gt;2-&gt;3)</li></ol><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>↾</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">R↾A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8867em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">↾</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>：R 在 A 上的限制</p><p>R 中满足第一个元素，都是来源于 A 集合的有序对</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo stretchy="false">[</mo><mi>A</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">R[A]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mclose">]</span></span></span></span>：A 在 R 上的像</p><p>R 中满足第一个元素，都是来源于 A 集合的有序对的第二个元素</p></li></ul><p>例：设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><mo stretchy="false">{</mo><mo>&lt;</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>2</mn><mo separator="true">,</mo><mn>2</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>3</mn><mo separator="true">,</mo><mn>2</mn><mo>&gt;</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">R = \{&lt;1,2&gt;,&lt;1,3&gt;,&lt;2,2&gt;,&lt;2,4&gt;,&lt;3,2&gt;\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">}</span></span></span></span></p><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>↾</mo><mo stretchy="false">{</mo><mn>1</mn><mo stretchy="false">}</mo><mo>=</mo><mo stretchy="false">{</mo><mo>&lt;</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">R↾\{1\}=\{&lt;1,2&gt;,&lt;1,3&gt;\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8867em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">↾</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">}</span></span></span></span>（第一个元素为 1 的只有这两个）</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>↾</mo><mi mathvariant="normal">∅</mi><mo>=</mo><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">R↾\emptyset =\emptyset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8867em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">↾</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">∅</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">∅</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo stretchy="false">[</mo><mo stretchy="false">{</mo><mn>1</mn><mo stretchy="false">}</mo><mo stretchy="false">]</mo><mo>=</mo><mo stretchy="false">{</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">R[\{1\}]= \{2,3\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">[{</span><span class="mord">1</span><span class="mclose">}]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mclose">}</span></span></span></span>（找出那两个对之后，只取第二个元素）</li></ol><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182257846.jpg" alt=""></p><p>补充：关系的性质</p><ul><li><p>自反性（ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>x</mi><mo separator="true">,</mo><mi>x</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">∀x,x∈A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∀</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> -&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mi>x</mi><mo separator="true">,</mo><mi>x</mi><mo>&gt;</mo><mo>∈</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">&lt;x,x&gt;∈R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>）</p><p>关系图每个顶点都自成环，关系矩阵主对角元素都为 1</p></li><li><p>反自反性（ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>x</mi><mo separator="true">,</mo><mi>x</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">∀x,x∈A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∀</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> -&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mi>x</mi><mo separator="true">,</mo><mi>x</mi><mo>&gt;</mo><mo mathvariant="normal">∉</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">&lt;x,x&gt;∉R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord vbox"><span class="thinbox"><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.0556em;"></span></span></span><span class="fix"></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>）</p><p>关系图每个顶点都不自成环，关系矩阵主对角元素都为 0</p></li><li><p>对称性 symmetric <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>R</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">R^{-1} = R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>关于主对角线对称，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>&gt;</mo><mo>∈</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">&lt;x,y&gt;∈R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>  -&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>&gt;</mo><mo>∈</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">&lt;x,y&gt;∈R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>，</p></li><li><p>反对称性 antisymmetric</p><p>关于主对角线对称的任意两对元素至多有一个 1，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>&gt;</mo><mo>∈</mo><mi>R</mi><mo>⋀</mo><mo>&lt;</mo><mi>y</mi><mo separator="true">,</mo><mi>x</mi><mo>&gt;</mo><mo>∈</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">&lt;x,y&gt;∈R ⋀ &lt;y,x&gt;∈R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⋀</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>  -&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></p></li><li><p>传递性 Transitive</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>∘</mo><mi>R</mi><mo>⊆</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">R\circ R⊆R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p></li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205300854067.png" alt="B7B59CB23E9F3CA8B60FA63606D26F7F"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205300953812.png" alt="img"></p><ul><li>（反）对称的关系图描述开头加个 如果</li><li>对称：如果连跳了两个点及以上，那一定能跳回去（非原路）</li></ul><p>注意：</p><ul><li>自反和反自反不是互斥的，可以既不是自反又不是反自反</li><li>是否对称对于是否反对称没有关系</li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182259160.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182302869.jpg" alt=""></p><p>最多加到4次方</p><h1 id="等价关系和等价类">等价关系和等价类</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182310211.jpg" alt=" "></p><hr><p>未完成，空降 13:15</p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『离散数学』集合论：集合代数</title>
      <link href="/2022/05/18/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E9%9B%86%E5%90%88%E8%AE%BA%EF%BC%9A%E9%9B%86%E5%90%88%E4%BB%A3%E6%95%B0/"/>
      <url>/2022/05/18/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E9%9B%86%E5%90%88%E8%AE%BA%EF%BC%9A%E9%9B%86%E5%90%88%E4%BB%A3%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>本篇源于 B 站的<a href="https://www.bilibili.com/video/BV1Ma411e73u?p=5">【离散数学】3.5h让你离散数学不挂科</a>，感谢老师！</p><hr><h1 id="集合的基本运算">集合的基本运算</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182204568.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182206758.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182208598.jpg" alt=""></p><h1 id="集合相对（包含）的证明">集合相对（包含）的证明</h1><p>集合运算的重要恒等式</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182214334.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182214941.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182220100.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182223508.jpg" alt=""></p><h1 id="包含排斥原理">包含排斥原理</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182226775.jpg" alt=""></p><p>（集合上画一根横线是补集的意思）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182227277.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182229394.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182230341.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L7：从需求到上线全流程</title>
      <link href="/2022/05/18/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL7%EF%BC%9A%E4%BB%8E%E9%9C%80%E6%B1%82%E5%88%B0%E4%B8%8A%E7%BA%BF%E5%85%A8%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/05/18/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL7%EF%BC%9A%E4%BB%8E%E9%9C%80%E6%B1%82%E5%88%B0%E4%B8%8A%E7%BA%BF%E5%85%A8%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7097126973163454494#heading-36">第七节：从需求到上线全流程</a></p><p>这一节的内容是讲作为一个大企的后端人，平时的工作是怎样进行的</p><p>印象很深的地方就是按照跑火车的节奏每周先拿开会需求，开发，上线测试，再开会、开发…还是很有意思的</p><p>正经的笔记真的没时间做，下面就备份一手学习资料吧（其实也基本能囊括上课讲的内容了）</p><hr><h2 id="概述">概述</h2><p><strong>课程背景：</strong> 作为后端研发同学，在一个完整的需求交付周期内究竟要做哪些事情？在各个阶段需要跟不同的角色和平台打交道。介绍常见的研发模式和迭代流程，以实际的例子让同学感受一下后端研发的日常，能够提升大家在团队中协作的能力。</p><p><strong>课程目标：</strong></p><ol><li>提升对流程的认知</li><li>熟悉在公司大团队中协作开发</li><li>对职业生涯的日常有更直观的理解</li></ol><h2 id="课前-（必须）">课前 （必须）</h2><h3 id="词汇表">词汇表</h3><table><thead><tr><th>分类</th><th>英文</th><th>中文</th><th>解释</th></tr></thead><tbody><tr><td>研发模式</td><td>Waterfall Model</td><td>瀑布模型</td><td>瀑布模型（Waterfall Model）最早强调软件或系统开发应有完整之周期，且必须完整的经历周期之每一开发阶段，并系统化的考量分析与设计的技术、时间与资源之投入等。由于该模式强调系统开发过程需有完整的规划、分析、设计、测试及文件等管理与控制，因此能有效的确保系统质量，它已经成为软体业界大多数软件开发的最初标准</td></tr><tr><td>The Scaled Agile Framework(SAFe)</td><td>规模化敏捷框架</td><td></td><td></td></tr><tr><td>Scrum</td><td>Scrum</td><td>在软件工程中，Scrum是以经验过程为依据，采用迭代、增量的方法来提高产品开发的可预见性并控制风险的理论，Scrum不是一种过程，也不是一项构建产品的技术，而是一个框架，在Scrum框架中可以应用各种过程和技术，Scrum的作用是让开发实践方法的相对功效显现出来以便随时改进。 Scrum是敏捷(Agile)开发的一种实践模式，敏捷开发强调拥抱需求变化，快速响应不断变化的需求，并尽可能快地提供可以工作的软件产品，敏捷最强调的是可以正常工作的软件产品，文档等不是非常的强调（并非不要文档，只是需要必要的文档），敏捷理论认为面对面的沟通交流远比文档更有效。 敏捷开发的Scrum模式是以价值驱动(Value-Driven)的开发模式，即认为用户的需求并不一定需要100%实现，最重要的是将对用户最有价值的功能实现并交付.</td><td></td></tr><tr><td>流程中的概念</td><td>Scrum Master</td><td>敏捷教练</td><td>Scrum Master是Scrum教练和团队带头人，确保团队合理的运作Scrum，并帮助团队扫除实施中的障碍</td></tr><tr><td>Product Owner</td><td>产品负责人</td><td>产品负责人，确定产品的方向和愿景，定义产品发布的内容、优先级及交付时间，为产品投资回报率负责；</td><td></td></tr><tr><td>Agile Release Train</td><td>敏捷发布火车</td><td>敏捷开发的一种发布模式</td><td></td></tr><tr><td>RD</td><td>研发工程师</td><td>RD一般指Research and Development Engineer，即研发工程师。</td><td></td></tr><tr><td>PM</td><td>产品经理</td><td>产品经理</td><td></td></tr><tr><td>PRD</td><td>产品需求文档</td><td>产品需求文档</td><td></td></tr><tr><td>RD</td><td>研发工程师</td><td>RD一般指Research and Development Engineer，即研发工程师。</td><td></td></tr><tr><td>UED</td><td>交互设计师</td><td>用户体验设计师，交互设计师，界面设计师</td><td></td></tr><tr><td>QA</td><td>测试工程师</td><td>指理解产品的功能要求，并对其进行测试，检查软件有没有缺陷（Bug），测试软件是否具有稳定性（Robustness）、安全性、易操作性等性能，写出相应的测试规范和测试用例的专门工作人员。</td><td></td></tr><tr><td>Backlog</td><td>待办事项</td><td>产品订单（product backlog）是整个专案的概要文档。产品订单包括所有所需特性的粗略的描述。产品订单是关于将要生产什么样的产品。产品订单是开放的，每个人都可以编辑。产品订单包括粗略的估算，通常以天为单位。估算将帮助产品负责人衡量时程表和优先级（例如，如果&quot;增加拼写检查&quot;特性的估计需要花3天或3个月，将影响产品负责人对该特性的渴望）。 冲刺订单（sprint backlog）是大大细化了的文档，包含团队如何实现下一个冲刺的需求的信息。任务被分解为以小时为单位，没有任务可以超过16个小时。如果一个任务超过16个小时，那么它就应该被进一步分解。冲刺订单上的任务不会被分派，而是由团队成员签名认领他们喜爱的任务。</td><td></td></tr><tr><td>Grooming Meeting</td><td>Grooming会议</td><td>这个会议上面会由PO来描述下个迭代需要实现的功能，大家讨论要不要干</td><td></td></tr><tr><td>Planning Meeting</td><td>Planning会议</td><td>这个会议讨论功能具体什么时候干，要估算任务的工作量</td><td></td></tr><tr><td>基础知识</td><td>CNCF</td><td>云原生计算基金会</td><td>云原生计算是软件开发中的一种方法，它利用云计算“在现代动态环境（例如公共云、私有云和混合云）中构建和运行可扩展的应用程序”。 通过声明性代码部署的容器、微服务、无服务器功能和不可变基础设施等技术是这种架构风格的常见元素。</td></tr><tr><td>Kubernetes</td><td>K8S</td><td>生产级别的容器编排系统。Kubernetes 是一个可移植的、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。 Kubernetes 拥有一个庞大且快速增长的生态系统。Kubernetes 的服务、支持和工具广泛可用。</td><td></td></tr><tr><td>FAAS</td><td>函数即服务</td><td>函数即服务。仅通过编写函数（function）就能够发布为一个 API 或者服务，实现业务功能的技术体系。由于处理单元为函数粒度，往往底层也能够支持自动扩缩容地更精细化使用计算资源，开发侧支持事件驱动，可由消息或多种 Hook 触发，同时拥有快速上线、按需付费等优点。</td><td></td></tr><tr><td>APAAS</td><td>平台即服务</td><td>是一个为应用程序服务提供开发和部署环境的云服务</td><td></td></tr><tr><td>IDE</td><td>IDE</td><td>用于提供程序开发环境的应用程序。一般包括代码编辑器、编译器、调试器和图形用户界面等工具</td><td></td></tr><tr><td>Git</td><td>Git</td><td>分布式的版本管理系统</td><td></td></tr><tr><td>Merge/Rebase</td><td>合并/变基</td><td>处理代码分支的操作，将不同的分支整合成一个的两种方式</td><td></td></tr></tbody></table><h2 id="课中">课中</h2><h3 id="1-为什么要有流程">1. 为什么要有流程</h3><h4 id="团队规模和流程的关系">团队规模和流程的关系</h4><p>随着团队规模和问题复杂度的上升，一个人搞定一切就不可能了，超过了一个人，就需要进行团队协作，自然也就需要有流程。<br>常见的协作模式：</p><ul><li>瀑布模型 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ffdaa2f4cf648028e1534f8f811462f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></li><li>敏捷开发 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a8226ec557a452d976bf34b0cbe0a29~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></li><li>规模化敏捷</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd79b20834984f308934378ef3dcc64a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h4 id="后端的定位">后端的定位</h4><ul><li>瀑布模式<ul><li>按照时间节点参与会议，产出文档（系统分析，概要设计，详细设计，接口文档，提测文档等）</li><li>按照时间节点交付测试</li><li>按照时间节点发布</li></ul></li><li>敏捷团队<ul><li>跟随迭代制定规划，进行开发</li><li>参与待办事项整理会议（Backlog Grooming Meeting）<ul><li>PO描述下个迭代希望实现的用户故事</li></ul></li><li>迭代计划会议（Sprint Planning Meeting）<ul><li>选择迭代的任务和估算工作量</li></ul></li><li>每日站会（Standup Meeting）<ul><li>昨天你做了什么?</li><li>今天你将要做什么?</li><li>你有需要帮助的地方吗?</li></ul></li><li>评审会（Retrospective Meeting）<ul><li>小组向产品负责人展示迭代工作结果</li></ul></li><li>反思会（Retrospective Meeting）<ul><li>在每个迭代后召开简短的反思会，总结哪些事情做得好，哪些事情做得不好</li></ul></li></ul></li></ul><h4 id="团队协作">团队协作</h4><p>一个具体的迭代时间表：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b82fefa85cd94b60be71e920121ee6f8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h3 id="2-有哪些流程">2. 有哪些流程</h3><h4 id="需求阶段">需求阶段</h4><ul><li><p>不要浪费时间讨论不应该存在的问题</p></li><li><p>站在用户的角度思考</p></li><li><p>给出后端系统视角的建议，估算任务优先级</p></li></ul><h4 id="开发阶段">开发阶段</h4><ul><li><p>云原生下的开发：</p><ul><li>容器化技术</li><li>微服务技术</li><li>WebIDE</li></ul></li><li><p>团队分支策略：</p><ul><li>为什么会有分支策略</li><li>有哪些分支策略</li><li>合并的方式</li></ul></li><li><p>代码规范</p><ul><li>养成良好的注释习惯，超过三个月的代码，自己都会忘了当时在想什么</li><li>不要有魔法数字，魔法字符串</li><li>重复的逻辑抽象成公共的方法，不要copy代码</li><li>正确使用IDE的重构功能，防止修改错误</li></ul></li><li><p>自测</p><ul><li>单元测试</li><li>功能环境测试</li><li>测试数据构造</li></ul></li><li><p>文档</p><ul><li>大型改造需要有技术设计文档，方案评审</li><li>好的接口文档能更方便的和前端进行沟通</li></ul></li></ul><h4 id="测试阶段">测试阶段</h4><ul><li>功能测试</li></ul><p>功能测试，是为了测试一个新开发的功能，因此需要有能模拟线上的开发和测试环境，环境之间能相互隔离，这样可以独立验证不同的新功能</p><ul><li><p>集成测试：集成测试，是为了把几个功能合在一起测试，因为可能各个新功能独立测试没有问题，但是合在一起却产生了bug</p></li><li><p>回归测试：回归测试是为了验证老的功能不被新的改动影响</p></li></ul><h4 id="发布阶段">发布阶段</h4><ul><li><p>各种发布模式</p><ul><li>蛮力发布：简单粗暴，直接用新版本覆盖老版本。</li><li>金丝雀发布：由于金丝雀对瓦斯极其敏感，因此以前矿工开矿下矿洞前，先会放一只金丝雀进去探是否有有毒气体，看金丝雀能否活下来，金丝雀发布由此得名。</li><li>滚动发布：每个实例都通过金丝雀的方式逐步放大流量，对用户影响小，体验平滑</li><li>蓝绿发布：常备两个集群，先把流量全部切换到Group 1，升级Group2，然后再把流量全部切换到Group 2，升级Group 1。最终恢复流量。</li><li>红黑发布：与蓝绿发布类似，但是日常只有一个集群工作，发布时扩容一个集群升级新版本，切换流量后下掉老版本的集群。</li></ul></li><li><p>发布过程要做的事</p><ul><li>发布负责人<ul><li>负责按照计划执行发布</li><li>需要通知各个相关人员发布进展</li><li>观察各个服务的发布状态，及时处理异常</li></ul></li><li>变更服务的相关RD<ul><li>按照上线checklist检查服务的日志，监控，响应上线过程中的告警</li><li>对于自己负责的改动，在小流量或者是预览环境进行功能验证</li><li>执行发布计划中的其他操作（如线上配置，数据处理等）</li></ul></li><li>值班同学<ul><li>发布过程中的监控和告警需要特别关注，如果有异常需要立刻判断是否由变更引起</li><li>如果有变更引起的告警或者用户反馈，需要及时中止发布</li></ul></li></ul></li></ul><h4 id="运维阶段">运维阶段</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/858f17e23c734576800edc150bf87095~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h3 id="3-怎样执行流程">3. 怎样执行流程</h3><h4 id="DevOps">DevOps</h4><ul><li>效率竖井<ul><li>流程中实际产生价值的部分很短</li><li>大量的时间用在等待和传递上</li><li>人和人之间的沟通很慢</li></ul></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c12374129f8d4c11a2a07b74bd6ed511~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><ul><li>DevOps解决方案<ul><li>代码管理</li><li>自动化测试</li><li>持续集成</li><li>持续交付</li></ul></li></ul><h4 id="全流程自动化">全流程自动化</h4><ul><li><p>通过效能平台串联各个阶段</p><ul><li>需求发起研发流程的自动化</li><li>写代码，测试环境部署的自动化</li><li>自动化测试触发和报告分析</li><li>发布过程可观测融入流程</li></ul></li><li><p>减少无价值的等待</p><ul><li>分析整个流程的耗时，计算真正产生价值的时间</li><li>不断优化流程，让有价值的流程时间占比上升</li></ul></li></ul><h2 id="参考文献">参考文献</h2><ol><li><p>瀑布模型 <a href="https://link.juejin.cn?target=https%3A%2F%2Fzh.wikipedia.org%2Fwiki%2F%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B">zh.wikipedia.org/wiki/%E7%80…</a></p></li><li><p>Scrum: <a href="https://link.juejin.cn?target=https%3A%2F%2Fzh.wikipedia.org%2Fwiki%2FScrum">zh.wikipedia.org/wiki/Scrum</a></p></li><li><p>SAFe：</p><p>a.  <a href="https://link.juejin.cn?target=http%3A%2F%2Fwww.woshipm.com%2Fpd%2F4331832.html">www.woshipm.com/pd/4331832.…</a><br>b.  <a href="https://link.juejin.cn?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FScaled_agile_framework">en.wikipedia.org/wiki/Scaled…</a></p></li><li><p>CNCF：<a href="https://link.juejin.cn?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCloud_Native_Computing_Foundation">en.wikipedia.org/wiki/Cloud_…</a></p></li><li><p>常用的发布模式：<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cnblogs.com%2FLeo_wl%2Fp%2F14395960.html">www.cnblogs.com/Leo_wl/p/14…</a></p></li></ol><p>作者：青训营官方账号<br>链接：<a href="https://juejin.cn/post/7097126973163454494">https://juejin.cn/post/7097126973163454494</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L6：实战项目 - Go 语言笔记服务</title>
      <link href="/2022/05/18/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL6%EF%BC%9A%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE-Go-%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/05/18/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL6%EF%BC%9A%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE-Go-%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7095977466094682148#heading-31">第六节：实战项目 - Go 语言笔记服务</a></p><blockquote><p>讲得内容就是大概地过了一下这个项目，因为内容太多就把学习手册贴这了</p></blockquote><p>这个项目用到了很多新东西，例如RPC 框架， kitex 和链路追踪</p><p>我基本上是走马观花地看了一下，真要掌握还得自己写一遍</p><hr><h2 id="一、课程背景与目标">一、课程背景与目标</h2><h3 id="课程背景">课程背景</h3><p>在大家已经学完前 5节 Go 原理与实践课程的基础上，通过项目实战帮助大家把前面学过的知识应用起来</p><h3 id="课程目标">课程目标</h3><ul><li><p>将前面所学的知识应用到项目中</p></li><li><p>熟悉项目的代码,可以将项目正常运行</p></li><li><p>熟悉 Kitex/Gorm 的使用</p></li></ul><h2 id="二、课前了解">二、课前了解</h2><h3 id="安装-Docker-Postman-Git">安装 Docker/Postman/Git</h3><ul><li><p>安装 Minikube 或 Docker Desktop <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.runoob.com%2Fdocker%2Fwindows-docker-install.html">安装教程</a></p></li><li><p>可以使用 Minikube 或者使用 Docker Desktop 启动 Docker</p></li><li><p>安装 Postman</p></li><li><p>安装 Git <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F896043488029600%2F896067074338496">安装教程</a></p></li></ul><h3 id="Kitex-初体验">Kitex 初体验</h3><p>通过阅读 <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Fgetting-started%2F">www.cloudwego.io/zh/docs/kit…</a> 尝试运行 Kitex 的示例代码</p><ul><li>kitex 暂时没有针对 Windows 做支持，如果本地开发环境是 Windows 建议使用 <a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.microsoft.com%2Fzh-cn%2Fwindows%2Fwsl%2Finstall">WSL2</a></li></ul><h3 id="Gorm-初体验">Gorm 初体验</h3><p>通过阅读 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgorm.cn%2Fdocs%2F%23Install">gorm.cn/docs/#Insta…</a> 尝试运行 Gorm 的示例代码</p><h3 id="了解-Etcd和Opentracing">了解 Etcd和Opentracing</h3><p>了解 etcd 是什么以及 opentracing 是什么</p><h2 id="三、项目介绍">三、项目介绍</h2><h3 id="项目简介">项目简介</h3><p>EasyNote 提供了一套比较完整的笔记后端API服务.</p><ul><li>项目地址 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note">github.com/cloudwego/k…</a></li><li>推荐版本 Golang &gt;= 1.15</li></ul><h3 id="项目模块介绍">项目模块介绍</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25a16f24fd4c48ed8915248b31bd0d6f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="image.png"></p><h3 id="项目服务调用关系">项目服务调用关系</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c529157fd88a48bd88819533ca3b54a3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="image.png"></p><h3 id="项目模块功能介绍">项目模块功能介绍</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/963cc2ac9eb5405e8ab916606a1f7a03~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="image.png"></p><h3 id="项目技术栈">项目技术栈</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/412c9fc35e4c478e95deb585ddf21f75~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="image.png"></p><h3 id="项目相关的使用框架资料">项目相关的使用框架资料</h3><table><thead><tr><th></th><th></th><th>框架文档地址</th><th>github地址</th><th>拓展文档</th></tr></thead><tbody><tr><td>RPC框架Kitex</td><td>框架文档</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Foverview%2F">www.cloudwego.io/zh/docs/kit…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex">github.com/cloudwego/k…</a></td><td></td></tr><tr><td>Kitex-etcd扩展</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fkitex-contrib%2Fregistry-etcd">github.com/kitex-contr…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fkitex-contrib%2Fregistry-etcd">github.com/kitex-contr…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Ftutorials%2Fframework-exten%2Fregistry%2F">www.cloudwego.io/zh/docs/kit…</a><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Ftutorials%2Fframework-exten%2Fservice_discovery%2F">www.cloudwego.io/zh/docs/kit…</a></td><td></td></tr><tr><td>Kitex-OpenTracing扩展</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Ftutorials%2Fservice-governance%2Ftracing%2F">www.cloudwego.io/zh/docs/kit…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fkitex-contrib%2Ftracer-opentracing">github.com/kitex-contr…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Ftutorials%2Fframework-exten%2Fmiddleware%2F">www.cloudwego.io/zh/docs/kit…</a></td><td></td></tr><tr><td>ORM框架Gorm</td><td>框架</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgorm.cn%2Fzh_CN%2F">gorm.cn/zh_CN/</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgo-gorm%2Fgorm">github.com/go-gorm/gor…</a></td><td></td></tr><tr><td>Gorm-Opentracing扩展</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgo-gorm%2Fopentracing">github.com/go-gorm/ope…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgo-gorm%2Fopentracing">github.com/go-gorm/ope…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgorm.cn%2Fzh_CN%2Fdocs%2Fwrite_plugins.html">gorm.cn/zh_CN/docs/…</a></td><td></td></tr><tr><td>HTTP框架Gin</td><td>框架</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgin-gonic%2Fgin%23gin-web-framework">github.com/gin-gonic/g…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgin-gonic%2Fgin">github.com/gin-gonic/g…</a></td><td></td></tr><tr><td>Gin-JWT扩展</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fappleboy%2Fgin-jwt%23usage">github.com/appleboy/gi…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fappleboy%2Fgin-jwt">github.com/appleboy/gi…</a></td><td></td><td></td></tr></tbody></table><h2 id="四、项目代码介绍">四、项目代码介绍</h2><h3 id="项目代码目录结构介绍">项目代码目录结构介绍</h3><table><thead><tr><th><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fidl">idl</a></th><th><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Fblob%2Fmain%2Fbizdemo%2Feasy_note%2Fidl%2Fnote.thrift">thrift</a> / <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Fblob%2Fmain%2Fbizdemo%2Feasy_note%2Fidl%2Fuser.proto">proto</a> 接口定义文件</th><th></th><th>文档/子目录介绍</th></tr></thead><tbody><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fkitex_gen">kitex_gen</a></td><td>Kitex自动生成的代码</td><td></td><td></td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fpkg">pkg</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fpkg%2Fconstants">constants</a></td><td>常量</td><td></td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fpkg%2Ferrno">errno</a></td><td>错误码</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex%2Fdiscussions%2F248">关于错误码的讨论</a></td><td></td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fpkg%2Fmiddleware">middleware</a></td><td>Kitex的中间件</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Ftutorials%2Fframework-exten%2Fmiddleware%2F">Kitex Middleware 扩展</a></td><td></td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fpkg%2Fbound">bound</a></td><td>Kitex Transport Pipeline-Bound 扩展</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Ftutorials%2Fframework-exten%2Ftrans_pipeline%2F">什么是Kitex的Transport Pipeline-Bound 扩展</a></td><td></td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fpkg%2Ftracer">tracer</a></td><td>Jarger 初始化</td><td></td><td></td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fcmd">cmd</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fcmd%2Fapi">api</a></td><td>demoapi服务的业务代码</td><td>handlers : 封装了 api 的业务逻辑rpc : 封装了调用其它 rpc 服务的逻辑</td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fcmd%2Fnote">note</a></td><td>demonote服务的业务代码</td><td>dal : 封装了数据库的访问逻辑service: 封装了业务逻辑rpc : 封装了调用其它 rpc 服务的逻辑pack : 数据打包/处理</td><td></td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fcmd%2Fuser">user</a></td><td>demouser服务的业务代码</td><td></td><td></td></tr></tbody></table><h3 id="项目运行">项目运行</h3><h4 id="运行基础依赖">运行基础依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>执行上述命令启动 MySQL、Etcd、Jaeger 的 docker 镜像</p><h4 id="运行-demonote-服务">运行 demonote 服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd cmd/note </span><br><span class="line">sh build.sh </span><br><span class="line">sh output/bootstrap.sh</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="运行-demouser-服务">运行 demouser 服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd cmd/user </span><br><span class="line">sh build.sh </span><br><span class="line">sh output/bootstrap.sh</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="运行-demoapi-服务">运行 demoapi 服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd cmd/api </span><br><span class="line">chmod +x run.sh </span><br><span class="line">./run.sh</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="参考文档">参考文档</h2><ul><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2F">www.cloudwego.io/zh/docs/kit…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fkitex-contrib%2Fregistry-etcd">github.com/kitex-contr…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fkitex-contrib%2Ftracer-opentracing">github.com/kitex-contr…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex">github.com/cloudwego/k…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgorm.io%2Fdocs%2Findex.html">gorm.io/docs/index.…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgo-gorm%2Fgorm">github.com/go-gorm/gor…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgo-gorm%2Fopentracing">github.com/go-gorm/ope…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgin-gonic%2Fgin">github.com/gin-gonic/g…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fappleboy%2Fgin-jwt">github.com/appleboy/gi…</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法拾遗』问题规模与时间复杂度</title>
      <link href="/2022/05/17/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E9%97%AE%E9%A2%98%E8%A7%84%E6%A8%A1%E4%B8%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2022/05/17/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E9%97%AE%E9%A2%98%E8%A7%84%E6%A8%A1%E4%B8%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇节选于《算法竞赛：从入门到进阶》第二章：算法复杂度</p></blockquote><p>竞赛题目的限制时间一般是 1s ，目前普通计算机的计算速度是每秒千万次，故可推导出以下结论</p><table><thead><tr><th>算法的时间复杂度</th><th>能解决的最大问题规模</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">!)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>11</mn></mrow><annotation encoding="application/x-tex">11</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11</span></span></span></span></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>25</mn></mrow><annotation encoding="application/x-tex">25</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">25</span></span></span></span></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5000</mn></mrow><annotation encoding="application/x-tex">5000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5000</span></span></span></span></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log _{2}n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">10^{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">10^{7}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log _{2}n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td>&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">10^{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法拾遗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L5：设计模式之 Database/SQL 与 GORM 实践</title>
      <link href="/2022/05/15/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL5%EF%BC%9A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B-Database-SQL-%E4%B8%8E-GORM-%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/05/15/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL5%EF%BC%9A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B-Database-SQL-%E4%B8%8E-GORM-%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7095977466094682148/#heading-26">【Go 语言原理与实践学习资料（下）】第三届字节跳动青训营 - 后端专场</a></p><blockquote><p>本节课讲得东西很多，然后我太菜很多东西都听不懂，所以还是建议去看原视频吧 ☺️</p></blockquote><h1 id="理解-Database-SQL">理解 Database/SQL</h1><p>目标：通过统一的接口去操作不一样的数据库</p><p>Database/SQL 是一个在应用程序和数据库的中间层，暴露给应用的接口是相同的，只需更改连接接口和操作接口就可以连接不同的数据库</p><h1 id="GORM-使用简介">GORM 使用简介</h1><blockquote><p>设计简洁、功能强大、自由扩展的全功能 ORM</p></blockquote><h1 id="GORM-设计原理">GORM 设计原理</h1><h1 id="GORM-最佳实践">GORM 最佳实践</h1>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L4：高性能 Go 语言发行版优化与落地实践</title>
      <link href="/2022/05/14/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL4%EF%BC%9A%E9%AB%98%E6%80%A7%E8%83%BD-Go-%E8%AF%AD%E8%A8%80%E5%8F%91%E8%A1%8C%E7%89%88%E4%BC%98%E5%8C%96%E4%B8%8E%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/05/14/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL4%EF%BC%9A%E9%AB%98%E6%80%A7%E8%83%BD-Go-%E8%AF%AD%E8%A8%80%E5%8F%91%E8%A1%8C%E7%89%88%E4%BC%98%E5%8C%96%E4%B8%8E%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p><a href="https://juejin.cn/post/7095977466094682148/#heading-18">【Go 语言原理与实践学习资料（下）】第三届字节跳动青训营 - 后端专场</a></p></div></details><h1 id="自动内存管理">自动内存管理</h1><p>降低开发负担、解决安全性问题</p><p>三个任务：</p><ul><li>为对象分配空间</li><li>找到存活对象</li><li>回收死亡对象的内存空间</li></ul><h2 id="相关概念">相关概念</h2><h3 id="名词">名词</h3><p><code>Mutator</code>: 业务线程，分配新对象，修改对象指向关系（用户启动的线程）</p><p><code>Collector</code>: GC 线程，找到存活对象，回收死亡对象的内存空间</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19e835280f594639bf88ce65655de69b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p><code>Serial GC</code>: 只有一个 collector（暂停所有 Mutator ，回收后再继续运行）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/089ec51585cd4d4aa11f294095ae6979~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p><code>Parallel GC</code>: 并行 GC，支持多个 collectors 同时回收的 GC 算法（暂停时多个有多个回收线程）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/569c278f98a746d3ae97cd8ddff6a213~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p><code>Concurrent GC</code>: 并发 GC，支持 mutator(s) 和 collector(s) <strong>同时执行</strong>的 GC 算法</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/279daa762d0149fc856a937972442340~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><ul><li><p><strong>Collectors 必须感知对象指向关系的改变！</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f893e75e31844c19bfbd820acd523eff~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p></li></ul><h3 id="评价-GC-算法">评价 GC 算法</h3><ul><li>安全（不能回收存活的对象）</li><li>吞吐率（花在 GC 上的时间）</li><li>暂停时间</li><li>内存开销</li></ul><h2 id="算法1：-追踪垃圾回收">算法1： 追踪垃圾回收</h2><p>对象被回收的条件：指针指向关系不可达的对象</p><p>从根对象出发，遍历并标记所有可达的对象，最后清理剩下的对象</p><p>清理的策略：</p><ul><li><p>Copying GC ：把存活的对象分配到其他空间</p></li><li><p>Mark-sweep GC： 将死亡对象的内存标记为可分配</p></li><li><p>Mark-compact GC： 原地移动整理存活对象</p></li><li><p>分代 GC （Generational GC）</p><p>基于事实：很多对象分配出来后很快就不再使用了</p><p>每个对象都有年龄：经过 GC 的次数</p><p>然后把老的和年轻的分开，制定不同的 GC 策略</p><ul><li>年轻代<ul><li>由于存活对象很少，可以采用 Copying GC</li><li>吞吐率高</li></ul></li><li>老年代<ul><li>趋于一直活着，反复复制开销大</li><li>可采用 Mark-compact GC</li></ul></li></ul></li></ul><h2 id="算法2：引用计数">算法2：引用计数</h2><ul><li><p>每个对象都有一个与之关联的引用数目</p></li><li><p>对象存活的条件：当且仅当引用数大于 0</p></li><li><p>优点</p><ul><li>内存管理的操作被<strong>平摊到程序运行中</strong>：指针传递的过程中进行引用计数的增减</li><li>不需要了解 runtime 的细节：因为不需要标记 GC roots，因此不需要知道哪里是全局变量、线程栈等</li></ul></li><li><p>缺点</p><ul><li>开销大，因为对象可能会被多线程访问，对引用计数的修改需要<strong>原子操作</strong>保证<strong>原子性</strong>和<strong>可见性</strong></li><li>无法回收环形数据结构</li><li>每个对象都引入额外存储空间存储引用计数</li><li>虽然引用计数的操作被平摊到程序运行过程中，但是回收大的数据结构依然可能引发暂停</li></ul></li></ul><h1 id="Go-内存管理及优化">Go 内存管理及优化</h1><h2 id="Go-内存分配策略">Go 内存分配策略</h2><h3 id="策略1：分块">策略1：分块</h3><p>Go 会提前将<strong>内存分块</strong></p><ul><li>调用系统调用 mmap() 向 OS 申请一大块内存，例如 4 MB</li><li>先将内存划分成大块，例如 8 KB，称作 mspan</li><li>再将大块继续划分成<strong>特定大小</strong>的小块，用于对象分配</li><li>noscan mspan: 分配不包含指针的对象 —— GC 不需要扫描</li><li>scan mspan: 分配包含指针的对象 —— GC 需要扫描</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b7e176dac544c5e87e073c7508fa15d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>根据对象的大小，选择最合适的块分配</p><h3 id="策略2：缓存">策略2：缓存</h3><p>根据对象的大小，在 mcache 上分配</p><p>如果分不了，就找下一层 mcentral ，分配好后与 mcache 中的相同大小块交换（毕竟年轻代用的多）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/abd17ddd80514e18a9045fbdc66af1d1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h3 id="Go-内存管理的问题">Go 内存管理的问题</h3><ul><li>对象分配是<strong>非常高频</strong>的操作：每秒分配 GB 级别的内存</li><li>线上 profiling 发现，Go 的内存分配占用很多 CPU</li><li>小对象分配占大多数</li></ul><h2 id="字节跳动的优化方案：Balanced-GC">字节跳动的优化方案：Balanced GC</h2><p>针对小于 128B 的对象的优化算法，自己直接改 Go SDK</p><p>本质：将多个小对象的分配合并成一次大对象的分配</p><p>每一个 g 都分配一个 GAB ，然后在 GAB 中分配小对象</p><p>问题：只要 GAB 里有一个对象是存活的，那么这个大对象会一直占内存</p><p>解决方法：当 GAB 大小超过阈值后，将 GAB 中存活的对象复制到另外的 GAB 中，原 GAB 释放（使用 copying GC 的算法管理小对象）</p><h1 id="编译器和静态分析">编译器和静态分析</h1><h2 id="编译器的结构">编译器的结构</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29d0d8e5f3344325a7869e363c1ad42e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h2 id="静态分析">静态分析</h2><p>不执行代码，推导程序的行为，分析程序的性质</p><ul><li>控制流：程序执行的流程</li><li>数据流：数据在控制流上的传递</li></ul><p>通过分析两个流得到性质，优化代码</p><h3 id="过程内分析和过程间分析">过程内分析和过程间分析</h3><ul><li><p>内分析：在函数内进行控制流和数据流的分析</p></li><li><p>间分析：除了函数内的分析，还需要考虑跨函数的数据流和控制流，例如参数传递，函数返回值等</p></li></ul><h1 id="Go-编译器优化">Go 编译器优化</h1><ul><li><p>目的</p><ul><li><p>用户无感知，重新编译即可获得性能收益</p></li><li><p>通用的优化手段</p></li></ul></li><li><p>现状</p><ul><li><p>采用的优化较少</p></li><li><p>追求编译时间短，因此没有进行复杂的代码分析和优化</p></li></ul></li><li><p>思路</p><ul><li><p>面向后端长期执行的任务</p></li><li><p>用适当增加编译时间换取更高性能的代码</p></li></ul></li></ul><h2 id="函数内联">函数内联</h2><p>将被调用函数的函数体的副本替换到调用位置上，同时重写代码以反映参数的绑定</p><p>（鄙人感觉和 C 中的 inline 一模一样）</p><ul><li><p>优点</p><ul><li>消除调用开销</li><li>将过程间分析的问题转换为过程内分析，帮助其他分析</li></ul></li><li><p>缺点</p><ul><li>函数体变大</li><li>编译生成的 Go 镜像文件变大</li></ul></li></ul><h2 id="逃逸分析">逃逸分析</h2><p>分析代码中指针的动态作用域：指针在何处可以被访问</p><p>大致思路：</p><ul><li>从对象分配处出发，沿着控制流，观察数据流。若发现指针 p 在当前作用域 s:<ul><li>作为参数传递给其他函数；</li><li>传递给全局变量；</li><li>传递给其他的 goroutine;</li><li>传递给已逃逸的指针指向的对象；</li></ul></li><li>则指针 p 逃逸出 s，反之则没有逃逸出 s.</li></ul><h2 id="字节跳动的优化方案：Beast-Mode">字节跳动的优化方案：Beast Mode</h2><ul><li><p>修改了内联策略，让更多函数被内联</p></li><li><p>增加了其他优化的机会：逃逸分析</p></li><li><p>开销：文件更大，耗时更多</p></li><li><p>未逃逸出当前函数的指针指向的对象可以在栈上分配</p><ul><li><p>对象在栈上分配和回收很快：移动 sp 即可完成内存的分配和回收；</p></li><li><p>减少在堆上分配对象，降低 GC 负担。</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L3：高质量编程与性能调优实战</title>
      <link href="/2022/05/11/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL3%EF%BC%9A%E9%AB%98%E8%B4%A8%E9%87%8F%E7%BC%96%E7%A8%8B%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/"/>
      <url>/2022/05/11/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL3%EF%BC%9A%E9%AB%98%E8%B4%A8%E9%87%8F%E7%BC%96%E7%A8%8B%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>配套实例代码：<a href="https://github.com/wolfogre/go-pprof-practice">https://github.com/wolfogre/go-pprof-practice</a></p><p><a href="https://juejin.cn/post/7093721879462019102/#heading-16">【Go 语言原理与实践学习资料（上）】第三届字节跳动青训营 - 后端专场</a></p></div></details><p>前情提要：</p><ul><li></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/551a67231c244f4aad77cbaabc10e2cf~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt=""></p><h1 id="高质量编程">高质量编程</h1><h2 id="高质量编程简介">高质量编程简介</h2><p>什么是高质量：编写的代码能够达到正确可靠、简洁清晰的目标</p><ul><li>各种边界条件是否考虑完备</li><li>异常情况处理，稳定性保证</li><li>易读易维护</li></ul><p>编程原则：</p><ul><li>简单性</li><li>可读性</li><li>团队生产力</li></ul><h2 id="编码规范">编码规范</h2><p>如何编写高质量 Go 代码</p><ul><li>代码格式</li><li>注释</li><li>命名规范</li><li>控制流程</li><li>错误和异常处理</li></ul><h3 id="代码格式">代码格式</h3><p>推荐使用 gofmt 等工具自动格式化代码</p><h4 id="gofmt">gofmt</h4><p>官方的自动格式化工具</p><h4 id="goimports">goimports</h4><p>能自动控制库的引用</p><h3 id="注释">注释</h3><h4 id="注释应该做的">注释应该做的</h4><ul><li><p>解释代码作用（适合注释公共符号）</p></li><li><p>解释代码是如何做的（适合注释实现过程）</p></li><li><p>解释代码实现的原因（适合解释代码的外部因素，提供额外上下文）</p></li><li><p>解释代码什么情况会出错（适合解释代码的限制条件）</p></li><li><p>公共符号始终要注释</p><ul><li>包中声明的每个公共的符号：变量、常量、函数以及结构都需要添加注释</li><li>任何既不明显也不简短的公共功能必须予以注释</li><li>无论长度或复杂程度如何，对库中的任何函数必须进行注释</li></ul></li></ul><p>有一个例外，不需要注释实现接口的方法</p><h4 id="小结">小结</h4><ul><li>代码是最好的注释</li><li>注释应该提供代码未表达出的上下文信息</li></ul><h3 id="命名">命名</h3><h4 id="variable">variable</h4><ul><li><p>简洁胜于冗长</p></li><li><p>缩略词全大写，但当其位于变量开头且不需要导出时，使用全小写</p><ul><li>例如使用 <code>ServeHTTP</code> 而不是 <code>ServeHttp</code></li><li>使用 <code>XMLHTTPRequest</code> 或者 <code>xmlHTTPRequest</code></li></ul></li><li><p>变量距离其被使用的地方越远，则需要携带越多的上下文信息</p></li><li><p>全局变量在其名字中需要更多的上下文信息，使得在不同地方可以轻易辨认出其含义</p></li></ul><h4 id="function">function</h4><ul><li>函数名不携带包名的上下文信息，因为包名和函数名总是成对出现的</li><li>函数名尽量简短</li><li>当名为 foo 的包某个函数返回类型 Foo 时，可以省略类型信息而不导致歧义</li><li>当名为 foo 的包某个函数返回类型 T 时（T 并不是 Foo），可以在函数名中加入类型信息</li></ul><h4 id="package">package</h4><ul><li>只由小写字母组成。不包含大写字母和下划线等字符</li><li>简短并包含一定的上下文信息。例如 schema、task 等</li><li>不要与标准库同名。例如不要使用 sync 或者 strings</li></ul><p>尽量满足的规则：</p><ul><li>不使用变量名作为包名</li><li>使用单数而不是复数</li><li>谨慎使用缩写</li></ul><h4 id="小结-2">小结</h4><ul><li>核心目标是降低阅读理解代码的成本</li><li>重点考虑上下文信息，设计简洁清晰的名称</li></ul><h3 id="控制流程">控制流程</h3><ul><li><p>避免嵌套，保持正常流程清晰</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="keyword">if</span> foo &#123;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="keyword">if</span> foo &#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br></pre></td></tr></table></figure></li><li><p>尽量保持正常代码路径为最小缩进</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OneFunc</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    err := doSomething()</span><br><span class="line">    <span class="keyword">if</span> err := <span class="literal">nil</span> &#123;</span><br><span class="line">        err := doAnotherThing()</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OneFunc</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := doSomething(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := doAnotherThing(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结</p><ul><li><p>线性原理，处理逻辑尽量走直线，避免复杂的嵌套分支</p></li><li><p>提高代码的可读性</p></li></ul></li></ul><h3 id="错误与异常处理">错误与异常处理</h3><h4 id="简单错误">简单错误</h4><p>简单错误指仅出现一次的错误，且在其他地方不需要捕获该错误</p><p>优先使用 errors.New 创建匿名变量来直接表示简单错误</p><p>如果有格式化的需求，使用 fmt.Error</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/golang/go/blob/master/src/net/http/client.go#L802</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">defaultCheckRedirect</span><span class="params">(req *Request, via []*Request)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(via) &gt;= <span class="number">10</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;stopped after 10 redirects&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="错误的-Wrap-和-Unwrap">错误的 Wrap 和 Unwrap</h4><p>将一个 error 嵌套进另一个 error 中，从而生成一个 error 的跟踪链</p><p>从 Go1.13 后，可以在 <code>fmt.Errorf</code> 中使用 <code>%w</code> 关键字来将一个错误 wrap 至其错误链中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/golang/go/blob/master/src/cmd/go/internal/work/exec.go#L983</span></span><br><span class="line">list, _, err := c.GetBytes(cache.Subkey(a.actionID, <span class="string">&quot;srcfiles&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;reading srcfiles list: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="错误判定">错误判定</h4><ul><li><p>使用 <code>errors.Is</code> 可以判定错误链上的所有错误是否含有特定的错误</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/golang/go/blob/master/src/cmd/go/internal/modfetch/sumdb.go#L208</span></span><br><span class="line">data, err = lockedfile.Read(targ)</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, fs.ErrNotExist) &#123;</span><br><span class="line"><span class="comment">// Treat non-existent as empty, to bootstrap the &quot;latest&quot; file</span></span><br><span class="line"><span class="comment">// the first time we connect to a given database.</span></span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在错误链上获取特定种类的错误，使用 <code>errors.As</code></p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/golang/go/blob/master/src/errors/wrap_test.go#L255</span></span><br><span class="line"><span class="keyword">if</span> _, err := os.Open(<span class="string">&quot;non-existing&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">var</span> pathError *fs.PathError</span><br><span class="line"><span class="keyword">if</span> errors.As(err, &amp;pathError) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Failed at path:&quot;</span>, pathError.Path)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="panic">panic</h4><ul><li>不建议在业务代码中使用 panic</li><li>如果当前 goroutine 中所有 deferred 函数都不包含 recover 就会造成整个程序崩溃</li><li>当程序启动阶段发生不可逆转的错误时，可以在 init 或 main 函数中使用 panic</li></ul><h4 id="recover">recover</h4><ul><li>recover 只能在被 defer 的函数中使用，嵌套无法生效，只在当前 goroutine 生效</li><li>如果需要更多的上下文信息，可以 recover 后在 log 中记录当前的调用栈。</li></ul><h2 id="性能优化建议">性能优化建议</h2><h3 id="Slice">Slice</h3><ul><li>在尽可能的情况下，在使用 make() 初始化切片时提供容量信息，特别是在追加切片时</li><li>在已有切片的基础上进行切片，不会创建新的底层数组。因为原来的底层数组没有发生变化，内存会一直占用，直到没有变量引用该数组。因此很可能出现这么一种情况，原切片由大量的元素构成，但是我们在原切片的基础上切片，虽然只使用了很小一段，但底层数组在内存中仍然占据了大量空间，得不到释放。推荐的做法，使用 copy 替代 re-slice</li></ul><h3 id="Map">Map</h3><p>和 Slice 一样，应该根据实际需求提前预估好需要的空间</p><h3 id="字符串处理">字符串处理</h3><ul><li><p>常见的字符串拼接方式</p><ul><li><code>+</code></li><li><code>strings.Builder</code></li><li><code>bytes.Buffer</code></li></ul></li><li><p><code>strings.Builder</code> 最快，<code>bytes.Buffer</code> 较快，<code>+</code> 最慢</p></li><li><p>原理</p><ul><li><p>字符串在 Go 语言中是不可变类型，占用内存大小是固定的，当使用 + 拼接 2 个字符串时，生成一个新的字符串，那么就需要开辟一段新的空间，新空间的大小是原来两个字符串的大小之和</p></li><li><p>strings.Builder，bytes.Buffer 的内存是以倍数申请的</p></li><li><p>strings.Builder 和 bytes.Buffer 底层都是 []byte 数组，bytes.Buffer 转化为字符串时重新申请了一块空间，存放生成的字符串变量，而 strings.Builder 直接将底层的 []byte 转换成了字符串类型返回</p></li></ul></li></ul><h3 id="空结构体">空结构体</h3><ul><li>空结构体不占据内存空间，可作为占位符使用</li><li>比如实现简单的 Set<ul><li>Go 语言标准库没有提供 Set 的实现，通常使用 map 来代替。对于集合场景，只需要用到 map 的键而不需要值</li></ul></li></ul><h3 id="atomic-包">atomic 包</h3><p>对于变量来说，建议使用 <code>atomic</code> 来代替 <code>sync.Mutex</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205121936775.jpg" alt=""></p><p>原理</p><ul><li>锁的实现是通过操作系统来实现，属于系统调用，<code>atomic</code> 操作是通过硬件实现的，效率比锁高很多</li><li><code>sync.Mutex</code> 应该用来保护一段逻辑，不仅仅用于保护一个变量</li><li>对于非数值系列，可以使用 <code>atomic.Value</code>，<code>atomic.Value</code> 能承载一个 <code>interface&#123;&#125;</code></li></ul><h3 id="小结-3">小结</h3><ul><li><p>避免常见的性能陷阱可以保证大部分程序的性能</p></li><li><p>针对普通应用代码，不要一味地追求程序的性能，应当在满足正确可靠、简洁清晰等质量要求的前提下提高程序性能</p></li></ul><h1 id="性能调优实战">性能调优实战</h1><h2 id="性能调优简介">性能调优简介</h2><ul><li>要依靠数据不是猜测</li><li>要定位最大瓶颈而不是细枝末节</li><li>不要过早优化</li><li>不要过度优化</li></ul><h2 id="性能分析工具-pprof-实战">性能分析工具 pprof 实战</h2><h3 id="功能简介">功能简介</h3><h3 id="排查实战">排查实战</h3><h4 id="搭建-pprof-实践项目">搭建 pprof 实践项目</h4><h4 id="浏览器查看指标">浏览器查看指标</h4><h4 id="CPU">CPU</h4><ul><li>命令：topN</li><li>命令：list</li><li>命令：web</li></ul><h4 id="Heap-堆内存">Heap - 堆内存</h4><ul><li>Top 视图</li><li>Source 视图</li></ul><h3 id="goroutine-协程">goroutine - 协程</h3><h4 id="mutex-锁">mutex - 锁</h4><h4 id="block-阻塞">block - 阻塞</h4><h4 id="小结-4">小结</h4><h3 id="采样过程和原理">采样过程和原理</h3><h3 id="小结-5">小结</h3><h2 id="性能调优案例">性能调优案例</h2><h3 id="基本概念">基本概念</h3><pre><code>- 服务：能单独部署，承载一定功能的程序- 依赖：Service A 的功能实现依赖 Service B 的响应结果，称为 Service A 依赖 Service B- 调用链路：能支持一个接口请求的相关服务集合及其相互之间的依赖关系- 基础库：公共的工具包、中间件</code></pre><h3 id="业务优化">业务优化</h3><pre><code>- 流程    - 建立服务性能评估手段    - 分析性能数据，定位性能瓶颈    - 重点优化项改造    - 优化效果验证- 建立压测评估链路    - 服务性能评估    - 构造请求流量    - 压测范围    - 性能数据采集- 分析性能火焰图，定位性能瓶颈    - pprof 火焰图- 重点优化项分析    - 规范组件库使用    - 高并发场景优化    - 增加代码检查规则避免增量劣化出现    - 优化正确性验证- 上线验证评估    - 逐步放量，避免出现问题- 进一步优化，服务整体链路分析    - 规范上游服务调用接口，明确场景需求    - 分析业务流程，通过业务流程优化提升服务性能</code></pre><h3 id="基础库优化">基础库优化</h3><pre><code>- 适应范围更广，覆盖更多服务- AB 实验 SDK 的优化    - 分析基础库核心逻辑和性能瓶颈    - 完善改造方案，按需获取，序列化协议优化    - 内部压测验证    - 推广业务服务落地验证</code></pre><h3 id="Go-语言优化">Go 语言优化</h3><pre><code>- 适应范围最广，Go 服务都有收益- 优化方式    - 优化内存分配策略    - 优化代码编译流程，生成更高效的程序    - 内部压测验证    - 推广业务服务落地验证</code></pre>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Others』Windows 如何备份驱动文件</title>
      <link href="/2022/05/10/%E3%80%8EOthers%E3%80%8FWindows-%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%E6%96%87%E4%BB%B6/"/>
      <url>/2022/05/10/%E3%80%8EOthers%E3%80%8FWindows-%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>今天太忙了，随便水一篇博客</p><p>使用如下命令即可（别忘了管理员）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism /online /<span class="built_in">export-driver</span> /destination:[备份路径]</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism /online /<span class="built_in">export-driver</span> /destination:D:\tmp</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102123612.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据备份 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L2：Go 语言上手 - 工程实践</title>
      <link href="/2022/05/09/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL2%EF%BC%9AGo-%E8%AF%AD%E8%A8%80%E4%B8%8A%E6%89%8B-%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/05/09/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL2%EF%BC%9AGo-%E8%AF%AD%E8%A8%80%E4%B8%8A%E6%89%8B-%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>前情提要：</p><ul><li>没错，这是昨天上午的课，但是昨天太忙了就一直拖到现在来写了 <s>（其实今天也很忙）</s></li><li>配套实例代码：<a href="https://github.com/Moonlight-Zhao/go-project-example/tree/V0">https://github.com/Moonlight-Zhao/go-project-example/tree/V0</a></li></ul><p>这堂课主要学习企业实际项目开发中所涉及到的一系列知识点</p><h1 id="语言进阶-协程">语言进阶 - 协程</h1><h2 id="并发-VS-并行">并发 VS 并行</h2><ul><li><p>并发：多线程程序在一个核的 CPU 上运行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092047289.png" alt=""></p></li><li><p>并行：多线程程序在多个核的 CPU 上运行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092048835.png" alt=""></p></li></ul><p>（Go 可以重复发挥多核优势，高效运行）</p><h2 id="Goroutine">Goroutine</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092050273.png" alt=""></p><ul><li>线程：内核态，线程跑多个协程，栈 MB 级别</li><li>协程：用户态，轻量级线程，栈 KB 级别</li></ul><p>一个简单的线程例子，快速打印 <code>hello goroutine 0 ~ 4</code> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;hello goroutine :&quot;</span> + fmt.Sprint(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloGoRoutine</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> hello(i) <span class="comment">// 使用 go 关键字开启协程</span></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>) <span class="comment">// 保证子协程执行完毕之前，主函数不退出，后面会有更好的方式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092106912.jpg" alt=""></p><p>可以看到不是按照顺序输出的，所以其实是并行输出的</p><h2 id="协程间通信：CSP（Communicating-Sequential-Processes）">协程间通信：CSP（Communicating Sequential Processes）</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092114874.png" alt=""></p><p>Go 提倡使用通道来实现协程间通信（通过通信共享内存）</p><p>当然，Go 也保留了通过共享内存实现通信的机制，但是效率低，不推荐</p><h2 id="Channel">Channel</h2><p>创建一个通道： <code>make(chan 元素类型,[缓冲大小])</code></p><ul><li>无缓冲的例子： <code>make(chan int)</code></li><li>有缓冲的例子： <code>make(chan int,2)</code></li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092120304.png" alt=""></p><p>缓冲就类似于快递站，需要有人取了元素出来才能放入元素，不然就一直阻塞</p><p>一个简单的通道例子：</p><ul><li>A 子协程发送 0~9 的数字</li><li>B 子协程计算输入数字的平方</li><li>主协程输出最后的平方数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CalSquare</span><span class="params">()</span></span> &#123;</span><br><span class="line">src := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">dest := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(src) <span class="comment">// 延迟关闭 channel</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">src &lt;- i <span class="comment">// 把元素放入 src 通道</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(dest) <span class="comment">// 延迟关闭 channel</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> src &#123; <span class="comment">// 从 src 通道取出元素</span></span><br><span class="line">dest &lt;- i * i <span class="comment">// 把平分数放入 dest 通道</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> dest &#123; <span class="comment">// 取出平方数并打印</span></span><br><span class="line"><span class="comment">//复杂操作</span></span><br><span class="line"><span class="built_in">println</span>(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092127816.jpg" alt=""></p><p>可以看见通道是能保证顺序的，也就是并发安全的</p><p>为什么使用了带缓冲的 channel ？因为消费者可能需要执行一些复杂操作，耗时可能较长，使用缓冲可以不影响生产者的生产速度</p><h2 id="并发安全-Lock">并发安全 Lock</h2><p>前面讲了协程间还可以通过临界区来进行通信，但是这时一定要注意并发安全，也就是要加锁，可以看下面的这个例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">x    <span class="type">int64</span></span><br><span class="line">lock sync.Mutex <span class="comment">// 创建一个锁</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addWithLock</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++ &#123;</span><br><span class="line">lock.Lock() <span class="comment">//加锁</span></span><br><span class="line">x += <span class="number">1</span></span><br><span class="line">lock.Unlock() <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addWithoutLock</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++ &#123;</span><br><span class="line">x += <span class="number">1</span> <span class="comment">//不加锁</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">()</span></span> &#123;</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;  <span class="comment">// 连开 5 个协程</span></span><br><span class="line"><span class="keyword">go</span> addWithoutLock() </span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;WithoutLock:&quot;</span>, x)</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123; <span class="comment">// 连开 5 个协程</span></span><br><span class="line"><span class="keyword">go</span> addWithLock()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;WithLock:&quot;</span>, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里分别有两个函数，一个是加锁的，一个是不加锁的，它们分别对一个变量连加 2000 次，而各自又被调用了 5 个协程，所以理论上每个变量又应该加了 10000 次</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092134270.jpg" alt=""></p><p>但是从结果来看，因为不加锁，所以修改变量时产生了混乱，不加锁的加不到 10000 次</p><p>所以为了并发安全，多协程修改一个变量时一定要加锁</p><h2 id="WaitGroup">WaitGroup</h2><p>前面例子中都是用 <code>Sleep</code> 来进行暴力的阻塞，由于无法精确的知道协程执行的时间，也就无法精确地设定 <code>Sleep</code> 的时间</p><p>在 Go 中，可以使用 <code>sync</code> 包中的 <code>WaitGroup</code> 来实现并发的同步，它有几个方法：</p><ul><li><code>Add(delta int)</code> ： 计数器 + <code>delta</code></li><li><code>Done()</code> ： 计数器 - 1</li><li><code>Wait()</code> ： 阻塞直到计数器为 0 ，等待所有协程执行完</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ManyGoWait</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">5</span>) <span class="comment">// 设置计算器为 5</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done() <span class="comment">// 执行完函数后，将计算器减 1</span></span><br><span class="line">hello(j)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait() <span class="comment">// 始终阻塞，直到计算器为 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092153768.jpg" alt=""></p><h2 id="小结">小结</h2><ul><li>Goroutine ：理解协程</li><li>Channel ： 使用通道进行协程间通信</li><li>Sync ： 学会使用这个包中的 <code>Lock</code> 和 <code>WaitGroup</code></li></ul><p>#依赖管理</p><h2 id="背景">背景</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092157646.png" alt=""></p><p>在一个项目中，要学会使用他人的组件或工具来提高研发效率</p><p>这时就出现了依赖</p><h3 id="Go-依赖管理演进">Go 依赖管理演进</h3><p>三个阶段：<code>GOPATH</code> -&gt; <code>GO Vendor</code> -&gt; <code>Go Module</code></p><p>目标：</p><ul><li>实现不同环境（项目）依赖的版本不同</li><li>控制依赖库的版本</li></ul><h3 id="GOPATH">GOPATH</h3><p>GOPATH 下有三个文件夹：</p><ul><li><code>bin</code> ： 项目编译的二进制文件</li><li><code>pkg</code> ： 项目编辑的中间产物，加速编译</li><li><code>src</code> ： 项目源码</li></ul><p>所有项目和依赖源码都在 <code>src</code></p><h3 id="GOPATH-弊端">GOPATH - 弊端</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205101955822.png" alt=""></p><p>A 和 B 依赖于一个包的不同版本</p><p>无法实现包的多版本控制</p><h3 id="Go-Vender">Go Vender</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205101956727.png" alt=""></p><p>在项目下增加 vender 文件夹，所有依赖放在 <code>$ProjectRoot/vendor</code> ，找不到再去 <code>GOPATH</code></p><p>解决了多个项目需要同一个包的冲突问题</p><h3 id="Go-Vender-弊端">Go Vender 弊端</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102004264.png" alt=""></p><p>无法控制依赖的版本</p><p>更新项目可能出现依赖冲突</p><h3 id="Go-Module">Go Module</h3><p>从 1.1 引入， 1.6 默认开启</p><ul><li>通过 <code>go.mod</code> 文件管理依赖包版本</li><li>通过 <code>go get</code> 与 <code>go mod</code> 指令管理依赖包</li></ul><h2 id="依赖管理三要素">依赖管理三要素</h2><ol><li>配置文件，描述依赖： <code>go.mod</code></li><li>中心仓库管理依赖库： <code>Proxy</code></li><li>本地工具： <code>go get/mod</code></li></ol><h3 id="依赖配置-go-mod">依赖配置 - go.mod</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102010647.png" alt=""></p><p>由三部分组成：<code>模块路径</code>、<code>原始库版本</code>、<code>单元依赖</code></p><p>依赖标识：<code>[Module Path][Version/Pseudo-version]</code></p><h3 id="依赖配置-version">依赖配置 - version</h3><ul><li><p>语义化版本</p><p>定义：<code>$&#123;MAJOR&#125;.$&#123;MINOR&#125;.$&#123;PATCH&#125;</code></p><ul><li>MAJOR：大版本，各版本直接可以不相互兼容</li><li>MINOR：新增函数或功能，在一个大版本下应当相互兼容</li><li>PATCH：修 bug</li></ul><p>例：</p><ul><li><code>V1.3.0</code></li><li><code>V2.3.0</code></li></ul></li><li><p>基于 commit 的伪版本</p><p>定义：<code>vx.0.0-yyyymmddhhmmss（时间戳）-abcdefg1234（本次的git哈希）</code></p><p>例：</p><ul><li><code>v0.0.0-20220401081311-c38fb59326b7</code></li><li><code>v1.0.0-20201130134442-10cb98267c6c</code></li></ul></li></ul><h3 id="依赖配置-indirect">依赖配置 - indirect</h3><p>关键字之 <code>indirect</code> ，标识是否为间接依赖（依赖的包所依赖的包）</p><p>A -&gt; B -&gt; C</p><ul><li>A -&gt; B 直接依赖</li><li>A -&gt; C 间接依赖</li></ul><h3 id="依赖配置-incompatible">依赖配置 - incompatible</h3><p>关键字之 <code>incompatible</code></p><p>按照 Go Module 的标准，如果大版本大于 1 的话，要在路径中也加入 <code>vN</code> 后缀，但是 Go Module 推出之前已经有很多库的版本到了 2 或更高了，这时就需要加上这个关键字来兼容这部分仓库</p><h3 id="依赖配置-依赖图">依赖配置 - 依赖图</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102048533.jpg" alt=""></p><p>你可能会选 C ，但其实是 B ，Go Module 会选择最近的兼容版本（1.3 和 1.4 按理来说是兼容的）</p><h3 id="依赖分发-回源">依赖分发 - 回源</h3><p>关于依赖去哪里下载的问题，主要是 Github 等第三方代码仓库，但是这会带来一系列弊端：</p><ul><li>无法保证构建稳定性（增删改）</li><li>无法保证依赖可用性（仓库被删了）</li><li>增加第三方压力（代码托管平台负载问题）</li></ul><h3 id="依赖分发-Proxy">依赖分发 - Proxy</h3><p>为了解决这个问题，就出现了 Go Proxy</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102103748.png" alt=""></p><p>这东西会缓存依赖的内容，保证依赖的稳定与可靠</p><h3 id="依赖分发-变量-GOPROXY">依赖分发 - 变量 GOPROXY</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOPROXY=&quot;https://proxy1.cn,https://proxy2.cn,direct&quot;</span><br></pre></td></tr></table></figure><p><code>direct</code> 表示源站点，Go 会按照顺序的优先级找依赖</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102105035.png" alt=""></p><h3 id="工具-go-get">工具 - go get</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get example.org/pkg [参数]</span><br></pre></td></tr></table></figure><p>关于参数：</p><ul><li>不加参数：拉取主版本的最新提交</li><li><code>@upadte</code>：跟不加一样</li><li><code>@none</code>：在本地删除这个依赖</li><li><code>@v1.1.2</code>：拉取对应的语义版本</li><li><code>@23dfdd5</code>：拉取特定的 commit</li><li><code>@master</code>：拉取某分支的最新提交</li></ul><h3 id="工具-go-mod">工具 - go mod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod 参数</span><br></pre></td></tr></table></figure><p>关于参数：</p><ul><li><code>init</code>：初始化，创建 go.mod 文件</li><li><code>download</code>：下载模块到本地缓存</li><li><code>tidy</code>：增加需要的依赖，删除不需要的依赖</li></ul><h2 id="小结-2">小结</h2><ul><li>Go 依赖管理演进</li><li>Go Module 依赖管理方案<ol><li>配置文件，描述依赖：go.mod</li><li>中心仓库管理依赖库：Proxy</li><li>本地工具：go get/mod</li></ol></li></ul><h1 id="测试">测试</h1><h3 id="为什么要测试">为什么要测试</h3><p>真实的事故例子：</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102131873.jpg" alt=""></p><p>测试是避免事故的最后一道屏障</p><h3 id="测试的分类">测试的分类</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102134726.png" alt=""></p><ul><li>回归测试：质量保证人员手动测试项目可用性（刷抖音、看评论）</li><li>集成测试：对系统功能的测试（对暴露的接口自动化测试）</li><li>单元测试：开发者对单独的函数模块测试</li></ul><h2 id="单元测试">单元测试</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102138464.png" alt=""></p><h3 id="单元测试的规则">单元测试的规则</h3><ul><li>所有测试文件都以 <code>_test.go</code> 结尾</li><li>测试函数写成 <code>func TextXxx(t *testing.T)</code></li><li>初始化逻辑放到 <code>TestMain</code> 中（准备测试的数据-&gt;跑测试-&gt;释放资源）</li></ul><h3 id="单元测试的简单例子">单元测试的简单例子</h3><p>新建一个 test 模块，按照下面的目录创建好文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─test</span><br><span class="line">        print.go</span><br><span class="line">        print_test.go</span><br></pre></td></tr></table></figure><p>在 <code>print.go</code> 中新建一个函数，用于打印 <code>Tom</code></p><p>但是由于疏忽， Tom 变成了 John</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloTom</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;John&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在到 <code>print_test.go</code> 进行测试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/stretchr/testify/assert&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHelloTom</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">output := HelloTom()</span><br><span class="line">expectOutput := <span class="string">&quot;Tom&quot;</span></span><br><span class="line">assert.Equal(t, expectOutput, output)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比输出和预计的输出，这里选择使用一个第三方的包来进行对比</p><p>按下左侧的按钮开始测试（我已经测试过了，所以是个叉）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102249927.jpg" alt=""></p><p>发现与预期不符</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102247590.jpg" alt=""></p><p>现在修改 <code>HelloTom</code> 函数，再进行测试</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102248537.jpg" alt=""></p><p>可以看到修改后通过了测试</p><h3 id="单元测试-覆盖率">单元测试 - 覆盖率</h3><ul><li><p>如何衡量代码是否已经经过了足够的测试？</p></li><li><p>如何评价项目的测试水准？</p></li><li><p>如何评价项目是否达到了高水准测试等级？</p></li></ul><p>答案就是： <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">代码覆盖率</span></span></p><p>来看第二个例子，一个判断学生是否及格的函数</p><p>新建 <code>judgment.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JudgePassLine</span><span class="params">(score <span class="type">int16</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">60</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是 <code>judgment_test.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/assert&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJudgePassLineTrue</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">isPass := JudgePassLine(<span class="number">70</span>)</span><br><span class="line">assert.Equal(t, <span class="literal">true</span>, isPass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJudgePassLineFail</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">isPass := JudgePassLine(<span class="number">50</span>)</span><br><span class="line">assert.Equal(t, <span class="literal">false</span>, isPass)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试时使用覆盖率</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205112149790.jpg" alt=""></p><p>这样，就可以知道测试时调用了文件中的多少行语句</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205112150933.jpg" alt=""></p><p>测试多种输入可以提升覆盖率</p><p>可以看见，把另一个输入为 50 的测试完后，<code>judgment.go</code>  的覆盖率达到了 100%</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205112152967.jpg" alt=""></p><p>单元测试 Tips：</p><ul><li>一般覆盖率：50%~60%，较高覆盖率：80%+</li><li>测试分支相互独立、全面覆盖</li><li>测试单元粒度足够小，函数单一职责</li></ul><h3 id="单元测试-依赖">单元测试 - 依赖</h3><p>当然，一般在测试时会依赖于一些组件，如数据库、文件之类的</p><p>单元测试需要有两个目标：幂等与稳定</p><ul><li>幂等：重复运行，结果相同</li><li>稳定：任何时间，任何函数，独立运行</li></ul><p>但是测试时直接调用数据库等肯定是不稳定的，因为需要依赖网络，这样就会用到 Mock 机制</p><h3 id="单元测试-文件处理">单元测试 - 文件处理</h3><p>在讲 Mock 之前，先从文件出发</p><p>例如现在有一个处理文本的函数，它将第一行中的 <code>11</code> 都替换为 <code>00</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFirstLine</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">open, err := os.Open(<span class="string">&quot;log&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> open.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">scanner := bufio.NewScanner(open)</span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line"><span class="keyword">return</span> scanner.Text()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ProcessFirstLine</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">line := ReadFirstLine()</span><br><span class="line">destLine := strings.ReplaceAll(line, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;00&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> destLine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备一个 log 测试样例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">line11</span><br><span class="line">line22</span><br><span class="line">line33</span><br><span class="line">line44</span><br><span class="line">line55</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后我们就可以这样写测试函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestProcessFirstLine</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">firstLine := ProcessFirstLine()</span><br><span class="line">assert.Equal(t, <span class="string">&quot;line00&quot;</span>, firstLine)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是有一个问题，就是这个测试依赖于 log 文件（实践生产中可能是数据库等资源），一旦 log 无法访问便无法测试，这时就需要 Mock</p><h2 id="Mock-测试">Mock 测试</h2><p>Mock 就是打桩，在测试时使用一个函数或方法替换另一个函数或方法（在运行时替换函数的指针），例如在上面使用 <code>ReadFirstLine()</code> 来读取数据，而我们可以用一个函数生成数据，然后替换掉那个函数</p><p>常见的用于实现 Mock 的包是 monkey</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bou.ke/monkey&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/assert&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestProcessFirstLine</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">firstLine := ProcessFirstLine()</span><br><span class="line">assert.Equal(t, <span class="string">&quot;line00&quot;</span>, firstLine)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestProcessFirstLineWithMock</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">monkey.Patch(ReadFirstLine, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;line110&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">defer</span> monkey.Unpatch(ReadFirstLine)</span><br><span class="line">line := ProcessFirstLine()</span><br><span class="line">assert.Equal(t, <span class="string">&quot;line000&quot;</span>, line)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，使用一个匿名函数替换掉了原来的函数，测试不再依赖于本地文件，可以在任何时间运行</p><h2 id="基准测试">基准测试</h2><p>自带的代码性能测试工具，它的方法类似于单元测试</p><h4 id="基准测试-例子">基准测试 - 例子</h4><p>举一个负载均衡服务器的例子，初始化 10 个服务器，然后通过 <code>Select()</code> 函数随机挑选服务器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> benchmark</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/bytedance/gopkg/lang/fastrand&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ServerIndex [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitServerIndex</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">ServerIndex[i] = i+<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Select</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ServerIndex[rand.Intn(<span class="number">10</span>)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FastSelect</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ServerIndex[fastrand.Intn(<span class="number">10</span>)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在来运行基准测试，它与单元测试的不同在于关键词变成了 <code>Benchmark</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> benchmark</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSelect</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">InitServerIndex()</span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">Select()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSelectParallel</span><span class="params">(b *testing.B)</span></span> &#123; <span class="comment">// 并发测试</span></span><br><span class="line">InitServerIndex()</span><br><span class="line">b.ResetTimer()</span><br><span class="line">b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">Select()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFastSelectParallel</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">InitServerIndex()</span><br><span class="line">b.ResetTimer()</span><br><span class="line">b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">FastSelect()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目实战">项目实战</h1><h2 id="需求设计">需求设计</h2><ol><li>实现一个展示话题（标题，文字描述）和回帖列表的后端 http 接口；</li><li>本地文件存储数据</li></ol><h2 id="ER-图">ER 图</h2><p><img src="https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/wps/auth_code/?code=dfd74ee4515f0f062b364e60a99d45fb_41c3316f00827029_4HIRTFR3DO_5AKTGD7IG84KSNCG03MI8PDUNS" alt="img"></p><h2 id="分层结构">分层结构</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205122018909.png" alt=""></p><h2 id="Repository">Repository</h2><h3 id="索引">索引</h3><h3 id="查询">查询</h3><h2 id="Service">Service</h2><h2 id="Controller">Controller</h2><h2 id="Router">Router</h2><h2 id="运行">运行</h2>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『赛后感想』2022 计算机学院 Debug 杯程序设计大赛</title>
      <link href="/2022/05/08/%E3%80%8E%E8%B5%9B%E5%90%8E%E6%84%9F%E6%83%B3%E3%80%8F2022%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E9%99%A2-Debug-%E6%9D%AF%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B/"/>
      <url>/2022/05/08/%E3%80%8E%E8%B5%9B%E5%90%8E%E6%84%9F%E6%83%B3%E3%80%8F2022%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E9%99%A2-Debug-%E6%9D%AF%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2NzYwMzEwOQ==&amp;mid=2247485897&amp;idx=1&amp;sn=e2a232931375ff955795a2f159b4f915&amp;chksm=ceb84e03f9cfc715e1abf545d61fc88dc92623b731a0188d5a041a5d48ab67d1b427f1c379f5&amp;mpshare=1&amp;scene=23&amp;srcid=050525I5EquyQ67rDguvuB3T&amp;sharer_sharetime=1651731587948&amp;sharer_shareid=586f2615c54a23230cdab03995b82e19#rd">随着阵阵花香，Debug杯来啦||计算机学院Debug杯程序设计大赛如期而至</a></p></div></details><p>呼~ 烧了我一下午脑细胞的比赛终于结束了</p><p>真的是累死了，比完之后眼睛痛，头也晕，腰也酸，<s>关键是好好的睡午觉的时候要去比赛，简直要了我的命</s></p><p>来，来听我讲讲我今天的心路历程</p><p>中午出发前往赛场</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205081955194.jpg" alt=""></p><p>时间来到 <code>1:30</code> ，进入比赛，开始做题</p><h1 id="T1">T1</h1><p>首先是第一题</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082001649.jpg" alt=""></p><p>一看就是纸老虎，前面大段大段的都是唬你的废话，直接找因子然后套公式就行了</p><p>因为找一个数的因子应该比较简单，所以我打算交给 Copliot 做，注释一写出来，代码直接就生成了，简直不要太爽</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">g</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="comment">//求一个数的所有因子</span></span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll n,sum=<span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        vector&lt;ll&gt; factors;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= <span class="built_in">sqrt</span>(n); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                factors.<span class="built_in">push_back</span>(i);</span><br><span class="line">                <span class="keyword">if</span> (i != n / i)</span><br><span class="line">                    factors.<span class="built_in">push_back</span>(n / i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//sort(factors.begin(), factors.end());</span></span><br><span class="line">        <span class="comment">// for (ll i = 0; i &lt; factors.size(); i++)</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;factors[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// for (ll i = 0; i &lt; factors.size(); i++)</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     //cout&lt;&lt;factors[i]&lt;&lt;&quot; &quot;&lt;&lt;n/factors[i]&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">//     // cout&lt;&lt;factors[i]&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">//     // cout&lt;&lt;g(n/factors[i])&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">//     // cout&lt;&lt;g(factors[i])&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;factors[i]*g(n/factors[i])&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; factors.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=factors[i]*<span class="built_in">g</span>(n/factors[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt; sum ;</span><br><span class="line">         cout &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赶紧 A 了直接下一题</p><h1 id="T2">T2</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082006591.jpg" alt=""></p><p>这道题和上一题一样是很水的，按照贪心直接排序即可，担心数据量有点大，就上了快读和 <code>long long</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            w = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ll t = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll n, k, flag = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            a[i] = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">1</span>] &gt; k)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; n&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = a[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans *= a[i];</span><br><span class="line">            <span class="keyword">if</span> (ans &gt; k)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; i - <span class="number">1</span>;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag)</span><br><span class="line">            cout &lt;&lt; n;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T3">T3</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082008338.jpg" alt=""></p><p>这道题居然比前面的还简单，也是一道简单的贪心 <s>（怎么一道题比一道题水）</s></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;a[<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; a[n] + a[n - <span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T4">T4</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082010369.jpg" alt=""></p><p>最小值最大，经典的二分答案模板题，套个板子手写一下 <code>check()</code> 函数即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll e, m, h;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((e &gt;= x * <span class="number">5</span> &amp;&amp; m &gt;= x * <span class="number">3</span>))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ll t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; e &gt;&gt; m &gt;&gt; h;</span><br><span class="line">        <span class="type">int</span> ans = <span class="built_in">bsearch_2</span>(<span class="number">0</span>, h);</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//     cin &gt;&gt; e &gt;&gt; m &gt;&gt; h;</span></span><br><span class="line">    <span class="comment">//     while (1)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         if ((e &gt;= h * 5 &amp;&amp; m &gt;= h * 3)&amp;&amp;(e &gt;= (h+1) * 5 &amp;&amp; m &gt;= (h+1) * 3))</span></span><br><span class="line">    <span class="comment">//         &#123;</span></span><br><span class="line">    <span class="comment">//             cout &lt;&lt; h &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//             break;</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//         h/2;</span></span><br><span class="line">    <span class="comment">//         while((e &gt;= h * 5 &amp;&amp; m &gt;= h * 3))h=h+h/2;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T5">T5</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082012454.jpg" alt=""></p><p>经典的高精度取模，直接板子拿过来即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> len(k) (k[0])</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100000</span>;</span><br><span class="line"><span class="type">int</span> a[MAXN], b[MAXN], c[MAXN], d[MAXN], tmp[MAXN];</span><br><span class="line"><span class="type">int</span> num, res;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">scan</span><span class="params">(<span class="type">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[MAXN];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;str);</span><br><span class="line">    <span class="built_in">len</span>(x) = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>(x); i++)</span><br><span class="line">        x[<span class="built_in">len</span>(x) - i] = str[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(x) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(x); i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, x[i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(x, <span class="number">0</span>, MAXN * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">copy</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(a); i++)</span><br><span class="line">        b[i + pos - <span class="number">1</span>] = a[i];</span><br><span class="line">    <span class="built_in">len</span>(b) = <span class="built_in">len</span>(a) + pos - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">compare</span><span class="params">(<span class="type">int</span> x[], <span class="type">int</span> y[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(x) &gt; <span class="built_in">len</span>(y)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(x) &lt; <span class="built_in">len</span>(y)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(x); i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x[i] &gt; y[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x[i] &lt; y[i]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(c); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] += a[i] + b[i];</span><br><span class="line">        c[i + <span class="number">1</span>] = c[i] / <span class="number">10</span>;</span><br><span class="line">        c[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c[<span class="built_in">len</span>(c) + <span class="number">1</span>])</span><br><span class="line">        <span class="built_in">len</span>(c)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">minu</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(c); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] += a[i] - b[i];</span><br><span class="line">        <span class="keyword">if</span> (c[i] &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i + <span class="number">1</span>]--;</span><br><span class="line">            c[i] += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c[<span class="built_in">len</span>(c)] == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(c) &gt; <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selfminu</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(a); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; b[i])</span><br><span class="line">        &#123;</span><br><span class="line">            a[i + <span class="number">1</span>]--;</span><br><span class="line">            a[i] += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] -= b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(a) &gt; <span class="number">0</span> &amp;&amp; a[<span class="built_in">len</span>(a)] == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">len</span>(a)--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mult</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">len</span>(a) + <span class="built_in">len</span>(b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(a); i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">len</span>(b); j++)</span><br><span class="line">            c[i + j - <span class="number">1</span>] += a[i] * b[j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(c); i++)</span><br><span class="line">        <span class="keyword">if</span> (c[i] &gt; <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i + <span class="number">1</span>] += c[i] / <span class="number">10</span>;</span><br><span class="line">            c[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span> (c[<span class="built_in">len</span>(c)] == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(c) &gt; <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divi</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[], <span class="type">int</span> d[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">len</span>(a) - <span class="built_in">len</span>(b) + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">copy</span>(a, d, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(c); i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">init</span>(tmp);</span><br><span class="line">        <span class="built_in">copy</span>(b, tmp, i);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">compare</span>(d, tmp) &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i]++;</span><br><span class="line">            <span class="built_in">selfminu</span>(d, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(c) &gt; <span class="number">0</span> &amp;&amp; c[<span class="built_in">len</span>(c)] == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selfDiviByLow</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b,<span class="type">int</span>* res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c[MAXN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">len</span>(c)=<span class="built_in">len</span>(a);</span><br><span class="line">    <span class="keyword">while</span> (a[<span class="built_in">len</span>(c)] &lt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        a[<span class="built_in">len</span>(c) - <span class="number">1</span>] += a[<span class="built_in">len</span>(c)] * <span class="number">10</span>;</span><br><span class="line">        a[<span class="built_in">len</span>(c)] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(c); i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt;= b)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i] = a[i] / b;</span><br><span class="line">            a[i] %= b;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i - <span class="number">1</span>] += a[i] * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *res=a[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">copy</span>(c,a,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scan</span>(a);</span><br><span class="line">    <span class="built_in">scan</span>(b);</span><br><span class="line">    <span class="built_in">divi</span>(a, b, c, d);</span><br><span class="line">    <span class="built_in">print</span>(d);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// scan(a);</span></span><br><span class="line">    <span class="comment">// scan(b);</span></span><br><span class="line">    <span class="comment">// scanf(&quot;%d&quot;, &amp;num);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// add(a, b, c);</span></span><br><span class="line">    <span class="comment">// print(c);</span></span><br><span class="line">    <span class="comment">// init(c);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// if (compare(a, b) == -1)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     printf(&quot;-&quot;);</span></span><br><span class="line">    <span class="comment">//     minu(b, a, c);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// else minu(a, b, c);</span></span><br><span class="line">    <span class="comment">// print(c);</span></span><br><span class="line">    <span class="comment">// init(c);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// mult(a, b, c);</span></span><br><span class="line">    <span class="comment">// print(c);</span></span><br><span class="line">    <span class="comment">// init(c);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// divi(a, b, c, d);</span></span><br><span class="line">    <span class="comment">// print(c);</span></span><br><span class="line">    <span class="comment">// print(d);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// selfDiviByLow(a,num,&amp;res);</span></span><br><span class="line">    <span class="comment">// print(a);</span></span><br><span class="line">    <span class="comment">// printf(&quot;%d&quot;,res);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T6">T6</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082014416.jpg" alt=""></p><p>开始有点难度了，这道题首先有个坑点，就是 <code>long long</code> ，我后面折腾了很久才发现有个 <code>int</code>  忘记改成  <code>long long</code> 了，导致我一直过不了</p><p>然后这道题的难度自然是 <code>check()</code> 函数，其实还是不难理解的：首先 <code>k</code> 的搜索范围自然是 <code>H + mOrH</code> ，然后就要看 <code>mOrH</code> 中，到底分了多少给 <code>H</code> ，确定之后把剩下的分给 <code>M</code> ，接着如果 <code>M</code> 还是够不着 <code>k*3</code> 的话要把 <code>eOrM</code> 中的部分分给 <code>M</code> ，剩下的分给 <code>E</code> ，如果够分的话那就 <code>return 1</code> ，不够分自然就 <code>return 0</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll E, M, H, eOrM, mOrH;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll e=E,m=M,h=H;</span><br><span class="line">    <span class="keyword">if</span> ((e &gt;= x * <span class="number">5</span> &amp;&amp; m &gt;= x * <span class="number">3</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (e + eOrM &lt; x * <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (m + mOrH + eOrM &lt; x * <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ll mOrHGiveToH, eOrMGiveToM;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; h)</span><br><span class="line">    &#123;</span><br><span class="line">        mOrHGiveToH = x - h;</span><br><span class="line">        m += mOrH - mOrHGiveToH;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        mOrHGiveToH = <span class="number">0</span>;</span><br><span class="line">        m += mOrH;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m + eOrM &lt; x * <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; x * <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        eOrMGiveToM = x * <span class="number">3</span> - m;</span><br><span class="line">        m += eOrMGiveToM;</span><br><span class="line">        e += eOrM - eOrMGiveToM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        eOrMGiveToM = <span class="number">0</span>;</span><br><span class="line">        e += eOrM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((e &gt;= x * <span class="number">5</span> &amp;&amp; m &gt;= x * <span class="number">3</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">bsearch_2</span><span class="params">(ll l, ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        ll mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;mid&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">            l = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll s = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ll t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cin &gt;&gt; e &gt;&gt; m &gt;&gt; h &gt;&gt; eOrM &gt;&gt; mOrH;</span></span><br><span class="line">        E = <span class="built_in">read</span>();</span><br><span class="line">        eOrM = <span class="built_in">read</span>();</span><br><span class="line">        M = <span class="built_in">read</span>();</span><br><span class="line">        mOrH = <span class="built_in">read</span>();</span><br><span class="line">        H = <span class="built_in">read</span>();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        ll ans = <span class="built_in">bsearch_2</span>(<span class="number">0</span>, H + mOrH);</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//     cin &gt;&gt; e &gt;&gt; m &gt;&gt; h;</span></span><br><span class="line">        <span class="comment">//     while (1)</span></span><br><span class="line">        <span class="comment">//     &#123;</span></span><br><span class="line">        <span class="comment">//         if ((e &gt;= h * 5 &amp;&amp; m &gt;= h * 3)&amp;&amp;(e &gt;= (h+1) * 5 &amp;&amp; m &gt;= (h+1) * 3))</span></span><br><span class="line">        <span class="comment">//         &#123;</span></span><br><span class="line">        <span class="comment">//             cout &lt;&lt; h &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">//             break;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         h/2;</span></span><br><span class="line">        <span class="comment">//         while((e &gt;= h * 5 &amp;&amp; m &gt;= h * 3))h=h+h/2;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T7">T7</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082022626.jpg" alt=""></p><p>很遗憾，这道题我最后没 A 掉，看上去可能是用 DP 做的，但是我 DP 学的本来就差，但是我后面一想也不能用DP做呀，就只能照着题目的意思乱写，最后死活 TLE，没办法，人菜还得好好学习</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1024</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll x[N], y[N];</span><br><span class="line">ll n;</span><br><span class="line"><span class="function">ll <span class="title">Myabs</span><span class="params">(ll a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; <span class="number">0</span> ? -a : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll s = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sumWork</span><span class="params">(ll pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += <span class="built_in">Myabs</span>(x[i] - pos) * y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    ll t = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll Sx = <span class="number">0</span>;</span><br><span class="line">        n = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            x[i] = <span class="built_in">read</span>();</span><br><span class="line">            Sx += x[i];</span><br><span class="line">            y[i] = <span class="built_in">read</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sumWork</span>(Sx / n));</span><br><span class="line">        <span class="comment">// cout &lt;&lt; sumWork(Sx / n)&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T8">T8</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082026617.jpg" alt=""></p><p>突如其来的一道水题，也不知道为什么放这</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ll k;</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    <span class="keyword">while</span> (k--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll l, r, t;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; t;</span><br><span class="line">        cout &lt;&lt; l + t % <span class="built_in">abs</span>(r - l + <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T9">T9</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082027533.png" alt=""></p><p>最后一题，看上去是一道很简单的搜索，但是最后还是死活 TLE ，怎么剪枝都没用</p><p>我在 copilot 的配合下很快写了个 DFS 出来，然后又是 MLE 又是 TLE 的，我心态都崩了，因为 MLE 我甚至还想重新写一个 BFS 版本的，但是做到这里我早已疲惫不堪，最后只能遗憾离场</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1001</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">short</span> Move[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="type">short</span> a[N][N], b[N][N], X, Y, Ax, Ay, Bx, By;</span><br><span class="line"><span class="type">bool</span> Map[N][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">short</span> <span class="title">min</span><span class="params">(<span class="type">short</span> x, <span class="type">short</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">staus</span><span class="params">(<span class="type">short</span> x, <span class="type">short</span> y, <span class="type">short</span> hack, <span class="type">short</span> step)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == Bx &amp;&amp; y == By)</span><br><span class="line">    &#123;</span><br><span class="line">        a[x][y] = <span class="built_in">min</span>(hack, a[x][y]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hack &gt;= a[x][y])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        a[x][y] = hack;</span><br><span class="line">    <span class="keyword">if</span> (step &gt;= b[x][y])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        b[x][y] = step;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">short</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">short</span> nx = x + Move[i][<span class="number">0</span>], ny = y + Move[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= X || ny &lt; <span class="number">0</span> || ny &gt;= Y)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (Map[nx][ny])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">staus</span>(nx, ny, hack, step + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">short</span> dx = <span class="number">-2</span>; dx &lt;= <span class="number">2</span>; dx++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">short</span> dy = <span class="number">-2</span>; dy &lt;= <span class="number">2</span>; dy++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((dx == <span class="number">0</span> &amp;&amp; dy == <span class="number">0</span>) || (dx == <span class="number">1</span> &amp;&amp; dy == <span class="number">0</span>) || (dx == <span class="number">-1</span> &amp;&amp; dy == <span class="number">0</span>) || (dx == <span class="number">0</span> &amp;&amp; dy == <span class="number">1</span>) || (dx == <span class="number">0</span> &amp;&amp; dy == <span class="number">-1</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">short</span> nx = x + dx, ny = y + dy;</span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= X || ny &lt; <span class="number">0</span> || ny &gt;= Y)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (Map[nx][ny])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">staus</span>(nx, ny, hack + <span class="number">1</span>, step);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="type">short</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        cin &gt;&gt; X &gt;&gt; Y &gt;&gt; Ax &gt;&gt; Ay &gt;&gt; Bx &gt;&gt; By;</span><br><span class="line">        Ax--;</span><br><span class="line">        Ay--;</span><br><span class="line">        Bx--;</span><br><span class="line">        By--;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">short</span> i = <span class="number">0</span>; i &lt; X; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">short</span> j = <span class="number">0</span>; j &lt; Y; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[i][j] = INF;</span><br><span class="line">                b[i][j] = INF;</span><br><span class="line">                <span class="type">char</span> tmp;</span><br><span class="line">                cin &gt;&gt; tmp;</span><br><span class="line">                <span class="keyword">if</span> (tmp == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                    Map[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    Map[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">staus</span>(Ax, Ay, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        cout &lt;&lt; a[Bx][By] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="成果-照片">成果 &amp; 照片</h1><p>比赛最后的截图（我记得最高好像冲到了13名，然后死磕最后一题狂加时间加到了17名😿）：</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082035273.jpg" alt=""></p><p>最后关头还在死磕的 NX</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082037355.jpg" alt=""></p><p>快结束时拍的一张照，人基本都跑光了（投影上轮流翻看所有考场中的排名，我在这个房间是第一）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082040809.jpg" alt=""></p><p>赛后纪念品，最后插了 7 个葫芦娃（类 ACM 赛制，做对一题给你插一个）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082041490.jpg" alt=""></p><p>最后拿了几等奖等正式宣布，不着急</p><hr><h1 id="2022年5月18日-更新">2022年5月18日 更新</h1><p>这比赛最后发放了<a href="https://www.aliyundrive.com/s/YN2V4Zje9Zk">答案</a>，T7 有一个重要信息我没看出来，那就是<strong>答案所求的坐标必定落在某个朋友所在的位置</strong>（我还是太菜），而最后一题用的是双端队列+BFS，没有复习高中的知识，没办法</p><p>讲真</p><p>至于最后的奖项嘛…<a href="https://mp.weixin.qq.com/s/cm_jRsaMz6JxOXThAGYCvQ">正好卡在一等的最后一名</a>（</p><p>其实也没什么好吹嘘的，这题真的很简单，我没有全A掉都已经是很丢脸的事情了，这个比赛基本上没有什么含金量，只能说是练练手吧</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311543242.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔与总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营-3rd』L1：Go 语言上手 - 基础语言</title>
      <link href="/2022/05/07/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL1%EF%BC%9AGo-%E8%AF%AD%E8%A8%80%E4%B8%8A%E6%89%8B-%E5%9F%BA%E7%A1%80%E8%AF%AD%E8%A8%80/"/>
      <url>/2022/05/07/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL1%EF%BC%9AGo-%E8%AF%AD%E8%A8%80%E4%B8%8A%E6%89%8B-%E5%9F%BA%E7%A1%80%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p>前情提要：</p><ul><li>配套实例代码： <a href="https://github.com/wangkechun/go-by-example">https://github.com/wangkechun/go-by-example</a></li></ul><h1 id="简介">简介</h1><h2 id="什么是-Go-语言">什么是 Go 语言</h2><ol><li>高性能、高并发</li><li>语法简单、学习曲线平缓</li><li>丰富的标准库</li><li>完善的工具链</li><li>静态编译</li><li>快速编译</li><li>跨平台</li><li>垃圾回收</li></ol><h2 id="哪些公司在使用-Go-语言">哪些公司在使用 Go 语言</h2><p>那必是很多呀~（略）</p><h2 id="字节跳动为什么全面拥抱-Go-语言">字节跳动为什么全面拥抱 Go 语言</h2><ol><li>Python 性能不好</li><li>C++ 不适合在线 Web 业务</li><li>早期团队非 Java 背景</li><li>部署简单，学习成本低</li><li>内部 RPC 和 HTTP 框架的推广</li></ol><h1 id="入门">入门</h1><h2 id="开发环境">开发环境</h2><p>略</p><h2 id="基础语法">基础语法</h2><p>这块就是查缺补漏了，仅挑选我认为有必要再温习的部分</p><h3 id="16-字符串格式化">[16]  字符串格式化</h3><p>首先，最常用的是 <code>Println()</code> ，它的作用是打印变量并换行</p><p>Go 中也是有 <code>Printf()</code> 的，与 C 中的相比更加智能，你可以用 <code>%v</code> 来自动判断类型，而无需纠结整型用 <code>%d</code> ，实行用 <code>%f</code> 之类的</p><p>使用 <code>%+v</code> 可以打印详细信息，而 <code>%#v</code> 则可以更加详细</p><p>保留位数的浮点数与 C 中的做法相同</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> point <span class="keyword">struct</span> &#123;</span><br><span class="line">x, y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;hello&quot;</span></span><br><span class="line">n := <span class="number">123</span></span><br><span class="line">p := point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(s, n) <span class="comment">// hello 123</span></span><br><span class="line">fmt.Println(p)    <span class="comment">// &#123;1 2&#125;</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;s=%v\n&quot;</span>, s)  <span class="comment">// s=hello</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;n=%v\n&quot;</span>, n)  <span class="comment">// n=123</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p=%v\n&quot;</span>, p)  <span class="comment">// p=&#123;1 2&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p=%+v\n&quot;</span>, p) <span class="comment">// p=&#123;x:1 y:2&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p=%#v\n&quot;</span>, p) <span class="comment">// p=main.point&#123;x:1, y:2&#125;</span></span><br><span class="line"></span><br><span class="line">f := <span class="number">3.141592653</span></span><br><span class="line">fmt.Println(f)          <span class="comment">// 3.141592653</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%.2f\n&quot;</span>, f) <span class="comment">// 3.14</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-JSON-处理">[17] JSON 处理</h3><p>Go 中的 JSON 处理极为方便，对结构体使用 <code>json.Marshal()</code> 函数就能自动序列化（不要忘记首字母大写）</p><p>序列化后得到一个 <code>byte</code> 数组，如果要打印的话需要转换为 <code>string</code> 类型</p><p>正常序列化之后得到的都是首字母大写的，可以在结构体处为 JSON 格式加一个 tag</p><p>序列化的 JSON 可以使用 <code>json.Unmarshal()</code> 来解析到一个空的变量里面</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> userInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span></span><br><span class="line">Age   <span class="type">int</span> <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">Hobby []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := userInfo&#123;Name: <span class="string">&quot;wang&quot;</span>, Age: <span class="number">18</span>, Hobby: []<span class="type">string</span>&#123;<span class="string">&quot;Golang&quot;</span>, <span class="string">&quot;TypeScript&quot;</span>&#125;&#125;</span><br><span class="line">buf, err := json.Marshal(a)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(buf)         <span class="comment">// [123 34 78 97...]</span></span><br><span class="line">fmt.Println(<span class="type">string</span>(buf)) <span class="comment">// &#123;&quot;Name&quot;:&quot;wang&quot;,&quot;age&quot;:18,&quot;Hobby&quot;:[&quot;Golang&quot;,&quot;TypeScript&quot;]&#125;</span></span><br><span class="line"></span><br><span class="line">buf, err = json.MarshalIndent(a, <span class="string">&quot;&quot;</span>, <span class="string">&quot;\t&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(buf))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b userInfo</span><br><span class="line">err = json.Unmarshal(buf, &amp;b)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, b) <span class="comment">// main.userInfo&#123;Name:&quot;wang&quot;, Age:18, Hobby:[]string&#123;&quot;Golang&quot;, &quot;TypeScript&quot;&#125;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18-时间处理">[18] 时间处理</h3><p>使用 <code>time.Now()</code> 可以快速获取当前时间</p><p>也可以用 <code>time.Date()</code> 去构造一个带时区的时间，有很多方法可以使用获取年月日时分秒</p><p>可以使用 <code>Sub()</code> 方法得到时间段，时间段又可以使用方法去得到它有多少小时，多少分钟，多少秒</p><p>使用 <code>Format()</code> 方法去格式化时间，不像其他编程语言使用诸如 <code>yyyy-M-d</code> 之类的标识符，Go 是以一个特殊的时刻（2006 年 1 月 2 日 下午 3 点 4 分 5 秒，这个时刻是写在包里面的）为例子，来理解你想表达时间的格式</p><p>同样地，使用 <code>Parse()</code> 并提供这个时刻的示例，可以解析你写成字符串的时间</p><p>你可以使用 <code>now.Unix()</code> 来获取当前的 Unix 时间戳</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">now := time.Now()</span><br><span class="line">fmt.Println(now) <span class="comment">// 2022-03-27 18:04:59.433297 +0800 CST m=+0.000087933</span></span><br><span class="line">t := time.Date(<span class="number">2022</span>, <span class="number">3</span>, <span class="number">27</span>, <span class="number">1</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">0</span>, time.UTC)</span><br><span class="line">t2 := time.Date(<span class="number">2022</span>, <span class="number">3</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">30</span>, <span class="number">36</span>, <span class="number">0</span>, time.UTC)</span><br><span class="line">fmt.Println(t)                                                  <span class="comment">// 2022-03-27 01:25:36 +0000 UTC</span></span><br><span class="line">fmt.Println(t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute()) <span class="comment">// 2022 March 27 1 25</span></span><br><span class="line">fmt.Println(t.Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))                    <span class="comment">// 2022-03-27 01:25:36</span></span><br><span class="line">diff := t2.Sub(t)</span><br><span class="line">fmt.Println(diff)                           <span class="comment">// 1h5m0s</span></span><br><span class="line">fmt.Println(diff.Minutes(), diff.Seconds()) <span class="comment">// 65 3900</span></span><br><span class="line">t3, err := time.Parse(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>, <span class="string">&quot;2022-03-27 01:25:36&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(t3 == t)    <span class="comment">// true</span></span><br><span class="line">fmt.Println(now.Unix()) <span class="comment">// 1648738080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-数字解析">[19] 数字解析</h3><p>使用 <code>strconv</code> 包中的 <code>ParseFloat()</code> 和 <code>ParseInt()</code> 来快速解析字符串</p><p>如果确定是 10 进制，也可以使用 <code>Atoi()</code> 来快速转换成数字</p><p>同样的，可以使用 <code>Itoa()</code> 来把数字转换为字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, _ := strconv.ParseFloat(<span class="string">&quot;1.234&quot;</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Println(f) <span class="comment">// 1.234</span></span><br><span class="line"></span><br><span class="line">n, _ := strconv.ParseInt(<span class="string">&quot;111&quot;</span>, <span class="number">10</span>, <span class="number">64</span>) <span class="comment">// 10 代表进制，64 代表精度</span></span><br><span class="line">fmt.Println(n) <span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line">n, _ = strconv.ParseInt(<span class="string">&quot;0x1000&quot;</span>, <span class="number">0</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Println(n) <span class="comment">// 4096</span></span><br><span class="line"></span><br><span class="line">n2, _ := strconv.Atoi(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">fmt.Println(n2) <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">n2, err := strconv.Atoi(<span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">fmt.Println(n2, err) <span class="comment">// 0 strconv.Atoi: parsing &quot;AAA&quot;: invalid syntax</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20-进程信息">[20] 进程信息</h3><p>使用 <code>os.Args</code> 来获取执行时获取的一些命令行参数</p><p>使用 <code>os.Getenv()</code> 与 <code>os.Setenv()</code> 来获取与写入环境变量</p><p>使用 <code>exec.Command()</code> 来启动子进程并获取其输入输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// go run example/20-env/main.go a b c d</span></span><br><span class="line">fmt.Println(os.Args)           <span class="comment">// [/var/folders/8p/n34xxfnx38dg8bv_x8l62t_m0000gn/T/go-build3406981276/b001/exe/main a b c d]</span></span><br><span class="line">fmt.Println(os.Getenv(<span class="string">&quot;PATH&quot;</span>)) <span class="comment">// /usr/local/go/bin...</span></span><br><span class="line">fmt.Println(os.Setenv(<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>))</span><br><span class="line"></span><br><span class="line">buf, err := exec.Command(<span class="string">&quot;grep&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;/etc/hosts&quot;</span>).CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(buf)) <span class="comment">// 127.0.0.1       localhost</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实战">实战</h1><h2 id="猜谜游戏">猜谜游戏</h2><p>实现一个简单的二分猜数游戏</p><h3 id="V1">V1</h3><p>先测试随机数生成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">maxNum := <span class="number">100</span></span><br><span class="line">secretNumber := rand.Intn(maxNum)</span><br><span class="line">fmt.Println(<span class="string">&quot;The secret number is &quot;</span>, secretNumber)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是发现，每次生成的数都是一样的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072027025.jpg" alt=""></p><h3 id="V2">V2</h3><p>原来是没有设置种子，设置完种子之后就正常了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">maxNum := <span class="number">100</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">secretNumber := rand.Intn(maxNum)</span><br><span class="line">fmt.Println(<span class="string">&quot;The secret number is &quot;</span>, secretNumber)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072030045.jpg" alt=""></p><h3 id="V3">V3</h3><p>接下来实现用户的输入输出，并且解析成数字</p><p>这就需要借助 <code>os.Stdin</code> 文件，但是直接操作很不方便，可以使用 <code>bufio.NewReader()</code> 转换为一个只读的流</p><p>使用 <code>ReadString(&quot;\n&quot;)</code> 方法来读取一行</p><p>但是读入的时候会多读入一个换行符，所以要使用 <code>strings.TrimSuffix</code> 来去掉换行符</p><p>最后，使用 <code>strconv.Atoi</code> 来转换为数字</p><p>这里用这么复杂的方式来得到输入，其实是因为后面的项目中要用到 <code>bufio</code> 这个包，需要提前熟悉</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">maxNum := <span class="number">100</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">secretNumber := rand.Intn(maxNum)</span><br><span class="line">fmt.Println(<span class="string">&quot;The secret number is &quot;</span>, secretNumber)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Please input your guess&quot;</span>)</span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line">input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;An error occurred while reading input. Please try again&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">input = strings.TrimSuffix(input, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">input = strings.TrimSuffix(input, <span class="string">&quot;\r&quot;</span>) <span class="comment">// Windows 平台还要加上这一行</span></span><br><span class="line">    </span><br><span class="line">guess, err := strconv.Atoi(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Invalid input. Please enter an integer value&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;You guess is&quot;</span>, guess)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072042245.jpg" alt=""></p><h3 id="V4">V4</h3><p>这个版本的改进是实现逻辑判断，下末尾添加下面的行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> guess &gt; secretNumber &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Your guess is bigger than the secret number. Please try again&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> guess &lt; secretNumber &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Your guess is smaller than the secret number. Please try again&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Correct, you Legend!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072046287.jpg" alt=""></p><h3 id="V5">V5</h3><p>此时程序大致已经完成了，但是还缺少循环，用户输入完成一次后程序就会退出</p><p>现在加上循环，这个游戏就完整了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">maxNum := <span class="number">100</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">secretNumber := rand.Intn(maxNum)</span><br><span class="line"><span class="comment">// fmt.Println(&quot;The secret number is &quot;, secretNumber)</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Please input your guess&quot;</span>)</span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;An error occured while reading input. Please try again&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">input = strings.TrimSuffix(input, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">input = strings.TrimSuffix(input, <span class="string">&quot;\r&quot;</span>) <span class="comment">// Windows 平台还要加上这一行</span></span><br><span class="line">guess, err := strconv.Atoi(input)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Invalid input. Please enter an integer value&quot;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;You guess is&quot;</span>, guess)</span><br><span class="line"><span class="keyword">if</span> guess &gt; secretNumber &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Your guess is bigger than the secret number. Please try again&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> guess &lt; secretNumber &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Your guess is smaller than the secret number. Please try again&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Correct, you Legend!&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072052157.jpg" alt=""></p><h2 id="在线词典">在线词典</h2><p>在这个项目中，需要实现一个命令行版本的词典，输入一个单词，调用第三方 api 查询它的音标与翻译</p><h3 id="抓包">抓包</h3><p>这里以彩云科技提供的在线翻译为例（<a href="https://fanyi.caiyunapp.com/#/">https://fanyi.caiyunapp.com</a> ）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072059363.jpg" alt=""></p><p>打开开发者工具，随便输入一个单词，找到它的请求与响应</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072103816.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072104283.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072102587.jpg" alt=""></p><p>下面，我们就需要在 Go 中模拟这个请求</p><h3 id="代码生成">代码生成</h3><p>首先复制为 <code>cURL</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072109542.jpg" alt=""></p><p>然后打开 <a href="https://curlconverter.com/#go">https://curlconverter.com/#go</a> ，转换为 Go 代码</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072111287.jpg" alt=""></p><h3 id="解读生成代码">解读生成代码</h3><p>让我们来看一看代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> data = strings.NewReader(<span class="string">`&#123;&quot;trans_type&quot;:&quot;en2zh&quot;,&quot;source&quot;:&quot;good&quot;&#125;`</span>) <span class="comment">// 把字符串来转换成流（因为这个请求可能很大，全部加载到内存不方便，所以一般转换成流）</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;https://api.interpreter.caiyunai.com/v1/dict&quot;</span>, data)   <span class="comment">// 创建请求</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">req.Header.Set(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json, text/plain, */*&quot;</span>) <span class="comment">// 设置请求头，实际上很多都是不必要的</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;Accept-Language&quot;</span>, <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;keep-alive&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;DNT&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Origin&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Referer&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com/&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Sec-Fetch-Dest&quot;</span>, <span class="string">&quot;empty&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Sec-Fetch-Mode&quot;</span>, <span class="string">&quot;cors&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Sec-Fetch-Site&quot;</span>, <span class="string">&quot;cross-site&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;X-Authorization&quot;</span>, <span class="string">&quot;token:qgemv4jr1y38jyq6vhvi&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;app-name&quot;</span>, <span class="string">&quot;xy&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-type&quot;</span>, <span class="string">&quot;web&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua&quot;</span>, <span class="string">`&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;101&quot;, &quot;Microsoft Edge&quot;;v=&quot;101&quot;`</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-mobile&quot;</span>, <span class="string">&quot;?0&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-platform&quot;</span>, <span class="string">`&quot;Windows&quot;`</span>)</span><br><span class="line">resp, err := client.Do(req) <span class="comment">// 发起请求</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close() <span class="comment">// 结束后手动关闭流</span></span><br><span class="line">bodyText, err := ioutil.ReadAll(resp.Body) <span class="comment">// 读取响应</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, bodyText)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到能成功输出一大串的 JSON</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072111654.jpg" alt=""></p><h3 id="生成-request-body">生成 request body</h3><p>但是我们的程序是需要根据输入的不同来查询不同的单词，所以我们需要能自动生成出类似的请求</p><p>先手动构造一个结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DictRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">TransType <span class="type">string</span> <span class="string">`json:&quot;trans_type&quot;`</span></span><br><span class="line">Source    <span class="type">string</span> <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 data 改为通过从结构体来获取</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">request := DictRequest&#123;TransType: <span class="string">&quot;en2zh&quot;</span>, Source: <span class="string">&quot;good&quot;</span>&#125;</span><br><span class="line">buf, err := json.Marshal(request)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data = bytes.NewReader(buf)</span><br></pre></td></tr></table></figure><p>可以看见一样可以正常响应请求</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072125361.jpg" alt=""></p><h3 id="解析-response-body">解析 response body</h3><p>已经解决的发送请求的问题了，现在需要解析那个巨大的 response</p><p>但是返回的 JSON 非常复杂，如果要手写结构体一一绑定的话不知道要写多久，所以又需要借助于在线工具</p><p>打开 <a href="https://oktools.net/json2go">https://oktools.net/json2go</a> ，把响应的字符串复制过去，再点击『转换-嵌套』，就能得到对应的结构体</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072132100.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072131471.jpg" alt=""></p><p>把这个巨大的结构体复制到代码中，然后更名为 <code>DictResponse</code></p><p>使用 <code>json.Unmarshal</code>  把响应体解析到结构体中，尝试打印一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dictResponse DictResponse</span><br><span class="line">err = json.Unmarshal(bodyText, &amp;dictResponse)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, dictResponse)</span><br></pre></td></tr></table></figure><p>可以看见，没毛病，十分完美</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072138296.jpg" alt=""></p><h3 id="打印结果">打印结果</h3><p>那最后一步自然是从结构体中挑出我们需要的那部分打印出来就行了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(word, <span class="string">&quot;UK:&quot;</span>, dictResponse.Dictionary.Prons.En, <span class="string">&quot;US:&quot;</span>, dictResponse.Dictionary.Prons.EnUs)</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> dictResponse.Dictionary.Explanations &#123;</span><br><span class="line">fmt.Println(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以加上一个状态码检查</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;bad StatusCode:&quot;</span>, resp.StatusCode, <span class="string">&quot;body&quot;</span>, <span class="type">string</span>(bodyText))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后包装成函数，得到成品</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DictRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">TransType <span class="type">string</span> <span class="string">`json:&quot;trans_type&quot;`</span></span><br><span class="line">Source    <span class="type">string</span> <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">UserID    <span class="type">string</span> <span class="string">`json:&quot;user_id&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DictResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Rc   <span class="type">int</span> <span class="string">`json:&quot;rc&quot;`</span></span><br><span class="line">Wiki <span class="keyword">struct</span> &#123;</span><br><span class="line">KnownInLaguages <span class="type">int</span> <span class="string">`json:&quot;known_in_laguages&quot;`</span></span><br><span class="line">Description     <span class="keyword">struct</span> &#123;</span><br><span class="line">Source <span class="type">string</span>      <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">Target <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;target&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;description&quot;`</span></span><br><span class="line">ID   <span class="type">string</span> <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Item <span class="keyword">struct</span> &#123;</span><br><span class="line">Source <span class="type">string</span> <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">Target <span class="type">string</span> <span class="string">`json:&quot;target&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;item&quot;`</span></span><br><span class="line">ImageURL  <span class="type">string</span> <span class="string">`json:&quot;image_url&quot;`</span></span><br><span class="line">IsSubject <span class="type">string</span> <span class="string">`json:&quot;is_subject&quot;`</span></span><br><span class="line">Sitelink  <span class="type">string</span> <span class="string">`json:&quot;sitelink&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;wiki&quot;`</span></span><br><span class="line">Dictionary <span class="keyword">struct</span> &#123;</span><br><span class="line">Prons <span class="keyword">struct</span> &#123;</span><br><span class="line">EnUs <span class="type">string</span> <span class="string">`json:&quot;en-us&quot;`</span></span><br><span class="line">En   <span class="type">string</span> <span class="string">`json:&quot;en&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;prons&quot;`</span></span><br><span class="line">Explanations []<span class="type">string</span>      <span class="string">`json:&quot;explanations&quot;`</span></span><br><span class="line">Synonym      []<span class="type">string</span>      <span class="string">`json:&quot;synonym&quot;`</span></span><br><span class="line">Antonym      []<span class="type">string</span>      <span class="string">`json:&quot;antonym&quot;`</span></span><br><span class="line">WqxExample   [][]<span class="type">string</span>    <span class="string">`json:&quot;wqx_example&quot;`</span></span><br><span class="line">Entry        <span class="type">string</span>        <span class="string">`json:&quot;entry&quot;`</span></span><br><span class="line">Type         <span class="type">string</span>        <span class="string">`json:&quot;type&quot;`</span></span><br><span class="line">Related      []<span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;related&quot;`</span></span><br><span class="line">Source       <span class="type">string</span>        <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;dictionary&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">query</span><span class="params">(word <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line">request := DictRequest&#123;TransType: <span class="string">&quot;en2zh&quot;</span>, Source: word&#125;</span><br><span class="line">buf, err := json.Marshal(request)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data = bytes.NewReader(buf)</span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;https://api.interpreter.caiyunai.com/v1/dict&quot;</span>, data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">req.Header.Set(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;keep-alive&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;DNT&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-version&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-mobile&quot;</span>, <span class="string">&quot;?0&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;app-name&quot;</span>, <span class="string">&quot;xy&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json, text/plain, */*&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;device-id&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-type&quot;</span>, <span class="string">&quot;web&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;X-Authorization&quot;</span>, <span class="string">&quot;token:qgemv4jr1y38jyq6vhvi&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Origin&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Sec-Fetch-Site&quot;</span>, <span class="string">&quot;cross-site&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Sec-Fetch-Mode&quot;</span>, <span class="string">&quot;cors&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Sec-Fetch-Dest&quot;</span>, <span class="string">&quot;empty&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Referer&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com/&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Accept-Language&quot;</span>, <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Cookie&quot;</span>, <span class="string">&quot;_ym_uid=16456948721020430059; _ym_d=1645694872&quot;</span>)</span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">bodyText, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;bad StatusCode:&quot;</span>, resp.StatusCode, <span class="string">&quot;body&quot;</span>, <span class="type">string</span>(bodyText))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dictResponse DictResponse</span><br><span class="line">err = json.Unmarshal(bodyText, &amp;dictResponse)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(word, <span class="string">&quot;UK:&quot;</span>, dictResponse.Dictionary.Prons.En, <span class="string">&quot;US:&quot;</span>, dictResponse.Dictionary.Prons.EnUs)</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> dictResponse.Dictionary.Explanations &#123;</span><br><span class="line">fmt.Println(item)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">2</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">`usage: simpleDict WORD</span></span><br><span class="line"><span class="string">example: simpleDict hello</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">word := os.Args[<span class="number">1</span>]</span><br><span class="line">query(word)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不得不说，看上去挺好用的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072152277.jpg" alt=""></p><h2 id="SOCKS5-代理">SOCKS5 代理</h2><p>这一节的内容是手动写一个 SOCKS5 代理，代码量比较大</p><p>原视频讲得很详细，代码的每个部分都有解析</p><h3 id="介绍">介绍</h3><p>（略）</p><h3 id="原理">原理</h3><p>如图，要先协商鉴权，然后转发数据</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072238312.png" alt=""></p><h3 id="TCP-echo-server">TCP echo server</h3><p>先从简单的开始，写一个原路转发所有 TCP 请求的服务器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:1080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">client, err := server.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Accept failed %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> process(client)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">reader := bufio.NewReader(conn)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">b, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>&#123;b&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这东西在 Windows 上需要管理员，我是 build 了之后手动以管理员权限运行的</p><p>跑起来之后，我们使用 <code>nc</code> 命令来测试是否正常运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 127.0.0.1 1080</span><br></pre></td></tr></table></figure><p>这个命令 Linux 是自带的，Windows 可以去<a href="https://eternallybored.org/misc/netcat/">网上下载</a></p><p>可以看见成功返回了数据</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072244075.jpg" alt=""></p><h3 id="认证阶段">认证阶段</h3><p>接下来开始实现协议的第一步：认证阶段，这里就开始变得复杂了</p><p>总体思想就是在缓冲区读取发送过来的 <code>VER</code> 、<code>NMETHODS</code> 和 <code>METHODS</code> 三个字段，鉴别好是这个协议之后，返回 <code>VER</code> 和 <code>METHOD</code> 这两个字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socks5Ver = <span class="number">0x05</span></span><br><span class="line"><span class="keyword">const</span> cmdBind = <span class="number">0x01</span></span><br><span class="line"><span class="keyword">const</span> atypIPV4 = <span class="number">0x01</span></span><br><span class="line"><span class="keyword">const</span> atypeHOST = <span class="number">0x03</span></span><br><span class="line"><span class="keyword">const</span> atypeIPV6 = <span class="number">0x04</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:1080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">client, err := server.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Accept failed %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> process(client)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">reader := bufio.NewReader(conn)</span><br><span class="line">err := auth(reader, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;client %v auth failed:%v&quot;</span>, conn.RemoteAddr(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;auth success&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">auth</span><span class="params">(reader *bufio.Reader, conn net.Conn)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | NMETHODS | METHODS  |</span></span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |    1     | 1 to 255 |</span></span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// VER: 协议版本，socks5为0x05</span></span><br><span class="line"><span class="comment">// NMETHODS: 支持认证的方法数量</span></span><br><span class="line"><span class="comment">// METHODS: 对应NMETHODS，NMETHODS的值为多少，METHODS就有多少个字节。RFC预定义了一些值的含义，内容如下:</span></span><br><span class="line"><span class="comment">// X’00’ NO AUTHENTICATION REQUIRED</span></span><br><span class="line"><span class="comment">// X’02’ USERNAME/PASSWORD</span></span><br><span class="line"></span><br><span class="line">ver, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read ver failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ver != socks5Ver &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported ver:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line">methodSize, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read methodSize failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">method := <span class="built_in">make</span>([]<span class="type">byte</span>, methodSize)</span><br><span class="line">_, err = io.ReadFull(reader, method)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read method failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;ver&quot;</span>, ver, <span class="string">&quot;method&quot;</span>, method)</span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line"><span class="comment">// |VER | METHOD |</span></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line"><span class="comment">// | 1  |   1    |</span></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>&#123;socks5Ver, <span class="number">0x00</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;write failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>curl</code> 命令测试一下，连接肯定是不成功的（毕竟只写了第一步），但已经成功打印出了 <code>VER</code> 和 <code>METHOD</code> 两个字段，这说明我们当前的实现正确</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072258410.jpg" alt=""></p><h3 id="请求阶段">请求阶段</h3><p>现在代码开始很长了，实现一个 <code>connect</code> 函数，用来代替客户端连接目标服务器（获取用户的需求，然后返回成功）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socks5Ver = <span class="number">0x05</span></span><br><span class="line"><span class="keyword">const</span> cmdBind = <span class="number">0x01</span></span><br><span class="line"><span class="keyword">const</span> atypIPV4 = <span class="number">0x01</span></span><br><span class="line"><span class="keyword">const</span> atypeHOST = <span class="number">0x03</span></span><br><span class="line"><span class="keyword">const</span> atypeIPV6 = <span class="number">0x04</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:1080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">client, err := server.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Accept failed %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> process(client)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">reader := bufio.NewReader(conn)</span><br><span class="line">err := auth(reader, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;client %v auth failed:%v&quot;</span>, conn.RemoteAddr(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = connect(reader, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;client %v auth failed:%v&quot;</span>, conn.RemoteAddr(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">auth</span><span class="params">(reader *bufio.Reader, conn net.Conn)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | NMETHODS | METHODS  |</span></span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |    1     | 1 to 255 |</span></span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// VER: 协议版本，socks5为0x05</span></span><br><span class="line"><span class="comment">// NMETHODS: 支持认证的方法数量</span></span><br><span class="line"><span class="comment">// METHODS: 对应NMETHODS，NMETHODS的值为多少，METHODS就有多少个字节。RFC预定义了一些值的含义，内容如下:</span></span><br><span class="line"><span class="comment">// X’00’ NO AUTHENTICATION REQUIRED</span></span><br><span class="line"><span class="comment">// X’02’ USERNAME/PASSWORD</span></span><br><span class="line"></span><br><span class="line">ver, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read ver failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ver != socks5Ver &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported ver:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line">methodSize, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read methodSize failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">method := <span class="built_in">make</span>([]<span class="type">byte</span>, methodSize)</span><br><span class="line">_, err = io.ReadFull(reader, method)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read method failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line"><span class="comment">// |VER | METHOD |</span></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line"><span class="comment">// | 1  |   1    |</span></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>&#123;socks5Ver, <span class="number">0x00</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;write failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">connect</span><span class="params">(reader *bufio.Reader, conn net.Conn)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |  1  | X&#x27;00&#x27; |  1   | Variable |    2     |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// VER 版本号，socks5的值为0x05</span></span><br><span class="line"><span class="comment">// CMD 0x01表示CONNECT请求</span></span><br><span class="line"><span class="comment">// RSV 保留字段，值为0x00</span></span><br><span class="line"><span class="comment">// ATYP 目标地址类型，DST.ADDR的数据对应这个字段的类型。</span></span><br><span class="line"><span class="comment">//   0x01表示IPv4地址，DST.ADDR为4个字节</span></span><br><span class="line"><span class="comment">//   0x03表示域名，DST.ADDR是一个可变长度的域名</span></span><br><span class="line"><span class="comment">// DST.ADDR 一个可变长度的值</span></span><br><span class="line"><span class="comment">// DST.PORT 目标端口，固定2个字节</span></span><br><span class="line"></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">4</span>)</span><br><span class="line">_, err = io.ReadFull(reader, buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read header failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">ver, cmd, atyp := buf[<span class="number">0</span>], buf[<span class="number">1</span>], buf[<span class="number">3</span>]</span><br><span class="line"><span class="keyword">if</span> ver != socks5Ver &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported ver:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cmd != cmdBind &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported cmd:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line">addr := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">switch</span> atyp &#123;</span><br><span class="line"><span class="keyword">case</span> atypIPV4:</span><br><span class="line">_, err = io.ReadFull(reader, buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read atyp failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">addr = fmt.Sprintf(<span class="string">&quot;%d.%d.%d.%d&quot;</span>, buf[<span class="number">0</span>], buf[<span class="number">1</span>], buf[<span class="number">2</span>], buf[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">case</span> atypeHOST:</span><br><span class="line">hostSize, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read hostSize failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">host := <span class="built_in">make</span>([]<span class="type">byte</span>, hostSize)</span><br><span class="line">_, err = io.ReadFull(reader, host)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read host failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">addr = <span class="type">string</span>(host)</span><br><span class="line"><span class="keyword">case</span> atypeIPV6:</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;IPv6: no supported yet&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;invalid atyp&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">_, err = io.ReadFull(reader, buf[:<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read port failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">port := binary.BigEndian.Uint16(buf[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">&quot;dial&quot;</span>, addr, port)</span><br><span class="line"></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |  1  | X&#x27;00&#x27; |  1   | Variable |    2     |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// VER socks版本，这里为0x05</span></span><br><span class="line"><span class="comment">// REP Relay field,内容取值如下 X’00’ succeeded</span></span><br><span class="line"><span class="comment">// RSV 保留字段</span></span><br><span class="line"><span class="comment">// ATYPE 地址类型</span></span><br><span class="line"><span class="comment">// BND.ADDR 服务绑定的地址</span></span><br><span class="line"><span class="comment">// BND.PORT 服务绑定的端口DST.PORT</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>&#123;<span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;write failed: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这一步必定还是连接失败的，但我们已经能获得到客户想访问的目标服务器</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072307224.jpg" alt=""></p><h3 id="响应阶段">响应阶段</h3><p>现在是最后一步：真正地和目标服务器建立连接，并转发数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socks5Ver = <span class="number">0x05</span></span><br><span class="line"><span class="keyword">const</span> cmdBind = <span class="number">0x01</span></span><br><span class="line"><span class="keyword">const</span> atypIPV4 = <span class="number">0x01</span></span><br><span class="line"><span class="keyword">const</span> atypeHOST = <span class="number">0x03</span></span><br><span class="line"><span class="keyword">const</span> atypeIPV6 = <span class="number">0x04</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:1080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">client, err := server.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Accept failed %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> process(client)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">reader := bufio.NewReader(conn)</span><br><span class="line">err := auth(reader, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;client %v auth failed:%v&quot;</span>, conn.RemoteAddr(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = connect(reader, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;client %v auth failed:%v&quot;</span>, conn.RemoteAddr(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">auth</span><span class="params">(reader *bufio.Reader, conn net.Conn)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | NMETHODS | METHODS  |</span></span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |    1     | 1 to 255 |</span></span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// VER: 协议版本，socks5为0x05</span></span><br><span class="line"><span class="comment">// NMETHODS: 支持认证的方法数量</span></span><br><span class="line"><span class="comment">// METHODS: 对应NMETHODS，NMETHODS的值为多少，METHODS就有多少个字节。RFC预定义了一些值的含义，内容如下:</span></span><br><span class="line"><span class="comment">// X’00’ NO AUTHENTICATION REQUIRED</span></span><br><span class="line"><span class="comment">// X’02’ USERNAME/PASSWORD</span></span><br><span class="line"></span><br><span class="line">ver, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read ver failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ver != socks5Ver &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported ver:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line">methodSize, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read methodSize failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">method := <span class="built_in">make</span>([]<span class="type">byte</span>, methodSize)</span><br><span class="line">_, err = io.ReadFull(reader, method)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read method failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line"><span class="comment">// |VER | METHOD |</span></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line"><span class="comment">// | 1  |   1    |</span></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>&#123;socks5Ver, <span class="number">0x00</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;write failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">connect</span><span class="params">(reader *bufio.Reader, conn net.Conn)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |  1  | X&#x27;00&#x27; |  1   | Variable |    2     |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// VER 版本号，socks5的值为0x05</span></span><br><span class="line"><span class="comment">// CMD 0x01表示CONNECT请求</span></span><br><span class="line"><span class="comment">// RSV 保留字段，值为0x00</span></span><br><span class="line"><span class="comment">// ATYP 目标地址类型，DST.ADDR的数据对应这个字段的类型。</span></span><br><span class="line"><span class="comment">//   0x01表示IPv4地址，DST.ADDR为4个字节</span></span><br><span class="line"><span class="comment">//   0x03表示域名，DST.ADDR是一个可变长度的域名</span></span><br><span class="line"><span class="comment">// DST.ADDR 一个可变长度的值</span></span><br><span class="line"><span class="comment">// DST.PORT 目标端口，固定2个字节</span></span><br><span class="line"></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">4</span>)</span><br><span class="line">_, err = io.ReadFull(reader, buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read header failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">ver, cmd, atyp := buf[<span class="number">0</span>], buf[<span class="number">1</span>], buf[<span class="number">3</span>]</span><br><span class="line"><span class="keyword">if</span> ver != socks5Ver &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported ver:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cmd != cmdBind &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported cmd:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line">addr := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">switch</span> atyp &#123;</span><br><span class="line"><span class="keyword">case</span> atypIPV4:</span><br><span class="line">_, err = io.ReadFull(reader, buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read atyp failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">addr = fmt.Sprintf(<span class="string">&quot;%d.%d.%d.%d&quot;</span>, buf[<span class="number">0</span>], buf[<span class="number">1</span>], buf[<span class="number">2</span>], buf[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">case</span> atypeHOST:</span><br><span class="line">hostSize, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read hostSize failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">host := <span class="built_in">make</span>([]<span class="type">byte</span>, hostSize)</span><br><span class="line">_, err = io.ReadFull(reader, host)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read host failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">addr = <span class="type">string</span>(host)</span><br><span class="line"><span class="keyword">case</span> atypeIPV6:</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;IPv6: no supported yet&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;invalid atyp&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">_, err = io.ReadFull(reader, buf[:<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read port failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">port := binary.BigEndian.Uint16(buf[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">dest, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="string">&quot;%v:%v&quot;</span>, addr, port)) <span class="comment">// 连接目标服务器</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;dial dst failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> dest.Close()</span><br><span class="line">log.Println(<span class="string">&quot;dial&quot;</span>, addr, port)</span><br><span class="line"></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |  1  | X&#x27;00&#x27; |  1   | Variable |    2     |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// VER socks版本，这里为0x05</span></span><br><span class="line"><span class="comment">// REP Relay field,内容取值如下 X’00’ succeeded</span></span><br><span class="line"><span class="comment">// RSV 保留字段</span></span><br><span class="line"><span class="comment">// ATYPE 地址类型</span></span><br><span class="line"><span class="comment">// BND.ADDR 服务绑定的地址</span></span><br><span class="line"><span class="comment">// BND.PORT 服务绑定的端口DST.PORT</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>&#123;<span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;write failed: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background()) <span class="comment">//使用 context 机制持续运行</span></span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, _ = io.Copy(dest, reader)  <span class="comment">// 拷贝数据流</span></span><br><span class="line">cancel()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, _ = io.Copy(conn, dest)  <span class="comment">// 拷贝数据流</span></span><br><span class="line">cancel()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&lt;-ctx.Done()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见已经成功完成了转发</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072313315.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C++』标准模板库（STL）之算法篇</title>
      <link href="/2022/05/06/%E3%80%8EC-%E3%80%8F%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89%E4%B9%8B%E7%AE%97%E6%B3%95%E7%AF%87/"/>
      <url>/2022/05/06/%E3%80%8EC-%E3%80%8F%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89%E4%B9%8B%E7%AE%97%E6%B3%95%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>STL 里除了上一篇中的那些好用的容器之外，还提供了大量基于迭代器的非成员模板函数，能大量简化我们的编程工作</p><p>这些模板函数都在 <code>algorithm</code> 头文件里（翻译为算法）</p><p>所以我们需要先引入这个头文件 <code>#include &lt;algorithm&gt;</code> ，同时不要忘记指定命名空间，例如 <code>using namespace std;</code></p><h1 id="max-x-y-、-min-x-y-、-abs-x-和-swap-x-y">max(x,y) 、 min(x,y)  、 abs(x) 和 swap(x,y)</h1><p>这四个一起讲</p><p>如你所见，这几个分别用来求最大值，最小值，绝对值，还有交换两个变量</p><p>对于两个求最值的 <code>x</code> 和 <code>y</code> 不仅可以是整型，还可以是实型</p><p>但是 <code>abs()</code> 只能用于整型，实型要用 <code>fabs()</code></p><p>而对于 <code>swap()</code>，基本上所有地方都能用上</p><p>不过在比赛的话还是建议自己写函数覆盖掉，STL 里的没自己写的块</p><p>当然，你可能说使用宏不会更快吗？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span></span><br></pre></td></tr></table></figure><p>我只能说尽量不要用宏，绝对值用用还行，<strong>最大值和最小值千万别用</strong>（别问我是怎么知道的）</p><h1 id="reverse-s-t">reverse(s,t)</h1><p><code>reverse(s,t)</code> 可以将数组指针在 <code>s</code>~<code>t</code> 之间的元素，或容器的迭代器在 <code>s</code>~<code>t</code> 范围内的所有元素进行反转（老规矩，左闭右开）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;;</span><br><span class="line"><span class="built_in">reverse</span>(a, a + <span class="number">4</span>); <span class="comment">//将 a[0] 到 a[3] 这4个元素反转</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line"><span class="comment">//输出 13 12 11 10 14 15</span></span><br><span class="line">string str = <span class="string">&quot;abcdefghi&quot;</span>;</span><br><span class="line"><span class="built_in">reverse</span>(str.<span class="built_in">begin</span>() + <span class="number">2</span>, str.<span class="built_in">begin</span>() + <span class="number">6</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">length</span>(); i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);</span><br><span class="line"><span class="comment">//输出 abfedcghi</span></span><br></pre></td></tr></table></figure><h1 id="next-permutation">next_permutation()</h1><p><code>next_permutation()</code> 能求出一个序列在全排列中的下一个序列，并在达到全排列的最后一个时会返回  <code>false</code></p><p>例如，<code>123</code> 的全排列为：<code>123</code>，<code>132</code>，<code>213</code>，<code>231</code>，<code>312</code>，<code>321</code>，所以 <code>231</code> 的下一个排列就是 <code>312</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>]);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(a, a + <span class="number">3</span>));</span><br><span class="line"><span class="comment">// a[0],a[1],a[2]三个元素的排列</span></span><br></pre></td></tr></table></figure><h1 id="fill">fill()</h1><p><code>fill()</code> 可以把数组或容器的某一段区间赋为某个相同的值，和 <code>memset()</code> 不同，这里的赋值可以是数组类型对应范围中的任意值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">fill</span>(a, a + <span class="number">5</span>, <span class="number">123</span>); <span class="comment">// 将 a[0] 到 a[4] 均赋值为 123</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="sort">sort()</h1><p><code>sort()</code>是实现自动排序的函数，鄙人认为它是 STL 中最重要而且也是最常用的函数了</p><p><code>sort()</code> 在具体实现中规避了经典快速排序（包括 C 语言中的 <code>qsort()</code>  函数）可能出现的、会导致实际复杂度退化到 O (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>) 的极端情况。它根据具体情形使用不同的排序方法，效率极高</p><p>它的基本使用格式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(首元素地址, 尾元素地址的下一个地址, 比较函数); <span class="comment">// 为什么说是下一个？因为左闭右开（顾头不顾腚）</span></span><br></pre></td></tr></table></figure><p>我们看到，<code>sort()</code> 有三个参数，其中前两个是必填的，如果数组中的元素是可以直接比较大小的，如 <code>int</code>、<code>double</code>、<code>char</code> 等，可以不指定比较函数，并且默认是递增</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">6</span>] = &#123;<span class="number">9</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(a, a + <span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line"><span class="comment">//输出 2 4 5 9 6 -1</span></span><br><span class="line"><span class="type">char</span> c[] = &#123;<span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;K&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(c, c + <span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c[i]); </span><br><span class="line"><span class="comment">//输出 AKTW</span></span><br></pre></td></tr></table></figure><p>如果需要实现递减排序，或者对结构体（本身没有大小关系）等进行排序，就需要用到比较函数，一般写成 <code>cmp</code> 函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">// 类型根据实际情况自行修改</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b; <span class="comment">//可以理解成如果 a&gt;b 就把 a 放在前面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这样使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">6</span>] = &#123;<span class="number">9</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(a, a + <span class="number">6</span>, cmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]); </span><br><span class="line"><span class="comment">//输出9 6 5 4 2 -1</span></span><br></pre></td></tr></table></figure><p>而如果要对结构体进行排序，假设定义了如下的结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125; s[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>下面想要按照 <code>x</code> 从大到小排序，那么排序函数就可以这么写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x &gt; b.x; <span class="comment">//按照 x 的值从大到小对结构体进行排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想先按照 <code>x</code> 从大到小排序，在 <code>x</code> 相等的情况下，再按照 <code>y</code> 从小到大排序，即类似的双关键字排序，就可以这么写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a.x != b.x) <span class="keyword">return</span> a.x &gt; b.x;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，不仅是数组，对于 vector 等 STL 容器也是可以用的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());  </span><br></pre></td></tr></table></figure><h1 id="lower-bound-和-upper-bound">lower_bound() 和 upper_bound ()</h1><p><code>lower_bound(first,last,val)</code> 用来寻找一个有序数组或者容器中 <code>first</code>～<code>last</code> 范围内（左闭右开），第一个 <strong>大于等于</strong>  <code>val</code> 的元素的位置。如果是数组，则返回该位置的指针；如果是容器，则返回该位置的迭代器。<br><code>upper_bound(first,last,val)</code> 用来寻找一个有序数组或者容器中 <code>first</code>～<code>last</code> 范围内（左闭右开），第一个 <strong>大于</strong>   <code>val</code> 的元素的位置。如果是数组，则返回该位置的指针；如果是容器，则返回该位置的迭代器。</p><p>如果数组或者容器中没有需要寻找的元素，则上面两个函数的返回值均为可以插入该值的位置的指针或者迭代器，时间复杂度均为 O(log2(last-first))</p><p><a href="http://www.cplusplus.com/reference/algorithm/lower_bound/">官方文档</a>中的样例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lower_bound/upper_bound example</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>     <span class="comment">// std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span>    <span class="comment">// std::lower_bound, std::upper_bound, std::sort</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>       <span class="comment">// std::vector</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> myints[] = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>&#125;;</span><br><span class="line">  <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(myints,myints+<span class="number">8</span>)</span></span>;           <span class="comment">// 10 20 30 30 20 10 10 20</span></span><br><span class="line"></span><br><span class="line">  std::<span class="built_in">sort</span> (v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());                <span class="comment">// 10 10 10 20 20 20 30 30</span></span><br><span class="line"></span><br><span class="line">  std::vector&lt;<span class="type">int</span>&gt;::iterator low,up;</span><br><span class="line">  low=std::<span class="built_in">lower_bound</span> (v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">20</span>); <span class="comment">//          ^</span></span><br><span class="line">  up= std::<span class="built_in">upper_bound</span> (v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">20</span>); <span class="comment">//                   ^</span></span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;lower_bound at position &quot;</span> &lt;&lt; (low- v.<span class="built_in">begin</span>()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;upper_bound at position &quot;</span> &lt;&lt; (up - v.<span class="built_in">begin</span>()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，你也可以指定自己的比较函数（<a href="https://www.jianshu.com/p/cb0d5488bb6a">阅读原文</a>）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="built_in">point</span>()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">int</span> _x, <span class="type">int</span> _y)&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(point a, point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    point a[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    a[<span class="number">0</span>].x = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">0</span>].y = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    a[<span class="number">1</span>].x = <span class="number">100</span>;</span><br><span class="line">    a[<span class="number">1</span>].y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    a[<span class="number">2</span>].x = <span class="number">30</span>;</span><br><span class="line">    a[<span class="number">2</span>].y = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    a[<span class="number">3</span>].x = <span class="number">25</span>;</span><br><span class="line">    a[<span class="number">3</span>].y = <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line">    a[<span class="number">4</span>].x = <span class="number">301</span>;</span><br><span class="line">    a[<span class="number">4</span>].y = <span class="number">103</span>;</span><br><span class="line">    <span class="comment">// 随便赋值</span></span><br><span class="line">    <span class="built_in">sort</span>(a, a + <span class="number">5</span>, cmp);</span><br><span class="line">    <span class="comment">// 先排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a[%d].x = %d, a[%d].y = %d\n&quot;</span>, i, a[i].x, i, a[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出会发现他们按照x从小到大排序了</span></span><br><span class="line">    cout &lt;&lt; (<span class="built_in">lower_bound</span>(a, a + <span class="number">5</span>, <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">1000</span>), cmp) - a) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 第一个x值大于1的元素是(1, 100)这个元素，它的下标为0</span></span><br><span class="line">    cout &lt;&lt; (<span class="built_in">lower_bound</span>(a, a + <span class="number">5</span>, <span class="built_in">point</span>(<span class="number">101</span>, <span class="number">1000</span>), cmp) - a) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 第一个x值大于101的元素是(301, 103)这个元素，它的下标为4</span></span><br><span class="line">    cout &lt;&lt; (<span class="built_in">lower_bound</span>(a, a + <span class="number">5</span>, <span class="built_in">point</span>(<span class="number">1000</span>, <span class="number">1000</span>), cmp) - a) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 因为找不到所以返回a + 5，再减a就是5</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C++』标准模板库（STL）之容器篇</title>
      <link href="/2022/05/05/%E3%80%8EC-%E3%80%8F%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89%E4%B9%8B%E5%AE%B9%E5%99%A8%E7%AF%87/"/>
      <url>/2022/05/05/%E3%80%8EC-%E3%80%8F%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89%E4%B9%8B%E5%AE%B9%E5%99%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>鄙人认为 C++ 相比 C 最大的更新就是内置的 STL 了，里面封装了一堆好用的容器，而不用关心其内部实现的原理和具体代码，十分方便快捷，除了容器外还有一堆算法，这个在下一篇会讲</p><p>本文仅记录我认为比较常用的容器，例如 <code>pair</code> 这种比较鸡肋的就不记录了</p><blockquote><p>注意：使用 STL 必须要定义命名空间，例如<code>using namespace std;</code></p></blockquote><h1 id="Vector">Vector</h1><p><code>vector</code> 直译为“向量”，但是一般当成可变长的数组用</p><p>众所周知，C/C++ 中的数组一旦定义就无法改变长度，而 <code>vector</code>  就可以解决这个问题，但是代价也是明显的：运行速度更慢</p><p>记得使用 <code>#include &lt;vector&gt;</code> 来引入头文件</p><h2 id="定义">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">typename</span>&gt; name;</span><br></pre></td></tr></table></figure><p>以上定义相当于定义了一个一维数组 <code>name[size]</code> ，但是 <code>size</code> 不确定，其长度可以根据需要而变化。其中 <code>typename</code> 可以是任何基本类型，例如 <code>int</code>、 <code>double</code> 、<code>char</code> 、结构体等，也可以套娃 STL 标准容器，例如 <code>vector</code> 、 <code>queue</code> 等</p><h2 id="访问">访问</h2><h3 id="使用下标">使用下标</h3><p>这就像是访问传统的数组一样，非常方便，例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,v[index]);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>不能越界，不然会报错</li><li>这种方法仅限于访问，不能通过它来修改</li></ul><h3 id="使用迭代器">使用迭代器</h3><p>可以将迭代器（<code>iterator</code>）理解为一种类似指针的变量。其定义为：<code>vector&lt;typename&gt;::iterator it;</code> ，例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it= v.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(it + i));</span><br></pre></td></tr></table></figure><h2 id="常用方法">常用方法</h2><ul><li><code>push_back(x)</code> ：在后面添加一个元素 <code>x</code>，时间复杂度为 O(1)</li><li><code>size()</code> ： 用来获得元素的个数</li><li><code>pop_back()</code> ：弹出尾元素，时间复杂度为 O(1)</li><li><code>clear()</code> ：清空所有元素，时间复杂度为 O(n)</li><li><code>insert(it,x)</code> ：在迭代器 <code>it</code> 处插入一个元素 <code>x</code>，时间复杂度为 O(n)</li><li><code>erase()</code> ：删除元素，使用 <code>erase(it)</code>删除迭代器 <code>it</code> 处的元素（时间复杂度为 O(1)），或使用 <code>erase(first,last)</code> 删除左闭右开区间 <code>[first,last)</code> 内的所有元素（时间复杂度为 O(last-first)）</li></ul><h1 id="Stack">Stack</h1><p><code>stack</code> 翻译为栈，是一种“后进先出”的容器，只能通过 <code>top()</code> 和 <code>pop()</code> 来访问栈顶元素</p><p>记得使用 <code>#include &lt;stack&gt;</code> 来引入头文件</p><h2 id="定义-2">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="keyword">typename</span>&gt; name;</span><br></pre></td></tr></table></figure><p>类似地，<code>typename</code> 可以是任何基本类型或者容器，<code>name</code> 是栈的名字</p><h2 id="常用方法-2">常用方法</h2><ul><li><code>push(x)</code> ：将 <code>x</code> 压入栈，时间复杂度为 O(1)</li><li><code>top()</code> ：获得栈顶元素（但不删除），时间复杂度为 O(1)</li><li><code>pop()</code> ：弹出栈顶元素，时间复杂度为 O(1)</li><li><code>empty()</code> ：检测是否为空，空返回 <code>true</code>，否则返回 <code>false</code>，时间复杂度为 O(1)</li><li><code>size()</code> ：返回元素个数，时间复杂度为 O(1)</li></ul><h1 id="Queue">Queue</h1><p><code>queue</code> 翻译为队列，是一种“先进先出”的容器，只能通过函数 <code>front()</code> 来访问队首元素，或通过函数  <code>back()</code> 来访问队尾元素</p><p>记得使用 <code>#include &lt;queue&gt;</code> 来引入头文件</p><h2 id="定义-3">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="keyword">typename</span>&gt; name;</span><br></pre></td></tr></table></figure><p>其中，<code>typename</code> 可以是任何基本类型或者容器，<code>name</code> 为队列的名字</p><h2 id="常用方法-3">常用方法</h2><ul><li><code>push(x)</code> ：将 <code>x</code> 入队，时间复杂度为 O(1)</li><li><code>front()</code> ：获取队首元素，时间复杂度为 O(1)</li><li><code>back()</code>  ：获取队尾元素，时间复杂度为 O(1)</li><li><code>pop()</code> ：让队首元素出队，时间复杂度为 O(1)</li><li><code>empty()</code> ：检测是否为空，空返回 <code>true</code>，否则返回 <code>false</code>，时间复杂度为 O(1)</li><li><code>size()</code> ：返回元素个数，时间复杂度为 O(1)</li></ul><h2 id="priority-queue">priority_queue</h2><p>STL 中还有两种容器与队列有关，分别是双端队列（<code>deque</code>）和优先队列（<code>priority_queue</code>）</p><p>但是用的最多的还是优先队列，简单的说就是可以同时帮你在内部排序的队列</p><p>基本定义式与一般队列相似，但如果要指定排序方向，则需要复杂一点，请看下面的两个实例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,less&lt;<span class="type">int</span>&gt; &gt; q;</span><br></pre></td></tr></table></figure><p>第二种定义方式的尖括号内多出了 2 个参数：一个是 <code>vector&lt;int&gt;</code> ， 表示的是承载底层数据结构——堆（<code>heap</code>）的容器，其类型要与第 1 个参数一致；另一个是 <code>less&lt;int&gt;</code> ，是对第 1 个参数的比较类， <code>less&lt;int&gt;</code> 表示数字越大的优先级越大（大根堆），而如果用 <code>greater&lt;int&gt;</code> 则表示数字越小的优先级越大（小根堆）</p><p>一定要记得 <code>less</code> 是大在前， <code>greater</code> 是小在前</p><p>而默认的就是大在前，所以这两个定义其实是一样的</p><p>它的方法与 <code>queue</code> 大同小异，但是也有不同：</p><ul><li><code>push()</code> 方法的时间复杂度提升为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log _{2}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> ，毕竟内部要排序</li><li>没有了 <code>front()</code> 和 <code>back()</code> 方法，只能通过 <code>top()</code> 或 <code>pop()</code> 访问队首元素</li></ul><h1 id="Map">Map</h1><p><code>map</code> 翻译为映射，是STL中的常用容器。其实，数组就是一种映射，比如：<code>int a[100];</code> 就是定义了一个 <code>int</code> 到 <code>int</code> 的映射。而 <code>a[5]=25;</code> 就是把 5 映射到 25。数组总是将 <code>int</code> 类型映射到其它基本类型（称为数组的基类型），这同时也带来了一个问题，有时候我们希望把 <code>string</code> 映射成一个 <code>int</code>，数组就不方便了。这时就可以使用 <code>map</code>，<code>map</code> 可以将任何基本类型（包括STL容器）映射到任何基本类型（包括STL容器）</p><p>记得使用 <code>#include &lt;map&gt;</code> 来引入头文件</p><h2 id="定义-4">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;typename1,typename2&gt; name;</span><br></pre></td></tr></table></figure><p>其中，<code>typename1</code> 是映射前的类型（键 <code>key</code>），<code>typename2</code> 是映射后的类型（值 <code>value</code>），<code>name</code> 为映射的名字</p><h2 id="访问-2">访问</h2><p>和 vector 类似，有下标和迭代器两种方法</p><h3 id="使用下标-2">使用下标</h3><p>通过下标访问就像普通的数组元素访问，例如先定义 <code>map&lt;char,int&gt; mp</code> ，然后就可以通过 <code>mp['c']</code> 的方式来访问它对应的元素，如 <code>mp['c']=124</code></p><p>与 vector 不同，你可以用这种方法直接添加键值对</p><h3 id="使用迭代器-2">使用迭代器</h3><p>通过迭代器访问，先作如下定义：<code>map&lt;typename1,typename2&gt;::iterator it;</code></p><p>因为 map 的每一对映射都有两个 <code>typename</code> ，所以，我们使用 <code>it-&gt;first</code> 来访问键，而使用 <code>it-&gt;second</code> 来访问值</p><h2 id="常用方法-4">常用方法</h2><ul><li><code>find(key)</code> ：返回键为 <code>key</code> 的映射的迭代器，时间复杂度为 O( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log _{2}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span>)</li><li><code>size()</code> ：获得映射的对数，时间复杂度为 O(1)</li><li><code>clear()</code> ：清空所有映射，时间复杂度为 O(n)</li><li><code>erase()</code> ：与 vector 中的相同：删除元素，使用 <code>erase(it)</code>删除迭代器 <code>it</code> 指向的元素（时间复杂度为 O(1)），或使用 <code>erase(first,last)</code> 删除左闭右开区间 <code>[first,last)</code> 内的所有元素（时间复杂度为 O(last-first)），但是还多了一个用法：<code>erase(key)</code> ，时间复杂度为 O( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log _{2}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span>)</li></ul><h1 id="Set">Set</h1><p><code>set</code> 翻译为集合，是一个内部自动有序且不含重复元素的容器。<code>set</code> 最主要的作用就是自动去重并按升序排序，因此遇到需要去重但是又不方便直接开数组的情况。<code>set</code> 中的元素是唯一的，其内部采用“红黑树”实现</p><p>记得使用 <code>#include &lt;map&gt;</code> 来引入头文件</p><h2 id="定义-5">定义</h2><h3 id="方法一">方法一</h3><p>基础模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="keyword">typename</span>&gt; name;</span><br></pre></td></tr></table></figure><p>其中，<code>typename</code> 可以是任何基本类型或者容器，<code>name</code> 是集合的名字</p><p>当然有些时候会定义 set 数组，例如：<code>set&lt;int&gt; st[100];</code> ，这样 <code>st[0]～st[99]</code> 中的每一个元素都是一个 set 容器</p><h3 id="方法二">方法二</h3><p>直接通过花括号枚举我们要传入<code>set</code>的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set&lt;string&gt; st&#123;<span class="string">&quot;good&quot;</span>, <span class="string">&quot;bad&quot;</span>, <span class="string">&quot;medium&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="方法三">方法三</h3><p>从其他结构导入元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set&lt;string&gt; st&#123;<span class="string">&quot;good&quot;</span>, <span class="string">&quot;bad&quot;</span>, <span class="string">&quot;medium&quot;</span>&#125;;</span><br><span class="line"><span class="function">set&lt;string&gt; <span class="title">st2</span><span class="params">(st)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myints[] = &#123;<span class="number">75</span>,<span class="number">23</span>,<span class="number">65</span>,<span class="number">42</span>,<span class="number">13</span>&#125;;</span><br><span class="line"><span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">myset</span> <span class="params">(myints, myints+<span class="number">5</span>)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="访问-3">访问</h2><p>set 只能通过迭代器访问。即先定义一个迭代器：<code>set&lt;typename&gt;::iterator it;</code> 然后使用 <code>*it</code>来访问 set 中的元素，例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (std::set&lt;<span class="type">int</span>&gt;::iterator it=myset.<span class="built_in">begin</span>(); it!=myset.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; *it;</span><br></pre></td></tr></table></figure><p>注意 set 不支持 <code>*(it+i)</code> 或 <code>it &lt; st.end()</code> 的访问方式（实际上除了 vector 和 string 之外的 STL 容器都不支持）</p><h2 id="常用方法-5">常用方法</h2><ul><li><p><code>insert(x)</code></p></li><li><p><code>find(value)</code> ：返回对应值为 <code>value</code> 的迭代器，时间复杂度为 O( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log _{2}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span>)</p></li><li><p><code>size()</code> ：获得元素个数，时间复杂度为 O(1)</p></li><li><p><code>clear()</code> ：清空所有元素，时间复杂度为 O(n)</p></li><li><p><code>erase()</code> ：</p><p>与 map 相同，有三种用法</p><ul><li><code>erase(it)</code> ，删除迭代器 <code>it</code> 指向的元素（时间复杂度为 O(1)），</li><li><code>erase(first,last)</code> ， 删除左闭右开区间 <code>[first,last)</code> 内的所有元素（时间复杂度为 O(last-first)）</li><li><code>erase(value)</code>  ，时间复杂度为 O( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log _{2}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span>)</li></ul></li></ul><h1 id="String">String</h1><p>在 C 中，一般使用字符数组 <code>char str[]</code> 来存放字符串，但是操作麻烦，容易出错。C++ 在 STL 中加入了 <code>string</code> 类型，对字符串常用的需求功能进行了封装，使得操作起来更加方便，且不必担心内存是否足够、字符串的长度等问题</p><h2 id="定义-6">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string name;</span><br></pre></td></tr></table></figure><p>其中 <code>name</code> 是字符串变量的名字</p><p>当然，你也可以当场就初始化，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string str=<span class="string">&quot;abcd&quot;</span></span><br></pre></td></tr></table></figure><h2 id="访问-4">访问</h2><h3 id="使用下标-3">使用下标</h3><p>就像普通字符数组一样操作，非常方便</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str= <span class="string">&quot;abcd&quot;</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">length</span>(); i++) <span class="built_in">printf</span>( <span class="string">&quot;%c&quot;</span> ,str[i]);</span><br></pre></td></tr></table></figure><h3 id="使用迭代器-3">使用迭代器</h3><p>先定义 string 迭代器 <code>string::iterator it</code> ，然后就可以通过 <code>*it</code> 来访问 string 里的每一个字符了，例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string str=<span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(string::iterator it = str.<span class="built_in">begin</span>() + <span class="number">2</span>; it != str.<span class="built_in">end</span>(); it++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*it); <span class="comment">//输出 cdefg</span></span><br></pre></td></tr></table></figure><h2 id="输入输出">输入输出</h2><p>如果要读入或者输出整个字符串，一般只能用 <code>cin</code> 和 <code>cout</code> ，如果非要用<code>printf</code> 输出 <code>string</code>，则需要用 <code>c_str()</code> 方法将 string 转换成字符数组，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string str;</span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line">cout&lt;&lt;str&lt;&lt;endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str.<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure><h2 id="运算">运算</h2><p>string 可以使用 <code>+</code> 来连接两个字符串，大小比较也是可以使用的</p><h2 id="常用方法-6">常用方法</h2><ul><li><p><code>length() </code>和 <code>size()</code> ：求长度，时间复杂度为 O(1)<a href="https://www.zhihu.com/question/23925936">（?）</a>，二者完全相同</p></li><li><p><code>clear()</code> ：清空，时间复杂度为 O(1) （鄙人疑惑：为什么不是 O(n)）</p></li><li><p><code>substr(pos,len)</code> ：返回从 <code>pos</code> 号位置开始、长度为 <code>len</code> 的子串，时间复杂度为 O(n)</p></li><li><p><code>insert ()</code>：</p><p>有多种写法，时间复杂度都是 O(n)</p><ul><li><code>insert(pos,string)</code> ：在 <code>pos</code> 号位置插入字符串 <code>string</code></li><li><code>insert(it,it2,it3)</code> ：<code>it</code> 为原字符串的欲插入位置，<code>it2</code> 和 <code>it3</code> 为待插入字符串的首尾迭代器（左闭右开区间）</li></ul></li><li><p><code>erase()</code> ：</p><ul><li><code>erase(it)</code> ，删除迭代器 <code>it</code> 指向的元素（时间复杂度为 O(1)），</li><li><code>erase(first,last)</code> ， 删除左闭右开区间 <code>[first,last)</code> 内的所有元素（时间复杂度为 O(last-first)）</li><li><code>erase(pos,length)</code> ，从 <code>pos</code> 位置开始删 <code>length</code> 个字符（时间复杂度为 O(length)）</li></ul></li><li><p><code>find()</code> ：</p><p>两种写法，时间复杂度都是 O(n*m)</p><ul><li><code>str.find(str2)</code> ，当 <code>str2</code> 是 <code>str</code> 的子串时，返回其在 <code>str</code> 中第一次出现的位置；否则返回<code>string::npos</code>。<code>string::npos</code> 是一个常数，其本身的值等于 -1，但由于是 <code>unsigned int</code> 类型，因此，也可以认为是 <code>unsigned int</code> 类型的最大值</li><li><code>str.find(str2,pos)</code> ，是从 <code>str</code> 的 <code>pos</code> 号位开始匹配 <code>str2</code> ，返回值同上</li></ul></li><li><p><code>replace()</code> ：</p><p>两种写法，时间复杂度都是 O(str.length)</p><ul><li><code>str.replace(pos,len,str2)</code> ：表示把 <code>str</code> 从 <code>pos</code> 号位开始、长度为 <code>len</code> 的子串替换为 <code>str2</code></li><li><code>str.replace(it1,it2,str2)</code> ：表示把 <code>str</code> 的迭代器 <code>it1</code> ~ <code>it2</code> 范围内（左闭右开区间）的子串替换为 <code>str2</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（五）复合数据类型之数组</title>
      <link href="/2022/05/05/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%94%EF%BC%89%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
      <url>/2022/05/05/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%94%EF%BC%89%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>首先，在 Go 中数组基本用不上，一般用的都是切片（slice）</p><p>因为 Go 与 C 中的数组有一个很大的不同，这个下面会讲，先说一些基本的东西</p><h1 id="声明">声明</h1><p>这个应该很好理解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">3</span>]<span class="type">int</span>             <span class="comment">// array of 3 integers</span></span><br></pre></td></tr></table></figure><h1 id="初始化">初始化</h1><h2 id="基础的写法">基础的写法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> q [<span class="number">3</span>]<span class="type">int</span> = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> r [<span class="number">3</span>]<span class="type">int</span> = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(r[<span class="number">2</span>]) <span class="comment">// &quot;0&quot;</span></span><br></pre></td></tr></table></figure><h2 id="根据元素个数确定长度">根据元素个数确定长度</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, q) <span class="comment">// &quot;[3]int&quot;</span></span><br></pre></td></tr></table></figure><p>注意不是 <code>[]int&#123;1, 2, 3&#125;</code> ，这是切片的写法</p><h2 id="使用索引和对应值初始化">使用索引和对应值初始化</h2><p>这是一种 C 里没有的方法，算是一种改进</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r := [...]<span class="type">int</span>&#123;<span class="number">99</span>: <span class="number">-1</span>&#125;</span><br></pre></td></tr></table></figure><p>定义了一个含有 100 个元素的数组 <code>r</code>，最后一个元素被初始化为 -1，其它元素都是用 0 初始化</p><h1 id="求长度">求长度</h1><p>使用 <code>len()</code> 函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">3</span>]<span class="type">int</span>             <span class="comment">// array of 3 integers</span></span><br><span class="line">fmt.Println(a[<span class="built_in">len</span>(a)<span class="number">-1</span>]) <span class="comment">// print the last element, a[2]</span></span><br></pre></td></tr></table></figure><h1 id="for-遍历">for 遍历</h1><p>Go 中的 for 基本就和 Python 中的一模一样，分别返回下标和值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Print the indices and elements.</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d %d\n&quot;</span>, i, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然你也可以只接收值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Print the elements only.</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="与-C-中数组的不同">与 C 中数组的不同</h1><p>与 C 相比，最大的区别就是：在 Go 中，数组的长度也是类型的一部分</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, q) <span class="comment">// &quot;[3]int&quot;</span></span><br></pre></td></tr></table></figure><p>就如你看见的那样，类型叫做 <code>[3]int</code> 而不是 <code>[]int</code> 或者 <code>*int</code></p><p>这就是一个很大的问题：在写函数的时候，输入数组的长度必须是相同的</p><p>而且在较新版本的 C 中，数组在声明时可以用一个变量来动态地确定它的长度</p><p>但 Go 中不行，数组的的长度必须编译时就确定下来</p><p>这两点就使数组非常僵化，极大地限制了数组的应用，除了像 SHA256 这类需要处理特定大小数组的特例外，数组很少用作函数参数</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Others』TIM和微信如何备份聊天记录</title>
      <link href="/2022/05/05/%E3%80%8EOthers%E3%80%8FTIM%E5%92%8C%E5%BE%AE%E4%BF%A1%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BD%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/05/05/%E3%80%8EOthers%E3%80%8FTIM%E5%92%8C%E5%BE%AE%E4%BF%A1%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BD%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>很多情况下都有备份社交软件聊天记录的需求，这里总结了 TIM 和 微信 的备份方法</p><p>如果你想问 QQ 的话，其实跟 TIM 是大同小异的</p><p>总的来说，聊天记录有在手机上的，也有在 PC 上的，所以本文分为两个部分</p><h1 id="移动端">移动端</h1><h2 id="TIM">TIM</h2><p>首先在 PC 端主界面的 <code>『菜单』</code> 中找到 <code>『备份与恢复』</code> -&gt; <code>『备份至电脑』</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050839290.jpg" alt=""></p><p>然后你就可以开始操作了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050909253.jpg" alt=""></p><h2 id="微信">微信</h2><p>这个和 TIM 差别不大，在 PC 端的<code>『菜单』</code>中找到<code>『备份与恢复』</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050906346.jpg" alt=""></p><p>之后也是类似的操作</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050908824.jpg" alt=""></p><h1 id="PC-端">PC 端</h1><h2 id="TIM-2">TIM</h2><p>这里可以分为使用官方的途径，或者自己手动备份</p><h3 id="官方入口">官方入口</h3><p>首先在任意聊天记录打开 <code>『消息管理器』</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050850645.jpg" alt=""></p><p>然后在右上角的箭头处找到 <code>『导出全部消息记录』</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050852860.jpg" alt=""></p><p>导出时不知道为什么我需要操作两次才能生成文件，可能是打包也需要点时间</p><p>不过我导出来只有大概 1G ，我怀疑只有部分的数据，个人还是建议下面的方法</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050853705.jpg" alt=""></p><h3 id="简单粗暴的方法">简单粗暴的方法</h3><p>这就属于手动备份了，在文件资源管理器中打开你的 <code>文档</code> 文件夹，找到 <code>Tencent Files</code>，所有的聊天记录及文件都在这里（如果你没有改过设置的话）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050858583.jpg" alt=""></p><p>还原时将其手动复制到相同位置即可</p><h2 id="微信-2">微信</h2><p>对于微信，目前我没有找到官方入口，所以只有手动备份一种方法</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050904528.jpg" alt=""></p><blockquote><p>PS：手动备份本人在 Windows Sandbox 中亲测有效</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（四）基本数据类型之字符串</title>
      <link href="/2022/05/04/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E5%9B%9B%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/05/04/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E5%9B%9B%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="定义">定义</h1><p>有的人说 Golang = C + Python ，这句话不假，像函数、数值变量的类型等都能看见 C 的影子，而 Go 中最像 Python 的地方就是字符串了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">&quot;hello, world&quot;</span></span><br></pre></td></tr></table></figure><h1 id="访问">访问</h1><p>这点和 Python 一模一样</p><p>使用索引</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(s[<span class="number">0</span>], s[<span class="number">7</span>]) <span class="comment">// &quot;104 119&quot; (&#x27;h&#x27; and &#x27;w&#x27;)</span></span><br></pre></td></tr></table></figure><p>使用切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(s[<span class="number">0</span>:<span class="number">5</span>]) <span class="comment">// &quot;hello&quot;</span></span><br><span class="line">fmt.Println(s[:<span class="number">5</span>]) <span class="comment">// &quot;hello&quot;</span></span><br><span class="line">fmt.Println(s[<span class="number">7</span>:]) <span class="comment">// &quot;world&quot;</span></span><br><span class="line">fmt.Println(s[:])  <span class="comment">// &quot;hello, world&quot;</span></span><br></pre></td></tr></table></figure><h1 id="运算符">运算符</h1><p>使用 <code>+</code> 可以连接两个字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;goodbye&quot;</span> + s[<span class="number">5</span>:]) <span class="comment">// &quot;goodbye, world&quot;</span></span><br></pre></td></tr></table></figure><p>比较大小也与 Python 中的相同</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println</span>(<span class="string">&quot;123&quot;</span> &gt; <span class="string">&quot;120000&quot;</span>) <span class="comment">// True</span></span><br></pre></td></tr></table></figure><h1 id="编辑">编辑</h1><p>和 Python 一样，字符串是不能手动编辑的，那么如果你真的想编辑的话，可以将其转换成 <code>byte</code> 的切片，然后再编辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">var</span> b = []<span class="type">byte</span>(a)</span><br><span class="line">b[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span></span><br><span class="line">a = <span class="type">string</span>(b)</span><br><span class="line">fmt.Println(a) <span class="comment">// &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure><p>不过，当文本包含中文字符时，就需要转换成 <code>rune</code> 的切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="keyword">var</span> b = []<span class="type">rune</span>(a)</span><br><span class="line">b[<span class="number">0</span>] = <span class="string">&#x27;您&#x27;</span></span><br><span class="line">a = <span class="type">string</span>(b)</span><br><span class="line">fmt.Println(a) <span class="comment">// &quot;您好&quot;</span></span><br></pre></td></tr></table></figure><h1 id="求长度">求长度</h1><p>一般来说，直接 <code>len(s)</code> 即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;hello&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(a)) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>同样的，在有中文的场景下，需要先转换成 <code>rune</code> 的切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;你好&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(a)) <span class="comment">// 6 </span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>([]<span class="type">rune</span>(a))) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h1 id="相关函数">相关函数</h1><h2 id="strings-包"><code>strings</code> 包</h2><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><mark class="hl-label green">Count</mark> (s, substr string) int</td><td>计算子串<code>substr</code>在字符串<code>s</code>中出现的次数</td></tr><tr><td>Compare(a, b string) int</td><td>比较字符串大小</td></tr><tr><td><mark class="hl-label green">Contains</mark> (s, substr string) bool</td><td>判断字符串<code>s</code>中是否包含子串<code>substr</code></td></tr><tr><td>ContainsAny(s, chars string) bool</td><td>判断字符串<code>s</code>中是否包含<code>chars</code>中的某个Unicode字符</td></tr><tr><td>ContainsRune(s string, r rune) bool</td><td>判断字符串<code>s</code>中是否包含rune型值为<code>r</code>的字符</td></tr><tr><td><mark class="hl-label green">Index</mark> (s, substr string) int</td><td>查找子串<code>substr</code>在字符串<code>s</code>中第一次出现的位置，如果找不到则返回 -1，如果<code>substr</code>为空，则返回 0</td></tr><tr><td>LastIndex(s, substr string) int</td><td>查找子串<code>substr</code>在字符串<code>s</code>中最后出现的位置</td></tr><tr><td>IndexRune(s string, r rune) int</td><td>查找rune型值为<code>r</code>的字符在字符串<code>s</code>中出现的起始位置</td></tr><tr><td>IndexAny(s, chars string) int</td><td>查找字符串<code>chars</code>中字符，在字符串<code>s</code>中出现的起始位置</td></tr><tr><td>LastIndexAny(s, chars string) int</td><td>查找字符串<code>s</code>中出现<code>chars</code>中字符的最后位置</td></tr><tr><td>LastIndexByte(s string, c byte) int</td><td>查找byte型字符<code>c</code>在字符串<code>s</code>中的位置</td></tr><tr><td>SplitN(s, sep string, n int) []string</td><td>以字符串<code>sep</code>为分隔符，将字符串<code>s</code>切分成<code>n</code>个子串，结果中<strong>不包含</strong><code>sep</code>本身。如果<code>sep</code>为空则将<code>s</code>切分为 Unicode 字符列表，如果<code>s</code>中没有<code>sep</code>子串则整个<code>s</code>作为切片 []string 中的第一个元素返回。参数<code>n</code>表示最多切出几个子串，<code>s</code>超出切分大小时，超出部分不再切分。<code>n</code>超出切分子串个数时，返回实际切分子串数。如果<code>n</code>为 0，则返回 nil；如果<code>n</code>小于 0，则不限制切分个数，全部切分</td></tr><tr><td>SplitAfterN(s, sep string, n int) []string</td><td>以字符串<code>sep</code>为分隔符，将字符串<code>s</code>切分成<code>n</code>个子串，结果中<strong>包含</strong><code>sep</code>本身。如果<code>sep</code>为空则将<code>s</code>切分为 Unicode 字符列表，如果<code>s</code>中没有<code>sep</code>子串则整个<code>s</code>作为切片 []string 中的第一个元素返回。参数<code>n</code>表示最多切出几个子串，<code>s</code>超出切分大小时，超出部分不再切分。<code>n</code>超出切分子串个数时，返回实际切分子串数。如果<code>n</code>为 0，则返回 nil；如果<code>n</code>小于 0，则不限制切分个数，全部切分</td></tr><tr><td>Split(s, sep string) []string</td><td>以字符串<code>sep</code>为分隔符，将<code>s</code>切分成多个子串，结果中<strong>不包含</strong><code>sep</code>本身。如果<code>sep</code>为空，则将<code>s</code>切分成 Unicode 字符列表，如果<code>s</code>中没有<code>sep</code>子串，则将整个<code>s</code>作为 []string 的第一个元素返回</td></tr><tr><td>SplitAfter(s, sep string) []string</td><td>以字符串<code>sep</code>为分隔符，将<code>s</code>切分成多个子串，结果中<strong>包含</strong><code>sep</code>本身。如果<code>sep</code>为空则将<code>s</code>切分为 Unicode 字符列表，如果<code>s</code>中没有<code>sep</code>子串则整个<code>s</code>作为切片 []string 中的第一个元素返回。</td></tr><tr><td><mark class="hl-label green">Fields</mark> (s string) []string</td><td>以连续的空白字符为分隔符，将<code>s</code>切分成多个子串，结果中不包含空白字符本身。空白字符有：\t, \n, \v, \f, \r, ‘’, U+0085 (NEL), U+00A0 (NBSP) 。如果<code>s</code>中只包含空白字符，则返回一个空切片</td></tr><tr><td>FieldsFunc(s string, f func(rune) bool) []string</td><td>以一个或多个满足函数<code>f(rune)</code>的字符为分隔符，将<code>s</code>切分成多个子串，结果中不包含分隔符本身。如果<code>s</code>中没有满足<code>f(rune)</code>的字符，则返回一个空切片</td></tr><tr><td><mark class="hl-label green">Join</mark> (a []string, sep string) string</td><td>以<code>sep</code>为拼接符，拼接切片<code>a</code>中的字符串</td></tr><tr><td><mark class="hl-label green">HasPrefix</mark> (s, prefix string) bool</td><td>判断字符串<code>s</code>是否以<code>prefix</code>字符串开头，是返回 true，否则返回 false</td></tr><tr><td>HasSuffix(s, suffix string) bool</td><td>判断字符串<code>s</code>是否以<code>suffix</code>字符串结尾，是返回 true，否则返回 false</td></tr><tr><td>Map(f func(rune) rune, s string) string</td><td>将字符串<code>s</code>中满足函数<code>f(rune)</code>的字符替换为<code>f(rune)</code>的返回值。如果<code>f(rune)</code>返回负数，则相应的字符将被删除</td></tr><tr><td>Repeat(s string, count int) string</td><td>返回字符串<code>s</code>重复<code>count</code>次数后的结果</td></tr><tr><td>ToUpper(s string) string</td><td>将字符串<code>s</code>中的小写字符转为大写</td></tr><tr><td>ToLower(s string) string</td><td>将字符串<code>s</code>中的大写字符转为小写</td></tr><tr><td>ToTitle(s string) string</td><td>将字符串<code>s</code>中的首个单词转为<code>Title</code>形式，大部分字符的<code>Title</code>格式就是<code>Upper</code>格式</td></tr><tr><td>ToUpperSpecial(c unicode.SpecialCase, s string) string</td><td>将字符串<code>s</code>中的所有字符修改为其大写格式，优先使用<code>c</code>中的规则进行转换</td></tr><tr><td>ToLowerSpecial(c unicode.SpecialCase, s string) string</td><td>将字符串<code>s</code>中的所有字符修改为其小写格式，优先使用<code>c</code>中的规则进行转换</td></tr><tr><td>ToTitleSpecial(c unicode.SpecialCase, s string) string</td><td>将字符串<code>s</code>中的所有字符修改为其<code>Title</code>格式，优先使用<code>c</code>中的规则进行转换</td></tr><tr><td>Title(s string) string</td><td>将字符串<code>s</code>中的所有单词的首字母修改为其<code>Title</code>格式（BUG: Title 规则不能正确处理 Unicode 标点符号）</td></tr><tr><td>TrimLeftFunc(s string, f func(rune) bool) string</td><td>删除字符串<code>s</code>左边连续满足<code>f(rune)</code>的字符</td></tr><tr><td>TrimRightFunc(s string, f func(rune) bool) string</td><td>删除字符串<code>s</code>右边连续满足<code>f(rune)</code>的字符</td></tr><tr><td>TrimFunc(s string, f func(rune) bool) string</td><td>删除字符串<code>s</code>左右两边连续满足<code>f(rune)</code>的字符</td></tr><tr><td>IndexFunc(s string, f func(rune) bool) int</td><td>查找字符串<code>s</code>中第一个满足<code>f(rune)</code>的字符的字节位置，没有返回 -1</td></tr><tr><td>LastIndexFunc(s string, f func(rune) bool) int</td><td>查找字符串<code>s</code>中最后一个满足<code>f(rune)</code>的字符的字节位置，没有返回 -1</td></tr><tr><td>Trim(s string, cutset string) string</td><td>删除字符串<code>s</code>左右两边连续包含<code>cutset</code>的字符</td></tr><tr><td>TrimLeft(s string, cutset string) string</td><td>删除字符串<code>s</code>左边连续包含<code>cutset</code>的字符</td></tr><tr><td>TrimRight(s string, cutset string) string</td><td>删除字符串<code>s</code>右边连续包含<code>cutset</code>的字符</td></tr><tr><td>TrimSpace(s string) string</td><td>删除字符串<code>s</code>左右两边连续的空白字符</td></tr><tr><td>TrimPrefix(s, prefix string) string</td><td>删除字符串<code>s</code> 头部的<code>prefix</code>字符串</td></tr><tr><td>TrimSuffix(s, suffix string) string</td><td>删除字符串<code>s</code> 尾部的<code>suffix</code>字符串</td></tr><tr><td>Replace(s, old, new string, n int) string</td><td>替换字符串<code>s</code>中的<code>old</code>为<code>new</code>，如果<code>old</code>为空则在<code>s</code>中的每个字符间插入<code>new</code>包括首尾，<code>n</code>为替换次数， -1 时替换所有</td></tr><tr><td>EqualFold(s, t string) bool</td><td>忽略大小写比较字符串<code>s</code>和<code>t</code>，相同返回 true，反之返回 false</td></tr></tbody></table><h2 id="byte-包"><code>byte</code> 包</h2><p>前面讲了有时需要将 <code>string</code> 转换成 <code>[]byte</code> 以编辑，所以 <code>byte</code> 包也是字符串相关的</p><p>而其实 <code>byte</code> 包中的函数跟 <code>strings</code> 包中的是一模一样的，只是把里面的类型全变了而已，直接参考上表即可</p><p>除此之外，这个包里还多了 <code>bytes.Reader</code> 和 <code>bytes.Buffer</code> 两个对象</p><h2 id="strconv-包"><code>strconv</code> 包</h2><p>与字符串相关的类型转换都是通过 <code>strconv</code> 包实现的，下面仅包含常用的部分，详情可以见<a href="http://www.zzvips.com/article/128358.html">这篇</a></p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>IntSize</td><td>获取程序运行的操作系统平台下 int 类型所占的位数</td></tr><tr><td>Itoa(i int) string</td><td>返回数字 i 所表示的字符串类型的十进制数</td></tr><tr><td>FormatFloat(f float64, fmt byte, prec int, bitSize int) string</td><td>将 64 位浮点型的数字转换为字符串，其中 <code>fmt</code> 表示格式（其值可以是 ‘b’、‘e’、‘f’ 或 ‘g’），<code>prec</code> 表示精度，<code>bitSize</code> 则使用 32 表示 float32，用 64 表示 float64</td></tr><tr><td>Atoi(s string) (i int, err error)</td><td>将字符串转换为 int 型</td></tr><tr><td>ParseFloat(s string, bitSize int) (f float64, err error)</td><td>将字符串转换为 float64 型</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（三）基本数据类型之数字</title>
      <link href="/2022/05/03/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E5%AD%97/"/>
      <url>/2022/05/03/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>Golang 中的数字包括整型（整数）、实型（浮点数）、复数、布尔型和常量，下面就分别来解释它们</p><h1 id="整型">整型</h1><p>众所周知 C/C++ 中对于一般整型使用的关键字是 <code>short</code> 、<code>int</code> 、<code>long</code> 、<code>long long</code> 之类的，而 Go 中直接根据占用的 <code>bit</code> 大小命名为 <code>int8</code>、<code>int16</code>、<code>int32</code> 和 <code>int64</code></p><p>而对于一票带 <code>unsigned</code> 关键字的无符号整型，就直接命名为 <code>uint8</code>、<code>uint16</code>、<code>uint32</code> 和 <code>uint64</code></p><p>那么在 Go 中有没有 <code>int</code> 呢？答案是有的</p><p>Go 中还有 <code>int</code> 和 <code>uint</code>，它们的大小根据实际软硬件平台不同而不同，一般是 <code>32 bit</code>，日常来说完全够用，但是要记住 <code>int</code> 和 <code>int32</code> 必须显式地转换，即使它们的大小一般是相同的</p><p>还有有两种衍生类型需要了解：</p><ul><li><code>rune</code> ：与 <code>int32</code> 等价，用于表示一个 <code>Unicode</code> 码点</li><li><code>byte</code> ：与 <code>uint8</code> 等价，一般用于强调数值是一个原始的数据而不是一个小的整数</li></ul><p>还有一种特殊的类型 <code>uintptr</code> ，它没有指定的大小，用来保存指针，只在底层编程时用到，一般见不到</p><h1 id="实型">实型</h1><p>Go 中的浮点数只有 <code>float32</code> 和 <code>float64</code> 两种，一般情况下建议直接使用 <code>float64</code>，它们都向下兼容 C/C++ 中的用法</p><p>不过 Go 中的数学运算与 C 中的有一些不同：</p><ul><li><p>算术和逻辑运算的二元操作中必须是相同的类型，也就是说不会像 C 一样隐式转换（浮点数等同理）</p></li><li><p>Go 在 <code>math</code> 包中添加了 <code>IEEE754</code> 浮点数标准中定义的特殊值：正无穷大和负无穷大（<code>+Inf</code> 和 <code>-Inf</code> ，用于表示太大溢出的数字和除零的结果），非数（<code>NaN</code>，含义是 Not a number，用于表示无效的除法操作结果 <code>0/0</code>或 <code>Sqrt(-1)</code>）</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> z <span class="type">float64</span></span><br><span class="line">fmt.Println(z, -z, <span class="number">1</span>/z, <span class="number">-1</span>/z, z/z) <span class="comment">// &quot;0 -0 +Inf -Inf NaN&quot;</span></span><br></pre></td></tr></table></figure><p>函数 <code>math.IsNaN</code> 用于测试一个数是否是非数 <code>NaN</code>，<code>math.NaN</code> 则返回非数对应的值。虽然可以用 <code>math.NaN</code> 来表示一个非法的结果，但是测试一个结果是否是非数 <code>NaN</code> 则是充满风险的，因为 <code>NaN</code> 和任何数都是不相等的</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nan := math.NaN()</span><br><span class="line">fmt.Println(nan == nan, nan &lt; nan, nan &gt; nan) <span class="comment">// &quot;false false false&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>添加了一个位运算操作 <code>&amp;^</code> （位清空）</p></li></ul><h1 id="复数">复数</h1><p>Go 语言提供了两种精度的复数类型：<code>complex64</code> 和 <code>complex128</code>，分别对应 <code>float32 </code>和 <code>float64</code> 两种浮点数精度</p><p>使用内置的 <code>complex()</code> 函数可以构建复数，<code>real()</code> 和 <code>imag()</code> 可以返回复数的实部和虚部</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="type">complex128</span> = <span class="built_in">complex</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 1+2i</span></span><br><span class="line"><span class="keyword">var</span> y <span class="type">complex128</span> = <span class="built_in">complex</span>(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// 3+4i</span></span><br><span class="line">fmt.Println(x*y)                 <span class="comment">// &quot;(-5+10i)&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">real</span>(x*y))           <span class="comment">// &quot;-5&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">imag</span>(x*y))           <span class="comment">// &quot;10&quot;</span></span><br></pre></td></tr></table></figure><p>当然，你也可以使用自然书写方式构建复数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x := <span class="number">1</span> + <span class="number">2i</span></span><br><span class="line">y := <span class="number">3</span> + <span class="number">4i</span></span><br></pre></td></tr></table></figure><h1 id="布尔型">布尔型</h1><p>Go 中的布尔型（<code>true</code> 和 <code>false</code>）与 C++ 中的一致</p><h1 id="常量">常量</h1><p>Go 中的常量与 C/C++ 中的变化不大</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pi <span class="type">float64</span> = <span class="number">3.14159</span> </span><br></pre></td></tr></table></figure><p>当然，Go 也允许你忽略类型，自动判断</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pi = <span class="number">3.14159</span> </span><br></pre></td></tr></table></figure><p>多常量一起声明也是允许的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    e  = <span class="number">2.71828182845904523536028747135266249775724709369995957496696763</span></span><br><span class="line">    pi = <span class="number">3.14159265358979323846264338327950288419716939937510582097494459</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>批量声明相同数值的常量可以像这样省略</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b</span><br><span class="line">    c = <span class="number">2</span></span><br><span class="line">    d</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fmt.Println(a, b, c, d) <span class="comment">// &quot;1 1 2 2&quot;</span></span><br></pre></td></tr></table></figure><h2 id="iota-常量生成器">iota 常量生成器</h2><p>我感觉这属于一种比较鸡肋的东西，但是还是有一些作用的</p><p>它可以生成一组以相似规则初始化的常量，不用每行都写一遍初始化表达式</p><p>举个例子最清楚</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Weekday <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Sunday Weekday = <span class="literal">iota</span></span><br><span class="line">    Monday</span><br><span class="line">    Tuesday</span><br><span class="line">    Wednesday</span><br><span class="line">    Thursday</span><br><span class="line">    Friday</span><br><span class="line">    Saturday</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>周日将对应0，周一为1，如此等等</p><p>你可以用它玩出一些新花样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">Zero   = <span class="literal">iota</span>      <span class="comment">// 0</span></span><br><span class="line">First              <span class="comment">// 1</span></span><br><span class="line">Second             <span class="comment">// 2</span></span><br><span class="line">Hi     = <span class="number">0</span>         <span class="comment">// 0, 被打断后，后续值不变，直到用iota显示恢复</span></span><br><span class="line">Four               <span class="comment">// 0</span></span><br><span class="line">Five               <span class="comment">// 0</span></span><br><span class="line">Six    = <span class="literal">iota</span>      <span class="comment">// 6，显示恢复，iota接着累加，中间打断不中断累加</span></span><br><span class="line">Seven              <span class="comment">// 7</span></span><br><span class="line">Eight  = <span class="literal">iota</span> * <span class="number">10</span> <span class="comment">// 80，iota不变，变更常量表达式，后续保持表达式</span></span><br><span class="line">Nine               <span class="comment">// 90</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">TenZero   = <span class="literal">iota</span> * <span class="number">10</span> <span class="comment">// 0，表达式可以为各种go支持的计算表达式</span></span><br><span class="line">TenFirst              <span class="comment">// 10</span></span><br><span class="line">TenSecond             <span class="comment">// 20</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（七）组件之swiper轮播组件</title>
      <link href="/2022/05/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8Bswiper%E8%BD%AE%E6%92%AD%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/05/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8Bswiper%E8%BD%AE%E6%92%AD%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>本篇的主要内容就是 <code>swiper</code> 组件，它可以实现首页上方的滚动视图</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205021113048.jpg" alt=""></p><p>首先新建一个页面，基本的框架就是<code>&lt;swiper&gt;</code>内嵌很多<code>&lt;swiper-item&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span>111<span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span>222<span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span>333<span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205021125630.gif" alt=""></p><p>这实在是过于方便了，现在去找三张图加进去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/1.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/3.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是很明显，图片并没有按正常比例显示</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205021134156.jpg" alt=""></p><p>稍微修改一下样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/1.jpg&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/2.jpg&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/3.jpg&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.banner</span>&#123;<span class="attribute">height</span>: <span class="number">400</span>rpx; <span class="attribute">border</span>: <span class="number">1px</span> solid red; &#125;</span><br><span class="line"><span class="selector-class">.banner</span> image&#123;<span class="attribute">width</span>: <span class="number">100%</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205021151589.jpg" alt=""></p><p>看上去还行，下面来看一下 <code>&lt;swiper&gt;</code> 中的属性，在文档中都有</p><p>有几个属性是比较常用的</p><ul><li><code>indicator-dots</code> ：是否显示面板指示点</li><li><code>indicator-color</code> ：指示点颜色</li><li><code>indicator-active-color</code> ： 当前选中的指示点颜色</li><li><code>autoplay</code> ：是否自动切换</li><li><code>interval</code> ：自动切换时间间隔</li><li><code>circular</code> ：轮播</li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205021209135.gif" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（二）程序结构</title>
      <link href="/2022/05/01/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/"/>
      <url>/2022/05/01/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>让我们从最简单的 <code>HelloWorld</code> 开始理解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="包">包</h1><h2 id="声明包">声明包</h2><p>每个 Go 程序都是由包构成的，每个项目都是从 <code>main</code> 包开始运行，最开头的 <code>package main</code> 声明了我们当前在 <code>main</code> 包中</p><h2 id="导入包">导入包</h2><p>使用 <code>import</code> 语句来导入包，例如这里导入了 <code>fmt</code> 包，并且在 <code>main</code> 函数中使用了它的函数 <code>Println</code></p><p>在需要导入多个包，可以使用多个 <code>import</code> 语句</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math&quot;</span></span><br></pre></td></tr></table></figure><p>也可以选择使用括号括起来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="导出名">导出名</h2><p>在语言中，常使用 <code>public</code> 和 <code>private</code> 关键字来说明一个对象是公用的还是私有的（对外是否可见）</p><p>而在 Go 中则简单地使用首字母大小写来表示这一点，如果一个名字以大写字母开头，那么它就是已导出的（外部可见），这一点在很多地方都能体现，例如包中的函数和结构体中的元素</p><p>这也解释了为什么<code>Println</code> 的首字母是大写的</p><p>让我们实操一下：</p><p>在项目中新建 <code>.\sayhello\sayhello.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sayhello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Say</span><span class="params">(name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello&quot;</span>, name, <span class="string">&quot;!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后回到 <code>main.go</code> 来调用它</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;main/sayhello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sayhello.Say(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数">函数</h1><p>这里只是简单地介绍一下函数，更为深入的内容会在后面讲</p><h2 id="声明函数">声明函数</h2><p>基本的函数声明模板如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名 <span class="params">(参数列表)</span></span> (返回值列表)&#123;</span><br><span class="line"><span class="comment">// 函数体</span></span><br><span class="line"><span class="keyword">return</span> 返回值列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 C 不同，Go 的参数是名称在前，类型在后，请看下面的例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果连续多个参数的类型相同，那么就可以写在一起</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多值返回">多值返回</h2><p>Go  扩展了 C 中的函数的返回值，现在函数可以返回任意多个参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命名返回值">命名返回值</h2><p>Go 的返回值可被命名，它们会被视作定义在函数顶部的变量</p><p>这样一来，在最后可以直接用一句 <code>return</code> 来结束，定义的返回值就会自动返回</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">ans = x + y</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="变量">变量</h1><h2 id="声明及初始化">声明及初始化</h2><p>基本的变量声明模板如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 类型 = 表达式</span><br></pre></td></tr></table></figure><p>其中，类型或表达式可以省略一个：</p><ul><li>若省略类型，就会按表达式自动推断类型</li><li>若省略表达式，就会自动初始化为该类型的零值</li></ul><p>零值就是字面意思，就像你在 C 中对 <code>int</code> 类型总会手动初始化为 0，只是在 Go 中，这一切都是自动化的，这可以简化很多代码</p><p>多个变量也可以一起声明和初始化，若省略类型，则会分别自动推导类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i, j, k <span class="type">int</span>                 <span class="comment">// int, int, int</span></span><br><span class="line"><span class="keyword">var</span> b, f, s = <span class="literal">true</span>, <span class="number">2.3</span>, <span class="string">&quot;four&quot;</span> <span class="comment">// bool, float64, string</span></span><br></pre></td></tr></table></figure><p>前面讲了函数可以同时返回多个参数，所以一组变量也可以这样初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f, err = os.Open(name) <span class="comment">// os.Open returns a file and an error</span></span><br></pre></td></tr></table></figure><p>接收多个变量的时候，可以使用下划线（<code>_</code>）丢弃不需要的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f, _ = os.Open(name) <span class="comment">// 不接收错误</span></span><br></pre></td></tr></table></figure><p><code>var</code> 和 <code>import</code> 一样，使用括号括起来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ToBe   <span class="type">bool</span>       = <span class="literal">false</span></span><br><span class="line">MaxInt <span class="type">uint64</span>     = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></span><br><span class="line">z      <span class="type">complex128</span> = cmplx.Sqrt(<span class="number">-5</span> + <span class="number">12i</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这种写法一般用于在函数外声明一堆包级变量</p><h2 id="短变量声明">短变量声明</h2><p>在函数中，简洁赋值语句 <code>:=</code> 可在类型明确的地方代替 <code>var</code> 声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名 := 表达式</span><br></pre></td></tr></table></figure><p>函数外的每个语句都必须以关键字开始（<code>var</code>, <code>func</code> 等等），因此 <code>:=</code> 结构不能在函数外使用</p><p>上面的例子也可以这样写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(name) <span class="comment">// os.Open returns a file and an error</span></span><br></pre></td></tr></table></figure><h2 id="赋值">赋值</h2><p>Go 的赋值兼容了 C 中的所有操作，包括缩写运算符（如 <code>+=</code>），还有自增自减（<code>++</code>、<code>--</code>）等</p><p>Go 在这方面创新了一个元组赋值，就像上面的多变量初始化一样，右边的几个变量分别赋值到左边去</p><p>这一特性最大的帮助就是使交换变量变得非常方便</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y = y, x</span><br></pre></td></tr></table></figure><p>在 C 中如果要交换两个变量的值，一般都要借助于一个临时变量，但 Go 使得这一操作变得非常优雅</p><p>来看看用 Go 来求最大公约数，是不是简洁了许多</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gcd</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> y != <span class="number">0</span> &#123;</span><br><span class="line">        x, y = y, x%y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与初始变量时一样，你可以使用下划线来丢去部分值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_, err = io.Copy(dst, src) <span class="comment">// 丢弃字节数</span></span><br></pre></td></tr></table></figure><p>关于这个下划线，我还想多说一句</p><p>众所周知如果你声明了一个变量但是没用它是会报错的，有红色波浪线，看得很烦心</p><p>这时，你可以接着下划线假装“使用”了这一变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ = a</span><br></pre></td></tr></table></figure><h2 id="指针">指针</h2><p>Go 的指针摒弃了 C 中的运算功能（加减法），其他地方可以认为是相同的</p><h1 id="类型">类型</h1><h2 id="基本类型">基本类型</h2><p>Go 中的基本类型有</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="type">int8</span>  <span class="type">int16</span>  <span class="type">int32</span>  <span class="type">int64</span></span><br><span class="line"><span class="type">uint</span> <span class="type">uint8</span> <span class="type">uint16</span> <span class="type">uint32</span> <span class="type">uint64</span> <span class="type">uintptr</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="comment">// uint8 的别名</span></span><br><span class="line"></span><br><span class="line"><span class="type">rune</span> <span class="comment">// int32 的别名，表示一个 Unicode 码点</span></span><br><span class="line"></span><br><span class="line"><span class="type">float32</span> <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="type">complex64</span> <span class="type">complex128</span></span><br></pre></td></tr></table></figure><h2 id="类型转换">类型转换</h2><p>这点与 C 有较大区别，使用 <code>T(v)</code> 将值 <code>v</code> 转换为类型 <code>T</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="type">float64</span> = <span class="type">float64</span>(i)</span><br><span class="line"><span class="keyword">var</span> u <span class="type">uint</span> = <span class="type">uint</span>(f)</span><br></pre></td></tr></table></figure><p>并且，Go 不提供自动转换，在 C 中你可以直接将一个 <code>int</code> 赋给 <code>float</code> ，但你不能在 Go 中做到这种事情</p><h2 id="类型别名">类型别名</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> mytype = <span class="type">string</span></span><br></pre></td></tr></table></figure><p>类似于 C 中的 <code>define</code>，在编译时全部替换</p><p>没法自己添加方法，可以增强可读性</p><h2 id="类型定义">类型定义</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> mytype <span class="type">string</span></span><br></pre></td></tr></table></figure><p>基于旧类型生成新类型，相互可以强制转换，可以添加自己的方法</p><h1 id="逻辑控制">逻辑控制</h1><h2 id="for">for</h2><p>Go 中的 <code>for</code>，与 C 中的基本相同，但是少了小括号，并且大括号变成必须的了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 C 一样，起始条件、结束条件和后置语句都是可选的</p><h2 id="while">while</h2><p>当你省略了起始条件和后置语句时，<code>for</code> 其实就变成了 <code>while</code>，所以 Go 中是没有<code>while</code> 的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;</span><br><span class="line">sum += sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而无限循环也就只剩下了一个 <code>for</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if">if</h2><p>类似地，无需小括号，而大括号是必须的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqrt</span><span class="params">(x <span class="type">float64</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sqrt(-x) + <span class="string">&quot;i&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprint(math.Sqrt(x))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go 允许你在条件表达式前先执行一个语句，这可以简化代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与你想的一样，这里的 <code>v</code> 的作用域仅限该 <code>if</code> 语句内</p><p>至于 <code>else</code> 和 <code>else if</code> 的用法，可以参考下面的例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line"><span class="keyword">if</span> _, _ = fmt.Scan(&amp;a); a &gt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a &gt; 10&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> a == <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a = 10&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a &lt; 10&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch">switch</h2><p>对比 C 的 <code>switch</code>，你只需要更新了以下几点：</p><ul><li><p><code>case</code> 现在不一定要是常量，也可以是表达式（如果是表达式，那么中途跳出后下面的表达式并不会执行）</p></li><li><p>每个分支都是默认 <code>break</code> 的，如果你不想跳出，可以以 <code>fallthrough</code> 语句结束</p></li><li><p>支持多条件匹配</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> a &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>来看几个例子</p><p><a href="https://tour.go-zh.org/flowcontrol/9">https://tour.go-zh.org/flowcontrol/9</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;Go runs on &quot;</span>)</span><br><span class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;darwin&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;OS X.&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;linux&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Linux.&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// freebsd, openbsd,</span></span><br><span class="line"><span class="comment">// plan9, windows...</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s.\n&quot;</span>, os)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/go/go-switch-statement.html">https://www.runoob.com/go/go-switch-statement.html</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> grade <span class="type">string</span> = <span class="string">&quot;B&quot;</span></span><br><span class="line">   <span class="keyword">var</span> marks <span class="type">int</span> = <span class="number">90</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">switch</span> marks &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">90</span>: grade = <span class="string">&quot;A&quot;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">80</span>: grade = <span class="string">&quot;B&quot;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span> : grade = <span class="string">&quot;C&quot;</span></span><br><span class="line">      <span class="keyword">default</span>: grade = <span class="string">&quot;D&quot;</span>  </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">switch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;A&quot;</span> :</span><br><span class="line">         fmt.Printf(<span class="string">&quot;优秀!\n&quot;</span> )    </span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;B&quot;</span>, grade == <span class="string">&quot;C&quot;</span> :</span><br><span class="line">         fmt.Printf(<span class="string">&quot;良好\n&quot;</span> )      </span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;D&quot;</span> :</span><br><span class="line">         fmt.Printf(<span class="string">&quot;及格\n&quot;</span> )      </span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;F&quot;</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;不及格\n&quot;</span> )</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;差\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;你的等级是 %s\n&quot;</span>, grade );      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="defer">defer</h2><p><code>defer</code> 语句会将函数推迟到外层函数返回之后执行</p><p>推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用</p><p>推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;counting&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="作用域">作用域</h1><p>除下面的两点外，其他的都与 C 中的相同</p><ul><li>在同一个包内的变量和函数，在整个包内的所有文件中都可用</li><li><code>import</code> 语句只对当前文件有效</li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（一）环境搭建</title>
      <link href="/2022/05/01/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/05/01/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>Golang 的开发环境可以有很多，比如 <code>VSCode</code> 等，但我下面说的方法是我感觉最省心省力的，也是我们社团中最为推荐的，那就是使用 <code>GoLand</code></p><h1 id="安装-GoLand">安装 GoLand</h1><p>目前来说，Golang的最佳 IDE 是喷气大脑出的 <code>GoLand</code>，可以使用它直接搞定所有环境</p><p>个人建议通过他家的 <a href="https://www.jetbrains.com/toolbox-app/">Toolbox App</a> 下载最方便</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205011051083.jpg" alt=""></p><p>安装完成后，找到 GoLand</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202207281855688.png" alt="image-20220501105204166"></p><p>关于注册，你可以在官网认证你的学生身份，然后直接白嫖</p><p>安装完成后，你可以在设置中安装一个中文语言包</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205011053646.jpg" alt=""></p><p>个人建议在设置里配一下代理，它是不吃全局代理的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205011059809.jpg" alt=""></p><h1 id="安装-Golang">安装 Golang</h1><p>直接在 <code>GoLand</code> 的设置的 <code>GOROOT</code> 里下载你想要的版本，不需要跑一遍官网</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205011026398.jpg" alt=""></p><p>安装后，你可以手动把它加到 <code>PATH</code> 里去</p><h1 id="Hello，World！">Hello，World！</h1><p>新建一个项目，把下面这段代码复制进去</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后按下 <kbd>Alt</kbd> +<kbd>F12</kbd> 打开终端，切到你的项目目录，执行下面的语句</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go mod init main</span><br><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><p>之后点击右上角的箭头执行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205011028144.jpg" alt=""></p><p>如果没法正常运行，可以参照我的配置</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205011138896.jpg" alt=""></p><p>至此，环境配置完毕</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（〇）前言</title>
      <link href="/2022/04/30/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/"/>
      <url>/2022/04/30/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203022011524.jpg" alt=""></p><blockquote><p>❤️又开新坑了！！！</p></blockquote><h1 id="关于本系列">关于本系列</h1><p>最近青训营要开营了，一想起我学的七七八八的 Golang，都感觉不配跟大佬一起做项目，特地速速复习一遍，顺便写成博客 <s>（不写博客真的第二天就又忘了）</s></p><h1 id="关于-Golang">关于 Golang</h1><p>Golang 是一门在 2009 年推出的新的类 C 系语言，个人认为可以看成是 C 在  21 世纪的升级版本，它真的非常优秀，改进了 C 的很多方面，个人总结了以下几点：</p><ul><li>更安全：例如在 C 中，新声明的变量内容是不确定的，但是在 Go 中，它们都为空</li><li>更智能：体现在回收机制和堆栈分配，切片自动增长等</li><li>更规范：更加规范你的码风，声明了变量而不用会报错，引入了包不用也会报错，甚至大括号不是 C 风格也会报错</li><li>更现代：例如在 C 中函数返回值只能是一个值，但是 Go 中可以为多个，例如可以在 <code>for</code> 中使用类 Python 的 <code>range</code> 等，还加入了一些面向对象的元素，还有并发、信道等新功能</li></ul><h1 id="整体目录">整体目录</h1><ul><li>环境搭建</li><li>程序结构</li><li>基本数据类型（数字、字符串）</li><li>复合数据类型（数组、切片、映射、结构体）</li><li>函数</li><li>方法与接口</li><li>并发与信道</li><li>测试</li><li>反射</li></ul><h1 id="重点参考文献">重点参考文献</h1><ul><li><a href="https://tour.go-zh.org/list">Go 语言之旅</a></li><li><a href="https://books.studygolang.com/gopl-zh/">Go 语言圣经（中文版）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（十）函数</title>
      <link href="/2022/04/29/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89%E5%87%BD%E6%95%B0/"/>
      <url>/2022/04/29/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="定义函数">定义函数</h1><p>Python 最大的特色之一就是用缩进来表示层级关系，所以与 C/C++ 不同，它没有大括号，标准的定义格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数列表</span>):</span><br><span class="line">函数体</span><br><span class="line"><span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>有几点说明：</p><ul><li><p>不要忘记冒号</p></li><li><p>与 C/C++ 相同，可以没有返回值，甚至可以没有 <code>return</code> 语句，在末尾自动返回</p></li><li><p>如果传入的是可变数据（列表、字典和集合），那么对它们的修改是永久的，你可以使用切片（<code>[:]</code>）或深拷贝来规避这一特性</p></li><li><p>不要混用 Tab 和空格，虽然有时它们看起来是一样的，这会让程序无法运行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204291625676.jpg" alt=""></p></li></ul><p>简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">width, height</span>):</span><br><span class="line">    <span class="keyword">return</span> width * height</span><br><span class="line"><span class="built_in">print</span>(area(<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># 12</span></span><br></pre></td></tr></table></figure><h1 id="传递参数">传递参数</h1><p>因为 Python 中没有指针这种概念，所以没有地址传递这一说，如果是不可变类型就是值传递，可变类型就是引用传递</p><p>但是传参的写法对比 C/C++ 有了一些创新</p><h2 id="位置实参">位置实参</h2><p>这就是类 C/C++ 的写法了，最普通常见的写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makeFullName</span>(<span class="params">firstName, lastName</span>):</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(makeFullName(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Smith&quot;</span>)) <span class="comment"># John Smith</span></span><br></pre></td></tr></table></figure><h2 id="关键字实参">关键字实参</h2><p>在调用时手动指定形参的名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makeFullName</span>(<span class="params">firstName, lastName</span>):</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(makeFullName(firstName=<span class="string">&quot;John&quot;</span>, lastName=<span class="string">&quot;Smith&quot;</span>))  <span class="comment"># John Smith</span></span><br><span class="line"><span class="built_in">print</span>(makeFullName(lastName=<span class="string">&quot;Smith&quot;</span>, firstName=<span class="string">&quot;John&quot;</span>))  <span class="comment"># John Smith</span></span><br></pre></td></tr></table></figure><h2 id="设置默认值">设置默认值</h2><p>这点与 C++ 中的相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makeFullName</span>(<span class="params">firstName, lastName, middleName = <span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> middleName:</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">&#x27; &#x27;</span> + middleName + <span class="string">&#x27; &#x27;</span> + lastName</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">&#x27; &#x27;</span> + lastName</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(makeFullName(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>)) <span class="comment"># John Smith</span></span><br><span class="line"><span class="built_in">print</span>(makeFullName(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>, <span class="string">&#x27;Paul&#x27;</span>)) <span class="comment"># John Paul Smith</span></span><br></pre></td></tr></table></figure><h2 id="任意数量的实参">任意数量的实参</h2><p>在 C/C++ 中，这个功能需要额外的库，但是 Python 是自带的</p><h3 id="元组型">元组型</h3><p>在参数列表使用 <code>*元组名</code> 来接收任意个参数，所有收到的参数都会保存在此元组中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">[formal_args,] *var_args_tuple </span>):</span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">size, *toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Summarize the pizza we are about to make.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a &quot;</span> + <span class="built_in">str</span>(size) + <span class="string">&quot;-inch pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Making a 16-inch pizza with the following toppings:</span></span><br><span class="line"><span class="comment"># - pepperoni</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Making a 12-inch pizza with the following toppings:</span></span><br><span class="line"><span class="comment"># - mushrooms</span></span><br><span class="line"><span class="comment"># - green peppers</span></span><br><span class="line"><span class="comment"># - extra cheese</span></span><br></pre></td></tr></table></figure><h3 id="字典型">字典型</h3><p>在参数列表使用 <code>**字典名</code> 来接收任意个键值对，所有收到的键值对都会保存在此字典中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">[formal_args,] **var_args_dict </span>):</span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_profile</span>(<span class="params">first, last, **user_info</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Build a dictionary containing everything we know about a user.&quot;&quot;&quot;</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">&#x27;first_name&#x27;</span>] = first</span><br><span class="line">    profile[<span class="string">&#x27;last_name&#x27;</span>] = last</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_profile = build_profile(<span class="string">&#x27;albert&#x27;</span>, <span class="string">&#x27;einstein&#x27;</span>,</span><br><span class="line">                             location=<span class="string">&#x27;princeton&#x27;</span>,</span><br><span class="line">                             field=<span class="string">&#x27;physics&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(user_profile)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#x27;first_name&#x27;: &#x27;albert&#x27;, &#x27;last_name&#x27;: &#x27;einstein&#x27;, &#x27;location&#x27;: &#x27;princeton&#x27;, &#x27;field&#x27;: &#x27;physics&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="匿名函数">匿名函数</h1><p>见此篇：<a href="https://www.jb51.net/article/210128.htm#_label6">python基础之匿名函数详解</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（九）推导式</title>
      <link href="/2022/04/28/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
      <url>/2022/04/28/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E6%8E%A8%E5%AF%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>前面我们讲了 Python 中的几种高级数据类型（列表、字典、集合、元组）</p><p>推导式就是一个工具，能构建一种函数关系，从现有对象推导出新对象</p><p>而根据新对象的类型，推导式也分为列表推导式、字典推导式、集合推导式和元组推导式</p><p>语言的描述总是不够的，最好的理解方式就是来看代码</p><h1 id="列表推导式">列表推导式</h1><p>基本结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[表达式 <span class="keyword">for</span> 某元素 <span class="keyword">in</span> 某对象 <span class="keyword">if</span> 条件]</span><br></pre></td></tr></table></figure><p>它的含义是通过 <code>for</code> 结构枚举出每个元素，然后利用表达式生成新的元素，表达式可以是调用自身的方法，也可以是函数，而条件是可选的，可以过滤列表中不符合条件的值</p><p>例1：过滤掉长度小于或等于 3 的字符串列表，并将剩下的转换成大写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;Wendy&#x27;</span>,<span class="string">&#x27;Smith&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_names = [name.upper() <span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> <span class="built_in">len</span>(name)&gt;<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(new_names)</span><br><span class="line">[<span class="string">&#x27;ALICE&#x27;</span>, <span class="string">&#x27;JERRY&#x27;</span>, <span class="string">&#x27;WENDY&#x27;</span>, <span class="string">&#x27;SMITH&#x27;</span>]</span><br></pre></td></tr></table></figure><p>例2：计算 30 以内可以被 3 整除的整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>multiples = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>) <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(multiples)</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">27</span>]</span><br></pre></td></tr></table></figure><p>是不是很优雅？一行就搞定了！</p><h1 id="字典推导式">字典推导式</h1><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;键表达式:值表达式 <span class="keyword">for</span> 某元素 <span class="keyword">in</span> 某对象 <span class="keyword">if</span> 条件&#125;</span><br></pre></td></tr></table></figure><p>例1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listdemo = [<span class="string">&#x27;Google&#x27;</span>,<span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line"><span class="comment"># 将列表中各字符串值为键，各字符串的长度为值，组成键值对</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newdict = &#123;key:<span class="built_in">len</span>(key) <span class="keyword">for</span> key <span class="keyword">in</span> listdemo&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newdict</span><br><span class="line">&#123;<span class="string">&#x27;Google&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic = &#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="集合推导式">集合推导式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;表达式 <span class="keyword">for</span> 某元素 <span class="keyword">in</span> 某对象 <span class="keyword">if</span> 条件&#125;</span><br></pre></td></tr></table></figure><p>例1：计算数字 1,2,3 的平方数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setnew = &#123;i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setnew</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure><p>例2：判断不是 abc 的字母并输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="元组推导式">元组推导式</h1><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span>(表达式 <span class="keyword">for</span> 某元素 <span class="keyword">in</span> 某对象 <span class="keyword">if</span> 条件)</span><br></pre></td></tr></table></figure><p>元组推导式与前面的所有推导式都不同，因为元组的括号本身是没有意义的，所以用小括号括起来不能代表一个元组，需要手动转成元组类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x7faf6ee20a50</span>&gt;  <span class="comment"># 返回的是生成器对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>(a)       <span class="comment"># 使用 tuple() 函数，可以直接将生成器对象转换成元组</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『实记』“韵味杭州”测试赛球童志愿经历</title>
      <link href="/2022/04/23/%E3%80%8E%E5%AE%9E%E8%AE%B0%E3%80%8F%E2%80%9C%E9%9F%B5%E5%91%B3%E6%9D%AD%E5%B7%9E%E2%80%9D%E6%B5%8B%E8%AF%95%E8%B5%9B%E7%90%83%E7%AB%A5%E5%BF%97%E6%84%BF%E7%BB%8F%E5%8E%86/"/>
      <url>/2022/04/23/%E3%80%8E%E5%AE%9E%E8%AE%B0%E3%80%8F%E2%80%9C%E9%9F%B5%E5%91%B3%E6%9D%AD%E5%B7%9E%E2%80%9D%E6%B5%8B%E8%AF%95%E8%B5%9B%E7%90%83%E7%AB%A5%E5%BF%97%E6%84%BF%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>知道我为什么又停更了几天嘛~ 那必是去办大事去了~</p><p>不得不说，这几天是真的开心，简直要乐死我了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204232319835.jpg" alt=""></p><blockquote><p>在我看见这个请假证明的时候，就知道接下来这几天必定是非常令人难忘的</p></blockquote><p>首先让我先交待一下背景：鄙人是一名预选的亚运会网球球童志愿者，具体工作就是在场上传球、捡球、给运动员撑伞、供球之类的，但是其实也没有那么简单，网球规则还是有点复杂的，具体<a href="/2022/04/05/%E3%80%8EOthers%E3%80%8F%E7%BD%91%E7%90%83%E7%90%83%E7%AB%A5%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/">可以看这一篇</a>。然后新人肯定不能直接去服务亚运会嘛，必是要先试炼一下，这个测试赛就是我们锻炼的好机会。这场测试赛的运动员其实都是些几岁的小学生，心理负担不会太大，是一次很好的锻炼机会</p><p>17号的培训会</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262022745.png" alt=""></p><p>20号的场地培训及赛前适应场地</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262028432.png" alt=""></p><p>本场比赛一个有好几个场地，分别是 CC（Center Court，也就是上面的那张图，决赛场），C1（半决赛场），还有后面的 C3、C4、C5 和 C6（这几个是连着一起的）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262121576.jpg" alt=""></p><h1 id="DAY-0（21日）">DAY 0（21日）</h1><p>这一天是赛前最后的准备日，中午上完课之后，我们就出发了</p><p>出发啦！</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262050778.JPG" alt=""></p><p>在酒店报道</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262051631.JPG" alt=""></p><p>入住房间</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262052697.JPG" alt=""></p><p>然后我们接着前往奥体中心，在休息室开会，熟悉明天的场地，还要领发放的衣服</p><p>我们 4 组明天要和 3 组去 C1 场，两个小组轮换，练习了好久的传球，还有上场和退场。但是说实话还是很慌，重点就是怕规则记不清（毕竟我是网前，责任比较大）</p><p>志愿者休息室一览（其实是后面几天的图）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262159068.JPG" alt=""></p><p>当然啦，晚饭还是要吃的，实话实说，我们这吃的是真的好，而且餐餐都有水果牛奶，还不带重样的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262146506.JPG" alt=""></p><p>穿上新衣服的 NX</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262146129.JPG" alt=""></p><p>每天必做的核酸</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262150809.JPG" alt=""></p><h1 id="DAY1（22日）">DAY1（22日）</h1><p>实话实说，在我参加这个比赛之前，没有感受过真实的比赛氛围，第一天还是非常紧张的</p><p>出发前的全身照 <s>（别问我为什么眼睛是闭着的）</s></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262148582.JPG" alt=""></p><p>在酒店吃早餐</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262151842.JPG" alt=""></p><p>开完晨会后，前往 C1 上场（这个其实是最后一天的图，而且不是我们组）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262154472.png" alt=""></p><p>上过一轮之后，就基本熟悉规则了，换人的时候只能在休息时或一场结束后换，场上有垫子，跪着还是比较舒服的</p><p>因为都是小孩子打比赛，所以一场比赛就打一盘且无占先（不然要打好久），排版表上是 40 分钟一换，其实一场大概也就是这个时间</p><p>累了一天之后，回酒店做核酸</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262208130.png" alt=""></p><h1 id="DAY2（23日）">DAY2（23日）</h1><p>第二天下雨了，所以上午所有组都去 CC 轮换上岗</p><p>按照战表，这一天是双打，一开始的组没有熟悉规则，就比较混乱，到我们组的时候就已经清楚了</p><p>这天双打是直接打决胜局（没错，一场就打一局）</p><p>中心场馆就是不一样，观众席上人还是挺多的，媒体也很多，然后各种长枪短炮对着你，准备和休息的时间还有背景音乐，全场的人都看着你，压力还是挺大的 <s>（这张图其实应该是第一天的）</s></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262221107.jpg" alt=""></p><p>讲真，这两天过得是真的充实，一直在前线和准备上场（在泉水回血）的循环中，累也是有点累吧，但是比赛也是挺好看的，我们晚上甚至都在讨论选手了（</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262234895.jpg" alt=""></p><p>这几天每天早晚例会的总结</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262343031.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262343504.jpg" alt=""></p><h1 id="DAY3（24日）">DAY3（24日）</h1><p>这是最后一天，上午天气是多云，天气很好，但我们组这一天其实没有服务任何一场比赛（</p><p>因为是最后一天，所以我们早上需要把所有的行李打包，带到大本营去</p><p>最后一次从酒店出发</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204241151772.jpg" alt=""></p><p>按分配表格，我们被分到 C4 场</p><p>但是…我们到了场地之后，却发现没有我们的比赛，然后听说 C4 的比赛都迁到 CC 去了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262236620.jpg" alt=""></p><p>所以我们就在那里玩了一个轮班的时间，还拍了合影</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262237273.jpg" alt=""></p><p>回到休息室后打牌打得不亦乐乎（</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262237842.jpg" alt=""></p><p>然后到下午，又通知我们去 C1 接替一个小组</p><p>我们在门口等候，门口执勤的志愿者说这场后面的一场是最后一场</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262241331.png" alt=""></p><p>所以，我们打算这场结束再进去换</p><p>然而，其实这一场就是最后一场了，我们又白跑了一趟，这一场结束了基本就没比赛了</p><p>回到休息室，不久之后就通知我们去参加颁奖典礼和大合影了</p><p>所有球童要轮流当男单、女单、男双、女双、混双几个项目的背景板</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262251098.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262252178.jpg" alt=""></p><p>全体 84 位球童合影</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262250137.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262253719.jpg" alt=""></p><p>全体志愿者合影</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262259841.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262301931.jpg" alt=""></p><p>小组最后的合影</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262239639.jpg" alt=""></p><p>晚上吃完饭，开完总结大会后，依依不舍地离开</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262325570.png" alt=""></p><h1 id="其他图片">其他图片</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262329580.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262329632.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262329415.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262329277.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262329396.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262330946.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262331438.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262331448.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262332931.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262332228.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262332442.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262332707.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262332539.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262335330.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205041040281.png" alt=""></p><p>实话实说，这几天过地是真的棒，我已经等不及亚运会了</p>]]></content>
      
      
      <categories>
          
          <category> 随笔与总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十）分组数据</title>
      <link href="/2022/04/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/04/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>本篇主要讲述如何使用 <code>GROUP BY</code> 和 <code>HAVING</code> 子句</p><h1 id="数据分组">数据分组</h1><p>上一篇讲述了如何使用聚集函数汇总数据（如总数、平均值和最大最小值）</p><p>但是目前汇总的范围只能是整个表，或使用 <code>WHERE</code> 匹配一个指定的字段，例如下面返回由供应商 DLL01 提供的产品数目</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204231502727.jpg" alt=""></p><p>但是，如果要分门别类地返回各个供应商的产品数目呢？</p><p>这就需要对数据进行分组，然后对每组分别计算</p><h1 id="创建分组">创建分组</h1><p>分组是使用 <code>GROUP BY</code> 子句创建的，理解分组的最好方法是看一个例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204231511457.jpg" alt=""></p><p>由于使用了 <code>GROUP BY</code> ，DBMS 会自动依照 <code>vend_id</code> 来分组，然后对每一个组都执行一次聚集函数</p><p>下面是一些关于 <code>GROUP BY</code> 的重要规定</p><ul><li><code>GROUP BY</code> 可以包含任意数目的列，用来嵌套分组（用后面的字段进一步分割前面已经分好的组）</li><li>除聚集计算语句外，<code>SELECT</code> 中的每一列也必须出现在 <code>GROUP BY</code> 中</li><li><code>GROUP BY</code> 中的每一列都必须是真实的列（可以不是 <code>SELECT</code> 中的）或有效的表达式，不能使用别名。如果在 <code>SELECT</code> 中使用表达式，则必须在 <code>GROUP BY</code> 中指定相同的表达式</li><li>大多数 DBMS 不允许在 <code>GROUP BY</code>  中使用可变长度数据类型的列（如文本或备注型字段）</li><li>如果包含了值为 <code>NULL</code> 的行，则这些行将作为一个分组返回</li><li><code>GROUP BY</code> 子句必须出现 <code>WHERE</code> 之后，<code>ORDER BY</code> 之前</li></ul><details class="toggle" ><summary class="toggle-button" style="">提示：GROUP BY ALL</summary><div class="toggle-content"><p>如果使用了 <code>ALL</code>，查询结果将包括所有分组，即使是没有匹配上的内容</p><p>我感觉这东西并没有什么用，基本可以看作是禁用了 <code>WHERE</code> 子句，毕竟在最新的 Microsoft SQL Server 中，<a href="https://docs.microsoft.com/zh-tw/previous-versions/sql/sql-server-2005/ms175028(v=sql.90)">它已经被移除了</a></p></div></details><details class="toggle" ><summary class="toggle-button" style="">注意：通过相对位置指定列</summary><div class="toggle-content"><p>有的 DBMS 允许根据 SELECT 列表中的位置指定 GROUP BY 的列。例如 <code>GROUP BY 2, 1</code> 表示按选择的第二个列分组，然后再按第一个列分组，不过这种方法很容易出错</p></div></details><h1 id="过滤分组">过滤分组</h1><p>众所周知，我们可以使用 <code>WHERE</code> 来过滤行，而类似地，我们可以用 <code>HAVING</code> 来过滤分组</p><p><code>HAVING</code> 后面可以跟所有 <code>WHERE</code> 的操作符，这两个只是操作的对象不同而已</p><p>例如，我们先列出所有的顾客订单数（按顾客分组，然后汇集），再尝试使用 <code>HAVING</code> 来挑选出至少有两个订单的顾客（过滤分组）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id ,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> orders </span><br><span class="line"><span class="keyword">FROM</span> Orders  </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_id;</span><br></pre></td></tr></table></figure><p>接下来尝试过滤分组，重新输入并加上下面这一行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204280855234.jpg" alt=""></p><p>可以看到，已经成功过滤</p><p>如果同时使用 <code>WHERE</code> 和 <code>HAVING</code> ，其实是有执行的优先级的，具体过程为 <code>WHERE</code> 先进行行级过滤，然后分组，然后 <code>HAVING</code> 再过滤分组，这一点很重要，因为 <code>WHERE</code> 排除的行并不在分组中，这可能会改变计算值，从而影响 <code>HAVING</code> 子句</p><p>举一个同时使用  <code>WHERE</code> 和 <code>HAVING</code> 的例子：列出具有两个以上产品且价格大于等于 4 的供应商</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id , <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&gt;=</span><span class="number">4</span> # 行级过滤</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  vend_id    # 分组</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span><span class="number">2</span>; # 组级过滤</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204280904413.jpg" alt=""></p><h1 id="同时使用分组过滤和排序">同时使用分组过滤和排序</h1><p><code>GROUP BY</code> 并没有排序的功能，所以不要忘记在最后进行排序，下面是一个例子</p><p>检索三个或更多物品的订单号和订购物品的数目</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num , <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> items </span><br><span class="line"><span class="keyword">FROM</span> OrderItems </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> order_num  </span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>再加上排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num , <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> items </span><br><span class="line"><span class="keyword">FROM</span> OrderItems </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> order_num  </span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span><span class="number">3</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> items , order_num;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204281921966.jpg" alt=""></p><h1 id="SELECT-子句顺序">SELECT 子句顺序</h1><p>现在回顾一下 <code>SELECT</code> 语句中各已经学过的子句以及它们的顺序</p><table><thead><tr><th>子句</th><th>说明</th><th>是否必须使用</th></tr></thead><tbody><tr><td>SELECT</td><td>要返回的列或表达式</td><td>是</td></tr><tr><td>FROM</td><td>从中检索数据的表</td><td>仅在从表中选择数据时使用</td></tr><tr><td>WHERE</td><td>行级过滤</td><td>否</td></tr><tr><td>GROUP BY</td><td>分组</td><td>仅在按组计算聚集时使用</td></tr><tr><td>HAVING</td><td>组级过滤</td><td>否</td></tr><tr><td>ORDER BY</td><td>对输出进行排序</td><td>否</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Go』有关 range 和指针接收者的坑</title>
      <link href="/2022/04/19/%E3%80%8EGo%E3%80%8F%E6%9C%89%E5%85%B3%20range%20%E5%92%8C%E6%8C%87%E9%92%88%E6%8E%A5%E6%94%B6%E8%80%85%E7%9A%84%E5%9D%91/"/>
      <url>/2022/04/19/%E3%80%8EGo%E3%80%8F%E6%9C%89%E5%85%B3%20range%20%E5%92%8C%E6%8C%87%E9%92%88%E6%8E%A5%E6%94%B6%E8%80%85%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>这其实是个老生常谈的问题了，在例会上被第二次提到，<a href="https://github.com/hduhelp/backend_guide/blob/main/golang/feature.md">原文见此</a></p><p>本人简单概括一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Group <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="type">string</span></span><br><span class="line">Persons []Person</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="type">string</span>   <span class="comment">//标准名</span></span><br><span class="line">Alias  []<span class="type">string</span> <span class="comment">//别名，可以是邮箱、QQ号等</span></span><br><span class="line">Submit <span class="type">bool</span>     <span class="comment">// 是否已提交</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Group)</span></span> ChangeSomeThingV1() &#123;</span><br><span class="line"><span class="keyword">for</span> _, person := <span class="keyword">range</span> p.Persons &#123;</span><br><span class="line">person.Submit = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Group)</span></span> ChangeSomeThingV2() &#123;</span><br><span class="line"><span class="keyword">for</span> _, person := <span class="keyword">range</span> p.Persons &#123;</span><br><span class="line">person.Submit = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个 <code>ChangeSomeThing()</code> 方法的区别是什么？哪个能够起作用？</p><p>答案是：两个都没用</p><p>这是一个新手经常会犯的错误，要知道，和 Python 中一样，<code>range</code> 枚举出来的都是副本，修改副本是没有用的</p><p>可以这样解决</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> p.Persons &#123;</span><br><span class="line">p.Persons[i].Submit = <span class="literal">true</span></span><br><span class="line"><span class="comment">//person.Submit = true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，更好的一种方法是改为指针类型，这样可以通过 <code>range</code> 出来的指针修改对象</p><p>另一个坑是关于指针接收者的，也就是上面两个方法的区别</p><p>不管实体还是指针都可以成功调用两种方法，Golang 会帮你自动转换的（除了直接用 <code>&#123;&#125;</code> 临时创建的对象）</p><p>但是，只有接收者为指针的方法能修改对象，这一点要牢记</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Ops』运维基本技能树</title>
      <link href="/2022/04/18/%E3%80%8EOps%E3%80%8F%E8%BF%90%E7%BB%B4%E5%9F%BA%E6%9C%AC%E6%8A%80%E8%83%BD%E6%A0%91/"/>
      <url>/2022/04/18/%E3%80%8EOps%E3%80%8F%E8%BF%90%E7%BB%B4%E5%9F%BA%E6%9C%AC%E6%8A%80%E8%83%BD%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是昨晚例会上 ESON 的讲稿，然后我还康到了一本好书：<a href="https://book.hacktricks.xyz/">https://book.hacktricks.xyz/</a></p></blockquote><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204182220269.png" alt=""></p><h1 id="Ops">Ops</h1><p>[TOC]</p><h2 id="什么是运维">什么是运维</h2><blockquote><p>就是牛马, 当牛做马.</p><p>开发背锅侠, 生产事故擦屁股的</p><p>配环境的勾八</p></blockquote><p>From WIki</p><blockquote><p>是对技术类运营维护人员的统称。运维人员的职责是根据业务需要规划信息、网络、服务，通过网络监控、事件预警、业务调度、排障升级等手段，使服务处于 <strong>长期稳定可用状态</strong>。</p></blockquote><h2 id="基本技能树">基本技能树</h2><h3 id="Linux">Linux</h3><p>这个还需要多说? 啥软件不是在服务器里的 Linux 的?</p><blockquote><p>隔壁 Win Server 突然弹起</p></blockquote><h4 id="各种-Shell">各种 Shell</h4><h4 id="各种命令">各种命令</h4><p>折腾 linux 基本上是运维入门的第一堂课</p><h4 id="插播一条-如何-AddUser">插播一条 如何 AddUser</h4><blockquote><p>到这个位置 基本就有一个 基础到不能再基础的 运行环境了</p></blockquote><h3 id="数据库">数据库</h3><p>数据库基本逃不过 CRUD</p><p>高级点无非是 性能优化 建立索引 视图 等等</p><h4 id="Mysql-关系型">Mysql 关系型</h4><p>会看 binlog 数据库数据恢复 备份 CRUD</p><h4 id="Redis-KV型">Redis KV型</h4><p>SET GET 查 烧操作很多 一般是作为后端第二个接触到的数据</p><h4 id="MongoDB-文档型">MongoDB 文档型</h4><p>文档 JSON 这玩意在你还不确定你的数据需要如何存储 或者设计表单的时候 非常好用</p><h4 id="neo4j-图型">neo4j 图型</h4><p>这种一般性开发是用不太到的 一般是专业需求</p><blockquote><p>这里基本上你就可以调用这些存储资源 来进行最最基本的后端开发了</p></blockquote><h3 id="各类中间件">各类中间件</h3><p>中间件是为应用提供通用服务和功能的软件。 数据管理、应用服务、消息传递、身份验证和API 管理通常都要通过中间件。 中间件可以帮助开发人员更有效地构建应用。 它就如同是应用、数据与用户之间的纽带。</p><blockquote><p>Nginx Apache Tomcat等等</p></blockquote><h4 id="负载均衡">负载均衡</h4><h4 id="反向代理">反向代理</h4><h4 id="证书校验">证书校验</h4><p>SSL</p><h4 id="网关">网关</h4><p>Kong</p><h4 id="消息队列">消息队列</h4><p>MQTT</p><h4 id="其他设备">其他设备</h4><blockquote><p>当你所具有的服务渐渐增加的时候 你会遇到这些问题</p></blockquote><h3 id="容器化">容器化</h3><h4 id="Docker">Docker</h4><p>基本使用 审查处理</p><h4 id="K8s-容器编排">K8s 容器编排</h4><p>这里挖个坑 有材料 而且很多</p><h3 id="渐渐云原生…">渐渐云原生…</h3><p>云服务 云数据库</p><p>Serverless OSS 对象存储</p><blockquote><p>你的服务渐渐增加 同时你所拥有的可支配资源也很多的时候</p><p>你需要你的服务可移植快速部署和统一管理的时候</p><p>当然 容器还有诸如</p><p>环境干净 快速启停 依赖少 方便移植 同时也惠及了开发</p></blockquote><h3 id="日志">日志</h3><h4 id="可视化">可视化</h4><h4 id="管理平台">管理平台</h4><h4 id="分布式收集-统一处理">分布式收集 统一处理</h4><blockquote><p>经典 ELK</p></blockquote><p>Grafana 经典数据可视化平台</p><blockquote><p>这个阶段你所具有的服务已经非常成熟了 你需要更多的收集信息</p><p>然后对信息进行处理 比如 你需要对于一些细小的 Bug Error 进行排错 定位分析</p><p>对服务后台运行情况进行监控</p></blockquote><h2 id="与开发的交界处-Devops">与开发的交界处 Devops</h2><h3 id="Git">Git</h3><p>有什么好说的? 代码管理</p><p>当然不止 github</p><p>gitlab 自建 gitea 自建 等等</p><h3 id="CICD">CICD</h3><p>持续集成持续部署</p><blockquote><p>一般这个玩意是要和自动测试一起服用的</p><p>不然就会产生类似 我本地就不跑了 我疯狂 Commit 代码 Push 上去服务器帮我搞 跑不起来就 再交</p><p>当然方便是方便</p></blockquote><p>实现方法有很多</p><p>写 Github Action</p><p>Jenkins</p><h3 id="DNS">DNS</h3><p>域名管理 其实是负载均衡和服务发现的帮助者</p><p>就是来解决纯纯 IP 导致的一堆破事</p><h3 id="CDN">CDN</h3><p>加速 静态资源分发 源站隐藏 抗 DDOS CC</p><blockquote><p>可不得推荐一手 Cloudflare?</p></blockquote><h3 id="包管理-依赖-镜像">包管理 依赖 镜像</h3><p>maven pip 自建</p><p>docker 镜像 私有 image</p><h3 id="虚拟化内网-以及接入">虚拟化内网 以及接入</h3><p>这里有点偏向于网工了</p><blockquote><p>简单如 ZeroTIer TailScale Wireguard OpenVPN</p><p>如果都没用过 那么 学校 深信服 SSLVPN 就也是一个</p><p>复制如 RouterOS Cisco 产品 OSPF BGP …</p></blockquote><blockquote><p>公司体量足够大就会碰到这些 比如说 Google</p></blockquote><h2 id="与安全的交界处">与安全的交界处</h2><h3 id="代码静态审计-测试">代码静态审计 测试</h3><h4 id="CodeQL">CodeQL</h4><h4 id="SonarQube">SonarQube</h4><blockquote><p>其实是防止 仓库被提交 恶意代码 或者带漏洞的代码</p></blockquote><h3 id="身份验证-鉴权">身份验证 鉴权</h3><p>IDaaS 身份验证即服务</p><h4 id="Active-Directory-活动目录">Active Directory 活动目录</h4><blockquote><p>你的资产实在太多了 在公司体量下进行运作的时候 身份验证系统 和 资产管理 不可能每个资产就有一个 身份验证 更新也不会同步</p><p>这时候你就需要一个 类似于 目录的东西 可以查找 哪里哪里 有什么服务 有什么系统 谁访问什么 谁可以做什么</p></blockquote><h4 id="域">域</h4><p>windows Domain</p><p>可以用 Samba 来使得 linux 加入该域</p><h4 id="LDAP-OAuth-Kerberos-SSO">LDAP ; OAuth ; Kerberos; SSO</h4><p>LDAP 轻量目录访问协议</p><p>OAuth 开放授权标准 做验证 提供信息 但是不提供密码的方案</p><p>Kerberos 基于票据系统 TGT 当然这玩意 是 MIT 的玩意</p><p>SSO 单点登录 将系统配置为信任另一个系统来进行验证 一个是 服务商 一个是身份服务商 可以和 OAuth 一起用</p><h3 id="IR-Incident-Response-应急响应">IR Incident Response 应急响应</h3><h2 id="硬件方向">硬件方向</h2><h3 id="IDC-机房管理">IDC 机房管理</h3><h3 id="跳板机-防火墙-上网行为管理">跳板机  防火墙  上网行为管理</h3><p>JumpServer 运维跳板机(也有软件端的 <strong>No More SSH</strong>)</p><p>防火墙技术</p><h3 id="服务器-交换机-路由器-三大件">服务器 交换机 路由器 三大件</h3><blockquote><p>未来企业 996 当牛做马的 程序员肯定不用学这个啦</p></blockquote><h1 id="世界的尽头">世界的尽头</h1><p>答案是 DevSecOps</p><h1 id="如果你听完了上述这些">如果你听完了上述这些</h1><p>其实最后的最后</p><p>你会发现 就是完全是一个反复搭建 越建越大的过程</p><p>同时伴随着 分布式技术和统一管理 的一代代的革新</p><p>而归根到底为什么要用到这些东西</p><p>其本质原因就是 为了更好达到服务的长期可用</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Windows』关于使用宽带时无法正常使用代理的问题</title>
      <link href="/2022/04/18/%E3%80%8EWindows%E3%80%8F%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8%E5%AE%BD%E5%B8%A6%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/18/%E3%80%8EWindows%E3%80%8F%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8%E5%AE%BD%E5%B8%A6%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>当你使用宽带接入校园网的时候，可能会遇到无法正常使用 <code>ShadowsocksR</code> 代理的问题</p><p>经过后端群内大佬的指引，发现解决方法其实很简单，就是把连接名改为非汉字就好了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204182156430.jpg" alt=""></p><p>但是目前 Windows11 有 UI bug，只有连上了之后才能改名</p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『总结』大一下期中总结</title>
      <link href="/2022/04/17/%E3%80%8E%E6%80%BB%E7%BB%93%E3%80%8F%E5%A4%A7%E4%B8%80%E4%B8%8B%E6%9C%9F%E4%B8%AD%E6%80%BB%E7%BB%93/"/>
      <url>/2022/04/17/%E3%80%8E%E6%80%BB%E7%BB%93%E3%80%8F%E5%A4%A7%E4%B8%80%E4%B8%8B%E6%9C%9F%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>呼！终于把一堆事情给忙完了</p><p>时间真快，不知不觉这个学期就过了一半</p><p>前几天为了备考期中考，就停更了几天，昨天刚把期中考考完了，接下来会恢复日更的习惯的（堆了一堆东西没写呢！包括上周末后端例会讲的一些知识点我都没好好整理）</p><p>好了，接下来进入正题，对目前的情况做一下小结</p><h2 id="这半个学期干了什么？">这半个学期干了什么？</h2><p>上半学期数起来还是做了不少事情的，自从2月20号开学以来，我把 <code>gin</code> 框架的坑差不多填完了，然后把建站指南也填完了，之后入门了 Python（整了有一半了吧），然后开了个 <code>SQL</code> 的坑，之后又开了个微信小程序的坑，然后做了个 <code>ToDoList</code>，又往里面塞了好多东西 <s>（我怎么挖了这么多坑）</s></p><p>另外，我搭了一个 <code>MC</code> 服务器，跟几个舍友一起通关了暮色森林（遗憾的是王总没来，他去打老头环了，这东西刚发布的时候太上头）</p><p>另外，我参加了杭州亚运会的志愿者选拔，分配到的职位是网球球童，目前还没被筛掉，下周末还要去参加一个测试赛锻炼一下能力</p><p>还有参加了一个挑战杯的竞赛小组 <s>（虽然我感觉没什么戏）</s></p><p>还有什么？？哦，我这学期还被推举为入党积极分子 <s>（有政治正确那味了）</s></p><p>然后我还报名了一个字节跳动的青训营，月底有笔试，进去应该问题不大，直播会上给我画了个大饼，感觉能学到很多东西</p><p>除了这些课余的，学业方面呢？</p><p>首先，期中考已经考完了，目前就出了个物理是 79 ，高数估计挂了，没复习好</p><p>说到物理，我真的想喷一下这个老师，讲课是真的烂，我可以直言不讳地说，我读书这么多年，他是我见过的上课讲的最烂的老师</p><p>我上课基本没认真听过，基本上就是靠考前去 B 站找视频看学一下，最后还考了个 79</p><p>相比之下，高数就讲的还行，虽然讲了很多没用的（我每次都在想能不能只挑重点讲），但是还是比物理好太多太多，这次高数没有复习好，空间几何考的都是我没复习到的，然后向量叉乘是怎么乘的我也忘了，参数方程求导也忘了，关键是我居然连 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ln</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\ln \left( x-1\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> 的积分我都忘记是怎么积的了…只能说是级数还有偏导还是可以</p><p>另外几门？离散也就那样吧，金工感觉就增长一下见识，思政终于完结了一个改革开放史，算是少了一门，英语也就那样，对了六级也快考了，外教课感觉老师讲得挺好的，也很有意思，但是舍友都不听，就我一个人听，task 都是我自己完成的，然后还要教他们这么做（</p><h2 id="目前的状态怎么样？">目前的状态怎么样？</h2><p>感觉还不错，目前还因为期中有一堆历史遗留问题要处理，有大干一场的热情</p><p>但是平时的事情真的是多到离谱，一般来说，从周一开始，就不断有事情开始缠到你身上，然后一直缠缠到周末才同一解决掉，一般解决完也已经没什么时间了，你问为什么不当天完成？要是当天完成就没有时间写博客了，自然是博客的优先级要更高的，每天不能被这些乱事折腾着然后什么正事都没干吧，不管怎么说，累是累，但是能收获很多东西</p><h2 id="接下来要干什么？">接下来要干什么？</h2><p>接下来？六级是一个，志愿者是一个，算法复习是一个，然后微信小程序还是要学的，SQL也是要继续学的，todo的一堆坑也是要填的。就这样吧！保持高昂的斗志面对生活，我知道我是会周期性地崩溃的，只能说尽量在下次崩溃之前多做点事情，当然也要趁学期结束多做点事情</p><p>时间也不早了，还要早八，赶紧睡吧</p>]]></content>
      
      
      <categories>
          
          <category> 随笔与总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 建站指南（八）使用 KaTeX 数学公式</title>
      <link href="/2022/04/17/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%85%AB%EF%BC%89%E4%BD%BF%E7%94%A8-KaTeX-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
      <url>/2022/04/17/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%85%AB%EF%BC%89%E4%BD%BF%E7%94%A8-KaTeX-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">2022年6月17日更</summary><div class="toggle-content"><p>发现可以按照官方的方法弄了，之前一直无效（</p><p>插一嘴，因为 <a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a> 的 anchors-level 默认是 2 ，所以会有一级标题无法索引的情况，需要手动指定一下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&#x27;@neilsustc/markdown-it-katex&#x27;</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">strict:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></div></details><p>在 <code>Butterfly</code> 主题里的确是有公式的设置的，在<a href="https://butterfly.js.org/posts/ceeb73f/#Math-%E6%95%B8%E5%AD%B8">官方文档</a>里也有教你配置的教程</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204171029968.jpg" alt=""></p><p>但是鄙人跟着流程走下来真的一点用都没有，还是没法渲染 😭😭😭</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204171030821.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">一个不建议使用的方法</summary><div class="toggle-content"><blockquote><p>2022年4月17日深夜注：安装这个弄完后的确能正确显示公式，但点击右侧目录中的一级标题不会跳转（没有创建对应的元素），虽然我用<code>hexo-renderer-markdown-it-plus</code>或<code>hexo-renderer-markdown-it</code>的配置法在 <code>_config.yml</code> 中把 <code>level</code> 设置为了1，但好像没有什么卵用，详情请见<a href="https://blog.csdn.net/Fosu_Chenai/article/details/111192850">【Hexo】关于hexo-renderer-markdown-it引起的一级目录无法跳转的错误</a>的评论区</p></blockquote><p>昨晚上网折腾了好久好久都没法解决，今早又折腾了一早上，终于成功了</p><p>（当然，如果你按照教程能成功自然更好，但是如果你也没成功的话，希望下面的经历可以帮到你）</p><p>首先解决依赖问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save </span><br><span class="line">npm un hexo-renderer-kramed --save</span><br><span class="line">npm i hexo-math --save</span><br><span class="line">npm i hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure><p>有可能会有多余的依赖，我反正全放这了</p><p>然后前往主题配置文件，手动加上 <code>CSS</code> 和 <code>JS</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204171047845.jpg" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-bsHo4/LA+lkZv61JspMDQB9QP1TtO4IgOf2yYS+J6VdAYLVyx1c3XKcsHh0Vy8Ws&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-4z8mjH4yIpuK9dIQGR1JwbrfYsStrNK6MP+2Enhue4eyo0XlBDXOIPc8b6ZU0ajz&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后清缓存并启动预览</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204171052525.jpg" alt=""></p><p>鸣谢：<a href="https://cloud.tencent.com/developer/article/1933193">【Hexo】博客数学公式解决方案，亲测有效</a></p></div></details><p>上面是我早上的前车之鉴，晚上算是真正搞完了</p><p>首先要先换一个渲染器，十分感谢<a href="https://blog.csdn.net/qq_36667170/article/details/105846999">hexo markdown渲染器 @upupming/hexo-renderer-markdown-it-plus</a>让我发现了 <code>hexo-renderer-markdown-it-katex</code></p><p>先卸载旧的，如果你还装了什么其他的，要一并卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save </span><br></pre></td></tr></table></figure><p>安装 <code>hexo-renderer-markdown-it-katex</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-renderer-markdown-it-katex</span><br></pre></td></tr></table></figure><p>然后在 <code>_config.yml</code> 的末尾添加下面的内容，我不知道为什么就偏偏配置这个渲染器是成功的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>最后清缓存并尝试预览</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>之后你就发现，既能渲染公式，一级标题的跳转也不受影响，而且你也不用手动导入什么<code>JS</code>或<code>CSS</code>，简直不要太爽</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204172349827.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Hexo + Butterfly 建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『大学物理1』期中复习</title>
      <link href="/2022/04/15/%E3%80%8EOthers%E3%80%8F%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%861-%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/04/15/%E3%80%8EOthers%E3%80%8F%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%861-%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="质点运动学">质点运动学</h1><h2 id="圆周运动">圆周运动</h2><p>角度 - 角速度 - 角加速度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo>−</mo><mi>ω</mi><mo>−</mo><mi>α</mi></mrow><annotation encoding="application/x-tex">\theta -\omega -\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></p><ul><li>切线加速度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>t</mi></msub><mo>=</mo><mi>α</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">a_{t}=\alpha r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>（角加速度 × 半径）</li><li>法线加速度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><msup><mi>ω</mi><mn>2</mn></msup><mi>r</mi></mrow><annotation encoding="application/x-tex">a_{n}=\omega^{2}r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>（角速度的方 × 半径）</li></ul><h1 id="运动建模及其方程">运动建模及其方程</h1><p>大部分的模型方程都是基于三角形的勾股定理</p><h1 id="牛顿定律及常见力">牛顿定律及常见力</h1><p>没什么好记的</p><h1 id="转动惯量和力矩">转动惯量和力矩</h1><p>转动惯量和动能的关系：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mi>k</mi></msub><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>J</mi><msup><mi>ω</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E_{k}=\dfrac{1}{2}J\omega ^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>转动惯量与角动量：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo>=</mo><mi>J</mi><mi>ω</mi></mrow><annotation encoding="application/x-tex">L=J\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span></p><h2 id="转动惯量结论">转动惯量结论</h2><ul><li><p>质点（微元）、绕中心旋转的薄圆环：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J=mR^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>​（各质元到轴的垂直距离都相同）</p></li><li><p>绕中心旋转的圆盘（柱）：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J=\dfrac{1}{2}mR^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>棒子绕一端转：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>3</mn></mfrac></mstyle><mi>m</mi><msup><mi>L</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J=\dfrac{1}{3}mL^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>棒子绕中心：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>12</mn></mfrac></mstyle><mi>m</mi><msup><mi>L</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J=\dfrac{1}{12}mL^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">12</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p></li></ul><h2 id="转动惯量计算（微元法）">转动惯量计算（微元法）</h2><ul><li><p>例1：设转轴在棒的一端且与棒垂直，棒长为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span></span></span></span> ，求转动惯量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi></mrow><annotation encoding="application/x-tex">J</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span></span></span></span></p><p>解：在棒上离轴 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 处，取长度元 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span>，单位长度质量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span>，则</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>J</mi><mo>=</mo><mi>d</mi><mi>m</mi><mo>⋅</mo><msup><mi>x</mi><mn>2</mn></msup><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mi>λ</mi><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">dJ=dm\cdot x^{2}=x^{2}\lambda dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">dJ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">λ</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mi>L</mi></msubsup><mi>λ</mi><msup><mi>x</mi><mn>2</mn></msup><mi>d</mi><mi>x</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>λ</mi><msup><mi>L</mi><mn>3</mn></msup></mrow><mn>3</mn></mfrac></mstyle><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>3</mn></mfrac></mstyle><mi>m</mi><msup><mi>L</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J=\int _{0}^{L}\lambda x^{2}dx=\dfrac{\lambda L^{3}}{3}=\dfrac{1}{3}mL^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3921em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0362em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">λ</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1771em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>例2：转轴移到中点？（原点在中间，从一端积分到另一端，所以是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>L</mi><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">-\dfrac{L}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>L</mi><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{L}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>）</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mn>2</mn></msub><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>L</mi><mn>2</mn></mfrac></mstyle></mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>L</mi><mn>2</mn></mfrac></mstyle></msubsup><mi>λ</mi><msup><mi>x</mi><mn>2</mn></msup><mi>d</mi><mi>x</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>λ</mi><msup><mi>L</mi><mn>3</mn></msup></mrow><mn>12</mn></mfrac></mstyle><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>12</mn></mfrac></mstyle><mi>m</mi><msup><mi>L</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J_{2}=\int ^{\dfrac{L}{2}}_{-\dfrac{L}{2}}\lambda x^{2}dx=\dfrac{\lambda L^{3}}{12}=\dfrac{1}{12}mL^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.4947em;vertical-align:-1.9825em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5121em;"><span style="top:-2.1848em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:3.4153em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord sizing reset-size3 size6 mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4153em;"><span style="top:-2.248em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.732em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.752em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-4.5121em;margin-right:0.05em;"><span class="pstrut" style="height:3.4153em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sizing reset-size3 size6 mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4153em;"><span style="top:-2.248em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.732em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.752em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9825em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">λ</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1771em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">12</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">12</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>例3：求质量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>，密度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ρ</mi></mrow><annotation encoding="application/x-tex">\rho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span></span></span></span>，半径为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>，厚度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>​的均质圆盘的转动惯量（转轴在中心且垂直）</p><p>解：将圆盘看成是很多垂直薄圆环（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">V_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）组成</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>J</mi><mo>=</mo><mi>d</mi><mi>m</mi><mo>⋅</mo><msup><mi>r</mi><mn>2</mn></msup><mo>=</mo><msup><mi>r</mi><mn>2</mn></msup><mo>⋅</mo><mi>ρ</mi><mo>⋅</mo><msub><mi>V</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">dJ=dm\cdot r^{2}=r^{2}\cdot \rho \cdot V_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">dJ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>又因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>0</mn></msub><mo>=</mo><mi>h</mi><mo>⋅</mo><mi>S</mi><mo>=</mo><mi>h</mi><mo>⋅</mo><mn>2</mn><mi>π</mi><mi>r</mi><mo>⋅</mo><mi>d</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">V_{0}=h\cdot S=h\cdot 2\pi r\cdot dr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mi>R</mi></msubsup><msup><mi>r</mi><mn>2</mn></msup><mo>⋅</mo><mi>ρ</mi><mo>⋅</mo><mi>h</mi><mo>⋅</mo><mn>2</mn><mi>π</mi><mi>r</mi><mo>⋅</mo><mi>d</mi><mi>r</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>π</mi><msup><mi>R</mi><mn>4</mn></msup><mi>h</mi><mo>⋅</mo><mi>ρ</mi></mrow><annotation encoding="application/x-tex">J=\int _{0}^{R}r^{2}\cdot \rho\cdot h\cdot 2\pi r\cdot dr=\dfrac{1}{2}\pi R^{4}h\cdot \rho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3921em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0362em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span></span></span></span></p><p>又因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><mi>ρ</mi><mi>V</mi></mrow><annotation encoding="application/x-tex">m=\rho V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J=\dfrac{1}{2}mR^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p></li></ul><p>（计算中可以随便设未知量，最后一般都可以消掉）</p><h2 id="平行轴定理">平行轴定理</h2><p>把转轴由质心轴平移 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span>  ，新的转动惯量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><msub><mi>J</mi><mn>0</mn></msub><mo>+</mo><mi>m</mi><msup><mi>d</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J=J_{0}+md^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><p>例：把圆柱的转轴移到边上</p><p>绕质心：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mi>c</mi></msub><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J_{c}=\dfrac{1}{2}mR^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>绕边缘：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mi>z</mi></msub><mo>=</mo><msub><mi>J</mi><mi>c</mi></msub><mo>+</mo><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>3</mn><mn>2</mn></mfrac></mstyle><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J_{z}=J_{c}+mR^{2}= \dfrac{3}{2}mR^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p></li></ul><h2 id="垂直轴定理">垂直轴定理</h2><p>若我们要求一个刚体薄片关于一条与其垂直的轴的转动惯量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">J_{z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，则可以在薄片上取两个互相垂直且与垂直轴相交的轴并分别计算薄片关于这两条轴的转动惯量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">J_{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">J_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>，有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mi>z</mi></msub><mo>=</mo><msub><mi>J</mi><mi>x</mi></msub><mo>+</mo><msub><mi>J</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">J_{z}=J_{x}+J_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></p><h2 id="伸展定理">伸展定理</h2><p>如果将一个物体的任何一点，平行地沿着一支直轴作任意大小的位移，则此物体对此轴的转动惯量不变</p><h2 id="力矩">力矩</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mi>F</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M=FR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">FR</span></span></span></span>（用手拨动转盘产生力矩）</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mi>J</mi><mi>α</mi></mrow><annotation encoding="application/x-tex">M=J\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>（力矩与转动惯量与角加速度的关系，用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>=</mo><mi>m</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">F=ma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ma</span></span></span></span> 理解）</p><p>两边同时对时间积分：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mi>m</mi><mi>a</mi><mo>⋅</mo><mi>R</mi><mi>d</mi><mi>t</mi><mo>=</mo><mo>∫</mo><mi>J</mi><mi>α</mi><mi>d</mi><mi>t</mi><mo>⇒</mo><mi>m</mi><mi>v</mi><mi>R</mi><mo>=</mo><mi>J</mi><mi>ω</mi></mrow><annotation encoding="application/x-tex">\int ma\cdot Rdt=\int J\alpha dt\Rightarrow mvR=J\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.3061em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ma</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.3061em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span>​​（小虫一瞬间跳走）</p><ul><li><p>例1：定滑轮两边用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">F_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">F_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 两个力拉，求滑轮的切线加速度</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>J</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>M</mi><mo>=</mo><msub><mi>F</mi><mn>2</mn></msub><mi>R</mi><mo>−</mo><msub><mi>F</mi><mn>1</mn></msub><mi>R</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>M</mi><mo>=</mo><mi>J</mi><mi>α</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}J=\dfrac{1}{2}mR^{2}\\  M=F_{2}R-F_{1}R\\  M=J\alpha \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8874em;vertical-align:-2.1937em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-1.9em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.892em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.616em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.616em' style='width:0.8889em' viewBox='0 0 888.89 616' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V616 H384z M384 0 H504 V616 H384z'/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.616em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.616em' style='width:0.8889em' viewBox='0 0 888.89 616' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V616 H384z M384 0 H504 V616 H384z'/></svg></span></span><span style="top:-4.9em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6937em;"><span style="top:-4.6937em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.9997em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-1.5597em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1937em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo><mi>α</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><msub><mi>F</mi><mn>2</mn></msub><mi>R</mi><mo>−</mo><msub><mi>F</mi><mn>1</mn></msub><mi>R</mi></mrow><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\Rightarrow \alpha =\dfrac{F_{2}R-F_{1}R}{\dfrac{1}{2}mR^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.2578em;vertical-align:-1.8974em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.5514em;"><span class="pstrut" style="height:3.3214em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.9984em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8974em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>t</mi></msub><mo>=</mo><mi>α</mi><mi>R</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mn>2</mn><msub><mi>F</mi><mn>2</mn></msub><mi>R</mi><mo>−</mo><mn>2</mn><msub><mi>F</mi><mn>1</mn></msub><mi>R</mi></mrow><mrow><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow></mfrac></mstyle><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mn>2</mn><msub><mi>F</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn><msub><mi>F</mi><mn>1</mn></msub></mrow><mrow><mi>m</mi><mi>R</mi></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">a_{t}=\alpha R=\dfrac{2F_{2}R-2F_{1}R}{mR^{2}}=\dfrac{2F_{2}-2F_{1}}{mR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li><li><p>例2：定滑轮两边挂着 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">m_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">m_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​​ 两个物块，求释放后物块加速度</p><p>​</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>−</mo><msub><mi>m</mi><mn>1</mn></msub><mi>g</mi><mo>=</mo><msub><mi>m</mi><mn>1</mn></msub><msub><mi>a</mi><mi>t</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>m</mi><mn>2</mn></msub><mi>g</mi><mo>−</mo><msub><mi>T</mi><mn>2</mn></msub><mo>=</mo><msub><mi>m</mi><mn>2</mn></msub><msub><mi>a</mi><mi>t</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>M</mi><mo>=</mo><mrow><mo fence="true">(</mo><msub><mi>T</mi><mn>2</mn></msub><mo>−</mo><msub><mi>T</mi><mn>1</mn></msub><mo fence="true">)</mo></mrow><mi>R</mi><mo>=</mo><mi>J</mi><mi>α</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>J</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mi>t</mi></msub><mo>=</mo><mi>R</mi><mi>α</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}T_{1}-m_{1}g=m_{1}a_{t}\\  m_{2}g-T_{2}=m_{2}a_{t}\\  M=\left( T_{2}-T_{1}\right) R=J\alpha \\  J=\dfrac{1}{2}mR^{2}\\  a_{t}=R\alpha \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.8em;vertical-align:-3.65em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.15em;"><span style="top:-1.366em;"><span class="pstrut" style="height:4.116em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.358em;"><span class="pstrut" style="height:4.116em;"></span><span style="height:2.116em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='2.116em' style='width:0.8889em' viewBox='0 0 888.89 2116' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V2116 H384z M384 0 H504 V2116 H384z'/></svg></span></span><span style="top:-4.116em;"><span class="pstrut" style="height:4.116em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-5.258em;"><span class="pstrut" style="height:4.116em;"></span><span style="height:2.116em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='2.116em' style='width:0.8889em' viewBox='0 0 888.89 2116' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V2116 H384z M384 0 H504 V2116 H384z'/></svg></span></span><span style="top:-7.366em;"><span class="pstrut" style="height:4.116em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.65em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.1337em;"><span style="top:-6.4472em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.0072em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.5672em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-1.8137em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-0.1197em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.6337em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li></ul><h1 id="电场强度">电场强度</h1><h2 id="点电荷电场强度">点电荷电场强度</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>E</mi><mo stretchy="true">→</mo></mover><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>4</mn><mi>π</mi><msub><mi>ε</mi><mn>0</mn></msub></mrow></mfrac></mstyle><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>q</mi><msup><mi>r</mi><mn>2</mn></msup></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\overrightarrow{E}=\dfrac{1}{4\pi \varepsilon _{0}}\dfrac{q}{r^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2053em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2053em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span><span class="svg-align" style="top:-3.6833em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1574em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h2 id="积分类电场强度（微元法）">积分类电场强度（微元法）</h2><ul><li><p>例1：无限长带电直线，单位长度带电量为 $\eta $</p><p>取线元 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span> ，带电 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>q</mi><mo>=</mo><mi>η</mi><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">dq=\eta dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>E</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>4</mn><mi>π</mi><msub><mi>ε</mi><mn>0</mn></msub></mrow></mfrac></mstyle><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>η</mi><mi>d</mi><mi>x</mi></mrow><msup><mi>r</mi><mn>2</mn></msup></mfrac></mstyle></mrow><annotation encoding="application/x-tex">dE=\dfrac{1}{4\pi \varepsilon _{0}}\dfrac{\eta dx}{r^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2074em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">dE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span>​ 投影到两个坐标轴上</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><msub><mi>E</mi><mi>x</mi></msub><mo>=</mo><mi>d</mi><mi>E</mi><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>E</mi><mi>y</mi><mo>=</mo><mi>d</mi><mi>E</mi><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}dE_{x}=dE\cos \theta  \\  dEy=dE\sin\theta \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>把 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 都换成用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span> 表示</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>R</mi><mi>x</mi></mfrac></mstyle><mo>=</mo><mi>tan</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>π</mi><mo>−</mo><mi>θ</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>r</mi><mn>2</mn></msup><mo>=</mo><msup><mi>R</mi><mn>2</mn></msup><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}\dfrac{R}{x}=\tan \left( \pi -\theta \right) \\  r^{2}=R^{2}+x^{2}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.5em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.492em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.016em' style='width:0.8889em' viewBox='0 0 888.89 16' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V16 H384z M384 0 H504 V16 H384z'/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.016em' style='width:0.8889em' viewBox='0 0 888.89 16' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V16 H384z M384 0 H504 V16 H384z'/></svg></span></span><span style="top:-4.3em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9932em;"><span style="top:-3.9932em;"><span class="pstrut" style="height:3.3603em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.2992em;"><span class="pstrut" style="height:3.3603em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4932em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>然后从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span>​ 积分</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>E</mi><mi>x</mi></msub><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>E</mi><mi>y</mi></msub><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>η</mi><mrow><mn>2</mn><mi>π</mi><msub><mi>ε</mi><mn>0</mn></msub><mi>R</mi></mrow></mfrac></mstyle></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}E_{x}=0\\  E_{y}=\dfrac{\eta }{2\pi \varepsilon _{0}R}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.5em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.492em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.016em' style='width:0.8889em' viewBox='0 0 888.89 16' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V16 H384z M384 0 H504 V16 H384z'/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.016em' style='width:0.8889em' viewBox='0 0 888.89 16' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V16 H384z M384 0 H504 V16 H384z'/></svg></span></span><span style="top:-4.3em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9418em;"><span style="top:-4.0413em;"><span class="pstrut" style="height:3.1076em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-2.5018em;"><span class="pstrut" style="height:3.1076em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4418em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204151737942.jpg" alt=""></p></li></ul><h1 id="核心词汇">核心词汇</h1><table><thead><tr><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>Scalar</td><td>标量</td></tr><tr><td>Vector</td><td>矢量</td></tr><tr><td>The  motion function</td><td>运动方程</td></tr><tr><td>Position  vector</td><td>位矢</td></tr><tr><td>Displacement</td><td>位移</td></tr><tr><td>Velocity</td><td>速度</td></tr><tr><td>Acceleration</td><td>加速度</td></tr><tr><td>Instantaneous  velocity</td><td>瞬时速度</td></tr><tr><td>Momentum</td><td>动量</td></tr><tr><td>Impulse</td><td>冲量</td></tr><tr><td>Impulse-moment  theorem</td><td>动量定理</td></tr><tr><td>Conservation  of momentum</td><td>动量守恒</td></tr><tr><td>(in)elastic  collision</td><td>(非)弹性碰撞</td></tr><tr><td>Center  of mass</td><td>质心</td></tr><tr><td>Work</td><td>功</td></tr><tr><td>Work energy  Theorem</td><td>动能定理</td></tr><tr><td>Potential/Kinetic Energy</td><td>势/动能</td></tr><tr><td>Mechanical energy</td><td>机械能</td></tr><tr><td>(non)conservative force</td><td>(非)保守力</td></tr><tr><td>Power</td><td>功率</td></tr><tr><td>equilibrium</td><td>平衡</td></tr><tr><td>Rotation</td><td>转动</td></tr><tr><td>Translational</td><td>平动的</td></tr><tr><td>Rigid body</td><td>刚体</td></tr><tr><td>Radian/degree</td><td>弧度rad/度°</td></tr><tr><td>Revolution (rev/min=rpm)</td><td>转 (转每分)</td></tr><tr><td>Angular displacement</td><td>角位移</td></tr><tr><td>Angular velocity/acceleration</td><td>角速度/角加速度</td></tr><tr><td>Torque</td><td>力矩</td></tr><tr><td>Parallel-axis  theorem</td><td>平行轴定理</td></tr><tr><td>Rotational  kinetic energy</td><td>转动动能</td></tr><tr><td>(counter)clockwise</td><td>逆时针/顺时针方向</td></tr><tr><td>pulley</td><td>滑轮</td></tr><tr><td>angular momentum</td><td>角动量</td></tr><tr><td>Conservation  of Angular Momentum</td><td>角动量守恒</td></tr><tr><td>Electricity</td><td>电学</td></tr><tr><td>Electric  charge</td><td>电荷</td></tr><tr><td>Electrostatic/Electrostatics</td><td>静电的/静电学</td></tr><tr><td>Point charge</td><td>点电荷</td></tr><tr><td>Electric dipole (moment)</td><td>电偶极子(电偶极矩)</td></tr><tr><td>Linear(surface) charge density</td><td>线(面)电荷密度</td></tr><tr><td>Coulomb</td><td>库仑</td></tr><tr><td>(electric) field</td><td>(电)场</td></tr><tr><td>Electron/Proton</td><td>电子/质子</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 大学物理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『Others』第三届字节跳动青训营 - 后端专场 早知晓直播会议纪要</title>
      <link href="/2022/04/10/%E3%80%8EOthers%E3%80%8F%E7%AC%AC%E4%B8%89%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5-%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA-%E6%97%A9%E7%9F%A5%E6%99%93%E7%9B%B4%E6%92%AD%E4%BC%9A%E8%AE%AE%E7%BA%AA%E8%A6%81/"/>
      <url>/2022/04/10/%E3%80%8EOthers%E3%80%8F%E7%AC%AC%E4%B8%89%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5-%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA-%E6%97%A9%E7%9F%A5%E6%99%93%E7%9B%B4%E6%92%AD%E4%BC%9A%E8%AE%AE%E7%BA%AA%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p><a href="https://live.juejin.cn/4354/youthcamp_3_preknow">直播/视频源地址</a></p><p><a href="https://juejin.cn/post/7083689789421682718">【第三届字节跳动青训营后端专场 Q&amp;A】</a></p><p><a href="https://juejin.cn/post/7083792721265033229">【第三届字节跳动青训营｜刷题打卡】DAY1</a></p></div></details><h1 id="青训营简介">青训营简介</h1><p>字节跳动的免费培训&amp;人才选拔项目</p><p>面向所有在校大学生</p><h1 id="后端开发-求值建议">后端开发 &amp; 求值建议</h1><h2 id="后端岗位定义、做什么、发展前景">后端岗位定义、做什么、发展前景</h2><p>后端（服务端），开发远程服务器上运行的程序，形容词：幕后大佬</p><p>字节后端的分类：业务端、中台（？）、基础组件、引擎端、基础架构支持</p><p>做什么：</p><ul><li>最终目标：服务好用户</li><li>后端更关注全体用户</li><li>保证稳定性（高可用性）、效率（业务可扩展性）</li><li>关注最终的用户体验，兜底方，对全局够了解</li></ul><p>发展前景：</p><ul><li>最近有很多负面新闻，但是大可不必担心</li><li>最近30年来互联网行业周期性变化，每次都走出来了</li><li>发展空间还很大</li><li><mark class="hl-label green">未来30年最好的行业还是互联网</mark> </li></ul><p>发展前景三个关键词：</p><ol><li>能力提升<br>个人硬实力与软实力（沟通）结合</li><li>核心作用<br>后端比底层更接近用户、比PM（？）更懂技术、比前端更有全局视角、比QA（？）更了解业务，能够全面地掌握所有信息，能基于此做出最全面的决策，是问题解决的核心角色，承担核心作用</li><li>适应性<br>后端适应性更强，后续发展的空间更大，更容易转到全栈，学习更多算法</li></ol><h2 id="怎么选岗位">怎么选岗位</h2><h3 id="后端与非后端">后端与非后端</h3><p>后端对计算机方面知识要求比较多，日常工作中挑战比较大</p><p>后端发展前景好，工作中有很强的满足感</p><h3 id="后端内部岗位细化">后端内部岗位细化</h3><p>有差异，但是差异不大基本目标相同，整个目标围绕高可用高吞吐，稳定性，更好地促进业务迭代，服务质量之类的</p><p>大可不必纠结细分邻域</p><h3 id="有这些区别要怎么选">有这些区别要怎么选</h3><p>兴趣第一导向，follow your heart</p><h2 id="实习的心路历程和建议">实习的心路历程和建议</h2><p>企业招聘，简历上有实现经历，更有利于人才的考察</p><p>常见误区：实习时间短，做不了太多牛逼的事情，没什么帮助</p><p>实际的实习时间是很有限的，做出一定的贡献和产出是很难的，如果要拿出一个很大的产出是有点不切实际的，更希望在实习的过程中体现个人素养，成长潜力</p><p>实习关注的三个点</p><ul><li>锻炼扎实的基础</li><li>保持旺盛的求知欲，举一反三的思考能力，充分学习熟悉环境，不要有太多心理负担</li><li>养成良好的责任心、负责精神</li></ul><p>Q1：没有时间实习的话会不会有竞争劣势？</p><p>有没有实习会有没实习的一套考察方式，有实习会有一套有实习的考查方式，不用太担心</p><p>Q2：时间非常多，要不要去很多公司刷实习经历？</p><p>没有必要如此频繁地切换实习的内容，很难做到在一件事情上有很深度的理解</p><p>建议时间充裕的话，在一个公司或一个方向上稳定专注地投入，加深理解</p><h2 id="简历及面试经验分享">简历及面试经验分享</h2><h3 id="简历">简历</h3><p>什么样的简历大概率是有面试的？</p><ul><li>有大厂实习经历（对履历进行背书）</li><li>获奖（主要是ACM或顶刊）</li><li>有创业经历（产品sence）、合作的开源项目（编程兴趣）、有深度的博客（定期储备知识、整理、分享的习惯）</li><li>历史面试中通过过两轮以上</li><li>内部人员推荐（团队内背书，有一定了解）</li></ul><p>什么样的简历会石沉大海？</p><ul><li><p>写很多的项目，但是通篇看下来，面试官不知道怎么提问（简历中没有可考察的知识点）<br>所以在写简历的时候，要简单地描述项目，重点在于你在项目里做什么，按照四大（star？）的法则去描述项目的难点，写清楚你面临的挑战以及解决方案，最好是把你用到的专业技能描述出来，这样面试官才能有针对性地进行提问 ，你也有针对性地准备这些问题的答案</p></li><li><p>专业技能的匹配度太低<br>有些人专职做数值算法（？）的然后投应用研发的岗位，面试官难以评估能力（不了解）</p></li><li><p>多次投递简历被拒，或有多次面试记录挂掉</p><p>提醒一定要准备好再投递，不要盲目投递</p></li></ul><h3 id="面试">面试</h3><p>换位思考：一个企业想要招到什么样的人</p><ul><li>初创公司：能力全面、动手能力强、干活非常快（招进来就能干活）</li><li>互联网大厂：对于应届生，公司完全有能力进行培养，这时候潜力就很重要</li></ul><p>所以问题就变成了：怎么在候选人中快速鉴别有潜力的同学</p><p>面试的过程就是打标签，技术方面的面试，3+1+1原则：</p><ul><li>3：三门基础课（编程语言、操作系统原理、计算机网络）</li><li>1：项目，在项目中涉及的技术点要做非常完备的学习<br>例：你在学校做了一个图书管理系统，可能面试官会问你图书的抄借（？）问题，然后由此引出数据库的锁或者是事务 ，然后引出分布式锁，然后分布式锁聊到 Redis，由 Redis 聊到一下主从一致性（？）或者持久化，它是一条知识链，你需要把问题研究地非常 深，在这个过程中展示知识广度和深度</li><li>1：数据结构与算法，对比八股文（看了就知道，没看就不知道），算法对潜力更有区分度，面试官能看出很多细节，比如面对问题怎么去思考、编码习惯怎么样，对编程语言是否足够熟练</li></ul><p>非技术部分（软素质）：</p><p>不要犯低级错误，研发过程要合作，例： 有一位同学聊到在校项目的时候，表示所有的项目都是他一个人搞的，其他人啥都没干，对组长和其他组员都表现出极大的不屑，也许他能力是真的很强，但是面试时要考察候选人的同理心，是否能合作，对自己的优势和劣势是否有充分的认知，然后责任心是否足够，这类软素质同样是重要的考察点</p><p>小技巧：刷面试题（应试教育产物但确实有效）</p><h2 id="工作氛围、工作日常">工作氛围、工作日常</h2><p>轻松开放平等，成就感强，有挑战性</p><p>数据驱动，关注对用户的价值的提升</p><p>要学会自己给自己提需求</p><p>非常要求解决问题的能力</p><p>（分享一本书：《成功人士的7个习惯》）</p><h1 id="青训营内容设计-学习建议">青训营内容设计 &amp; 学习建议</h1><p>特点：</p><ul><li><p>纯干货，不会有太多方法论或抽象的东西</p></li><li><p>接地气，不讲八股文，讲生产过程中遇到的实际问题，更能理解目前互联网业界面临的挑战是怎么样的，这些奇妙的设计、解决方案是怎么样设计出来的</p></li><li><p>领先性，介绍业界现在最领先、最优解的做法，尽量不去复述网上的博客，拿着10年前的解决方案给大家讲，因此不会讲太多基础的语言学习</p></li><li><p>一课一练，巩固知识</p></li></ul><p>模块：</p><ul><li>语言篇，快速回顾语言，教会怎样对性能进行调优，怎样发现问题，怎么进行高质量的编程</li><li>部署篇，温习计算机网络的知识，了解目前互联网的基础设施是怎样的 ，例：你可能听过一个面试八股文：从浏览器里敲下www.baidu.com输入回车的时候到底发生了什么，在这个课程里会了解这个八股文的全新版本，同时学习团队开放，部署的基础流程有哪些，手把手地教你把上一个章节的服务放到公网上</li><li>架构篇，揭开一堆名称的神秘面纱，再也不会被一些高大上的词忽悠，对架构会有基础的设计和判断能力</li><li>中间件（？）和存储，在各个业务场景中怎么去选择存储，怎么去使用，背后的原理是什么，甚至自己去写一个小的存储</li><li>最后的大项目</li></ul><p>师资团队：</p><p>这个不用说了，非常豪华</p><p>主要语言：</p><p>Golang（为什么不是 Java？见《名词王国里的死刑》）</p><p>课程期望：</p><p>回望过去的项目，感叹之前写的都是hello world</p><h1 id="互动答疑">互动答疑</h1><p>Q：参加不了ACM之类的比赛怎么办</p><p>A：没有关系，面试的时候都是公平的，当场考察算法能力</p><p>Q：实习时期？</p><p>A：本科建议好好学习，不要大二就出来实习了，研究生只要导师同意就行，然后实习时间不要太短，至少要3个月</p><p>Q：女生？</p><p>A：女生也有很多，比例正常，性别没有突出优势，面试上人人平等</p><p>Q：参加算法比赛对简历有提升吗？</p><p>A：获奖经历会影响简历能否通过筛选，但是到了面试人人平等，看中实际的编码能力，即使一个人拿过ACM国奖，结果面试的时候很简单的问题写不出来，换一道题还是写不出来，这时面试官就会怀疑简历作假，所以重要的是你的能力，而不是你的这些奖</p><p>Q：字节跳动用啥微服务的框架？</p><p>A：kitex，已开源原视频在1:14:36，专有名称太多不记了</p><p>…</p><p>（后面有点水，从原视频1小时后都是互动答疑，可以自己看）</p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
          <category> 字节跳动-3rd-后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（九）汇总数据</title>
      <link href="/2022/04/08/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E6%B1%87%E6%80%BB%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/04/08/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E6%B1%87%E6%80%BB%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="聚集数据">聚集数据</h1><p>我们经常需要汇总数据而不用把它们实际检索出来，这种例子有很多：</p><ul><li><p>确定表中行数（或满足某个条件或包含某个特定值的行数）</p></li><li><p>获取表中某些行的和</p></li><li><p>找出表列（或某些特定行）的最大值、最小值、平均值</p></li></ul><p>以上例子 <mark class="hl-label green">都需要汇总出表中的数据，而不需要查出数据本身</mark> ，为此 SQL 提供了 5 个<code>聚集函数（aggregate function）</code></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>AVG()</code></td><td>某列的平均值</td></tr><tr><td><code>COUNT()</code></td><td>某列的行数</td></tr><tr><td><code>MAX()</code></td><td>某列的最大值</td></tr><tr><td><code>MIN()</code></td><td>某列的最小值</td></tr><tr><td><code>SUM()</code></td><td>某列之和</td></tr></tbody></table><p>与上一篇中的数据处理函数不同，聚集函数在主要 SQL 实现中得到了相当一致的支持</p><h2 id="AVG-函数"><code>AVG()</code> 函数</h2><p><code>AVG()</code> 用于返回 <mark class="hl-label green">平均值</mark> ，它可以返回所有列的平均值，也可以返回特定行或列的平均值</p><p>下面是一个基本例子，返回 Products 表中所有产品的平均价格</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082234394.jpg" alt=""></p><p>正如上文所说，<code>AVG()</code> 也可以返回特定部分的平均值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span>  vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082238580.jpg" alt=""></p><p>这一条语句与上面的不同在于，它包含了 <code>WHERE</code> 子句，只过滤出了 <code>vend_id</code> 为 <code>DLL01</code> 的产品，因此求得的平均值只是该供应商的产品的价格平均值</p><details class="toggle" ><summary class="toggle-button" style="">注意：只用于单个列</summary><div class="toggle-content"><p><code>AVG()</code> 只能用来确定单个特定数列的平均值，而且列名必须作为函数参数给出。为获得多个列的平均值，必须使用多个 <code>AVG()</code> 函数。只有一个例外是要从多个列计算出一个值时，这本篇后面会讲到</p></div></details><details class="toggle" ><summary class="toggle-button" style="">说明：NULL 值</summary><div class="toggle-content"><p><code>AVG()</code> 函数忽略列值为 <code>NULL</code> 的行</p></div></details><h2 id="COUNT-函数"><code>COUNT()</code> 函数</h2><p><code>COUNT()</code> 函数进行 <mark class="hl-label green">行的计数</mark> ，可以确定表中行的数目或符合特定条件的行的数目</p><p>两种功能对应到两种使用方法：</p><ul><li>使用 <code>COUNT(*)</code> 求得所有行的数目，不管列中包含的是空值（<code>NULL</code>）还是非空值</li><li>使用 <code>COUNT(column)</code> 对特定列中具有值的进行计数，忽略 <code>NULL</code> 值</li></ul><p>下面的例子返回 <code>Customers</code> 表中顾客的总数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_cust </span><br><span class="line"><span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082257080.jpg" alt=""></p><p>下面的例子只对留了电子邮件地址的客户计数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(cust_email) <span class="keyword">AS</span> num_cust </span><br><span class="line"><span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082259839.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">说明：NULL 值</summary><div class="toggle-content"><p>再次重复：如果不指定列表则不忽略，如果指定了列名则会忽略</p></div></details><h2 id="MAX-MIN-函数"><code>MAX() </code> /  <code>MIN()</code> 函数</h2><p>跟字面意思一样，<code>MAX()</code> 或 <code>MIN()</code>函数用于返回 <mark class="hl-label green">最大值或最小值</mark> ，并要求指定列名，例如下面的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(prod_price) <span class="keyword">AS</span> max_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(prod_price) <span class="keyword">AS</span> max_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082314812.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">注意：对非数值数据使用</summary><div class="toggle-content"><p>虽然这两个函数一般用于找出最大或最小的数值或日期值，但许多（并非所有） DBMS 运行使用它们处理文本列，这时将会返回该列排序后的首行或尾行</p></div></details><details class="toggle" ><summary class="toggle-button" style="">说明：NULL 值</summary><div class="toggle-content"><p>这两个函数忽略列值为 <code>NULL</code> 的行</p></div></details><h2 id="SUM-函数"><code>SUM()</code> 函数</h2><p><code>SUM()</code> 函数用来返回 <mark class="hl-label green">指定列的和</mark> </p><p>举一个例子， <code>OrderItems</code> 表包含订单中实际的物品，每个物品都有相应的数量，现在检索 20005 号订单的货物总数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(quantity) <span class="keyword">AS</span> items_ordered</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082328545.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082328560.jpg" alt=""></p><p>对照表中数据，可以看见并没有错误</p><p><code>SUM()</code> 也可以用来合计计算值，在下面的例子中，合计每项物品的<code>item_price*quantity</code>，得出订单总金额</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(item_price <span class="operator">*</span> quantity) <span class="keyword">AS</span> total_price</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082331212.jpg" alt=""></p> <details class="toggle" ><summary class="toggle-button" style="">说明：NULL 值</summary><div class="toggle-content"><p><code>SUM()</code> 函数忽略列值为 <code>NULL</code> 的行</p></div></details><h1 id="聚集不同值">聚集不同值</h1><blockquote><p>这个功能本人感觉说大白话就是<mark class="hl-label green">去重然后再进行计算</mark> </p></blockquote><p>以上 5 个聚集函数都可以如下使用</p><ul><li>对所有行进行计算，指定 <code>ALL</code> 参数或不指定参数（因为这是默认项）</li><li>只包含不同的值，指定 <code>DISTINCT</code> 参数</li></ul><p>例如下面的例子，在去重后再求平均值，发现平均价格升高，因为有多个物品具有相同的较低价格</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(<span class="keyword">DISTINCT</span> prod_price ) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082343558.jpg" alt=""></p> <details class="toggle" ><summary class="toggle-button" style="">注意：DISTINCT 不能用于 COUNT(*)</summary><div class="toggle-content"><p><code>DISTINCT</code> 必须使用列名，故不能用于 <code>COUNT(*)</code> ，类似地也不能用于计算或表达式</p></div></details> <details class="toggle" ><summary class="toggle-button" style="">说明：其他聚集函数</summary><div class="toggle-content"><p>处理这里的 <code>ALL</code> 和 <code>DISTINCT</code> 外，有的 DBMS 还支持其他参数，例如对查询结果的子集进行计算的 <code>TOP</code> 和 <code>TOP PERCENT</code> ，详情请参阅相应的文档</p></div></details><h1 id="组合聚集函数">组合聚集函数</h1><p>目前为止的所有聚集函数例子都只涉及单个函数，但实际上，<code>SELECT</code> 语句可以根据需要包含多个聚集函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_items,</span><br><span class="line">       <span class="built_in">MIN</span>(prod_price) <span class="keyword">AS</span> price_min,</span><br><span class="line">       <span class="built_in">MAX</span>(prod_price) <span class="keyword">AS</span> price_max,</span><br><span class="line">       <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> price_avg</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082356846.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（八）使用函数处理数据</title>
      <link href="/2022/04/07/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/04/07/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-中的函数">SQL 中的函数</h1><p>同许多编程语言一样，SQL 中也有函数</p><p>但有一个很重要的问题，每一个 DBMS 都有特定的函数，事实上，只有少数几个函数被所有主要 DBMS 同等地支持</p><p>下表很明显地体现了这一区别</p><table><thead><tr><th>函数</th><th>语法</th></tr></thead><tbody><tr><td>提前字符串的组成部分</td><td>DB2、Oracle、PostgreSQL 和 SQLite 使用 <code>SUBSTR()</code>；MariaDB、MySQL 和 SQL Server 使用 <code>SUBSTRING()</code></td></tr><tr><td>数据类型转换</td><td>Oracle 使用多个函数，每种类型的转换有一个函数（听上去和 C/C++ 差不多？）；DB2 和 PostgreSQL 使用 <code>CAST()</code>；MariaDB、MySQL和 SQL Server 使用 <code>CONVERT()</code></td></tr><tr><td>取当前日期</td><td>DB2 和 PostgreSQL 使用 <code>CURRENT_DATE</code>；MariaDB 和 MySQL 使用 <code>CURDATE()</code>；Oracle 使用 <code>SYSDATE()</code>；SQL Server 使用 <code>GETDATE()</code>；SQLite 使用 <code>DATE()</code></td></tr></tbody></table><p>可以看到，SQL 函数是 <mark class="hl-label red">不可移植的</mark> ，这意味着为特定 DBMS 编写的代码在其他 DBMS 中可能不可用</p><p>为了代码的可移植性，许多 SQL 程序员不赞成使用这些函数，当然缺点也是显而易见的</p><details class="toggle" ><summary class="toggle-button" style="">提示：是否应该使用函数？</summary><div class="toggle-content"><p>现在，你面临是否应该使用函数的选择。决定权在你，使用或是不使用也没有对错之分。如果你决定使用函数，应该保证做好代码注释，以便以后你或其他人能确切地知道这些 SQL 代码的含义</p></div></details><h1 id="使用函数">使用函数</h1><h2 id="文本处理函数">文本处理函数</h2><p>在上一篇中，已经使用过 <code>CONCAT()</code> 函数，下面是另一个例子，使用的是 <code>UPPER()</code> 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, <span class="built_in">UPPER</span>(vend_name) <span class="keyword">AS</span> vend_name_up</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name ;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204071938584.jpg" alt=""></p><p>左右对比可以看到，<code>UPPER()</code> 将文本转换为大写</p><details class="toggle" ><summary class="toggle-button" style="">提示：大写、小写、大小写混合</summary><div class="toggle-content"><p>此时你应该已经知道 SQL 函数不区分大小写，因此 <code>upper()</code>，<code>UPPER()</code>，<code>Upper()</code> 都可以。随你的喜好，不过注意风格一致，不用变来变去，否则你写的代码就不好读了</p></div></details><p>下表是一些常用的文本处理函数</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>SUBSTR()</code> 或是 <code>SUBSTRING()</code></td><td>提取子字符串</td></tr><tr><td><code>LENGTH()</code>（<code>DATALENGTH()</code> 或 <code>LEN()</code>）</td><td>返回字符串长度</td></tr><tr><td><code>LOWER()</code> 和 <code>UPPER()</code></td><td>转换为大/小写</td></tr><tr><td><code>LTRIM()</code>、<code>RTRIM()</code> 和 <code>TRIM()</code></td><td>去除字符串左/右/两边的空格</td></tr><tr><td><code>SOUNDEX()</code></td><td>返回字符串的 <code>SOUNDEX</code> 值</td></tr></tbody></table><p>其中 <code>SOUNDEX</code> 需要做进一步解释，<mark class="hl-label green">SOUNDEX是一个将任何文本字符串转换为描述其语音表示的字母数学模式的算法，它考虑了类似的发音字符和音节，使得能对字符串进行发音比较而不是字母比较</mark> （是不是听上去很高级？）</p><p>虽然 <code>SOUNDEX</code> 不是 SQL 的概念，但是多数 DBMS 都提供对 <code>SOUNDEX</code> 的支持</p><p>下面给出一个例子：<code>Customsers</code> 表中有一个客户 <code>Kids Place</code> 联系名为 <code>Michelle Green</code>，当然这是一个拼写错误，正确的应为 <code>Michele Green</code>，该怎么办呢？显然，直接搜索肯定不会返回数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name , cust_contact  </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_contact <span class="operator">=</span> <span class="string">&#x27;Michael Green&#x27;</span>;</span><br></pre></td></tr></table></figure><p>但是如果使用 <code>SOUNDEX()</code> 函数进行搜索，它匹配所有发音类似于 <code>Michele Green</code> 的联系名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name , cust_contact  </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> SOUNDEX(cust_contact) <span class="operator">=</span> SOUNDEX(<span class="string">&#x27;Michael Green&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204072015850.jpg" alt=""></p><p>可以看见，因为发音相似，两者的 <code>SOUNDEX</code> 值匹配，所以这次正确过滤出了所需的数据</p><h2 id="日期与时间处理函数">日期与时间处理函数</h2><p>日期和时间采用相应的数据类型存储在表中，每种 DBMS 都有自己的特殊形式。日期和时间值以特殊的格式存储，以便能快速和有效地排序或过滤，并节省物理存储空间</p><p>也就因为如此，日期和时间的可移植性最差（悲）</p><p>下表总结了一些最重要的 MySQL 内置日期函数</p><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>NOW()</code></td><td style="text-align:left">返回当前日期和时间。</td></tr><tr><td style="text-align:left"><code>CURDATE()</code></td><td style="text-align:left">返回当前日期。</td></tr><tr><td style="text-align:left"><code>CURTIME()</code></td><td style="text-align:left">返回当前时间</td></tr><tr><td style="text-align:left"><code>DATE()</code></td><td style="text-align:left">提取日期或日期时间表达式的日期部分。</td></tr><tr><td style="text-align:left"><code>DAY()</code></td><td style="text-align:left">返回月份中的一天（0-31）。</td></tr><tr><td style="text-align:left"><code>DAYNAME()</code></td><td style="text-align:left">返回工作日的名称。</td></tr><tr><td style="text-align:left"><code>MONTH()</code></td><td style="text-align:left">返回经过日期（1-12）的月份。</td></tr><tr><td style="text-align:left"><code>MONTHNAME()</code></td><td style="text-align:left">返回月份的名称。</td></tr><tr><td style="text-align:left"><code>YEAR()</code></td><td style="text-align:left">返回年份。</td></tr><tr><td style="text-align:left"><code>DATE_FORMAT()</code></td><td style="text-align:left">以其他格式显示日期和时间值。</td></tr><tr><td style="text-align:left"><code>EXTRACT()</code></td><td style="text-align:left">提取日期的一部分。</td></tr><tr><td style="text-align:left"><code>DATE_ADD()</code></td><td style="text-align:left">将指定的时间值（或间隔）添加到日期值。</td></tr><tr><td style="text-align:left"><code>DATE_SUB()</code></td><td style="text-align:left">从日期值中减去指定的时间值（或间隔）。</td></tr><tr><td style="text-align:left"><code>DATEDIFF()</code></td><td style="text-align:left">返回两个日期之间的天数</td></tr></tbody></table><h2 id="数值处理函数">数值处理函数</h2><p>数值处理函数仅处理数值数据，这些函数一般用于代数、三角或几何运算，因此不像字符串或日期时间函数使用地那么频繁</p><p>但实际上，在主要的 DBMS 中，数值函数是最一致的，下面是一些基本函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>ABS()</code></td><td>求绝对值</td></tr><tr><td><code>COS()/SIN()</code></td><td>正/余弦</td></tr><tr><td><code>EXP()</code></td><td>返回一个数的指数值</td></tr><tr><td><code>PI()</code></td><td>返回pi的值</td></tr><tr><td><code>SQRT()</code></td><td>开根号</td></tr><tr><td><code>TAN()</code></td><td>正切</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（七）创建计算字段</title>
      <link href="/2022/04/06/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E5%88%9B%E5%BB%BA%E8%AE%A1%E7%AE%97%E5%AD%97%E6%AE%B5/"/>
      <url>/2022/04/06/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E5%88%9B%E5%BB%BA%E8%AE%A1%E7%AE%97%E5%AD%97%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是计算字段">什么是计算字段</h1><p>很多时候，我们所需要的并不直接是表中的数据</p><p>例如，表中存储着每种物品的价格和数量，但是实际需要的是每种物品的总价格</p><p>诚然，你可以新建一个字段（列）保存总价，每次手动计算保存，但是很明显有更好的方法</p><p>那就是在输出的时候虚拟出一个总价字段，值是价格乘以数量，这就是计算字段</p><details class="toggle" ><summary class="toggle-button" style="">字段（field）</summary><div class="toggle-content"><p>基本上与列（column）的意思相同，经常互换使用，不过数据库列一般称为列，而字段这个术语通常在计算字段这种场合下使用</p></div></details><p>需要注意的是，<mark class="hl-label green">只有数据库知道SELECT语句中哪些列是实际的表列，哪些是虚拟的计算字段。从客户端（如应用程序）来看，计算字段与其他列是一模一样的</mark> </p><p>当然，你也可以在客户端服务器上计算总价，但是在数据库服务器上完成这些工作一般要快得多</p><h1 id="拼接字段">拼接字段</h1><p><code>Vendors</code> 表包含<code>供应商名（vend_name）</code>和<code>地址信息（vend_country）</code>，现在需要做一个报表，在一列中返回这两个信息，并且要把地址用括号括起来</p><p>解决方法是把两个列拼接起来，在 <code>SQL Server</code> 中，应该使用操作符加号（<code>+</code>），在 <code>DB2</code> 、 <code>Oracle</code> 、 <code>PostgreSQL</code> 和 <code>SQLite</code> 中，应该使用两个竖杠（<code>||</code>），而在 <code>MySQL</code> 和 <code>MariaDB</code> 中，必须使用函数<code>Concat()</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(vend_name ,<span class="string">&#x27;(&#x27;</span> , vend_country , <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name ;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204062121469.jpg" alt=""></p><h1 id="使用别名">使用别名</h1><p>从前面的输出可以看见，<code>SELECT</code>语句可以很好地拼接字段，但是这个新列的名字是什么呢？实际上并没有名字，它只是一个值。所以我们现在需要为它指定<code>别名（alias）</code>，这需要用到 <code>AS</code> 关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(vend_name ,<span class="string">&#x27;(&#x27;</span> , vend_country , <span class="string">&#x27;)&#x27;</span>) <span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name ;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204062126197.jpg" alt=""></p><p>这样，客户端就可以直接引用 <code>vend_title</code> 这个名字，就像一个实际的表列一样</p><details class="toggle" ><summary class="toggle-button" style="">说明：AS 通常可选</summary><div class="toggle-content"><p>在很多 DBMS 中，<code>AS</code> 关键字是可选的，不过最好使用它，这被视为一条最佳实践</p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：别名的其他用途</summary><div class="toggle-content"><p>别名还有其他用途，常见的用途包括在实践的表列名包含不合法的字符（如空格）时重新命名它，在原来的名字含混或容易误解时扩充它</p></div></details><details class="toggle" ><summary class="toggle-button" style="">注意：别名</summary><div class="toggle-content"><p>别名可以是一个单词，也可以是一个字符串。<mark class="hl-label green">如果是后者，字符串应该扩在引号中</mark> 。当你去别名的时候，<mark class="hl-label red">不应该使用表中实际的列名</mark> ，虽然这样也合法，但是许多 DBMS 实现不支持，可能会产生模糊的错误信息</p></div></details><details class="toggle" ><summary class="toggle-button" style="">说明：导出列</summary><div class="toggle-content"><p>别名有时候也会称为<code>导出列（derived column）</code>，不管怎么叫，它们所代表的是相同的东西</p></div></details><h1 id="执行算术计算">执行算术计算</h1><p>计算字段的另一常见用途是对检索出的数据进行算术计算</p><p>例如， <code>Orders</code> 表包含收到的所有订单，<code>OrderItems</code> 表包含每个订单中的各项物品，下面的语句检索订单号 20008 中的所有物品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id , quantity , item_price</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20008</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204062225651.jpg" alt=""></p><p>表中包含货物的数量和单价，我们可以利用公式算出总价</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id , quantity , item_price , quantity <span class="operator">*</span> item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20008</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204062229774.jpg" alt=""></p><p>和大多数编程语言一样，<code>SQL</code> 支持加减乘除和括号</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Others』网球球童必知必会</title>
      <link href="/2022/04/05/%E3%80%8EOthers%E3%80%8F%E7%BD%91%E7%90%83%E7%90%83%E7%AB%A5%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
      <url>/2022/04/05/%E3%80%8EOthers%E3%80%8F%E7%BD%91%E7%90%83%E7%90%83%E7%AB%A5%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="网球计分规则">网球计分规则</h1><p>由小到大，一场网球比赛的记分结构可分为 <code>分（point）</code>、<code>局（game）</code>、<code>盘（set）</code>、<code>场（match）</code></p><h2 id="一局中的计分">一局中的计分</h2><p>根据当前局的比分的不同，可分为 <code>常规局</code> 和 <code>平局决胜局</code></p><h3 id="常规局">常规局</h3><p>在一个常规局中，计分规则如下：</p><ul><li>无得分：<code>0</code></li><li>第一分：<code>15</code></li><li>第二分：<code>30</code></li><li>第三分：<code>40</code></li><li>第四分：本局结束</li></ul><p>但是若目前双方比分为<code>40:40</code>，则需要一方净胜对手两分后才算赢得这一局</p><h3 id="平局决胜局">平局决胜局</h3><p>在平分决胜局中，使用 0、1、2、3 分等来计分，首先赢得7分并净胜对手两分的一方赢得这一局</p><p>注意：</p><ul><li>如果是无占先制则不需要净胜两分</li><li>如果是双打，则改为抢十</li></ul><h2 id="一盘中的计分">一盘中的计分</h2><p>先赢得6局并净胜对手两局的一方赢得这一盘</p><p>若当前局的比分达到 <code>6:6</code>，则进入平分决胜局，俗称：<code>抢七</code></p><h2 id="一场中的计分">一场中的计分</h2><p>本次亚运会中，采用三盘两胜制</p><h1 id="换发球及换边问题（重要）">换发球及换边问题（重要）</h1><h2 id="换发球">换发球</h2><ul><li>每一局结束都换发球</li><li>决胜局中，轮到的那一方先发球，然后 2、3 球对面发，4、5 球再换（单数分结束后换发）</li></ul><h2 id="换边（同时运动员休息）">换边（同时运动员休息）</h2><ul><li><p>单数局结束后交换场地</p></li><li><p>决胜局中，每 6 分交换场地</p></li></ul><p>同时换发和换边时，球还是传向原来一侧 ，故常规局中，12 一边，34 一边， 56 一边…，在决胜局中</p><p>1，3，5，6，7，9，11，12，13，15，17，18，19，21…局结束后传球至另一边</p><h1 id="其他细节">其他细节</h1><p>待补充</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（六）使用通配符进行过滤</title>
      <link href="/2022/04/05/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%BD%BF%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4/"/>
      <url>/2022/04/05/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%BD%BF%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>这一节将记录如何使用 <code>LIKE</code> 操作符进行通配搜索，以便对数据进行复杂过滤</p><h1 id="LIKE-操作符"><code>LIKE</code> 操作符</h1><p>前面的大小比较，或者检查某个范围的值都是对于数字来说的</p><p>而使用 <code>LIKE</code> 加上 <code>通配符（wildcard）</code>可实现对于字符串的过滤</p><h2 id="百分号（-）通配符">百分号（<code>%</code>）通配符</h2><p>最常使用的通配符是百分号（<code>%</code>） ，<mark class="hl-label green">%表示任何字符出现任意次数</mark> </p><p>例如，下面找出所有以单词<code>Fish</code>起头的产品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id , prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;Fish%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204051038672.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">注意：区分大小写</summary><div class="toggle-content"><p><mark class="hl-label green">根据DBMS的不同及其配置，搜索是可以区分大小写的</mark> ，经过测试，在我这里它是不区分的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204051040919.jpg" alt=""></p></div></details><p>通配符可以在搜索模式的任意位置使用任意次数，例如下面使用两个通配符，它们位于模式的两端</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id , prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;%bean bag%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204051046132.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">说明：请注意后面所跟的空格</summary><div class="toggle-content"><p><mark class="hl-label red">有些DBMS会使用空格来填补字段的内容</mark> ，例如某列有 50 个字符，而存储的文本为 <code>Fish bean bag toy</code> （17个字符），则为填满该列需要在文本后附加 33 个空格。这样一来试图使用<code>'F%y'</code>就无法检索出该文本（虽然在我的 MySQL 中并不会这样）。诚然，你可以使用<code>'F%y%'</code>，但是更好的方法是<mark class="hl-label green">使用函数去除空格</mark> ，这种方法在后面会讲</p></div></details><h2 id="下划线（-）通配符">下划线（<code>_</code>）通配符</h2><p>另一个常用的的就是下划线（<code>_</code>），<mark class="hl-label green">它只匹配单个字符</mark> </p><details class="toggle" ><summary class="toggle-button" style="">说明：DB2 通配符</summary><div class="toggle-content"><p><code>DB2</code> 不支持通配符 <code>_</code></p></div></details><p>举一个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id , prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;__ inch teddy bear&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204051102145.jpg" alt=""></p><p>因为规定了是两个字符，所以 <code>8 inch teddy bear</code> 并没有被匹配，你可以替换成<code>%</code>来对比一下不同的效果</p><h2 id="方括号（-）通配符">方括号（<code>[]</code>）通配符</h2><p>这东西我感觉是从正则表达式里面拿过来的，作用是<mark class="hl-label green">对一个位置指定一个匹配字符集</mark> </p><details class="toggle" ><summary class="toggle-button" style="">说明：并不总是支持集合</summary><div class="toggle-content"><p>并不是所有的DBMS都支持创建集合<code>[]</code>，微软的 <code>SQL Server</code> 支持这一写法，<mark class="hl-label red">但包括我使用的MySQL在内，Oracle，DB2，SQLite都不支持</mark></p></div></details><p>例如，要找出所有以 J 或 M 开头的联系人，可进行如下查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_contact <span class="keyword">LIKE</span> <span class="string">&#x27;[JM]%&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_contact ;</span><br></pre></td></tr></table></figure><p>因为我这里不支持这种语法，我就不贴图了</p><p>和正则表达式中的一样，可以使用脱字符（<code>^</code>）来否定，例如可以查找不以 J 或 M 开头的联系人</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_contact <span class="keyword">LIKE</span> <span class="string">&#x27;[^JM]%&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_contact ;</span><br></pre></td></tr></table></figure><p>当然，也可以使用 <code>NOT</code> 操作符得出类似的效果，<code>^</code>唯一的优点是在使用多个 <code>WHERE</code> 子句时简化语法</p><h1 id="使用通配符的技巧">使用通配符的技巧</h1><p>以下是书中记录的一些技巧</p><ul><li><mark class="hl-label red">不要过度使用通配符</mark> ，如果其他操作符能达到相同的目的，应当使用其他操作符</li><li>在确实需要使用通配符时，也<mark class="hl-label red">尽量不要把它们用在搜索模式的开头</mark> ，这样搜起来是最慢的</li><li>仔细注意通配符的位置，通配符很容易放错位置</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『公告』“网址收藏”正式页面上线</title>
      <link href="/2022/04/04/%E3%80%8E%E5%85%AC%E5%91%8A%E3%80%8F%E2%80%9C%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F%E2%80%9D%E6%AD%A3%E5%BC%8F%E9%A1%B5%E9%9D%A2%E4%B8%8A%E7%BA%BF/"/>
      <url>/2022/04/04/%E3%80%8E%E5%85%AC%E5%91%8A%E3%80%8F%E2%80%9C%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F%E2%80%9D%E6%AD%A3%E5%BC%8F%E9%A1%B5%E9%9D%A2%E4%B8%8A%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204041145927.jpg" alt=""></p><blockquote><p>🎉经过整整一天的忙碌，<a href="/bookmarks/">『网址收藏』</a>页面终于上线了🎉</p></blockquote><p>您可以在顶部的导航栏的『更多』中找到该页面</p><p>感觉还是不够好看？但暂时也就这样了吧，还有很多事情要去做呢</p><p><s>其实大部分时间都在折腾安装<a href="https://akilar.top/posts/615e2dec#%E7%BD%91%E7%AB%99%E5%8D%A1%E7%89%87-sites">外挂标签</a></s></p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』接收未知个数的数据与EOF</title>
      <link href="/2022/04/03/%E3%80%8EC-C-%E3%80%8F%E6%8E%A5%E6%94%B6%E6%9C%AA%E7%9F%A5%E4%B8%AA%E6%95%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8EEOF/"/>
      <url>/2022/04/03/%E3%80%8EC-C-%E3%80%8F%E6%8E%A5%E6%94%B6%E6%9C%AA%E7%9F%A5%E4%B8%AA%E6%95%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8EEOF/</url>
      
        <content type="html"><![CDATA[<p>大多数时候，要接收的参数的个数都是已知的</p><p>但在有些时候，参数的个数是未知的，这时就需要通过判断<code>scanf()</code>的返回值是否为<code>EOF</code>来解决</p><p><code>scanf()</code>会在读到文档末尾时返回<code>EOF（End Of File）</code>，而在命令行中，则需要按下 <kbd>Ctrl</kbd> + <kbd>Z</kbd> 再按下<kbd>Enter</kbd> 来输入这一字符</p><p>因此在C中，我们可以使用下面的这一结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[++count]) != EOF);</span><br></pre></td></tr></table></figure><p>执行完成后，输入的数字会保存在<code>a[]</code>中，而<code>count</code>的值就是个数</p><p>在C++中，借助<code>cin</code>还可以写得更简单</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (cin &gt;&gt; a[++count]);</span><br></pre></td></tr></table></figure><p>由于本人习惯将数组的0号位置用于保存数组内元素的个数，所以也经常会写成这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[++a[<span class="number">0</span>]]) != EOF);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（五）高级数据过滤</title>
      <link href="/2022/04/02/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%BF%87%E6%BB%A4/"/>
      <url>/2022/04/02/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%BF%87%E6%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>这一节将记录如何用 <code>AND</code> 和 <code>OR</code> 操作符组合成 <code>WHERE</code> 子句，如何明确地管理求值顺序，如何使用 <code>IN</code> 和 <code>NOT</code> 操作符</p><h1 id="组合-WHERE-子句">组合 <code>WHERE</code> 子句</h1><p>在上一节中介绍的所有 WHERE 子句在过滤时使用的都是单一条件，为了进行更强的过滤控制，可以使用 <code>AND</code> 和 <code>OR</code> 组合多个条件</p><h2 id="AND-操作符"><code>AND</code> 操作符</h2><p>使用 <code>AND</code> 操作符附加条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price ,prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span><span class="string">&#x27;DLL01&#x27;</span> <span class="keyword">AND</span> prod_price <span class="operator">&lt;=</span><span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204031045060.jpg" alt=""></p><p>这个例子只包含一个 <code>AND</code> 子句，可以增加多个</p><h2 id="OR-操作符"><code>OR</code> 操作符</h2><p><s>这个肯定一眼就能看懂吧</s></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name , prod_price  </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="string">&#x27;BRS01&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204031128432.jpg" alt=""></p><h2 id="求值顺序">求值顺序</h2><p>对比 <code>AND</code> 和 <code>OR</code> 两个操作符，<code>AND</code> 的优先级更高</p><p>但是在实际使用时，<mark class="hl-label green">墙裂建议使用小括号标记优先级</mark> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name , prod_price  </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> (vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="string">&#x27;BRS01&#x27;</span>)</span><br><span class="line">  <span class="keyword">AND</span> prod_price <span class="operator">&gt;=</span> <span class="number">10</span>; </span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204031132628.jpg" alt=""></p><h1 id="IN-操作符"><code>IN</code> 操作符</h1><p><code>IN</code> 操作符用来指定条件范围，范围中的每个条件都可以进行匹配</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name , prod_price  </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="string">&#x27;DLL01&#x27;</span>,<span class="string">&#x27;BRS01&#x27;</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204031136258.jpg" alt=""></p><p>你大概已经发现了，<code>IN</code>和<code>OR</code>在一些情况下有相同的功能，上面的例子也可以这样写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name , prod_price  </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> (vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="string">&#x27;BRS01&#x27;</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204031140076.jpg" alt=""></p><p>为什么要使用<code>IN</code>呢？其优点如下：</p><ul><li>在有很多合法选项时，<code>IN</code> 操作符的语法更清楚，更直观</li><li>在与其他 <code>AND</code> 和 <code>OR</code> 操作符组合使用 <code>IN</code> 时，求值顺序更容易管理</li><li><mark class="hl-label green">IN操作符一般比一组OR操作符执行地更快</mark> </li><li><mark class="hl-label green">IN的最大优点是可以包含其他SELECT语句</mark> （将在学到子查询时详细介绍） </li></ul><h1 id="NOT-操作符"><code>NOT</code> 操作符</h1><p><code>NOT</code> 操作符用于否定其后所跟的任何条件</p><p>下面的例子列出了除 <code>DLL01</code> 之外的所有供应商制造的产品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><p>当然，在本例中你也可以使用<code>!=</code>，对于这里这种简单的 <code>WHERE</code> 子句，使用 <code>NOT</code> 确实没有什么优势</p><p>但在更复杂的子句中，<code>NOT</code> 是非常有用的，例如在与 <code>IN</code> 联合使用时， <code>NOT</code> 可以非常简单地找出与条件列表不匹配的行</p><p>大多数 <code>DBMS</code> 允许使用 <code>NOT</code> 否定任何条件</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（四）过滤数据</title>
      <link href="/2022/04/01/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BF%87%E6%BB%A4%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/04/01/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BF%87%E6%BB%A4%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="使用WHERE子句">使用<code>WHERE</code>子句</h1><p>数据库一般都包含大量的数据，很少需要检索表中的所有行，通常只需要检索一部分</p><p>检索所需的数据需要指定<code>搜索条件（searsh criteria）</code>或称为<code>过滤条件（filter condition）</code></p><p>这时就需要在<code>FROM</code>子句后加上<code>WHERE</code>子句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">=</span> <span class="number">3.49</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204030917681.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">提示：SQL 过滤与应用过滤</summary><div class="toggle-content"><p>当然你也可以选择在接收到数据后在应用层过滤，但 <mark class="hl-label red">墙裂不建议这样做</mark> ，一来会浪费带宽，而来更加浪费时间</p></div></details><details class="toggle" ><summary class="toggle-button" style="">注意：WHERE 子句的位置</summary><div class="toggle-content"><p>在同时使用 <code>ORDER BY</code> 和 <code>WHERE</code> 子句时，应该让 <code>ORDER BY</code> 位于 <code>WHERE</code> 之后，<mark class="hl-label red">否则将产生错误</mark> （关于 <code>ORDER BY</code> ，<a href="/2022/03/29/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%92%E5%88%97%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE/">请看上一篇</a>）</p></div></details><h1 id="WHERE-子句的操作符"><code>WHERE</code> 子句的操作符</h1><p>下表列出了所有操作符</p><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>=</code></td><td style="text-align:center">等于</td></tr><tr><td style="text-align:center"><code>&lt;&gt;</code></td><td style="text-align:center">不等于</td></tr><tr><td style="text-align:center"><code>!=</code></td><td style="text-align:center">不等于</td></tr><tr><td style="text-align:center"><code>&lt;</code></td><td style="text-align:center">小于</td></tr><tr><td style="text-align:center"><code>&lt;=</code></td><td style="text-align:center">小于等于</td></tr><tr><td style="text-align:center"><code>!&lt;</code></td><td style="text-align:center">不小于</td></tr><tr><td style="text-align:center"><code>&gt;</code></td><td style="text-align:center">大于</td></tr><tr><td style="text-align:center"><code>&gt;=</code></td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center"><code>!&gt;</code></td><td style="text-align:center">不大于</td></tr><tr><td style="text-align:center"><code>BETWEEN</code></td><td style="text-align:center">在指定的两个值之间</td></tr><tr><td style="text-align:center"><code>IS NULL</code></td><td style="text-align:center">为<code>NULL</code>值</td></tr></tbody></table><details class="toggle" ><summary class="toggle-button" style="">注意：操作符兼容</summary><div class="toggle-content"><p>表中列出的操作符有些是冗余的（如<code>&lt;&gt;</code>与<code>!=</code>，<code>!&lt;</code>与<code>&gt;=</code>），并非所有的<code>DBMS</code>都支持这些操作符（例如<code>MySQL</code>不支持<code>!&gt;</code>与<code>!&lt;</code>），请参阅你所使用的<code>DBMS</code>的文档</p></div></details><p>下面来看几个例子</p><h2 id="比较单个值">比较单个值</h2><p>列出所有价格小于 10 美元的产品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204030938728.jpg" alt=""></p><h2 id="不匹配检查">不匹配检查</h2><p>列出所有供应商不是<code>DLL01</code>的产品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id ,prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">!=</span> <span class="string">&#x27;DLL01&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204030940549.jpg" alt=""></p><h2 id="范围值检查">范围值检查</h2><p>要检查某个范围的值，可以使用<code>BETWEEN</code>操作符</p><p>检索价格在 5 美元和 10 美元之间的所有产品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204030943490.jpg" alt=""></p><h2 id="空值检查">空值检查</h2><p>在创建表时，可以指定表中能不能有<code>空值（NULL）</code></p><p><code>NULL</code>不等于 0，空字符串，或是空格，<code>NULL</code>就是<code>NULL</code>，什么数据都没有</p><p><strong>确定值是否为 <code>NULL</code> ，不能简单地检查是否等于 <code>NULL</code> ，而必须使用 <code>IS NULL</code> 子句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204030950730.jpg" alt=""></p><p>因为表中没有没有这样的行，所以没有返回数据，但是在<code>Customers</code>表中有<code>NULL</code>值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204030952792.jpg" alt=""></p><p>可见有两位顾客没有留下邮箱地址</p><details class="toggle" ><summary class="toggle-button" style="">注意：NULL 和非匹配</summary><div class="toggle-content"><p>通过过滤选择不包含指定值的所有行时，你可能希望返回含<code>NULL</code>值的行，但因为<code>NULL</code>的特殊性，<mark class="hl-label red">实际上这做不到</mark></p></div></details>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（六）组件之scroll-view滚动视图</title>
      <link href="/2022/03/31/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8Bscroll-view%E6%BB%9A%E5%8A%A8%E8%A7%86%E5%9B%BE/"/>
      <url>/2022/03/31/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8Bscroll-view%E6%BB%9A%E5%8A%A8%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>小程序里很多时候都需要用到滚动视图，例如下面的这个例子里</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203310848852.jpg" alt=""></p><p>这就需要用到<code>scroll-view</code>组件</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203310851159.jpg" alt=""></p><h1 id="scroll-view"><code>&lt;scroll-view&gt;</code></h1><p>首先来做一个横向滚动的样例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrOut&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox&quot;</span>&gt;</span>333<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox&quot;</span>&gt;</span>444<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox&quot;</span>&gt;</span>555<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scrOut</span>&#123;<span class="attribute">display</span>: flex;<span class="attribute">flex-wrap</span>: nowrap;&#125;</span><br><span class="line"><span class="selector-class">.scrBox</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">background</span>: gold;<span class="attribute">margin-right</span>: <span class="number">2px</span>; <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure><p><code>flex: 0 0 100px</code>表示不放大（<code>0</code>），不缩小（<code>0</code>），原始大小（<code>100px</code>），详情可以参考<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">这篇</a></p><p>但其实上，目前它还不能滚动，因为还没有给它添加属性</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203310904148.jpg" alt=""></p><h2 id="scroll-x">scroll-x</h2><p>这个属性的意义是允许横向滚动，默认为<code>false</code></p><p>将它添加到<code>&lt;scroll-view&gt;</code> 上，可以看见已经能成功滚动了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203310906205.jpg" alt=""></p><h2 id="scroll-left">scroll-left</h2><p>设置默认的起始位置</p><p>例如这里每个格子的大小是<code>100px</code>，而将起始位置设置成<code>150px</code>后，应当从第2个格子的一半开始，渲染出来也是这一结果</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203310912230.jpg" alt=""></p><p>类似的，还有竖向滚动的样例</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203310917643.jpg" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;scroll2&quot;</span> <span class="attr">scroll-y</span> <span class="attr">scroll-top</span>=<span class="string">&quot;150px&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrOut2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox2&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox2&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox2&quot;</span>&gt;</span>333<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox2&quot;</span>&gt;</span>444<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox2&quot;</span>&gt;</span>555<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scroll2</span>&#123;<span class="attribute">height</span>: <span class="number">350px</span>;&#125;</span><br><span class="line"><span class="selector-class">.scrBox2</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">background</span>: pink;<span class="attribute">margin-bottom</span>: <span class="number">1px</span>;&#125;</span><br></pre></td></tr></table></figure><p>还有更多的属性会在学完JS后补充</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云OSS字体引用问题</title>
      <link href="/2022/03/30/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%AD%97%E4%BD%93%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2022/03/30/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%AD%97%E4%BD%93%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>前几天把字体文件上传到阿里云OSS，但是发现不能正常引用</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302303504.jpg" alt=""></p><p>今天发现需要设置跨域设置，首先前往控制台，然后来到权限管理页面，进入跨域设置</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302304734.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302304998.jpg" alt=""></p><p>添加跨域规则，允许所有来源</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302305968.jpg" alt=""></p><p>现在，字体文件可以被正常引用了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302305876.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『MySQL』如何清屏</title>
      <link href="/2022/03/30/%E3%80%8EMySQL%E3%80%8F%E5%A6%82%E4%BD%95%E6%B8%85%E5%B1%8F/"/>
      <url>/2022/03/30/%E3%80%8EMySQL%E3%80%8F%E5%A6%82%E4%BD%95%E6%B8%85%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<p>很多地方多说使用下面的这个命令，但在我这里没有用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear;</span><br></pre></td></tr></table></figure><p>最后发现下面这个命令有效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">system</span> clear;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（三）排列检索数据</title>
      <link href="/2022/03/29/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%92%E5%88%97%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/03/29/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%92%E5%88%97%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>这一节将讲述如何使用<code>SELECT</code>的<code>ORDER BY</code>字句，根据需要排序检索出来的数据</p><p>首先，从上次的例子开始</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203300903553.jpg" alt=""></p><p>正如上篇所说，返回的数据没有特定的数据，但其实也不是随机显示的。如果不排序，数据一般将以它在表中出现的顺序显示，这有可能是数据最初添加到表中的顺序。但是如果数据随后进行过更新或删除，那么这个顺序会受到<code>DBMS</code>重用回收存储空间的方式的影响</p><p>而关系数据库设计理论认为，<mark class="hl-label red">如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义</mark> </p><h1 id="排序数据">排序数据</h1><p>使用<code>ORDER BY</code>以排序数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203300913480.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">警告：ORDER BY 子句的位置</summary><div class="toggle-content"><p>请保证<code>ORDER BY</code>子句位于<code>SELECT</code>语句的最后一句，<mark class="hl-label red">否则将会出错</mark></p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：使用其他列进行排序</summary><div class="toggle-content"><p>通常，<code>ORDER BY</code>子句中使用的列将是为显示而选择的列。但是，实际上并不一定要这样，<mark class="hl-label green">用非检索的列排序数据是完全合法的</mark></p></div></details><h1 id="按多个列排序">按多个列排序</h1><p>经常需要按不止一个列进行排序，例如要显示雇员的名单，可以希望先按照姓排序，再按照名排序</p><p>要实现这一目的，只需使用逗号分开各个列名</p><p>下面的代码检索3个列，按其中的两个列进行排序 —— 先按价格，再按名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price, prod_name;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302119495.jpg" alt=""></p><h1 id="按位置排列">按位置排列</h1><p>除了指定列名之外，提供在语句中的相对列位置也可以指定排序列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">2</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302129472.jpg" alt=""></p><p>可以看出，这里的输出和上面的完全相同</p><ul><li><p><code>ORDER BY 2</code> 表示按第2个检索列（<code>prod_price</code>）排序</p></li><li><p><code>ORDER BY 2,3</code> 表示先按第2个列（<code>prod_price</code>）排序，然后再按第3个列（<code>prod_name</code>）排序</p></li></ul><p>这一技巧的好处在于不需要重新输入列名，但它也有<mark class="hl-label red">缺点</mark> 。首先，不明确给出列名可能根据错误的列排序（特别是更改了<code>SELECT</code>名单时，忘记更改<code>ORDER BY</code>子句），其次，如果需要排序的列不在<code>SELECT</code>名单中，则显然不能使用这一技巧</p><details class="toggle" ><summary class="toggle-button" style="">提示：混合使用两种方法</summary><div class="toggle-content"><p>如果有必要，<mark class="hl-label green">可以选择混合使用实际列名和相对列位置</mark></p></div></details><h1 id="指定排序方向">指定排序方向</h1><p>默认的排序方向是递增（从小到大），当然，你也可以指定为递减，只需加上<code>DESC</code>关键字</p><p>例如下面将最贵的商品排在前面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302155467.jpg" alt=""></p><p>如果打算使用多个列排序，该怎么办？下面的例子以降序排序商品，再加上产品名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>, prod_name;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302159519.jpg" alt=""></p><p><code>DESC</code>关键字只应用到单个列上，所以你可以发现价格是单调递减的，而在同一价格中，名称是严格递增的</p><details class="toggle" ><summary class="toggle-button" style="">警告：在多个列上降序排序</summary><div class="toggle-content"><p><mark class="hl-label red">如果你想在多个列上进行降序排序，必须在每一列使用DESC关键字</mark></p></div></details><p>实际上，<code>DESC</code>是<code>DESCENDING</code>的缩写，这两个关键字都可以使用，对应的还有<code>ASC</code>与<code>ASCENDING</code>（递增），不过显然没什么用，毕竟默认就是递增的</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Linux』Debian 10 安装 Docker</title>
      <link href="/2022/03/29/%E3%80%8ELinux%E3%80%8FDebian-10-%E5%AE%89%E8%A3%85-Docker/"/>
      <url>/2022/03/29/%E3%80%8ELinux%E3%80%8FDebian-10-%E5%AE%89%E8%A3%85-Docker/</url>
      
        <content type="html"><![CDATA[<blockquote><p>❤️本文引用自此篇：<a href="https://blog.csdn.net/zhupengfei/article/details/102739901">https://blog.csdn.net/zhupengfei/article/details/102739901</a>，感谢大佬❤️</p></blockquote><p>更新软件源并下载依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common gnupg2</span><br></pre></td></tr></table></figure><p>导入存储库的<code>GPG</code>密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -</span><br></pre></td></tr></table></figure><p>将<code>Docker</code>的存储库添加到系统的软件存储库列表中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><p>重新更新软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>确保您要从<code>Docker repo</code>而不是默认的<code>Debian repo</code>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-cache policy docker-ce</span><br></pre></td></tr></table></figure><p>（这里会输出一大堆东西）</p><p>下载并安装<code>Docker</code>社区版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure><p>安装完成后，服务应当是自动启动的，可以测试一下能否运行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302227362.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 建站指南（七）阿里云 OSS 图床</title>
      <link href="/2022/03/28/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%83%EF%BC%89%E9%98%BF%E9%87%8C%E4%BA%91-OSS-%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/03/28/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%83%EF%BC%89%E9%98%BF%E9%87%8C%E4%BA%91-OSS-%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>😭 自<a href="https://blog.csdn.net/qq_35977139/article/details/108218431?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=2">GitHub图床 + jsDelivr失效</a>，与<code>Gitee</code>图床无法使用以来，就没有好用的免费图床了 😭</p></blockquote><p>我目前使用的是<code>阿里云OSS</code>来托管，需要花钱，但也不是很贵</p><h1 id="准备阿里云OSS">准备阿里云OSS</h1><h2 id="购买资源包">购买资源包</h2><p>在阿里云对象存储-&gt;<a href="https://oss.console.aliyun.com/package">资源包管理页面</a>购买资源包</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281103580.jpg" alt=""></p><p>半年也不到五块钱，还是相对便宜的</p><p>其实之后的访问之类的也需要扣费，但是也要不了多少钱，可以先冲个10块到账户里让它慢慢扣</p><h2 id="创建存储空间">创建存储空间</h2><p>然后前往<a href="https://oss.console.aliyun.com/bucket">Bucket列表</a>创建<code>Bucket</code></p><p><code>Bucket 名称</code>可以随便取，地域选择与你最近的就行，读写权限改为公共读，其他的各种服务都不用开</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281107797.jpg" alt=""></p><h2 id="新建访问密钥">新建访问密钥</h2><p>之后需要解决写入的问题，从右上角头像进入<code>AccessKey</code>管理页面，新建一个<code>Key</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281110842.jpg" alt=""></p><p>记录好ID和密码，复制到记事本里面去</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281111635.jpg" alt=""></p><h1 id="准备-PicGo">准备 PicGo</h1><h2 id="下载安装">下载安装</h2><p>首先前往<a href="https://molunerfinn.com/PicGo/">PicGo官网</a>下载</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231624056.png" alt=""></p><p>它会导到到<code>GitHub</code>上的该项目的<code>releases</code>页面，在最新版打开<code>Assets</code>列表挑选你的系统下载即可</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231627693.png" alt=""></p><h2 id="配置">配置</h2><p>安装后，来到图床设置阿里云OSS，填入密钥的ID和密码，空间名，和存储区域（可以在概览中看见）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281116654.jpg" alt=""></p><p>下面是我的样例，只需要填前4个</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281120028.jpg" alt=""></p><p>设置为默认图床后，图床准备完毕，每上传一张图片都能自动将链接复制到剪贴板里，直接在<code>typora</code>里粘贴即可</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281121802.jpg" alt=""></p><p>还有更方便的方法，你可以在 <code>typora</code> 中设置与 <code>PicGo</code> 联动，这样直接在文章中粘贴图片就能自动上传，简直不要太爽</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222327850.png" alt="image-20220622232702790"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo + Butterfly 建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（二）检索数据</title>
      <link href="/2022/03/27/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/03/27/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>这一节将介绍如何使用 <code>SELECT</code> 语句从表中检索一个或多个数据列</p><p>连接<code>MySQL</code>后，首先进入我们的样例数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE test;</span><br></pre></td></tr></table></figure><h1 id="检索单个列">检索单个列</h1><p>使用 <code>SELECT ... FROM ...;</code> 结构来检索单个列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281431281.jpg" alt=""></p><p>可以看见，数据内容已经检索成功（<code>prod_name</code>那一列）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281432634.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">说明：未排序数据</summary><div class="toggle-content"><p>如果没有规定排序，那么返回的数据可能没有特定的顺序。可能是按照插入的顺序返回，也可也能不会。只要返回相同数目的行，就是正常的。</p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：别漏了分号</summary><div class="toggle-content"><p>多条<code>SQL</code>语句必须以英文分号（<code>;</code>）分隔。多数<code>DBMS</code>不需要在单条<code>SQL</code>语句后加分号，但加上分号也没有坏处，为了养成习惯，应当始终记得加上分号。</p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：使用空格</summary><div class="toggle-content"><p>在处理<code>SQL</code>语句时，其中的所有空格都会被会忽略，因此下面的 3 种写法是相同的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> prod_name <span class="keyword">FROM</span> Products;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">prod_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">Products;</span><br></pre></td></tr></table></figure><p>多数<code>SQL</code>开发人认为，加<code>SQL</code>语句分成多行更容易阅读和调试</p></div></details><h1 id="检索多个列">检索多个列</h1><p>使用逗号分隔各个列即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281528341.jpg" alt=""></p><h1 id="检索所有列">检索所有列</h1><p>可以通过使用星号（<code>*</code>）做到这点</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281533850.jpg" alt=""></p><h1 id="检索不同的值">检索不同的值</h1><p>直接使用<code>SELECT</code>语句将返回所有的行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281536145.jpg" alt=""></p><p>但如果你需要去重，则可以使用<code>DISTINCT</code>关键字</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281540332.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">注意：不能部分使用 DISTINCT</summary><div class="toggle-content"><p><code>DISTINCT</code>关键字作用于所有的列，而不仅仅是跟在后面的那一列</p></div></details><h1 id="限制结果">限制结果</h1><p><code>SELECT</code> 默认返回所有的行，但如果你只想返回第一行或一定数量的行，该怎么办呢？</p><p>在各种数据库软件中的做法是不同的，这里以<code>MySQL</code>系列举例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line">LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281549576.jpg" alt=""></p><p>当然，你还可以使用<code>OFFSET</code>指定从哪儿开始</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line">LIMIT <span class="number">5</span> <span class="keyword">OFFSET</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281551349.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">注意：第 0 行</summary><div class="toggle-content"><p><strong>第一个被检索的行是第0行，而不是第1行</strong></p><p>因此，<code>LIMIT 1 OFFSET 1</code> 会检索第2行，而不是第1行</p></div></details><details class="toggle" ><summary class="toggle-button" style="">技巧：缩写</summary><div class="toggle-content"><p><code>LIMIT y OFFSET x</code>可以缩写成<code>LIMIT x,y</code>（注意是反着的，可以记忆为从第<code>x</code>行返回<code>y</code>列）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281555269.jpg" alt=""></p></div></details><h1 id="注释">注释</h1><p>大多数数据库都支持下面三种注释：</p><ul><li>两个连字符单行注释（<code>--</code>）</li><li>Linux风格的单行注释（<code>#</code>），但是某些<code>DBMS</code>不支持</li><li>C/C++风格注释的多行注释（<code>/* */</code>）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Linux』BBR与锐速安装脚本</title>
      <link href="/2022/03/26/%E3%80%8ELinux%E3%80%8FBBR%E4%B8%8E%E9%94%90%E9%80%9F%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/"/>
      <url>/2022/03/26/%E3%80%8ELinux%E3%80%8FBBR%E4%B8%8E%E9%94%90%E9%80%9F%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203290804419.jpg" alt=""></p><blockquote><p>❤️这个脚本来源于<a href="https://blog.ylx.me/archives/783.html">Linux一键安装常见/最新内核脚本 锐速/BBRPLUS/BBR2 [1.3.2.104]</a>，感谢原作者❤️</p></blockquote><p>直接下载运行即可</p><hr><blockquote><p>卸载内核版</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://github.000060000.xyz/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O tcp.sh &quot;https://git.io/coolspeeda&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><blockquote><p>不卸载内核版</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://github.000060000.xyz/tcpx.sh&quot; &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O tcpx.sh &quot;https://git.io/JYxKU&quot; &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh</span><br></pre></td></tr></table></figure><hr><p>注意：安装过程中如果询问是否立即卸载内核，选择否</p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『MySQL』directory to /nonexistent 报错</title>
      <link href="/2022/03/25/%E3%80%8EMySQL%E3%80%8Fdirectory-to-nonexistent%E6%8A%A5%E9%94%99/"/>
      <url>/2022/03/25/%E3%80%8EMySQL%E3%80%8Fdirectory-to-nonexistent%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转载自 <a href="https://www.cnblogs.com/cnwcl/p/13805643.html">https://www.cnblogs.com/cnwcl/p/13805643.html</a> ，感谢大佬🙏</p></blockquote><p>这种错误一般是 mysql 服务器异常关机导致的，解决方案如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">sudo service mysql stop</span><br><span class="line">sudo usermod -d /var/lib/mysql/ mysql</span><br><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">sudo systemctl stop mysql.service</span><br><span class="line">sudo usermod -d /var/lib/mysql/ mysql</span><br><span class="line">sudo systemctl start mysql.service</span><br></pre></td></tr></table></figure><p>另外一种解决方法是删除<code>mysql</code>用户并重新添加，可以见<a href="https://blog.csdn.net/weixin_40436144/article/details/112186603">此篇</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Linux』文件解压缩指南</title>
      <link href="/2022/03/24/%E3%80%8ELinux%E3%80%8F%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%8C%87%E5%8D%97/"/>
      <url>/2022/03/24/%E3%80%8ELinux%E3%80%8F%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>先略写，以后有空了再详细学习一下</p></blockquote><h1 id="tar">tar</h1><p>很多地方都能下载到<code>.tar</code>或<code>.tar.gz</code>文件，tar命令本来是用来备份/归档的，没有压缩功能如果后面又跟上了.<code>gz</code>或者其他压缩算法，则说明是被压缩的</p><p><code>tar</code>命令很复杂，详情可以看<a href="https://www.runoob.com/linux/linux-comm-tar.html">菜鸟教程</a>，这里先贴个<code>tldr</code>的解释，涵盖了日常用法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">tldr tar</span><br><span class="line"></span><br><span class="line">Archiving utility.</span><br><span class="line">Often combined with a compression method, such as gzip or bzip.</span><br><span class="line">- Create an archive from files:</span><br><span class="line">tar cf target.tar file1 file2 file3</span><br><span class="line">- Create a gzipped archive:</span><br><span class="line">tar czf target.tar.gz file1 file2 file3</span><br><span class="line">- Extract an archive <span class="keyword">in</span> a target folder:</span><br><span class="line">tar xf source.tar -C folder</span><br><span class="line">- Extract a gzipped archive <span class="keyword">in</span> the current directory:</span><br><span class="line">tar xzf source.tar.gz</span><br><span class="line">- Extract a bzipped archive <span class="keyword">in</span> the current directory:</span><br><span class="line">tar xjf source.tar.bz2</span><br><span class="line">- Create a compressed archive, using archive suffix to determine the compression program:</span><br><span class="line">tar caf target.tar.xz file1 file2 file3</span><br><span class="line">- List the contents of a tar file:</span><br><span class="line">tar tvf source.tar</span><br><span class="line">- Extract files matching a pattern:</span><br><span class="line">tar xf source.tar --wildcards <span class="string">&quot;*.html&quot;</span></span><br></pre></td></tr></table></figure><h1 id="zip">zip</h1><blockquote><p>转载至 <a href="https://www.cnblogs.com/pandabang/p/10983350.html">https://www.cnblogs.com/pandabang/p/10983350.html</a>，以后再慢慢整理</p></blockquote><table><thead><tr><th><strong>功能</strong></th><th><strong>命令行输入的命令</strong></th></tr></thead><tbody><tr><td>压缩单个文件</td><td>zip package.zip file</td></tr><tr><td>压缩多个文件</td><td>zip package.zip file1 file2</td></tr><tr><td>压缩单个文件夹</td><td>zip <em><strong>-r</strong></em> package.zip folder</td></tr><tr><td>压缩多个文件夹</td><td>zip <em><strong>-r</strong></em> package.zip folder1 folder2</td></tr><tr><td>压缩文件、文件夹</td><td>zip <em><strong>-r</strong></em> package.zip file1 folder1 file2</td></tr><tr><td>压缩时加密码</td><td>zip <em><strong>-e</strong></em> package.zip file</td></tr><tr><td>解压缩</td><td>unzip package.zip</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Others』ZTZ-96系列及ZTZ-99系列型号辨别</title>
      <link href="/2022/03/23/%E3%80%8EOther%E3%80%8FZTZ-96%E7%B3%BB%E5%88%97%E5%8F%8AZTZ-99%E7%B3%BB%E5%88%97%E5%9E%8B%E5%8F%B7%E8%BE%A8%E5%88%AB/"/>
      <url>/2022/03/23/%E3%80%8EOther%E3%80%8FZTZ-96%E7%B3%BB%E5%88%97%E5%8F%8AZTZ-99%E7%B3%BB%E5%88%97%E5%9E%8B%E5%8F%B7%E8%BE%A8%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>❤️本期内容整理自B站视频<a href="https://www.bilibili.com/video/BV1Xq4y117zS?spm_id_from=333.851.header_right.history_list.click">【军盲入门】怎么区分99式和96式坦克</a></p></blockquote><blockquote><p>还没配图，等有空的时候配个图</p></blockquote><p>ZTZ-99家族：99，99一期改，99二期改，99A</p><p>ZTZ-96家族：96，96A，96B</p><h1 id="基本型">基本型</h1><p>99，96两个基本型：首上都没有爆反，99首上有V型挡浪板，96没有</p><h1 id="区分两大家族">区分两大家族</h1><p>99家族炮塔每侧都有5个烟雾发射筒，而96为6个</p><p>99家族爆反左部有一条折线，而96没有</p><p>99家族有激光压制装置</p><p>99，96家族负重轮样式不同</p><h1 id="99家族内部区分">99家族内部区分</h1><p>99一二期改车体有圆滑的弧度</p><p>99A则是一个屁股很高的梯形（有了北约翘臀，向后没俯角<s>虽然中系本来基本就没俯角</s>）</p><p>99A的激光压制装置变小了</p><p>99A的车灯像是镶嵌在车头的前端，而一、二期改像是放在上端（更靠后了，在履带板上方）</p><p>一期改头顶大鼓包（安东星人都清楚），二期改没有</p><p>一期改首上很平滑，二期改和99A有一道突出的小台阶</p><h1 id="96家族内部区分">96家族内部区分</h1><p>96A的车灯罩是圆形小铁网，96B的是方形盒子</p><p>96A的车身右侧有两个排气孔，96B没有（96B换了发动机）</p><p>96B的屁股比96A多了百叶窗</p><p>96A的第三、第四负重轮距离很近，96B的距离较远</p><blockquote><p>最后这里以后打算做一个思维导图</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『WSL』解决每次启动后自动分配 IP 的问题</title>
      <link href="/2022/03/21/%E3%80%8EWSL%E3%80%8F%E8%A7%A3%E5%86%B3%E6%AF%8F%E6%AC%A1%E5%90%AF%E5%8A%A8%E5%90%8E%E8%87%AA%E5%8A%A8%E5%88%86%E9%85%8D-IP-%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/03/21/%E3%80%8EWSL%E3%80%8F%E8%A7%A3%E5%86%B3%E6%AF%8F%E6%AC%A1%E5%90%AF%E5%8A%A8%E5%90%8E%E8%87%AA%E5%8A%A8%E5%88%86%E9%85%8D-IP-%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>众所周知，<code>WSL</code>每次运行的时候都会被虚拟网卡自动分配新的<code>IP</code></p><p>这很麻烦，因为每次连接都需要查它的<code>IP</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231453970.jpg" alt=""></p><p>根据<a href="https://docs.microsoft.com/en-us/windows/wsl/networking">官方说法</a>，如果你的<code>Windows</code>版本在<code>18945</code>之后，就支持通过<code>localhost</code>访问<code>WSL</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231457861.jpg" alt=""></p><p>但是不知道为什么我一个<code>Windows11</code>不支持这个功能，所以还得想办法</p><p>解决方法我能想到的有三种：</p><ul><li>设定固定 <code>IP</code></li><li>每次启动后重设 <code>IP</code></li><li>在 <code>Windows</code> 中自动修改<code>host</code>文件，使其指向<code>WSL</code></li></ul><p>前两种尝试后宣告失败，最后一个经大佬指点使用了一个<code>Github</code>项目成功实现</p><p>项目地址：<a href="https://github.com/shayne/go-wsl2-host">https://github.com/shayne/go-wsl2-host</a></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231500315.jpg" alt=""></p><p>它的总体过程是创建一个服务，以一个管理员账户的名义每次自动修改<code>host</code>文件</p><p>下载得到一个<code>wsl2host.exe</code>，使用下面的语句安装（需要管理员权限）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl2host.exe install</span><br></pre></td></tr></table></figure><p>之后会提示你给它一个管理员账户，输入账号密码即可</p><blockquote><p>注意：如果你使用的是微软账户，那么会遇到麻烦，需要通过下面的方法解决（<a href="https://github.com/shayne/go-wsl2-host/issues/62">来源</a>）</p></blockquote><details class="toggle" ><summary class="toggle-button" style="">点击以打开</summary><div class="toggle-content"><p>首先随便给它一个账号，然后打开<code>服务</code>页面（<code>services.msc</code>），找到<code>WSL2 Host</code>并打开</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231513050.jpg" alt=""></p><p>使用浏览手动指定账户</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231514988.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231524479.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231524306.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231524605.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231525469.png" alt=""></p><p>注意是<code>密码</code>，不是<code>PIN码</code></p></div></details><p>然后检查是否在运行，像下面的就是已经在运行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl2host.exe start</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231507093.jpg" alt=""></p><p>之后检查<code>host</code>文件（<code>C:\Windows\System32\drivers\etc\hosts</code>），看看是不是已经成功更改</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231530898.png" alt=""></p><p>现在我这之后通过<code>ubuntu2004.wsl</code>就可以访问了，方便地很</p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（五）组件之超链接</title>
      <link href="/2022/03/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8B%E8%B6%85%E9%93%BE%E6%8E%A5/"/>
      <url>/2022/03/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8B%E8%B6%85%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>在文档的导航中找到<code>navigator</code><br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203220902157.jpg" alt=""></p><h1 id="navigator"><code>&lt;navigator&gt;</code></h1><p><code>&lt;navagator&gt;</code>比<code>HTML</code>中的<code>&lt;a&gt;</code>标签，相应的，它的属性也更多，而且它是一个块级元素</p><h2 id="url">url</h2><p>还记得<code>HTML</code>中的<code>&lt;a&gt;</code>标签用的是<code>href</code>，但是在<code>WXML</code>中用的是<code>url</code>属性，尝试以下样例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">url</span>=<span class="string">&quot;/pages/logs/logs&quot;</span>&gt;</span>跳转到log页面<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意是<code>/pages/logs/logs</code>，不是<code>/pages/logs/logs.wxml</code></p><p>因为是块级元素，所以可以修改样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.link</span>&#123;<span class="attribute">height</span>: <span class="number">40px</span>;&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203220916064.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203220916111.jpg" alt=""></p><h2 id="open-type">open-type</h2><p><code>open-type</code>指的是跳转方式，下面是比较常用的几个值</p><h3 id="redirect">redirect</h3><p><strong>关闭当前页面</strong>，跳转到应用内的某个页面。但是不允许跳转到 <code>tabbar</code> 页面</p><p>点击后原来的页面被销毁，无法返回，只能从左上角返回主页面</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203310815987.jpg" alt=""></p><h3 id="switchTab">switchTab</h3><p>跳转到 <code>tabBar</code> 页面，并关闭其他所有非 <code>tabBar</code> 页面，<strong>并且不能携带参数</strong>（<code>tabBar</code> 页面指的是底下有一排按钮的导航页，后面会讲）</p><h3 id="reLaunch">reLaunch</h3><p>关闭所有页面，打开到应用内的某个页面（比较常用）</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（四）组件之图像媒体</title>
      <link href="/2022/03/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8B%E5%9B%BE%E5%83%8F%E5%AA%92%E4%BD%93/"/>
      <url>/2022/03/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8B%E5%9B%BE%E5%83%8F%E5%AA%92%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<p>来看媒体组件中的<code>image</code>标签</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201148535.jpg" alt=""></p><p>众所周知<code>HTML</code>中要插入图片用的是<code>img</code>，但是在<code>WXML</code>中要记住是用<code>image</code></p><h1 id="image"><code>&lt;image&gt;</code></h1><h2 id="图片路径">图片路径</h2><p>随便找几张图作样例，使用<code>src</code>属性指示图片路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203132244835.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231717952.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201159752.jpg" alt=""></p><p><code>image</code>其实不需要写一对，但是结尾的<code>/</code>不能省</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203132244835.jpg&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="缩放-裁剪图像">缩放/裁剪图像</h2><p>可以看见全局样式已经给图像规定了默认的长和宽，我们先覆盖这一样式</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201206887.jpg" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image&#123;<span class="attribute">width</span>: <span class="number">100%</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201209608.jpg" alt=""></p><p>但是图像必定是会变形的，如果想要图像完全显示，则要用<code>mode</code>属性来更改缩放模式</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201210583.jpg" alt=""></p><p>可以看见默认使用的是<code>scaleToFill</code>，这个值是不保持比例的</p><p>若使用<code>aspectFit</code>，则会将长边完全显示</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201214286.jpg" alt=""></p><p>但是可以看到上下会有空白</p><p>若使用<code>aspectFill</code>，则只会把短边完全显示，超出部分会被截取</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201217164.jpg" alt=""></p><p>最常用的还是<code>widthFix</code>，宽度不变，高度自动适配</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201218847.jpg" alt=""></p><p>另外的就是裁剪模式，这个模式不会缩放图像，只会显示部分区域，一般不常用</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201221357.jpg" alt=""></p><h2 id="长按识别">长按识别</h2><p>一般的图片是不能长按识别的，而加上 <code>show-menu-by-longpress</code>属性则可以长按识别，效果如图所示</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201223983.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（三）组件之基础内容</title>
      <link href="/2022/03/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/"/>
      <url>/2022/03/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<p>我们做小程序页面的时候，最基本的元素不过文字、图像、视频、超链接，我们将从简单向复杂的讲</p><hr><h1 id="view"><code>&lt;view&gt;</code></h1><p>这个标签可以当作是<code>HTML</code>中的<code>div</code>，它是一个块标签</p><p>从上篇的进度继续</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上篇说到WXML源于HTML，但是WXML的独特之处其实在于标签内部封装了很多的属性和方法，例如我们来看<a href="https://developers.weixin.qq.com/miniprogram/dev/component/view.html">view的官方文档</a></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192057781.jpg" alt=""></p><p>例如我们来试一下这个<code>hover-class</code>属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;boxHover&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后打开样式表，添加一行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.boxHover</span>&#123;<span class="attribute">background</span>: green;&#125;</span><br></pre></td></tr></table></figure><p>保存后发现，我们在按下去的时候，颜色变成了绿色，过了一会儿，又变回了红色</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192124615.jpg" alt=""></p><h2 id="按压时间">按压时间</h2><p>现在根据文档添加一个<code>hover-start-time</code>属性，并设置成<code>500ms</code>，这样的效果就是按下去半秒才会变色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;boxHover&quot;</span> <span class="attr">hover-start-time</span>=<span class="string">&quot;500&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的，也有一个<code>hover-stay-time</code>属性，表示的是过多久恢复</p><h2 id="关联父元素">关联父元素</h2><p>但修改这两个属性的默认值不是很重要（默认一般就是最好的），重要的是剩下的<code>hover-stop-propagation</code>属性，这是设定与父元素的关联的</p><p>例如，再嵌套一个<code>view</code>，并为它添加点击的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;boxHover&quot;</span>&gt;</span></span><br><span class="line">  test1</span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;itemHover&quot;</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;<span class="attribute">width</span>: <span class="number">50px</span>;<span class="attribute">height</span>: <span class="number">50px</span>;<span class="attribute">background</span>: gold&#125;</span><br><span class="line"><span class="selector-class">.itemHover</span>&#123;<span class="attribute">background</span>:hotpink;&#125;</span><br></pre></td></tr></table></figure><p>这时点击大块，大块变色小块不变，而点击小块，大小块都会变色</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192144089.jpg" alt=""></p><p>这是因为<code>view</code>标签的<code>hover-stop-propagation</code>属性默认为<code>false</code>，也就是按压会传到到祖先节点，如果我们将其设置为<code>true</code>，则会阻断这一过程（或者只加上<code>hover-stop-propagation</code>而不赋值，也是可以的）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192146701.jpg" alt=""></p><hr><h1 id="text"><code>&lt;text&gt;</code></h1><p>在<code>HTML</code>中有行标签和块标签，在<code>WXML</code>中块标签有<code>view</code>，而行标签是<code>text</code></p><p><code>text</code>在『基础内容』分类中</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192155761.jpg" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;out&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>我是一句话。<span class="tag">&lt;/<span class="name">text</span>&gt;</span> <span class="tag">&lt;<span class="name">text</span>&gt;</span>我是另外一句话。<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192207710.jpg" alt=""></p><h2 id="选中文本">选中文本</h2><p>第一个属性是<code>user-select</code>，众所周知一般的页面里是不能选中文字的，加上这个属性就可以选中</p><p>例如添加上一段文字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">user-select</span>&gt;</span>马克思主义，英文是Marxism，是马克思主义理论体系的简称，是关于全世界无产阶级和全人类彻底解放的学说。它由马克思主义哲学、马克思主义政治经济学和科学社会主义三大部分组成，是马克思、恩格斯在批判地继承和吸收人类关于自然科学、思维科学、社会科学优秀成果的基础上于19世纪40年代创立的，并在实践中不断地丰富、发展和完善的无产阶级思想的科学体系。<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后打开预览，在手机上预览效果</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192232753.jpg" alt=""></p><p>发现是可以选中的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192233083.png" alt=""></p><h2 id="显示连续空格">显示连续空格</h2><p>在很多地方，连续的空格只会显示一个，<code>space</code>属性就是为了控制这个的，它有三个合法值，一般直接用<code>ensp</code></p><table><thead><tr><th style="text-align:left">合法值</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>ensp</code></td><td style="text-align:left">中文字符空格一半大小</td></tr><tr><td style="text-align:left"><code>emsp</code></td><td style="text-align:left">中文字符空格大小</td></tr><tr><td style="text-align:left"><code>nbsp</code></td><td style="text-align:left">根据字体设置的空格大小</td></tr></tbody></table><p>还是以那段文本举例</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192240142.jpg" alt=""></p><p>在加上这个属性后，就可以显示连续空格了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192241062.jpg" alt=""></p><h2 id="解码">解码</h2><p>decode属性用于转义解码，例如<code>&amp;nbsp; &amp;lt; &amp;gt; &amp;amp; &amp;apos; &amp;ensp; &amp;emsp;</code></p><p>这里就不演示了</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（二）目录结构介绍与新建页面</title>
      <link href="/2022/03/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%96%B0%E5%BB%BA%E9%A1%B5%E9%9D%A2/"/>
      <url>/2022/03/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%96%B0%E5%BB%BA%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本节内容源于<a href="https://www.bilibili.com/video/BV1WQ4y1T7D8?p=3">P3</a></p></blockquote><h1 id="目录结构介绍">目录结构介绍</h1><h2 id="小程序文件和传统-WEB-对比">小程序文件和传统 WEB 对比</h2><p>在小程序中，除了用于保存配置的<code>json</code>文件之外，其他大部分文件都源于传统的三板斧：<code>HTML</code>、<code>CSS</code>和<code>JS</code></p><p>但是为了区分，在小程序中<code>HTML</code>要称为<code>WXML</code>，<code>CSS</code>要称为<code>WXSS</code>，<code>JS</code>保持不变</p><table><thead><tr><th>传统 WEB</th><th>微信小程序</th></tr></thead><tbody><tr><td><code>HTML</code></td><td><code>WXML</code></td></tr><tr><td><code>CSS</code></td><td><code>WXSS</code></td></tr><tr><td><code>JS</code></td><td><code>JS</code></td></tr></tbody></table><h2 id="小程序项目结构">小程序项目结构</h2><p>一个新建的项目结构如下，具体用途在已注释中标记</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">miniprogram-1</span><br><span class="line">    │  app.js // 入口文件</span><br><span class="line">    │  app.json // 全局配置</span><br><span class="line">    │  app.wxss // 全局样式表</span><br><span class="line">    │  project.config.json // 项目配置（不重要）</span><br><span class="line">    │  sitemap.json // 微信索引（不重要）</span><br><span class="line">    │</span><br><span class="line">    ├─pages // 页面文件夹，一个文件夹对应一个页面</span><br><span class="line">    │  ├─index //首页</span><br><span class="line">    │  │      index.js   // 首页JS</span><br><span class="line">    │  │      index.json // 页面配置</span><br><span class="line">    │  │      index.wxml // 首页HTML</span><br><span class="line">    │  │      index.wxss // 首页CSS</span><br><span class="line">    │  │</span><br><span class="line">    │  └─logs // 这个是日志页面</span><br><span class="line">    │          logs.js</span><br><span class="line">    │          logs.json</span><br><span class="line">    │          logs.wxml</span><br><span class="line">    │          logs.wxss</span><br><span class="line">    │</span><br><span class="line">    └─utils // 公用文件夹，可以在里面放一些全局的函数方法之类的，非必须</span><br><span class="line">            util.js</span><br></pre></td></tr></table></figure><h1 id="新建页面">新建页面</h1><p>打开<code>/app.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;pages/logs/logs&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;backgroundTextStyle&quot;</span><span class="punctuation">:</span><span class="string">&quot;light&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#fff&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Weixin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span><span class="string">&quot;black&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sitemapLocation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sitemap.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在<code>&quot;pages&quot;</code>中定义了所有页面，最上面的是首页，可以更改页面顺序来更改首页</p><p>若要新建页面，只需在其中添加路径，然后保存即可，目录会自动创建</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203182136002.jpg" alt=""></p><h1 id="小程序使用的语言：以WXML与WXSS为例">小程序使用的语言：以<code>WXML</code>与<code>WXSS</code>为例</h1><p>打开<code>\pages\index</code>中的<code>index.wxml</code>与<code>index.wxss</code>，先将其中的内容全部删掉</p><p>在<code>index.wxml</code>中键入以下内容，并保存</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192108533.jpg" alt=""></p><p>可以看见，左侧已经渲染出来了</p><p><code>&lt;/view&gt;</code>又是什么？这不是<code>HTML</code>中的标签，这是因为<code>WXML</code>有一套自己独立的标签系统，具体内容在<a href="https://developers.weixin.qq.com/miniprogram/dev/component/view.html">官方文档</a>有</p><p>这个标签类似于<code>HTML</code>中的<code>div</code></p><p>再打开<code>index.wxss</code>，我们再其中对其修改样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123; <span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">background</span>: red;&#125;</span><br></pre></td></tr></table></figure><p>这简直与CSS中的语法一样，对不对？可以看见左侧已经渲染出来了结果</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192113894.jpg" alt=""></p><blockquote><p>总结：微信小程序用的并不是传统的WEB三板斧，而是保留了框架，而里面的标签之类的内容都是独立的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（一）准备开发环境</title>
      <link href="/2022/03/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E5%87%86%E5%A4%87%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/03/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E5%87%86%E5%A4%87%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本节内容源于<a href="https://www.bilibili.com/video/BV1WQ4y1T7D8?p=3">P1与P2</a></p></blockquote><p>开发微信小程序用的不是<code>VSCode</code>之类的主流<code>IDE</code>，而是微信自家的『微信开发者工具』</p><p>前往<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">官网下载</a>并安装</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203182019875.jpg" alt=""></p><p>新建的时候选择<code>测试号</code>，并且<code>不使用云开发</code></p><p>刚新建的项目如图所示</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203182018681.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（〇）前言</title>
      <link href="/2022/03/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/"/>
      <url>/2022/03/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203182005110.jpg" alt=""></p><blockquote><p>❤️新的领域，新的方向！</p></blockquote><p>由于竞赛的需要，本人需要学习微信小程序的开发~~（被迫营业了属于是~~</p><p>小程序嘛…自然基本上都是前端的内容，而我对于前端仅有的认知就是高中时学的那些三板斧，基本全忘光了</p><p>但是， <strong>人之所以能，是因为相信能</strong> ，我只能说尽力地去学吧！</p><p>这个系列基本上会是B站上<a href="https://www.bilibili.com/video/BV1WQ4y1T7D8">2020最新微信小程序开发零基础入门+项目案例【新视觉实训】</a>的笔记内容</p><p>因为平时时间很赶，也不是面向小白的，所以不会写得太详细，基本上就是给我复习看的</p><p>现在开始吧！</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『WSL』如何停止或重启 WSL</title>
      <link href="/2022/03/17/%E3%80%8EWSL%E3%80%8F%E5%A6%82%E4%BD%95%E5%81%9C%E6%AD%A2%E6%88%96%E9%87%8D%E5%90%AF-WSL/"/>
      <url>/2022/03/17/%E3%80%8EWSL%E3%80%8F%E5%A6%82%E4%BD%95%E5%81%9C%E6%AD%A2%E6%88%96%E9%87%8D%E5%90%AF-WSL/</url>
      
        <content type="html"><![CDATA[<p>在<code>WSL</code>中，使用平常的关机或重启命令都是没有用的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203162119554.jpg" alt=""></p><p>如果你需要关闭<code>WSL</code>，请在<code>Windows</code>的管理员命令行中执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop LxssManager</span><br></pre></td></tr></table></figure><p>或者下面这个，这个还比较好记</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><p>如果需要重启，则在关闭之后再运行<code>WSL</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（一）准备环境与数据库基础</title>
      <link href="/2022/03/16/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%87%86%E5%A4%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/16/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%87%86%E5%A4%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="准备学习环境">准备学习环境</h1><h2 id="安装-MySQL">安装 MySQL</h2><h3 id="Windows">Windows</h3><p>对于<code>Windows</code>，直接<a href="https://dev.mysql.com/downloads/windows/installer/">官网下载</a>一直下一步即可（下载下面的那个大的）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172123405.jpg" alt=""></p><p>安装程序会要求您提供安装类型，这时请选择 <code>Developer Default</code>，其他直接一路默认</p><p>之后，会指导你设置<code>root</code>用户的密码</p><h3 id="Linux">Linux</h3><h4 id="下载安装">下载安装</h4><p>对于<code>Linux</code>，直接<code>apt</code>下载安装即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>然后运行服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure><p>测试是否能进入<code>MySQL</code>命令行，一开始并没有root密码，直接回车即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203162155606.jpg" alt=""></p><h4 id="初始化">初始化</h4><p>可以看见MySQL已经安装成功，接下来输入<code>exit</code>先退回<code>bash</code>，我们需要初始化一下<code>MySQL</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出MySQL，返回bash</span></span><br><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><p>初始化设计 5 个步骤：</p><ol><li><p>安装验证密码插件</p></li><li><p>设置<code>root</code>管理员在数据库中的专有密码</p></li><li><p>随后删除匿名账户，并使用<code>root</code>管理员从远程登录数据库，以确保数据库上运行的业务的安全性</p></li><li><p>删除默认的测试数据库，取消测试数据库的一系列访问权限</p></li><li><p>刷新授权列表，让初始化的设定立即生效</p></li></ol><p>下面是输出的信息，添加了简单的注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">pi@DESKTOP-LECILAQ:~$ sudo mysql_secure_installation</span><br><span class="line"></span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Connecting to MySQL using a blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD COMPONENT can be used to test passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to set only those passwords which are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD component? # 要安装验证密码插件吗?</span><br><span class="line"></span><br><span class="line">Press y|Y for Yes, any other key for No: N # 这里我选择N</span><br><span class="line">Please set the password for root here.</span><br><span class="line"></span><br><span class="line">New password: # 输入要为root管理员设置的数据库密码</span><br><span class="line"></span><br><span class="line">Re-enter new password: # 再次输入密码</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them. This is intended only for</span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : Y # 删除匿名账户</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">&#x27;localhost&#x27;. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : N # 禁止root管理员从远程登录，这里我没有禁止</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, MySQL comes with a database named &#x27;test&#x27; that</span><br><span class="line">anyone can access. This is also intended only for testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : Y # 删除test数据库并取消对它的访问权限</span><br><span class="line"> - Dropping test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y # 刷新授权表，让初始化后的设定立即生效</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All done!</span><br><span class="line">pi@DESKTOP-LECILAQ:~$</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203162220584.jpg" alt=""></p><h4 id="允许远程连接">允许远程连接</h4><p>编辑 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> 文件，把<code>bind-address</code>的值改为<code>0.0.0.0</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172236440.jpg" alt=""></p><p>之后再进入MySQL，执行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;你的密码&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure><p>重新启动，现在允许从任何位置通过<code>root</code>用户连接了</p><h2 id="安装-HeidiSQL">安装 HeidiSQL</h2><p>很多教程用的都是<code>Navicat</code>，但是它是付费的，而且太太太贵了，我又不敢用破解版，所以选择了<code>HeidiSQL</code></p><p>前往<a href="https://www.heidisql.com/download.php">官网</a>或点击<a href="https://wwd.lanzouf.com/iE33K01lwbpg">这里</a>下载</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172133221.jpg" alt=""></p><p>使用<code>HeidiSQL</code>连接到你的数据库</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172200015.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172241893.png" alt=""></p><h2 id="加载样例数据">加载样例数据</h2><blockquote><p>这里的样例来自《SQL必知必会》（第五版），点击<a href="https://wwd.lanzouf.com/i0u8V01m21fc">此链接</a>下载</p></blockquote><p>在左侧右键新建一个数据库，用于存储样例数据，我取名为<code>test</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172259588.jpg" alt=""></p><p>然后加载<code>create.sql</code>，再按上面的蓝色箭头运行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172313091.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172317406.jpg" alt=""></p><p>回到<code>test</code>库，右键刷新，可以看见已经出现了数据</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172318686.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172320937.jpg" alt=""></p><p>然后再对<code>populate.sql</code>作相同的操作，完成样例数据导入</p><h1 id="数据库的层次结构">数据库的层次结构</h1><p>由大到小，一共可以分为4层：<code>数据库</code>，<code>表</code>，<code>列</code>与<code>行</code>（或称为字段或记录）</p><h2 id="数据库（datebase）">数据库（datebase）</h2><blockquote><p>定义：保持有组织的数据的容器（通常是一个文件或一组文件）</p></blockquote><p>一台主机中可以包含诺干个数据库，例如下图中共有<code>information_schema</code>，<code>mysql</code>，<code>performance_schema</code>，<code>sys</code>和<code>test</code>5个数据库，其中<code>test</code>是我们在上一篇添加的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203221950211.jpg" alt=""></p><blockquote><p><strong>注意：误用导致混淆</strong></p><p>人们常用数据库这个术语代表他们使用的数据库软件，这是不正确的，也因此产生了许多混淆。确切地说，数据库软件应称为数据库管理系统（<code>DBMS</code>)。数据库是通过<code>DBMS</code>创建和操纵的容器，而具体它究竟是什么，形式如何，各种数据库都不一样</p></blockquote><h2 id="表（table）">表（table）</h2><blockquote><p>定义：某种特定类型数据的结构化清单</p></blockquote><p>如图，<code>test</code>库中包含了<code>Customers</code>，<code>OrderItems</code>，<code>Orders</code>，<code>Products</code>，<code>Vendors</code>5个表</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203242238209.jpg" alt=""></p><h2 id="列（column">列（column)</h2><blockquote><p>定义：表中的一个字段（也就是说<code>字段</code>和<code>列</code>是同一个意思），所有的表都是由一个或多个列组成的</p></blockquote><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203242244036.jpg" alt=""></p><blockquote><p>数据类型：记住，每个列都有对应的数据类型，</p></blockquote><h2 id="行（row）">行（row）</h2><blockquote><p>定义：表中的一个记录（record），也就是说<code>记录</code>和<code>行</code>是同一个意思</p></blockquote><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203242251753.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（〇）前言</title>
      <link href="/2022/03/15/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/"/>
      <url>/2022/03/15/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203022011524.jpg" alt=""></p><blockquote><p>❤️又开新坑了！！！</p></blockquote><p><code>SQL</code>是<code>Structred Query Language</code>（结构化查询语言）的缩写，是一门专门用来与数据库沟通的语言</p><p>鄙人其实早之前就想入门了，但是买了书一直都没看，居然还是崭新的~~（真的是拖延症晚期患者）~~</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203152222672.png" alt=""></p><blockquote><p>这个系列我打算以这本《SQL必知必会》为骨架，<a href="https://www.runoob.com/sql/sql-tutorial.html">菜鸟教程</a>以及其他网上资料为补充</p></blockquote><p>今天好累，刚把Python系列的集合那一篇写完，正文第一篇留到明天再写吧❤️</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（八）集合（Set）</title>
      <link href="/2022/03/14/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E9%9B%86%E5%90%88%EF%BC%88Set%EF%BC%89/"/>
      <url>/2022/03/14/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E9%9B%86%E5%90%88%EF%BC%88Set%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="初识集合">初识集合</h1><p>与数学中的集合一样，Python中 <code>集合（set）</code> 中每一个元素都是独一无二的，因而集合具有去重功能</p><p>Python 中的集合很强大，你可以对集合轻松执行各种运算</p><h1 id="新建集合">新建集合</h1><h2 id="使用大括号">使用大括号 <code>&#123;&#125;</code></h2><p>集合和字典有时很容易弄混，因为它们都是用一对花括号定义的</p><p>只不过当内容是键值对时，表示的是字典，内容是诺干单独元素时，表示的是集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">languages = &#123;<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(languages) <span class="comment"># &#123;&#x27;ruby&#x27;, &#x27;python&#x27;, &#x27;c&#x27;&#125; 这里体现了集合的去重功能</span></span><br></pre></td></tr></table></figure><h2 id="使用-set">使用  <code>set()</code></h2><p>使用 <code>set()</code> 函数可以将其他类型转换为集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&quot;12345&quot;</span>) <span class="comment"># 字符串转集合</span></span><br><span class="line">b = <span class="built_in">set</span>([<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>]) <span class="comment"># 列表转集合</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [&#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>集合不会以特定的顺序储存元素，反复执行上面的代码，输出元素的顺序会不同，当你使用 <code>for ... in ...</code>  结构时，提取出来的元素的顺序也是不定的</li><li>当创建空集合时，必须使用 <code>set()</code> ，因为 <code>&#123;&#125;</code> 意为创建一个新字典</li></ul></blockquote><hr><h1 id="集合运算">集合运算</h1><p>在进行集合运算时，使用 <strong>集合运算符</strong> 或 <strong>集合的方法</strong> 有时可以达到相同的效果</p><p>如果你从未了解过集合运算，下面这张图可能有所帮助</p><details class="toggle" ><summary class="toggle-button" style="">点击以打开</summary><div class="toggle-content"><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203142217039.png" alt=""></p></div></details><h2 id="交集：A-B">交集：<code>A &amp; B</code></h2><p>在 A 与 B 中都有的元素，等同于 <code>A.intersection(B)</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a &amp; b)) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a.intersection(b)))</span><br><span class="line"><span class="comment"># [&#x27;4&#x27;, &#x27;5&#x27;]</span></span><br></pre></td></tr></table></figure><p>另一个与交集有关的方法是 <code>A.isdisjoint(B)</code> ，如果两个集合没有交集，则返回 <code>True</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a.isdisjoint(b)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a.isdisjoint(&#123;<span class="string">&#x27;0&#x27;</span>&#125;)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="并集：A-B">并集：<code>A | B</code></h2><p>A 与 B 中的全部元素，等同于 <code>A.union(B)</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a | b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a.union(b)))</span><br><span class="line"><span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="补集：A-B">补集：<code>A - B</code></h2><p>在 A 中有，而不在 B 中有的元素，等同于 <code>A.difference(B)</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a - b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a.difference(b)))</span><br><span class="line"><span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(b - a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(b.difference(a)))</span><br><span class="line"><span class="comment"># [&#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的补集应为 <strong>广义上的补集</strong> ，包括 <strong>绝对补集</strong>（一般意义的补集）和 <strong>相对补集</strong>（差集）</p></blockquote><h2 id="对称差集：A-B">对称差集：<code>A ^ B</code></h2><p>不同时包含于 A、B 的元素（并集中除去交集），等同于 <code>A.symmetric_difference(B)</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a ^ b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a.symmetric_difference(b)))</span><br><span class="line"><span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的四个集合方法可以传入多个参数，表示连续运算，如 <code>A.intersection(B,C)</code></p></blockquote><h2 id="子集-真子集：A-B-A-B">子集 / 真子集：<code>A &lt;= B</code> / <code>A &lt; B</code></h2><p>其中，<code>A &lt;= B</code> 等同于 <code>A.issubset(B)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(<span class="string">&quot;123&quot;</span>) &lt; a) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(<span class="string">&quot;123&quot;</span>).issubset(a)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="包含-超集：A-B-A-B">包含 / 超集：<code>A &gt;= B</code> / <code>A &gt; B</code></h2><p>其中，<code>A &gt;= B</code> 等同于 <code>A.issuperset(B)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(<span class="string">&quot;1234567890&quot;</span>) &gt; a) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(<span class="string">&quot;1234567890&quot;</span>).issuperset(a)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="元素是否在集合中：in-not-in">元素是否在集合中：<code>in</code> / <code>not in</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">not</span> <span class="keyword">in</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><hr><h1 id="集合其他常用方法-函数">集合其他常用方法/函数</h1><h2 id="统计元素个数">统计元素个数</h2><h3 id="len"><code>len()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a)) <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><h2 id="添加">添加</h2><h3 id="set-add-obj"><code>set.add(obj)</code></h3><p>将单个元素添加至集合中，如果元素已经在集合中，则不进行任何操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.add(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a)) <span class="comment"># [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="set-update-seq-seq2-seq3"><code>set.update(seq[,seq2,seq3,...])</code></h3><p>将 <code>seq</code> 中的元素添加至集合中，<code>seq</code> 可以是是列表，元组，字典等，可以同时传入多个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.update([<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a)) <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="删除">删除</h2><h3 id="set-remove-obj"><code>set.remove(obj)</code></h3><p>在集合中移除一个元素，如果找不到该元素就会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a.remove(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a))  <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br><span class="line">a.remove(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;d:\Study\Python\test.py&quot;, line 21, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     a.remove(&#x27;3&#x27;)</span></span><br><span class="line"><span class="comment"># KeyError: &#x27;3&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="set-discard-obj"><code>set.discard(obj)</code></h3><p>与前者基本相同，但找不到元素不会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.discard(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a))  <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br><span class="line">a.discard(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a))  <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="set-pop-obj"><code>set.pop(obj)</code></h3><p>随机弹出一个元素，如果集合为空则会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&quot;12345&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.pop())  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h3 id="set-clear"><code>set.clear()</code></h3><p>清空集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.clear()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># set()</span></span><br></pre></td></tr></table></figure><h2 id="复制">复制</h2><h3 id="set-copy"><code>set.copy()</code></h3><p>返回一个集合的拷贝</p><hr><h1 id="不可变集">不可变集</h1><p>仿照列表与元组的关系，Python 中集合对应着不可变集</p><p>除了内部元素不可改变，其他地方与普通集合一模一样</p><p>不可变集使用 <code>frozenset()</code> 创建</p><p><s>虽然我也不知道这个有什么用</s></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『杂文』在迷茫中前进</title>
      <link href="/2022/03/13/%E3%80%8E%E6%9D%82%E6%96%87%E3%80%8F%E5%9C%A8%E8%BF%B7%E8%8C%AB%E4%B8%AD%E5%89%8D%E8%BF%9B/"/>
      <url>/2022/03/13/%E3%80%8E%E6%9D%82%E6%96%87%E3%80%8F%E5%9C%A8%E8%BF%B7%E8%8C%AB%E4%B8%AD%E5%89%8D%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203132244835.jpg" alt=""></p><blockquote><p>现在时间是晚上22点36分，每日一篇的技术文肯定是写不完了，就写一篇近期的个人感想吧</p></blockquote><h1 id="很烦，很累">很烦，很累</h1><p>这几天我感觉很累，真的</p><p>从周五早上开始放假，再到现在周日晚上，我想了想，我基本就没做什么正事</p><p>玩也没有好好玩，学习也没有好好学习，属于一种不在状态的样子，做什么事情都没有劲</p><p>为什么呢？我不知道，我想找回曾经的状态——有着明确的目标，且精力充沛</p><p>但是不行，即使玩游戏也没法让自己放松</p><p>周五，周六，周日，我基本都在找我感兴趣的游戏，能让我打起精神来，寻找一个目标，然后奋力前进</p><p>但是我发现，好像所有的游戏我都玩腻了</p><p>csgo，WT，缺氧，泰坦陨落2，RA3…我在我的 steam 库里寻找哪怕能让我解闷一点的游戏，但是我找不到——我感觉我都玩腻了，没意思</p><p>周五晚，我连续打了将近8个小时的文明6，玩的是老秦，从酋邦，到商人共和国，到君主制，都法西斯政体，再到后来的联合专家统治…我沉醉其中，但这个档玩到快科技胜利的时候，我又感觉玩腻了，眼睛还贼痛</p><p>然后干什么？我不知道，我知道我给自己定的规则：不管每天有多忙，不管有多少阻碍，每天至少要写一篇博客，记录下今天都学了些什么</p><p>于是，前两天水了一篇python的，一篇gin框架的，但今天，我真的提不起劲了——就是没这个劲</p><p>我知道我在空耗时间，但我就是没劲做任何事，我讨厌虚度光阴，浪费宝贵的时间，我想摆脱这种状态，但是找不出办法</p><h1 id="重复、重复">重复、重复</h1><p>一年中，你是真的过了365天，还是过了一天，然后重复了365次？</p><p>如果是之前，我绝对会说是365天，但是我现在真的感觉是在重复</p><p>每一天，我基本都是相同的轨迹：早上7，8点去买个包子加豆奶，中午去买份9块钱的烤冷面，回宿舍刷会B站，然后睡午觉，下午随便做点事打发时间，晚上再去买个16块的烧鸭饭，或是14.9的汉堡快餐，或是去吃另一家16块的饭</p><p>毕竟现在封校，我也不能随便出去，即使能出去，我也不是很想出去，每月1500的生活费，我需要尽量将每日消费控制在30元以内，毕竟要预留资金以供随机事件支配（比如你愿望单里面的游戏突然打折），出门就意味着要花费额外的时间和金钱，而这两者都不是我想随便花费的</p><p>我平时不怎么出门运动，有时特别想去运动的时候，外面又很冷，又下雨…但是这几天杭州逐渐转暖了，学校规定的长跑也开始了，之后应该会每天去跑步的，当然，那些是明天再要考虑的事了</p><h1 id="前途一片迷茫">前途一片迷茫</h1><p>每日的重复让我乏味，我感觉每天都在学一大堆没用的东西</p><p>我为什么来学了自动化？我学的为什么不是计算机？</p><p>开学前3周算是适应期，课比较少，但明天就是第4周了，开了门叫金工实习的课</p><p>我的妈，我为什么要学这种东西？我学了有个什么用</p><p>还有什么工程经济学，还有创业基础（这个最恶心，最后还要你写什么计划书），还有一堆思政类课程（从第六周开始，每周要上3门：改革开放史，形势与政策，思想道德与法制，要写一堆报告，我也是服了）</p><p>其他剩下的也都是我感觉比较中性的课（没有太大兴趣，但也愿意认真听），比如高数大物还有专业课之类的</p><p>有没有我感兴趣的呢？基本没有</p><p>我翻了翻培养计划，后面也就数据结构与算法，还有计算机视觉这两门听上去还不错</p><p>自动化…其实就是半个软件，半个硬件的交叉学科，而我则对硬件没多大兴趣，让我去学什么数控机床，我也是服了，而写代码有关的课程又少得可怜</p><p>前路？大概是很迷茫的</p><p>我以后要去做什么工作？我不知道</p><p>要去互联网大厂吗？我不知道，我这4年如果好好抓紧时间，多在计算机这方面学习一些，或许是可以的，但是，我不知道</p><p>要去考研吗？我不知道，我买了计算机方面考研的书，但是基本还没看什么，我买来也是想看看计算机方面大概要学些什么东西，至于考研？我上学期高数才60多，还去考研？没这个能力知道吧</p><p>我现在要学些什么？我不知道，没人能告诉你你应该去学什么，我只能说，别人学了什么，你就跟着去学吧</p><p>但是，很多时候，我明显太过于急功近利了</p><p>学了这个有什么用吗？学完了貌似也没法应用到哪里，学了一半，太难了——想放弃</p><p>那去补补算法方面的能力？去刷leetcode？</p><p>我看看社团大佬的博客，DFS，BFS，动态规划…，啊，我记得高中竞赛的时候都学过，但我更加清楚地记得我现在已经全都忘了</p><p>leetcode上第一题，第一种解法，暴力枚举，还行，第二种，哈希表，学过，全忘了，不想看了</p><p>为什么不再去学？太难了，不想去学了，各种数据结构全忘了，C++STL里面一堆好用的东西都忘记怎么用了，这还怎么去刷题</p><p>又没有同行者，一个人，我没有信心去搞定那些东西</p><p>周边的人摆烂的摆烂，谈恋爱的谈恋爱，而我，独自一人</p><p>一打开朋友圈，吃的吃玩的玩，秀恩爱的秀恩爱</p><p>讲到爱情？只有初中时那段天真但很温暖的恋爱让我感觉是在恋爱，而现在……</p><h1 id="在迷茫中前进">在迷茫中前进</h1><p>生活还是要继续</p><p>今天下午，花了100多巨款买了大表哥2，打了几个小时，算是放松了会，R星的品控还是可以的</p><p>写到结尾了，一口气写了这么多东西了，也是舒畅了许多，不会再闷在心里了</p><p>在迷茫中前进，走向未知的彼岸，可喜可贺，至少我还在前进</p><p>对比其他人，我可能还算幸运，我是他们羡慕的对象</p><p>至少我高中参加过竞赛拿了省奖，折腾过Linux，有些底子，上学期数学建模也拿了个校一等，这学期又被预录取为亚运会志愿者，我是他们羡慕的人</p><p>至少我在杭电助手后端部这个大家庭，我能看见所有的项目源码，里面大佬云集，经常讨论着我都看不懂的问题，我以后肯定能学会很多</p><p>至少我还年轻，我还没到19岁，我才大一，不像有些人大学混完4年，一事无成，都不知道自己学了些什么</p><p>我想，如果我能保持住每日一文的习惯，每天不管写些什么，前途定会逐渐明朗</p><p>不写了，明天又是早八，明天又会是新的一天</p>]]></content>
      
      
      <categories>
          
          <category> 随笔与总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（七）字典（Dictionary）</title>
      <link href="/2022/03/12/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E5%AD%97%E5%85%B8%EF%BC%88Dictionary%EF%BC%89/"/>
      <url>/2022/03/12/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E5%AD%97%E5%85%B8%EF%BC%88Dictionary%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="初识字典">初识字典</h1><p><code>字典（Dictionary）</code> 类似于 C++ 中的 <code>Map</code> ，内部都是键值对，用于创建一类对象对另一类对象的映射</p><p>但不同的是，字典中的映射类型是不固定的（键与键之间，值与值之间的类型可以不相同）</p><p>值可以取任何数据类型（甚至可以嵌套字典），但键必须是不可变的，如字符串，数字</p><h1 id="创建字典">创建字典</h1><p>使用大括号 <code>&#123;&#125;</code> 创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">personInfo = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;hobby&#x27;</span>: [<span class="string">&#x27;reading&#x27;</span>, <span class="string">&#x27;running&#x27;</span>, <span class="string">&#x27;swimming&#x27;</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(personInfo) <span class="comment"># &#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 18, &#x27;hobby&#x27;: [&#x27;reading&#x27;, &#x27;running&#x27;, &#x27;swimming&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="技巧：写成多行">技巧：写成多行</h2><p>在某些场景下，写成多行能让内容更加清晰明了，例如这里统计几个人最喜欢的编程语言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">favoriteLanguages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarch&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="访问字典">访问字典</h1><h2 id="键-值">键-&gt;值</h2><h3 id="一般写法">一般写法</h3><p>使用中括号 <code>[]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">personInfo = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;hobby&#x27;</span>: [<span class="string">&#x27;reading&#x27;</span>, <span class="string">&#x27;running&#x27;</span>, <span class="string">&#x27;swimming&#x27;</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(personInfo[<span class="string">&#x27;name&#x27;</span>]) <span class="comment"># Tom</span></span><br><span class="line"><span class="built_in">print</span>(personInfo[<span class="string">&#x27;age&#x27;</span>]) <span class="comment"># 18</span></span><br><span class="line"><span class="built_in">print</span>(personInfo[<span class="string">&#x27;hobby&#x27;</span>]) <span class="comment"># [&#x27;reading&#x27;, &#x27;running&#x27;, &#x27;swimming&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="使用get-方法">使用<code>get()</code>方法</h3><p>上面的写法满足绝大多数情况，但是有时可能会引发问题：<strong>指定的键不存在时会直接报错</strong></p><p>而某些情况是不能完全确定一个键是有没有对应的值的，这时就要用到 <code>get()</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">personInfo = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;student&#x27;</span>&#125;</span><br><span class="line">job = personInfo.get(<span class="string">&#x27;job&#x27;</span>, <span class="string">&quot;Tom didn&#x27;t have a job yet!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(job) <span class="comment"># student</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> personInfo[<span class="string">&#x27;job&#x27;</span>]</span><br><span class="line">job = personInfo.get(<span class="string">&#x27;job&#x27;</span>, <span class="string">&quot;Tom didn&#x27;t have a job yet!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(job) <span class="comment"># Tom didn&#x27;t have a job yet!</span></span><br></pre></td></tr></table></figure><p><code>get()</code> 的第一个参数是要查询的键，第二个参数是键不存在时返回的默认值</p><h2 id="遍历">遍历</h2><p>这里以上面的 <strong>最喜欢的编程语言</strong> 为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">favoriteLanguages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarch&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历所有键值对">遍历所有键值对</h3><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key , value <span class="keyword">in</span> favoriteLanguages.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Key: &#x27;</span>+key+<span class="string">&#x27; Value: &#x27;</span>+value)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Key: jen Value: python</span><br><span class="line">Key: sarch Value: c</span><br><span class="line">Key: edward Value: ruby</span><br><span class="line">Key: phil Value: python</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="遍历所有键">遍历所有键</h3><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favoriteLanguages.keys():</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jen</span><br><span class="line">sarch</span><br><span class="line">edward</span><br><span class="line">phil</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details class="toggle" ><summary class="toggle-button" style="">技巧：排序</summary><div class="toggle-content"><p>从 <code>Python3.7</code> 开始，将以插入元素的顺序遍历，但我们也可以重新排序，例如下面的方法</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(favoriteLanguages.keys()):</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edward</span><br><span class="line">jen</span><br><span class="line">phil</span><br><span class="line">sarch</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div></details><h3 id="遍历所有值">遍历所有值</h3><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> favoriteLanguages.values():</span><br><span class="line">    <span class="built_in">print</span>(language)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">c</span><br><span class="line">ruby</span><br><span class="line">python</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details class="toggle" ><summary class="toggle-button" style="">技巧：剔除重复项</summary><div class="toggle-content"><p>我们可以运用 <code>集合（set）</code> 的性质来剔除重复项</p><p>集合将在下一篇中讲解</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> <span class="built_in">set</span>(favoriteLanguages.values()):</span><br><span class="line">    <span class="built_in">print</span>(language)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">ruby</span><br><span class="line">c</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div></details><h1 id="添加键值对">添加键值对</h1><p>直接使用 <code>字典名[键]=值</code> 即可</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">favoriteLanguages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarch&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(favoriteLanguages)</span><br><span class="line"></span><br><span class="line">favoriteLanguages[<span class="string">&#x27;mike&#x27;</span>] = <span class="string">&#x27;java&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(favoriteLanguages)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;jen&#x27;: &#x27;python&#x27;, &#x27;sarch&#x27;: &#x27;c&#x27;, &#x27;edward&#x27;: &#x27;ruby&#x27;, &#x27;phil&#x27;: &#x27;python&#x27;&#125;</span><br><span class="line">&#123;&#x27;jen&#x27;: &#x27;python&#x27;, &#x27;sarch&#x27;: &#x27;c&#x27;, &#x27;edward&#x27;: &#x27;ruby&#x27;, &#x27;phil&#x27;: &#x27;python&#x27;, &#x27;mike&#x27;: &#x27;java&#x27;&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="修改键值对">修改键值对</h1><p>同样，直接使用 <code>字典名[键]=值</code> 即可</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">favoriteLanguages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarch&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(favoriteLanguages)</span><br><span class="line"></span><br><span class="line">favoriteLanguages[<span class="string">&#x27;jen&#x27;</span>] = <span class="string">&#x27;java&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(favoriteLanguages)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;jen&#x27;: &#x27;python&#x27;, &#x27;sarch&#x27;: &#x27;c&#x27;, &#x27;edward&#x27;: &#x27;ruby&#x27;, &#x27;phil&#x27;: &#x27;python&#x27;&#125;</span><br><span class="line">&#123;&#x27;jen&#x27;: &#x27;java&#x27;, &#x27;sarch&#x27;: &#x27;c&#x27;, &#x27;edward&#x27;: &#x27;ruby&#x27;, &#x27;phil&#x27;: &#x27;python&#x27;&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="删除键值对">删除键值对</h1><p>使用 <code>del 字典名[键]</code></p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">favoriteLanguages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarch&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(favoriteLanguages)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> favoriteLanguages[<span class="string">&#x27;jen&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(favoriteLanguages)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;jen&#x27;: &#x27;python&#x27;, &#x27;sarch&#x27;: &#x27;c&#x27;, &#x27;edward&#x27;: &#x27;ruby&#x27;, &#x27;phil&#x27;: &#x27;python&#x27;&#125;</span><br><span class="line">&#123;&#x27;sarch&#x27;: &#x27;c&#x27;, &#x27;edward&#x27;: &#x27;ruby&#x27;, &#x27;phil&#x27;: &#x27;python&#x27;&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 入门笔记（十）Cookie 与 Session</title>
      <link href="/2022/03/11/Gin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89Cookie-%E4%B8%8E-Session/"/>
      <url>/2022/03/11/Gin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89Cookie-%E4%B8%8E-Session/</url>
      
        <content type="html"><![CDATA[<h1 id="初识-Cookie">初识 Cookie</h1><p><code>HTTP</code> 是无状态协议。简单地说，当你浏览了一个页面，然后转到同一个网站的另一个页 面，服务器无法认识到这是同一个浏览器在访问同一个网站。每一次的访问，都是没有任何关系的。如果我们要实现多个页面之间共享数据的话我们就可以使用 <code>Cookie</code> 或者 <code>Session</code> 实现</p><p><code>cookie</code> 存储于访问者计算机的浏览器中，可以让我们用同一个浏览器访问同一个域名的时候共享数据</p><p><code>Cookie</code> 能实现的简单功能：</p><ul><li><p>保持用户登录状态</p></li><li><p>保存用户浏览记录</p></li></ul><hr><h1 id="使用-Cookie">使用 Cookie</h1><h2 id="设置-Cookie">设置 Cookie</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con.SetCookie(name <span class="type">string</span>, value <span class="type">string</span>, maxAge <span class="type">int</span>, path <span class="type">string</span>, domain <span class="type">string</span>, secure <span class="type">bool</span>, httpOnly <span class="type">bool</span>)</span><br></pre></td></tr></table></figure><ul><li><p><code>maxAge</code>：过期时间</p><ul><li>大于<code>0</code>，设置过期时间，单位为秒</li><li>小于<code>0</code>，删除本<code>Cookie</code></li><li>等于<code>0</code>，设置为当关闭浏览器时过期</li></ul></li><li><p><code>path</code>：<code>Cookie</code>的路径</p></li><li><p><code>domain</code>：作用域，若要在多个二级域名中使用，如<code>a.example.com</code>和<code>b.example.com</code>，则要写成<code>.example.com</code></p></li><li><p><code>secure</code>：为<code>True</code>时，仅在<code>HTTPS</code>中生效</p></li><li><p><code>httpOnly</code>：用于防止客户端脚本通过<code>document.cookie</code>属性访问<code>Cookie</code>，有助于保护<code>Cookie</code>不被跨站脚本攻击窃取或篡改</p></li></ul><h2 id="读取-Cookie">读取 Cookie</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie, err := con.Cookie(<span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="样例">样例</h1><p><code>defaultRouters.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;test/controllers/homePage&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DefaultRoutersInit</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line"><span class="comment">//前台路由</span></span><br><span class="line">defaultRouters := r.Group(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">defaultRouters.GET(<span class="string">&quot;/&quot;</span>, homePage.HomePageController&#123;&#125;.Index)</span><br><span class="line">defaultRouters.GET(<span class="string">&quot;/news&quot;</span>, homePage.HomePageController&#123;&#125;.News)</span><br><span class="line">defaultRouters.GET(<span class="string">&quot;/user&quot;</span>, homePage.HomePageController&#123;&#125;.User)</span><br><span class="line">defaultRouters.GET(<span class="string">&quot;/login&quot;</span>, homePage.HomePageController&#123;&#125;.Login)</span><br><span class="line">defaultRouters.GET(<span class="string">&quot;/logout&quot;</span>, homePage.HomePageController&#123;&#125;.Logout)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>homePageController.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homePage</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HomePageController <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> Login(con *gin.Context) &#123;</span><br><span class="line">con.SetCookie(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">3600</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;已登录&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> Logout(con *gin.Context) &#123;</span><br><span class="line">username, _ := con.Cookie(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">con.SetCookie(<span class="string">&quot;username&quot;</span>, username, <span class="number">-1</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> User(con *gin.Context) &#123;</span><br><span class="line">username, _ := con.Cookie(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;用户：&quot;</span>+username)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> Index(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;首页&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> News(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;新闻&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203111010190.jpg" alt=""></p><hr><h1 id="初识-Session">初识 Session</h1><p><code>Session</code>技术与<code>Cookie</code>类似，最大的不同是<code>Cookie</code>是存储在客户端的，而<code>Session</code>是存储在服务端的</p><p>当客户端浏览器第一次访问服务器并发送请求时，服务器端会创建一个 <code>session</code> 对象，生成 一个类似于 <code>key,value</code> 的键值对，然后将 <code>value</code> 保存到服务器 将 <code>key(cookie)</code>返回到浏览器(客户端)。浏览器下次访问时会携带 <code>key(cookie)</code>，找到对应的 <code>session(value)</code></p><h1 id="安装-session-包">安装 session 包</h1><p>gin是不集成session的，只能用第三方的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/gin-contrib/sessions</span><br></pre></td></tr></table></figure><hr><h1 id="样例-2">样例</h1><p><code>main.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;html/template&quot;</span></span><br><span class="line"><span class="string">&quot;test/models&quot;</span></span><br><span class="line"><span class="string">&quot;test/routers&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.SetFuncMap(template.FuncMap&#123;</span><br><span class="line"><span class="string">&quot;unixToDate&quot;</span>: models.UnixToDate,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.LoadHTMLGlob(<span class="string">&quot;templates/**/*&quot;</span>)</span><br><span class="line"></span><br><span class="line">store := cookie.NewStore([]<span class="type">byte</span>(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">r.Use(sessions.Sessions(<span class="string">&quot;mysession&quot;</span>, store))</span><br><span class="line"></span><br><span class="line"><span class="comment">//前台路由</span></span><br><span class="line">routers.DefaultRoutersInit(r)</span><br><span class="line"><span class="comment">//后台路由</span></span><br><span class="line">routers.AdminRoutersInit(r)</span><br><span class="line"><span class="comment">//api 路由</span></span><br><span class="line">routers.ApiRoutersInit(r)</span><br><span class="line"></span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>homePageController.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homePage</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HomePageController <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> Login(con *gin.Context) &#123;</span><br><span class="line"><span class="comment">// con.SetCookie(&quot;username&quot;, &quot;张三&quot;, 0, &quot;/&quot;, &quot;127.0.0.1&quot;, false, true)</span></span><br><span class="line">session := sessions.Default(con)</span><br><span class="line">session.Options(sessions.Options&#123;</span><br><span class="line">MaxAge: <span class="number">3600</span> * <span class="number">6</span>, <span class="comment">//6h</span></span><br><span class="line">&#125;)</span><br><span class="line">session.Set(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;张三&quot;</span>)</span><br><span class="line">session.Save()</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;已登录&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> Logout(con *gin.Context) &#123;</span><br><span class="line">session := sessions.Default(con)</span><br><span class="line">session.Clear()</span><br><span class="line">session.Save()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> User(con *gin.Context) &#123;</span><br><span class="line">session := sessions.Default(con)</span><br><span class="line">username := session.Get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">con.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> Index(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;首页&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> News(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;新闻&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203121427501.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203121432176.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Gin 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 入门笔记（九）文件上传</title>
      <link href="/2022/03/10/Gin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2022/03/10/Gin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="单文件上传">单文件上传</h1><h2 id="定义模板">定义模板</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/admin/doUpload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        用户名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        文  件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：<code>enctype=&quot;multipart/form-data&quot;</code>不能漏</p><h2 id="添加控制器">添加控制器</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> DoUpload(con *gin.Context) &#123;</span><br><span class="line">username := con.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">file, err := con.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">con.JSON(http.StatusInternalServerError, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: err.Error(),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dst := path.Join(<span class="string">&quot;./static/upload&quot;</span>, file.Filename)</span><br><span class="line">fmt.Println(dst)</span><br><span class="line">con.SaveUploadedFile(file, dst)</span><br><span class="line">con.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>:  fmt.Sprintf(<span class="string">&quot;&#x27;%s&#x27;,uploaded!&quot;</span>, file.Filename),</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件的保存文件夹应当提前创建好</p><h2 id="配置路由">配置路由</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adminRouters.POST(<span class="string">&quot;/doUpload&quot;</span>, admin.AdminController&#123;&#125;.DoUpload)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203100821313.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203100820294.jpg" alt=""></p><hr><h1 id="多文件上传">多文件上传</h1><p>对于多文件，可以拆成多个单文件分别手动处理，也可以按照如下的方式</p><h2 id="模板">模板</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;文件上传&lt;/h2&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/admin/doUpload&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        用户名： &lt;input <span class="keyword">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> placeholder=<span class="string">&quot;用户名&quot;</span>&gt; &lt;br&gt; &lt;br&gt;</span><br><span class="line">        文  件<span class="number">1</span>：&lt;input <span class="keyword">type</span>=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file[]&quot;</span>&gt;&lt;br&gt; &lt;br&gt;</span><br><span class="line">        文  件<span class="number">2</span>：&lt;input <span class="keyword">type</span>=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file[]&quot;</span>&gt;&lt;br&gt; &lt;br&gt;</span><br><span class="line">        &lt;input <span class="keyword">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="控制器">控制器</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> DoUpload(con *gin.Context) &#123;</span><br><span class="line">username := con.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line"></span><br><span class="line">form, _ := con.MultipartForm()</span><br><span class="line">files := form.File[<span class="string">&quot;file[]&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">dst := path.Join(<span class="string">&quot;./static/upload&quot;</span>, file.Filename)</span><br><span class="line">con.SaveUploadedFile(file, dst)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">con.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>:  <span class="string">&quot;文件上传成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203100840392.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203100840479.jpg" alt=""></p><hr><h1 id="检查后缀并按日期保存">检查后缀并按日期保存</h1><p>在上面的例子中，保存文件时文件名都没有修改，这将带来两个缺点：</p><ul><li>太乱了</li><li>同名文件会被覆盖</li></ul><p>于是，按时间保存就非常有必要，下面将以上传图片为例来演示</p><p>总体思路：</p><ol><li>获取上传的文件</li><li>获取后缀名，判断是否是图片</li><li>创建图片保存目录</li><li>生成文件名称</li><li>保存文件</li></ol><p>首先在<code>tools.go</code>中添加两个全局方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUnix</span><span class="params">()</span></span> <span class="type">int64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now().Unix()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDay</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">template := <span class="string">&quot;20060102&quot;</span></span><br><span class="line"><span class="keyword">return</span> time.Now().Format(template)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>adminController.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> DoUpload(con *gin.Context) &#123;</span><br><span class="line">username := con.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1获取上传的文件</span></span><br><span class="line">file, _ := con.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2获取后缀名，判断是否是图片</span></span><br><span class="line">extName := path.Ext(file.Filename)</span><br><span class="line">allowExtMap := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">bool</span>&#123;</span><br><span class="line"><span class="string">&quot;.jpg&quot;</span>:  <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;.png&quot;</span>:  <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;.gif&quot;</span>:  <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;.jpge&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, ok := allowExtMap[extName]; !ok &#123;</span><br><span class="line">con.String(http.StatusOK, <span class="string">&quot;文件类型不合法&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3创建图片保存目录</span></span><br><span class="line">day := models.GetDay()</span><br><span class="line">dir := <span class="string">&quot;./static/upload/&quot;</span> + day + <span class="string">&quot;/&quot;</span></span><br><span class="line"><span class="keyword">if</span> err := os.MkdirAll(dir, <span class="number">0666</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4生成文件名称</span></span><br><span class="line">filename := strconv.FormatInt(models.GetUnix(), <span class="number">10</span>) + extName</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5保存文件</span></span><br><span class="line">con.SaveUploadedFile(file, dir+filename)</span><br><span class="line"></span><br><span class="line">con.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>:  <span class="string">&quot;文件上传成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203102234289.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203102234109.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Gin 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』main 函数的参数</title>
      <link href="/2022/03/09/%E3%80%8EC-C-%E3%80%8Fmain-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/"/>
      <url>/2022/03/09/%E3%80%8EC-C-%E3%80%8Fmain-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>也许你在某些地方会见到这种写法的<code>main</code>函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>int argc, char *argv[]</code>的含义是接收从命令行调用时附加的参数</p><p>其中，<code>int argc</code>用于统计参数的总个数，<code>char *argv[]</code>则依次保存这些参数</p><p><code>argc</code>的值至少为<code>1</code>，即使你没有附加任何参数，因为<code>arge[0]</code>会保存着当前程序的名称或完整路径</p><p>为什么是或呢？<code>arge[]</code>其实保存的是这一行中的所有参数，如果当前程序是在<code>PATH</code>中的（或当前文件夹，<code>Windows</code>环境下），就可以仅凭名称调用</p><p>下面的程序能依次打印接收的参数，你可以借此学习如何使用这一机制</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;argument&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; argv[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;total argument:&quot;</span> &lt;&lt; argc;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203092146916.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（六）元组（Tuple）</title>
      <link href="/2022/03/08/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E5%85%83%E7%BB%84%EF%BC%88Tuple%EF%BC%89/"/>
      <url>/2022/03/08/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E5%85%83%E7%BB%84%EF%BC%88Tuple%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>元组（Tuple）</code>与列表及其相似，只是元组的内容不能更改，可以认为是列表的常量版本</p></blockquote><h1 id="创建元组">创建元组</h1><p>使用小括号 <code>()</code> 将各个元素括起来即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> )</span><br></pre></td></tr></table></figure><p>实际上，小括号不是必须的，最初的元组定义就是使用逗号分隔元素即可，小括号只是为了美观</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tup3 = <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>   <span class="comment">#  不需要括号也可以</span></span><br></pre></td></tr></table></figure><p>所以当元组中只包含一个元素时，<strong>必须</strong> 在元素后面添加逗号，否则括号会被当作运算符使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">50</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tup1)     <span class="comment"># 不加逗号，类型为整型</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">50</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tup1)     <span class="comment"># 加上逗号，类型为元组</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>创建只包含一个元素的元组通常没有意义，但自动生成的元组可能只有一个元素</p><p>另外，你还可以通过 <code>tuple()</code> 将其他结构转换为元组</p><h1 id="修改元组">修改元组</h1><p>虽然元组的内容不能更改，但是可以给元组整体重新赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions) <span class="comment"># (200, 50)</span></span><br><span class="line"></span><br><span class="line">dimensions = (<span class="number">400</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions) <span class="comment"># (400, 100)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』关键字 inline：内联函数</title>
      <link href="/2022/03/07/%E3%80%8EC-C-%E3%80%8F%E5%85%B3%E9%94%AE%E5%AD%97-inline%EF%BC%9A%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/"/>
      <url>/2022/03/07/%E3%80%8EC-C-%E3%80%8F%E5%85%B3%E9%94%AE%E5%AD%97-inline%EF%BC%9A%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>之前参加竞赛时，总是会看见一些大佬的函数前面加上个<code>inline</code>，比如下面的快读：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> s=<span class="number">0</span>,w=<span class="number">1</span>;</span><br><span class="line">   <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">   <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)w=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">   <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) s=s*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=<span class="built_in">getchar</span>();</span><br><span class="line">   <span class="keyword">return</span> s*w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问之，则曰：</p><p>“这样会运行快一点”</p><p>但是我一直都没搞懂，为什么说这样运行就会快一点</p><hr><p>今天特地查了一下，这个<code>inline</code>是内联函数的标识符，那内联函数又是什么？</p><blockquote><p>如果一个函数是内联的，那么在编译时，编译器会把该函数的代码副本放置在每个调用该函数的地方</p></blockquote><p>这样一来，优点就显而易见了：普通函数都是单独保存的，当你调用函数时，要先通过指针跳到函数的位置再运行，而内联函数直接就嵌在调用该函数的地方（类似于宏替换），省去了寻址步骤，自然更快</p><p>也许你可能会问，一个寻址要耗多少时间呢？但其实对于非常简单的函数来说（如两个<code>int</code>求较大值），寻址的时间占比就很大，而这种简单的函数往往又是比较常用的，一来二去，寻址时间就又被放大了</p><p>但缺点也是显而易见的：增加内存消耗，并且内联函数中不能递归调用自己</p><blockquote><p>所以，只有短小简单，调用又十分频繁的函数才适合作为内联函数</p></blockquote><p>使用起来很简单，在函数头前面加上个<code>inline</code>就行，但有一点要注意，<code>inline</code>修饰的函数要当场给出其原型，并且<code>inline</code>在声明的时候是没有用的，只有定义的时候才有用</p><p>这个写法是无效的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个写法是有效的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS：C++ 的类里面的成员函数会被默认为内敛函数</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（五）列表（List）</title>
      <link href="/2022/03/07/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%E5%88%97%E8%A1%A8%EF%BC%88List%EF%BC%89/"/>
      <url>/2022/03/07/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%E5%88%97%E8%A1%A8%EF%BC%88List%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><code>列表（List）</code> 是 Python 中最基本的数据结构，与 C 中的数组类似</p><h1 id="创建列表">创建列表</h1><p>使用中括号 <code>[]</code> 将各个元素括起来即可，元素类型可不相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">list3 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>]</span><br><span class="line">list4 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br></pre></td></tr></table></figure><hr><h1 id="访问列表中的值">访问列表中的值</h1><h2 id="索引">索引</h2><p>列表的索引和切片与字符串的一样</p><p>使用 <code>列表[下标]</code> 来索引单个元素</p><table><thead><tr><th><code>list</code></th><th>‘red’</th><th>‘green’</th><th>‘blue’</th><th>‘yellow’</th><th>‘white’</th></tr></thead><tbody><tr><td>从前往后数</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>从后往前数</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">list</span>[<span class="number">0</span>] ) <span class="comment"># red</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">list</span>[<span class="number">1</span>] ) <span class="comment"># green</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">list</span>[<span class="number">2</span>] ) <span class="comment"># blue</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">list</span>[-<span class="number">1</span>] ) <span class="comment"># white</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">list</span>[-<span class="number">2</span>] ) <span class="comment"># yellow</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">list</span>[-<span class="number">3</span>] ) <span class="comment"># blue</span></span><br></pre></td></tr></table></figure><h2 id="切片">切片</h2><p>使用 <code>变量[起始位置:终止位置:步长]</code> 来截取部分列表</p><p><strong>注意：</strong></p><ul><li>左闭右开规则（顾头不顾尾）</li><li>某个位置不指定的时候默认取最后或最前</li><li>步长可选，默认为 <code>1</code></li><li>切片的时候起始位置和终止位置都超出的时候不会进行报错，但是索引会报错</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<
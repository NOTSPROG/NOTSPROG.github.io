<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>NX の 博客</title>
    <link>https://nickxu.me/</link>
    
    <image>
      <url>https://nickxu.me/static/favicon.jpg</url>
      <title>NX の 博客</title>
      <link>https://nickxu.me/</link>
    </image>
    
    <atom:link href="https://nickxu.me/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>这家伙真勤奋，什么都留下了</description>
    <pubDate>Wed, 15 Nov 2023 09:30:37 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>『代码随想录』DAY22｜二叉树：235.二叉搜索树的最近公共祖先 701. 二叉搜索树中的插入操作</title>
      <link>https://nickxu.me/post/programmercarl-day22.html</link>
      <guid>https://nickxu.me/post/programmercarl-day22.html</guid>
      <pubDate>Wed, 15 Nov 2023 05:53:29 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;235-二叉搜索树的最近公共祖先&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/&quot;&gt;235.二叉搜索树的最近公共祖先&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;我本来想用搜索树的性质做一个剪枝，也就是如果当前节点的值不在两者之间，就肯定不可能是祖先&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span c</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="235-二叉搜索树的最近公共祖先"><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">235.二叉搜索树的最近公共祖先</a></h1><p>我本来想用搜索树的性质做一个剪枝，也就是如果当前节点的值不在两者之间，就肯定不可能是祖先</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> p.Val &gt; q.Val &#123;</span><br><span class="line">    p,q = q,p</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> root.Val &lt; q.Val || root.Val &gt; p.Val&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这是错误的，当前节点的确不会是最近公共祖先，但是下面的节点可能是，应该继续递归</p><p>这个性质应该这样用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lowestCommonAncestor</span><span class="params">(root, p, q *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果p和q的值都小于root的值，LCA在左子树</span></span><br><span class="line">    <span class="keyword">if</span> p.Val &lt; root.Val &amp;&amp; q.Val &lt; root.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> lowestCommonAncestor(root.Left, p, q)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果p和q的值都大于root的值，LCA在右子树</span></span><br><span class="line">    <span class="keyword">if</span> p.Val &gt; root.Val &amp;&amp; q.Val &gt; root.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> lowestCommonAncestor(root.Right, p, q)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果root的值介于p和q之间，那么root就是LCA</span></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="701-二叉搜索树中的插入操作"><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/">701.二叉搜索树中的插入操作</a></h1><p>遵从搜索树的定义即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertIntoBST</span><span class="params">(root *TreeNode, val <span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;TreeNode&#123;Val: val&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Val &lt; val &#123;</span><br><span class="line">        <span class="keyword">if</span> root.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            insertIntoBST(root.Right, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.Right = &amp;TreeNode&#123;</span><br><span class="line">                Val: val,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            insertIntoBST(root.Left, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.Left = &amp;TreeNode&#123;</span><br><span class="line">                Val: val,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="450-删除二叉搜索树中的节点"><a href="https://leetcode.cn/problems/delete-node-in-a-bst/">450. 删除二叉搜索树中的节点</a></h1><ul><li><p>当 <code>key &lt; root.Val</code> 时，我们递归地在左子树中删除节点。</p></li><li><p>当 <code>key &gt; root.Val</code> 时，我们递归地在右子树中删除节点。</p></li><li><p>当 <code>key == root.Val</code> 时，我们找到了要删除的节点：</p><ul><li><p>如果是叶子就直接删了了事</p></li><li><p>如果只有左子树或者右子树，就把左（右）子树接到上面去</p></li><li><p>如果左右都有，删了之后把左子树的最大值或者右子树的最小值放在当前节点</p><p>具体来说就是把值赋值给当前节点，然后再在左（右）子树中删除这个最大（小）节点</p></li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteNode</span><span class="params">(root *TreeNode, key <span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> key &lt; root.Val &#123; <span class="comment">// 如果节点在左边就往左递归</span></span><br><span class="line">        root.Left = deleteNode(root.Left, key)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> key &gt; root.Val &#123; <span class="comment">// 如果节点在右边就往右递归</span></span><br><span class="line">        root.Right = deleteNode(root.Right, key)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 当前就是要删的了！</span></span><br><span class="line">        <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &#123; <span class="comment">// 如果是叶子节点，直接删除了事</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &#123; <span class="comment">// 如果只有右子树，就把右子树提上来</span></span><br><span class="line">            <span class="keyword">return</span> root.Right</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> root.Right == <span class="literal">nil</span> &#123; <span class="comment">// 如果只有左子树，就把左子树提上来</span></span><br><span class="line">            <span class="keyword">return</span> root.Left</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果左右子树都有，就找到右子树的最小节点，把值赋给当前节点，然后删除右子树的最小节点</span></span><br><span class="line">            minVal := findMin(root.Right)</span><br><span class="line">            root.Val = minVal</span><br><span class="line">            root.Right = deleteNode(root.Right, minVal)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMin</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> root.Left == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.Val</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> findMin(root.Left)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-day22.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『代码随想录』DAY21｜二叉树：530.二叉搜索树的最小绝对差 501.二叉搜索树中的众数</title>
      <link>https://nickxu.me/post/programmercarl-day21.html</link>
      <guid>https://nickxu.me/post/programmercarl-day21.html</guid>
      <pubDate>Tue, 14 Nov 2023 07:19:38 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;530-二叉搜索树的最小绝对差&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/minimum-absolute-difference-in-bst/&quot;&gt;530.二叉搜索树的最小绝对差&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;使用搜索树中序遍历是单调的性质&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span cla</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="530-二叉搜索树的最小绝对差"><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/">530.二叉搜索树的最小绝对差</a></h1><p>使用搜索树中序遍历是单调的性质</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMinimumDifference</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    nums := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.Left)</span><br><span class="line">        nums = <span class="built_in">append</span>(nums, root.Val)</span><br><span class="line">        dfs(root.Right)</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root)</span><br><span class="line"></span><br><span class="line">    ans := math.MaxInt</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        ans = min(ans, abs(nums[i]-nums[i<span class="number">-1</span>]))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="501-二叉搜索树中的众数"><a href="https://leetcode.cn/problems/find-mode-in-binary-search-tree/">501.二叉搜索树中的众数</a></h1><p>最暴力的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMode</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    nums := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.Left)</span><br><span class="line">        nums = <span class="built_in">append</span>(nums, root.Val)</span><br><span class="line">        dfs(root.Right)</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root)</span><br><span class="line"></span><br><span class="line">    ans := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        m[num]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    maxV := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        <span class="keyword">if</span> v &gt; maxV &#123;</span><br><span class="line">            maxV = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        <span class="keyword">if</span> v == maxV &#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, k)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以用单调的性质节省掉哈希表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">prev := math.MinInt</span><br><span class="line">count := <span class="number">0</span></span><br><span class="line">maxCount := <span class="number">0</span></span><br><span class="line">ans := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">    <span class="keyword">if</span> v == prev &#123;</span><br><span class="line">        count++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev = v</span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> count == maxCount &#123;</span><br><span class="line">        ans = <span class="built_in">append</span>(ans, v)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> count &gt; maxCount &#123;</span><br><span class="line">        maxCount = count</span><br><span class="line">        ans = []<span class="type">int</span>&#123;v&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="236-二叉树的最近公共祖先"><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236.二叉树的最近公共祖先</a></h1><ol><li><strong>基础情况</strong>:<ul><li>如果当前节点是<code>nil</code>，说明已经到达了树的底部，返回<code>nil</code>。</li><li>如果当前节点是<code>p</code>或<code>q</code>中的任意一个，那么它可能是最低公共祖先，返回这个节点。</li></ul></li><li><strong>递归查找</strong>:<ul><li>对当前节点的左子树调用<code>lowestCommonAncestor</code>函数，查找<code>p</code>和<code>q</code>。</li><li>对当前节点的右子树同样调用<code>lowestCommonAncestor</code>函数。</li></ul></li><li><strong>分析递归结果</strong>:<ul><li>如果在左子树和右子树的搜索结果中，两边都找到了节点（即左右子树各返回了非<code>nil</code>），则说明当前节点是最低公共祖先。</li><li>如果只在一边找到了节点（左子树或右子树返回了非<code>nil</code>），则最低公共祖先在那一边。</li></ul></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lowestCommonAncestor</span><span class="params">(root, p, q *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root == q || root == p &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    left := lowestCommonAncestor(root.Left, p, q)</span><br><span class="line">    right := lowestCommonAncestor(root.Right, p, q)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> left != <span class="literal">nil</span> &amp;&amp; right != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> left == <span class="literal">nil</span> &amp;&amp; right != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> right</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-day21.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『代码随想录』DAY20｜二叉树：654.最大二叉树 617.合并二叉树</title>
      <link>https://nickxu.me/post/programmercarl-day20.html</link>
      <guid>https://nickxu.me/post/programmercarl-day20.html</guid>
      <pubDate>Tue, 14 Nov 2023 05:37:33 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;617-合并二叉树&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/merge-two-binary-trees/&quot;&gt;617.合并二叉树&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;写完看了眼题解发现我写的太复杂了（&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="617-合并二叉树"><a href="https://leetcode.cn/problems/merge-two-binary-trees/">617.合并二叉树</a></h1><p>写完看了眼题解发现我写的太复杂了（</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTrees</span><span class="params">(root1 *TreeNode, root2 *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root1 == <span class="literal">nil</span> &amp;&amp; root2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans := &amp;TreeNode&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> root1 != <span class="literal">nil</span> &#123;</span><br><span class="line">        ans.Val += root1.Val</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root2 != <span class="literal">nil</span> &#123;</span><br><span class="line">        ans.Val += root2.Val</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root1 == <span class="literal">nil</span> &amp;&amp; root2 != <span class="literal">nil</span> &#123;</span><br><span class="line">        ans.Left = mergeTrees(<span class="literal">nil</span>, root2.Left)</span><br><span class="line">        ans.Right = mergeTrees(<span class="literal">nil</span>, root2.Right)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> root1 != <span class="literal">nil</span> &amp;&amp; root2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        ans.Left = mergeTrees(root1.Left, <span class="literal">nil</span>)</span><br><span class="line">        ans.Right = mergeTrees(root1.Right, <span class="literal">nil</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ans.Left = mergeTrees(root1.Left, root2.Left)</span><br><span class="line">        ans.Right = mergeTrees(root1.Right, root2.Right)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTrees</span><span class="params">(root1 *TreeNode, root2 *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root1 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root2</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> root2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    root1.Val += root2.Val</span><br><span class="line">    root1.Left = mergeTrees(root1.Left, root2.Left)</span><br><span class="line">    root1.Right = mergeTrees(root1.Right, root2.Right)</span><br><span class="line">    <span class="keyword">return</span> root1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="700-二叉搜索树中的搜索"><a href="https://leetcode.cn/problems/search-in-a-binary-search-tree/">700.二叉搜索树中的搜索</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchBST</span><span class="params">(root *TreeNode, val <span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> root.Val == val &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> val &lt; root.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> searchBST(root.Left, val)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> searchBST(root.Right, val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="654-最大二叉树"><a href="https://leetcode.cn/problems/maximum-binary-tree/">654.最大二叉树</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">constructMaximumBinaryTree</span><span class="params">(nums []<span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    maxVal, maxIdx := getMax(nums)</span><br><span class="line">    <span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">        Val:   maxVal,</span><br><span class="line">        Left:  constructMaximumBinaryTree(nums[:maxIdx]),</span><br><span class="line">        Right: constructMaximumBinaryTree(nums[maxIdx+<span class="number">1</span>:]),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMax</span><span class="params">(nums []<span class="type">int</span>)</span></span> (maxVal, maxIdx <span class="type">int</span>) &#123;</span><br><span class="line">    maxVal = math.MinInt</span><br><span class="line">    <span class="keyword">for</span> idx, val := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> val &gt; maxVal &#123;</span><br><span class="line">            maxVal = val</span><br><span class="line">            maxIdx = idx</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="98-验证二叉搜索树"><a href="https://leetcode.cn/problems/validate-binary-search-tree/">98.验证二叉搜索树</a></h1><p>两种思路，一种使用中序遍历必定单调的性质，一种检查左右子树的边界</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidBST</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    prevVal := math.MinInt</span><br><span class="line">    ans := <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ans == <span class="literal">false</span> || root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.Left)</span><br><span class="line">        <span class="keyword">if</span> root.Val &lt;= prevVal &#123;</span><br><span class="line">            ans = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        prevVal = root.Val</span><br><span class="line">        dfs(root.Right)</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>边界检查</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidBST</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> myIsValidBST(root, math.MinInt, math.MaxInt)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myIsValidBST</span><span class="params">(root *TreeNode, minVal, maxVal <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Val &lt;= minVal || root.Val &gt;= maxVal &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    leftIsValid := myIsValidBST(root.Left, minVal, root.Val)</span><br><span class="line">    rightIsValid := myIsValidBST(root.Right, root.Val, maxVal)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftIsValid &amp;&amp; rightIsValid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-day20.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『代码随想录』DAY18｜二叉树：513.找树左下角的值 112.路径总和</title>
      <link>https://nickxu.me/post/programmercarl-day18.html</link>
      <guid>https://nickxu.me/post/programmercarl-day18.html</guid>
      <pubDate>Sat, 11 Nov 2023 02:27:15 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;513-找树左下角的值&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/find-bottom-left-tree-value/&quot;&gt;513.找树左下角的值&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;最底层最左边，先来一手层序遍历&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/s</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="513-找树左下角的值"><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">513.找树左下角的值</a></h1><p>最底层最左边，先来一手层序遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findBottomLeftValue</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    queue := []*TreeNode&#123;root&#125;</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line">    ansFlag := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">        nextQueue := []*TreeNode&#123;&#125;</span><br><span class="line">        ansFlag = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">            curr := queue[<span class="number">0</span>]</span><br><span class="line">            queue = queue[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ansFlag == <span class="literal">false</span> &#123;</span><br><span class="line">                ans = curr.Val</span><br><span class="line">                ansFlag = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> curr.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">                nextQueue = <span class="built_in">append</span>(nextQueue, curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> curr.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">                nextQueue = <span class="built_in">append</span>(nextQueue, curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        queue = nextQueue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再写一个递归的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findBottomLeftValue</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    maxDepth := <span class="number">-1</span></span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(curr *TreeNode, depth <span class="type">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(curr *TreeNode, depth <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> curr == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> depth &gt; maxDepth &#123;</span><br><span class="line">            maxDepth = depth</span><br><span class="line">            ans = curr.Val</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(curr.Left, depth+<span class="number">1</span>)</span><br><span class="line">        dfs(curr.Right, depth+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(root, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="112-路径总和"><a href="https://leetcode.cn/problems/path-sum/">112.路径总和</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasPathSum</span><span class="params">(root *TreeNode, targetSum <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &amp;&amp; targetSum == root.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hasPathSum(root.Left, targetSum-root.Val) || hasPathSum(root.Right, targetSum-root.Val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="113-路径总和-II"><a href="https://leetcode.cn/problems/path-sum-ii/">113. 路径总和 II</a></h1><p>记得在保存答案的时候要创建副本，不然会被后面的递归修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pathSum</span><span class="params">(root *TreeNode, targetSum <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    ans := [][]<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(path []<span class="type">int</span>, root *TreeNode, targetSum <span class="type">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(path []<span class="type">int</span>, root *TreeNode, targetSum <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        path = <span class="built_in">append</span>(path, root.Val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &amp;&amp; targetSum == root.Val &#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, <span class="built_in">append</span>([]<span class="type">int</span>&#123;&#125;, path...)) <span class="comment">// 创建路径的副本</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(path, root.Left, targetSum-root.Val)</span><br><span class="line">        dfs(path, root.Right, targetSum-root.Val)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs([]<span class="type">int</span>&#123;&#125;, root, targetSum)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了使用 <code>append </code> 之外，你还可以使用 <code>copy</code> ，注意一定是 <code>make([]int,len(path))</code> ，<code>[]int&#123;&#125;</code> 与 <code>make([]int,0,len(path))</code> 都是不可以的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tmp:=<span class="built_in">make</span>([]<span class="type">int</span>,<span class="built_in">len</span>(path))</span><br><span class="line"><span class="built_in">copy</span>(tmp,path)</span><br><span class="line">ans = <span class="built_in">append</span>(ans, tmp) </span><br></pre></td></tr></table></figure><hr><h1 id="106-从中序与后序遍历序列构造二叉树"><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106.从中序与后序遍历序列构造二叉树</a></h1><p>把握好遍历顺序，找到中点然后拆解递归</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左 中 右</span></span><br><span class="line"><span class="comment">// 左 右 中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(inorder []<span class="type">int</span>, postorder []<span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(inorder)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    midVal, midIdx := postorder[n<span class="number">-1</span>], <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> inorder[midIdx] != midVal &#123;</span><br><span class="line">        midIdx++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    leftInorder := inorder[:midIdx]</span><br><span class="line">    leftPostorder := postorder[:midIdx]</span><br><span class="line">    rightInorder := inorder[midIdx+<span class="number">1</span>:]</span><br><span class="line">    rightPostorder := postorder[midIdx : n<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">        Val:   midVal,</span><br><span class="line">        Left:  buildTree(leftInorder, leftPostorder),</span><br><span class="line">        Right: buildTree(rightInorder, rightPostorder),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="105-从前序与中序遍历序列构造二叉树"><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105.从前序与中序遍历序列构造二叉树</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中 左 右</span></span><br><span class="line"><span class="comment">// 左 中 右</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(preorder []<span class="type">int</span>, inorder []<span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(preorder)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    midVal, midIdx := preorder[<span class="number">0</span>], <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> inorder[midIdx] != midVal &#123;</span><br><span class="line">        midIdx++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    leftPreorder := preorder[<span class="number">1</span> : <span class="number">1</span>+midIdx]</span><br><span class="line">    leftInorder := inorder[:midIdx]</span><br><span class="line">    rightPreorder := preorder[<span class="number">1</span>+midIdx:]</span><br><span class="line">    rightInorder := inorder[midIdx+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">        Val:   midVal,</span><br><span class="line">        Left:  buildTree(leftPreorder, leftInorder),</span><br><span class="line">        Right: buildTree(rightPreorder, rightInorder),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-day18.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『代码随想录』DAY17｜二叉树：110.平衡二叉树 257.二叉树的所有路径</title>
      <link>https://nickxu.me/post/programmercarl-day17.html</link>
      <guid>https://nickxu.me/post/programmercarl-day17.html</guid>
      <pubDate>Fri, 10 Nov 2023 02:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;110-平衡二叉树&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/balanced-binary-tree/&quot;&gt;110.平衡二叉树&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;s&gt;看题目以为是写平衡树，进来发现是判断是否是平衡树&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;我本来想检查所有叶子节点是否在两层中，但是这样实际上是有问题的&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="110-平衡二叉树"><a href="https://leetcode.cn/problems/balanced-binary-tree/">110.平衡二叉树</a></h1><p><s>看题目以为是写平衡树，进来发现是判断是否是平衡树</s></p><p>我本来想检查所有叶子节点是否在两层中，但是这样实际上是有问题的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isBalanced</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode, depth <span class="type">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode, depth <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">            m[depth] = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.Left, depth+<span class="number">1</span>)</span><br><span class="line">        dfs(root.Right, depth+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root, <span class="number">0</span>)</span><br><span class="line">    fmt.Println(m)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(m) &lt;= <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好吧，还得按照定义去做</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isBalanced</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> abs(getDepth(root.Left)-getDepth(root.Right)) &gt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isBalanced(root.Left) &amp;&amp; isBalanced(root.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max(getDepth(root.Left), getDepth(root.Right)) + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这会涉及到重复计算，我感觉能不能优化一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isBalanced</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    ans := <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        depL, depR := dfs(root.Left), dfs(root.Right)</span><br><span class="line">        <span class="keyword">if</span> ans == <span class="literal">false</span> || abs(depL-depR) &gt; <span class="number">1</span> &#123;</span><br><span class="line">            ans = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max(depL, depR) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><hr><h1 id="257-二叉树的所有路径"><a href="https://leetcode.cn/problems/binary-tree-paths/">257.二叉树的所有路径</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binaryTreePaths</span><span class="params">(root *TreeNode)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">    ans := []<span class="type">string</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">string</span>&#123;fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, root.Val)&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(curr *TreeNode, s <span class="type">string</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(curr *TreeNode, s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">        s = s + <span class="string">&quot;-&gt;&quot;</span> + fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, curr.Val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> curr.Left == <span class="literal">nil</span> &amp;&amp; curr.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, s)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> curr.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            dfs(curr.Left, s)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> curr.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            dfs(curr.Right, s)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">        dfs(root.Left, fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, root.Val))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">        dfs(root.Right, fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, root.Val))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="404-左叶子之和"><a href="https://leetcode.cn/problems/sum-of-left-leaves/">404.左叶子之和</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumOfLeftLeaves</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Left != <span class="literal">nil</span> &amp;&amp; root.Left.Left == <span class="literal">nil</span> &amp;&amp; root.Left.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.Left.Val + sumOfLeftLeaves(root.Right)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sumOfLeftLeaves(root.Right) + sumOfLeftLeaves(root.Left)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-day17.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『代码随想录』DAY16｜二叉树：111.二叉树的最小深度 222.完全二叉树的节点个数</title>
      <link>https://nickxu.me/post/programmercarl-day16.html</link>
      <guid>https://nickxu.me/post/programmercarl-day16.html</guid>
      <pubDate>Thu, 09 Nov 2023 01:27:59 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;104-二叉树的最大深度&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-depth-of-binary-tree/&quot;&gt;104.二叉树的最大深度&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;试一下递归的写法&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="104-二叉树的最大深度"><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104.二叉树的最大深度</a></h1><p>试一下递归的写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max(maxDepth(root.Left), maxDepth(root.Right)) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="111-二叉树的最小深度"><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">111.二叉树的最小深度</a></h1><p>本来想这么写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> math.MaxInt</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min(minDepth(root.Left), minDepth(root.Right)) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果 <code>root</code> 是 <code>nil</code> 就有问题</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> root == <span class="literal">nil</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">case</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> root.Left != <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span>:</span><br><span class="line">        <span class="keyword">return</span> minDepth(root.Left) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> root.Right != <span class="literal">nil</span> &amp;&amp; root.Left == <span class="literal">nil</span>:</span><br><span class="line">        <span class="keyword">return</span> minDepth(root.Right) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> min(minDepth(root.Left), minDepth(root.Right)) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="222-完全二叉树的节点个数"><a href="https://leetcode.cn/problems/count-complete-tree-nodes/">222.完全二叉树的节点个数</a></h1><p>先来个暴力 <code>O(n)</code> 的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countNodes</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> countNodes(root.Left) + countNodes(root.Right) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我想利用完全二叉树的特性，遍历时最后层顺序是从左往右，如果遇到 nil 就直接结束</p><p>但是貌似还是不够快</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countNodes</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    maxDepth := getDepth(root)</span><br><span class="line">    ans := <span class="number">1</span>&lt;&lt;(maxDepth<span class="number">-1</span>) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode, depth <span class="type">int</span>)</span></span> <span class="type">bool</span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode, depth <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> depth == maxDepth &#123;</span><br><span class="line">            ans++</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dfs(root.Left, depth+<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dfs(root.Right, depth+<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getDepth(root.Left) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我去看了题解，可以比较左右深度来判断是否是满二叉树，如果是满二叉树则可以直接计算节点个数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countNodes</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    leftDepth, rightDepth := getLeftDepth(root), getRightDepth(root)</span><br><span class="line">    <span class="keyword">if</span> leftDepth == rightDepth &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; leftDepth) - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> countNodes(root.Left) + countNodes(root.Right) + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getLeftDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getLeftDepth(root.Left) + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRightDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getRightDepth(root.Right) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-day16.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『代码随想录』DAY15｜二叉树：层序遍历 226.翻转二叉树 101.对称二叉树</title>
      <link>https://nickxu.me/post/programmercarl-day15.html</link>
      <guid>https://nickxu.me/post/programmercarl-day15.html</guid>
      <pubDate>Wed, 08 Nov 2023 04:03:34 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;102-二叉树的层序遍历&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-level-order-traversal/&quot;&gt;102. 二叉树的层序遍历&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;基本思路就是 BFS，使用新旧两个队列轮替遍历&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span c</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="102-二叉树的层序遍历"><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h1><p>基本思路就是 BFS，使用新旧两个队列轮替遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">levelOrder</span><span class="params">(root *TreeNode)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans := [][]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    queue := []*TreeNode&#123;root&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">        nextQueue := []*TreeNode&#123;&#125;</span><br><span class="line">        tmp := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">            curr := queue[<span class="number">0</span>]</span><br><span class="line">            queue = queue[<span class="number">1</span>:]</span><br><span class="line">            tmp = <span class="built_in">append</span>(tmp, curr.Val)</span><br><span class="line">            <span class="keyword">if</span> curr.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">                nextQueue = <span class="built_in">append</span>(nextQueue, curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> curr.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">                nextQueue = <span class="built_in">append</span>(nextQueue, curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans = <span class="built_in">append</span>(ans, tmp)</span><br><span class="line">        queue = nextQueue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="107-二叉树的层序遍历-II"><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/">107.二叉树的层序遍历 II</a></h1><p>和上一题相同，但是顺序是从下往上</p><p>我的第一反应是在上一题最后直接在来个 reverse 哈哈哈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(ans)/<span class="number">2</span>; i++ &#123;</span><br><span class="line">    ans[<span class="built_in">len</span>(ans)-i<span class="number">-1</span>], ans[i] = ans[i], ans[<span class="built_in">len</span>(ans)-i<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在插入 ans 的时候在头部插入</p><p>然后想其他解法，可以在 DFS 的时候 context 传个当前层数</p><p>但…最开始需要的是最底层，我一开始并不知道树高是多少哇</p><p>所以一开始还得拿到个层高</p><p>感觉不够优雅😰，不写了</p><hr><p>一些衍生题目，都是层序遍历改一改</p><details class="toggle" ><summary class="toggle-button" style="">199. 二叉树的右视图</summary><div class="toggle-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- func levelOrder(root *TreeNode) [][]int &#123;</span></span><br><span class="line"><span class="addition">+ func rightSideView(root *TreeNode) []int &#123;</span></span><br><span class="line">      if root == nil &#123;</span><br><span class="line">          return nil</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line"><span class="deletion">-   ans := [][]int&#123;&#125;</span></span><br><span class="line"><span class="addition">+   ans := []int&#123;&#125;</span></span><br><span class="line">      queue := []*TreeNode&#123;root&#125;</span><br><span class="line">  </span><br><span class="line">      for len(queue) != 0 &#123;</span><br><span class="line">          nextQueue := []*TreeNode&#123;&#125;</span><br><span class="line"><span class="deletion">-         tmp := []int&#123;&#125;</span></span><br><span class="line"><span class="addition">+         tmp := 0</span></span><br><span class="line">  </span><br><span class="line">          for len(queue) != 0 &#123;</span><br><span class="line">              curr := queue[0]</span><br><span class="line">              queue = queue[1:]</span><br><span class="line"><span class="deletion">-            tmp = append(tmp, curr.Val)</span></span><br><span class="line"><span class="addition">+            tmp = curr.Val</span></span><br><span class="line">              if curr.Left != nil &#123;</span><br><span class="line">                  nextQueue = append(nextQueue, curr.Left)</span><br><span class="line">              &#125;</span><br><span class="line">              if curr.Right != nil &#123;</span><br><span class="line">                  nextQueue = append(nextQueue, curr.Right)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          ans = append(ans, tmp)</span><br><span class="line">          queue = nextQueue</span><br><span class="line">      &#125;</span><br><span class="line">      return ans</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">637. 二叉树的层平均值</summary><div class="toggle-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- func levelOrder(root *TreeNode) [][]int &#123;</span></span><br><span class="line"><span class="addition">+ func averageOfLevels(root *TreeNode) []float64 &#123;</span></span><br><span class="line">    if root == nil &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="deletion">-   ans := [][]int&#123;&#125;</span></span><br><span class="line"><span class="addition">+   ans := []float64&#123;&#125;</span></span><br><span class="line">    queue := []*TreeNode&#123;root&#125;</span><br><span class="line">  </span><br><span class="line">    for len(queue) != 0 &#123;</span><br><span class="line">        nextQueue := []*TreeNode&#123;&#125;</span><br><span class="line">        tmp := []int&#123;&#125;</span><br><span class="line">  </span><br><span class="line">        for len(queue) != 0 &#123;</span><br><span class="line">            curr := queue[0]</span><br><span class="line">            queue = queue[1:]</span><br><span class="line">            tmp = append(tmp, curr.Val)</span><br><span class="line">            if curr.Left != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            if curr.Right != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line"><span class="deletion">-       ans = append(ans, tmp)</span></span><br><span class="line"><span class="addition">+       ans = append(ans, func(nums []int) float64 &#123;</span></span><br><span class="line"><span class="addition">+           sum := 0</span></span><br><span class="line"><span class="addition">+           for _, v := range nums &#123;</span></span><br><span class="line"><span class="addition">+               sum += v</span></span><br><span class="line"><span class="addition">+           &#125;</span></span><br><span class="line"><span class="addition">+           return float64(sum) / float64(len(nums))</span></span><br><span class="line"><span class="addition">+       &#125;(tmp))</span></span><br><span class="line">        queue = nextQueue</span><br><span class="line">    &#125;</span><br><span class="line">    return ans</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">429. N 叉树的层序遍历</summary><div class="toggle-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- func levelOrder(root *TreeNode) [][]int &#123;</span></span><br><span class="line"><span class="addition">+ func levelOrder(root *Node) [][]int &#123;</span></span><br><span class="line">  if root == nil &#123;</span><br><span class="line">  return nil</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ans := [][]int&#123;&#125;</span><br><span class="line"><span class="deletion">- queue := []*TreeNode&#123;root&#125;</span></span><br><span class="line"><span class="addition">+ queue := []*Node&#123;root&#125;</span></span><br><span class="line">  </span><br><span class="line">  for len(queue) != 0 &#123;</span><br><span class="line"><span class="deletion">- nextQueue := []*TreeNode&#123;&#125;</span></span><br><span class="line"><span class="addition">+ nextQueue := []*Node&#123;&#125;</span></span><br><span class="line">  tmp := []int&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  for len(queue) != 0 &#123;</span><br><span class="line">  curr := queue[0]</span><br><span class="line">  queue = queue[1:]</span><br><span class="line">  tmp = append(tmp, curr.Val)</span><br><span class="line"><span class="deletion">- if curr.Left != nil &#123;</span></span><br><span class="line"><span class="deletion">- nextQueue = append(nextQueue, curr.Left)</span></span><br><span class="line"><span class="deletion">- &#125;</span></span><br><span class="line"><span class="deletion">- if curr.Right != nil &#123;</span></span><br><span class="line"><span class="deletion">- nextQueue = append(nextQueue, curr.Right)</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ for _, c := range curr.Children &#123;</span></span><br><span class="line"><span class="addition">+ nextQueue = append(nextQueue, c)</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ans = append(ans, tmp)</span><br><span class="line">  queue = nextQueue</span><br><span class="line">  &#125;</span><br><span class="line">  return ans</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">515. 在每个树行中找最大值</summary><div class="toggle-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- func levelOrder(root *TreeNode) [][]int &#123;</span></span><br><span class="line"><span class="addition">+ func largestValues(root *TreeNode) []int &#123;</span></span><br><span class="line">    if root == nil &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="deletion">-   ans := [][]int&#123;&#125;</span></span><br><span class="line"><span class="addition">+   ans := []int&#123;&#125;</span></span><br><span class="line">    queue := []*TreeNode&#123;root&#125;</span><br><span class="line">  </span><br><span class="line">    for len(queue) != 0 &#123;</span><br><span class="line">        nextQueue := []*TreeNode&#123;&#125;</span><br><span class="line"><span class="deletion">-       tmp := []int&#123;&#125;</span></span><br><span class="line"><span class="addition">+       tmp := math.MinInt</span></span><br><span class="line">  </span><br><span class="line">        for len(queue) != 0 &#123;</span><br><span class="line">            curr := queue[0]</span><br><span class="line">            queue = queue[1:]</span><br><span class="line"><span class="deletion">-           tmp = append(tmp, curr.Val)</span></span><br><span class="line"><span class="addition">+           if curr.Val &gt; tmp &#123;</span></span><br><span class="line"><span class="addition">+               tmp = curr.Val</span></span><br><span class="line"><span class="addition">+           &#125;</span></span><br><span class="line">            if curr.Left != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            if curr.Right != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        ans = append(ans, tmp)</span><br><span class="line">        queue = nextQueue</span><br><span class="line">    &#125;</span><br><span class="line">    return ans</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">116. 填充每个节点的下一个右侧节点指针</summary><div class="toggle-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- func levelOrder(root *TreeNode) [][]int &#123;</span></span><br><span class="line"><span class="addition">+ func connect(root *Node) *Node &#123;</span></span><br><span class="line">    if root == nil &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-   ans := [][]int&#123;&#125;</span></span><br><span class="line"><span class="deletion">-   queue := []*TreeNode&#123;root&#125;</span></span><br><span class="line"><span class="addition">+   queue := []*Node&#123;root&#125;</span></span><br><span class="line"></span><br><span class="line">    for len(queue) != 0 &#123;</span><br><span class="line"><span class="deletion">-       nextQueue := []*TreeNode&#123;&#125;</span></span><br><span class="line"><span class="addition">+       nextQueue := []*Node&#123;&#125;</span></span><br><span class="line"><span class="addition">+       prev := &amp;Node&#123;&#125;</span></span><br><span class="line"><span class="deletion">-       tmp := []int&#123;&#125;</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line">        for len(queue) != 0 &#123;</span><br><span class="line">            curr := queue[0]</span><br><span class="line">            queue = queue[1:]</span><br><span class="line"><span class="deletion">-           tmp = append(tmp, curr.Val)</span></span><br><span class="line"><span class="addition">+           prev.Next = curr</span></span><br><span class="line"><span class="addition">+           prev = curr</span></span><br><span class="line">            if curr.Left != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            if curr.Right != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-       ans = append(ans, tmp)</span></span><br><span class="line">        queue = nextQueue</span><br><span class="line">    &#125;</span><br><span class="line"><span class="deletion">-   return ans</span></span><br><span class="line"><span class="addition">+   return root</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">117. 填充每个节点的下一个右侧节点指针 II</summary><div class="toggle-content"><p>与上题完全一样</p></div></details><details class="toggle" ><summary class="toggle-button" style="">104. 二叉树的最大深度</summary><div class="toggle-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- func levelOrder(root *TreeNode) [][]int &#123;</span></span><br><span class="line"><span class="addition">+ func maxDepth(root *TreeNode) int &#123;</span></span><br><span class="line">    if root == nil &#123;</span><br><span class="line"><span class="deletion">-       return nil</span></span><br><span class="line"><span class="addition">+       return 0</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="deletion">-   ans := [][]int&#123;&#125;</span></span><br><span class="line"><span class="addition">+   count := 0</span></span><br><span class="line"><span class="addition">+   ans := 0</span></span><br><span class="line">    queue := []*TreeNode&#123;root&#125;</span><br><span class="line">  </span><br><span class="line">    for len(queue) != 0 &#123;</span><br><span class="line"><span class="addition">+       count++</span></span><br><span class="line">        nextQueue := []*TreeNode&#123;&#125;</span><br><span class="line"><span class="deletion">-       tmp := []int&#123;&#125;</span></span><br><span class="line"><span class="deletion">- </span></span><br><span class="line">        for len(queue) != 0 &#123;</span><br><span class="line">            curr := queue[0]</span><br><span class="line">            queue = queue[1:]</span><br><span class="line"><span class="deletion">-           tmp = append(tmp, curr.Val)</span></span><br><span class="line">            if curr.Left != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            if curr.Right != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="addition">+           if curr.Right == nil &amp;&amp; curr.Left == nil &amp;&amp; count &gt; ans &#123;</span></span><br><span class="line"><span class="addition">+               ans = count</span></span><br><span class="line"><span class="addition">+           &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line"><span class="deletion">-       ans = append(ans, tmp)</span></span><br><span class="line">        queue = nextQueue</span><br><span class="line">    &#125;</span><br><span class="line">    return ans</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">111. 二叉树的最小深度</summary><div class="toggle-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- func levelOrder(root *TreeNode) [][]int &#123;</span></span><br><span class="line"><span class="addition">+ func minDepth(root *TreeNode) int &#123;</span></span><br><span class="line">    if root == nil &#123;</span><br><span class="line"><span class="deletion">-       return nil</span></span><br><span class="line"><span class="addition">+       return 0</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="deletion">-   ans := [][]int&#123;&#125;</span></span><br><span class="line"><span class="addition">+   count := 0</span></span><br><span class="line"><span class="addition">+   ans := math.MaxInt</span></span><br><span class="line">    queue := []*TreeNode&#123;root&#125;</span><br><span class="line">  </span><br><span class="line">    for len(queue) != 0 &#123;</span><br><span class="line"><span class="addition">+       count++</span></span><br><span class="line">        nextQueue := []*TreeNode&#123;&#125;</span><br><span class="line"><span class="deletion">-       tmp := []int&#123;&#125;</span></span><br><span class="line"><span class="deletion">- </span></span><br><span class="line">        for len(queue) != 0 &#123;</span><br><span class="line">            curr := queue[0]</span><br><span class="line">            queue = queue[1:]</span><br><span class="line"><span class="deletion">-           tmp = append(tmp, curr.Val)</span></span><br><span class="line">            if curr.Left != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            if curr.Right != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="addition">+           if curr.Right == nil &amp;&amp; curr.Left == nil &amp;&amp; count &lt; ans &#123;</span></span><br><span class="line"><span class="addition">+               ans = count</span></span><br><span class="line"><span class="addition">+               return ans</span></span><br><span class="line"><span class="addition">+           &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line"><span class="deletion">-       ans = append(ans, tmp)</span></span><br><span class="line">        queue = nextQueue</span><br><span class="line">    &#125;</span><br><span class="line">    return ans</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">附：`diff.py`</summary><div class="toggle-content"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> difflib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_diff</span>(<span class="params">file1_path, file2_path, output_path</span>):</span><br><span class="line">    <span class="comment"># Read the contents of the two files</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file1_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f1, <span class="built_in">open</span>(file2_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        file1_content = f1.readlines()</span><br><span class="line">        file2_content = f2.readlines()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calculate the diff</span></span><br><span class="line">    diff = difflib.ndiff(file1_content, file2_content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Filter out the lines that only contain changes in whitespace or question marks</span></span><br><span class="line">    filtered_diff = [line <span class="keyword">for</span> line <span class="keyword">in</span> diff <span class="keyword">if</span> <span class="keyword">not</span> line.startswith(<span class="string">&#x27;?&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Convert the diff to markdown format</span></span><br><span class="line">    markdown_diff = <span class="string">&#x27;```diff\n&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join(filtered_diff) + <span class="string">&#x27;```&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Write the markdown diff to the output file</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">        output_file.write(markdown_diff)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example usage:</span></span><br><span class="line">calculate_diff(<span class="string">&#x27;main.go&#x27;</span>, <span class="string">&#x27;diff.go&#x27;</span>, <span class="string">&#x27;diff_output.md&#x27;</span>)</span><br></pre></td></tr></table></figure></div></details><hr><h1 id="101-对称二叉树"><a href="https://leetcode.cn/problems/symmetric-tree/">101.对称二叉树</a></h1><p>第一反应：嗯？</p><p>第二反应：左侧用「左中右」遍历，右侧用「右中左」遍历，然后比较行不行？</p><p>第三反应：将一侧的左右儿子递归地反转，然后和另一侧比较是不是完全一样</p><p>但是这样感觉太麻烦了，我递归的时候直接镜像比较行不行（左边的左儿子比较右边的右儿子）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> myIsSymmet(root.Left, root.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myIsSymmet</span><span class="params">(left *TreeNode, right *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> left == <span class="literal">nil</span> &amp;&amp; right == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="literal">nil</span> &amp;&amp; right != <span class="literal">nil</span>) || (left != <span class="literal">nil</span> &amp;&amp; right == <span class="literal">nil</span>) || left.Val != right.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> myIsSymmet(left.Left, right.Right) &amp;&amp; myIsSymmet(left.Right, right.Left)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="226-翻转二叉树"><a href="https://leetcode.cn/problems/invert-binary-tree/">226.翻转二叉树</a></h1><p>好好好</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invertTree</span><span class="params">(root *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    invertTree(root.Left)</span><br><span class="line">    invertTree(root.Right)</span><br><span class="line"></span><br><span class="line">    root.Left, root.Right = root.Right, root.Left</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-day15.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『代码随想录』DAY14｜二叉树：二叉树基础 二叉树的遍历</title>
      <link>https://nickxu.me/post/programmercarl-day14.html</link>
      <guid>https://nickxu.me/post/programmercarl-day14.html</guid>
      <pubDate>Tue, 07 Nov 2023 11:47:26 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;稍微又复习了一遍二叉树的基础&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;144-二叉树的前序遍历&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-preorder-traversal/&quot;&gt;144.二叉树的前序遍历&lt;/a&gt;&lt;/h1&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td </description>
        
      
      
      
      <content:encoded><![CDATA[<p>稍微又复习了一遍二叉树的基础</p><hr><h1 id="144-二叉树的前序遍历"><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">144.二叉树的前序遍历</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans := []<span class="type">int</span>&#123;root.Val&#125;</span><br><span class="line">ans = <span class="built_in">append</span>(ans, preorderTraversal(root.Left)...)</span><br><span class="line">ans = <span class="built_in">append</span>(ans, preorderTraversal(root.Right)...)</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><s>当然你还可以压行，就是可读性不行</s></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">append</span>([]<span class="type">int</span>&#123;root.Val&#125;,<span class="built_in">append</span>(preorderTraversal(root.Left),preorderTraversal(root.Right)...)...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="94-二叉树的中序遍历"><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94.二叉树的中序遍历</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans := inorderTraversal(root.Left)</span><br><span class="line">    ans = <span class="built_in">append</span>(ans, root.Val)</span><br><span class="line">    ans = <span class="built_in">append</span>(ans, inorderTraversal(root.Right)...)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="145-二叉树的后序遍历"><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">145.二叉树的后序遍历</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans := postorderTraversal(root.Left)</span><br><span class="line">    ans = <span class="built_in">append</span>(ans, postorderTraversal(root.Right)...)</span><br><span class="line">    ans = <span class="built_in">append</span>(ans, root.Val)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-day14.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『代码随想录』DAY13｜栈与队列：239.滑动窗口最大值 347.前 K 个高频元素</title>
      <link>https://nickxu.me/post/programmercarl-day13.html</link>
      <guid>https://nickxu.me/post/programmercarl-day13.html</guid>
      <pubDate>Mon, 06 Nov 2023 02:03:08 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;239-滑动窗口最大值&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/sliding-window-maximum/&quot;&gt;239.滑动窗口最大值&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;非常好的单调队列例题&lt;/p&gt;
&lt;p&gt;单调队列，队列中从头到尾单调递减&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pop：传入当前窗口移动需要弹出的值，如果等于头元素则弹出&lt;/li&gt;
&lt;li&gt;Push：在尾部尝试加入，如果遇到比当前元素小的都从尾部弹出&lt;/li&gt;
&lt;li&gt;GetMax：取头元素&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/s</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="239-滑动窗口最大值"><a href="https://leetcode.cn/problems/sliding-window-maximum/">239.滑动窗口最大值</a></h1><p>非常好的单调队列例题</p><p>单调队列，队列中从头到尾单调递减</p><ul><li>Pop：传入当前窗口移动需要弹出的值，如果等于头元素则弹出</li><li>Push：在尾部尝试加入，如果遇到比当前元素小的都从尾部弹出</li><li>GetMax：取头元素</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MonoQ <span class="keyword">struct</span> &#123;</span><br><span class="line">    data []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMonoQ</span><span class="params">()</span></span> MonoQ &#123;</span><br><span class="line">    <span class="keyword">return</span> MonoQ&#123;</span><br><span class="line">        data: []<span class="type">int</span>&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pop 传入当前窗口移动需要弹出的值，如果等于头元素则弹出</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *MonoQ)</span></span> Pop(x <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(q.data) != <span class="number">0</span> &amp;&amp; x == q.data[<span class="number">0</span>] &#123;</span><br><span class="line">        q.data = q.data[<span class="number">1</span>:]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Push 传入当前窗口移动需要压入的值，如果大于尾元素则弹出尾元素，直到小于等于尾元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *MonoQ)</span></span> Push(x <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(q.data) != <span class="number">0</span> &amp;&amp; x &gt; q.data[<span class="built_in">len</span>(q.data)<span class="number">-1</span>] &#123;</span><br><span class="line">        q.data = q.data[:<span class="built_in">len</span>(q.data)<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    q.data = <span class="built_in">append</span>(q.data, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetMax 获取当前窗口最大值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *MonoQ)</span></span> GetMax() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> q.data[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSlidingWindow</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    ans := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    q := NewMonoQ()</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; k; i++ &#123;</span><br><span class="line">        q.Push(nums[i])</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">append</span>(ans, q.GetMax())</span><br><span class="line">    <span class="keyword">for</span> i := k; i &lt; n; i++ &#123;</span><br><span class="line">        q.Pop(nums[i-k])</span><br><span class="line">        q.Push(nums[i])</span><br><span class="line">        ans = <span class="built_in">append</span>(ans, q.GetMax())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="347-前-K-个高频元素"><a href="https://leetcode.cn/problems/top-k-frequent-elements/">347.前 K 个高频元素</a></h1><p>两种方法，拿到频率的 map 之后用堆维护前 K 个，或者直接排序再取前 K 个</p><p>复习一下 Golang 里面的优先队列和排序</p><p>用惯了 C++ STL 的开箱即用的优先队列，我只能说 Golang 的优先队列真的不好用（</p><ul><li><p>排序，记得导入 <code>sort</code> 包</p><p>使用内建的 <code>Ints</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums := []<span class="type">int</span>&#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;</span><br><span class="line">sort.Ints(nums)</span><br></pre></td></tr></table></figure><p>使用 <code>sort.Slice</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sort.Slice(people, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> people[i].Age &lt; people[j].Age</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>优先队列，记得导入 <code>heap</code> 包</p><p>需要实现几个接口，在使用的时候，如果你是直接将一个切片转换成堆，需要使用 <code>heap.Init</code></p><p>需要注意的是使用的时候不是面向对象的，你需要使用 <code>heap.XX</code> 来操作</p><p>元素仅为 <code>int</code> 的简单队列</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IntPriorityQueue []<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq IntPriorityQueue)</span></span> Len() <span class="type">int</span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(pq) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq IntPriorityQueue)</span></span> Less(i, j <span class="type">int</span>) <span class="type">bool</span> &#123; <span class="keyword">return</span> pq[i] &lt; pq[j] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq IntPriorityQueue)</span></span> Swap(i, j <span class="type">int</span>)      &#123; pq[i], pq[j] = pq[j], pq[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *IntPriorityQueue)</span></span> Push(x <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">*pq = <span class="built_in">append</span>(*pq, x.(<span class="type">int</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *IntPriorityQueue)</span></span> Pop() <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">old := *pq</span><br><span class="line">n := <span class="built_in">len</span>(old)</span><br><span class="line">item := old[n<span class="number">-1</span>]</span><br><span class="line">*pq = old[<span class="number">0</span> : n<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pq := &amp;IntPriorityQueue&#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立优先队列堆</span></span><br><span class="line">heap.Init(pq)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向优先队列中添加元素</span></span><br><span class="line">heap.Push(pq, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从优先队列中按照优先级取出元素</span></span><br><span class="line"><span class="keyword">for</span> pq.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d &quot;</span>, heap.Pop(pq))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据结构体中的一个字段进行排序的队列</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Item 表示优先队列中的元素</span></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">value    <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 元素的值</span></span><br><span class="line">priority <span class="type">int</span>         <span class="comment">// 优先级</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PriorityQueue 实现了heap.Interface接口</span></span><br><span class="line"><span class="keyword">type</span> PriorityQueue []Item</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Len() <span class="type">int</span> &#123; <span class="keyword">return</span> <span class="built_in">len</span>(pq) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Less(i, j <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">// 这里我们使用优先级来决定元素的顺序，较小的优先级排在前面</span></span><br><span class="line"><span class="keyword">return</span> pq[i].priority &lt; pq[j].priority</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Swap(i, j <span class="type">int</span>) &#123;</span><br><span class="line">pq[i], pq[j] = pq[j], pq[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *PriorityQueue)</span></span> Push(x <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">item := x.(Item)</span><br><span class="line">*pq = <span class="built_in">append</span>(*pq, item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *PriorityQueue)</span></span> Pop() <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">old := *pq</span><br><span class="line">n := <span class="built_in">len</span>(old)</span><br><span class="line">item := old[n<span class="number">-1</span>]</span><br><span class="line">*pq = old[<span class="number">0</span> : n<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个优先队列</span></span><br><span class="line">pq := <span class="built_in">make</span>(PriorityQueue, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素到优先队列</span></span><br><span class="line">heap.Push(&amp;pq, Item&#123;value: <span class="string">&quot;B&quot;</span>, priority: <span class="number">2</span>&#125;)</span><br><span class="line">heap.Push(&amp;pq, Item&#123;value: <span class="string">&quot;C&quot;</span>, priority: <span class="number">1</span>&#125;)</span><br><span class="line">heap.Push(&amp;pq, Item&#123;value: <span class="string">&quot;A&quot;</span>, priority: <span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从优先队列中按照优先级取出元素</span></span><br><span class="line"><span class="keyword">for</span> pq.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">item := heap.Pop(&amp;pq).(Item)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s (priority: %d)\n&quot;</span>, item.value, item.priority)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>言归正传，本体的两种方法</p><ul><li><p>直接排序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">topKFrequent</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        m[v]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count := <span class="built_in">make</span>([][<span class="number">2</span>]<span class="type">int</span>, <span class="number">0</span>, <span class="built_in">len</span>(m))</span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        count = <span class="built_in">append</span>(count, [<span class="number">2</span>]<span class="type">int</span>&#123;k, v&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort.Slice(count, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count[i][<span class="number">1</span>] &gt; count[j][<span class="number">1</span>]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    ans := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; k; i++ &#123;</span><br><span class="line">        ans = <span class="built_in">append</span>(ans, count[i][<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以更简单</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">topKFrequent</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        m[v]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="built_in">len</span>(m))</span><br><span class="line">    <span class="keyword">for</span> k, _ := <span class="keyword">range</span> m &#123;</span><br><span class="line">        ans = <span class="built_in">append</span>(ans, k)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort.Slice(ans, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m[ans[i]] &gt; m[ans[j]]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans[:k]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>维护大顶堆</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">    value <span class="type">int</span></span><br><span class="line">    freq  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PriorityQueue []Item</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Len() <span class="type">int</span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(pq) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Less(i, j <span class="type">int</span>) <span class="type">bool</span> &#123; <span class="keyword">return</span> pq[i].freq &lt; pq[j].freq &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Swap(i, j <span class="type">int</span>)      &#123; pq[i], pq[j] = pq[j], pq[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *PriorityQueue)</span></span> Push(x <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">    item := x.(Item)</span><br><span class="line">    *pq = <span class="built_in">append</span>(*pq, item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *PriorityQueue)</span></span> Pop() <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">    old := *pq</span><br><span class="line">    n := <span class="built_in">len</span>(old)</span><br><span class="line">    item := old[n<span class="number">-1</span>]</span><br><span class="line">    *pq = old[<span class="number">0</span> : n<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">topKFrequent</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        m[num]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pq := <span class="built_in">make</span>(PriorityQueue, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> value, freq := <span class="keyword">range</span> m &#123;</span><br><span class="line">        heap.Push(&amp;pq, Item&#123;value, freq&#125;)</span><br><span class="line">        <span class="keyword">if</span> pq.Len() &gt; k &#123;</span><br><span class="line">            heap.Pop(&amp;pq)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans := <span class="built_in">make</span>([]<span class="type">int</span>, k)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; k; i++ &#123;</span><br><span class="line">        item := heap.Pop(&amp;pq).(Item)</span><br><span class="line">        ans[i] = item.value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-day13.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Mac Windows 网线直连文件传输</title>
      <link>https://nickxu.me/post/mac-windows-file-copy-by-directly-LAN.html</link>
      <guid>https://nickxu.me/post/mac-windows-file-copy-by-directly-LAN.html</guid>
      <pubDate>Sun, 05 Nov 2023 03:52:30 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;今天又学到一个小技巧，使用一条网线直连两台 PC 进行文件传输&lt;/p&gt;
&lt;p&gt;我是把 Mac 上的文件传到 Windows 上，但其实两台 Windows 也大同小异&lt;/p&gt;
&lt;p&gt;首先当然是网线插上&lt;/p&gt;
&lt;p&gt;下一步是自己手动改一下 IP 到同一网段，之后 ping 一下，能 ping 通就算没问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image.nickxu.me/202311051156967.png&quot; alt=&quot;ab8422039ce9ef1e9ead78e908707278&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image.nickxu.me/202311051155650.png&quot; alt=&quot;image-20231105115544617 AM&quot;&gt;&lt;/p&gt;
&lt;p&gt;传输文件使用 HTTP 其实最方便，直接用 py 起一个 http server&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<p>今天又学到一个小技巧，使用一条网线直连两台 PC 进行文件传输</p><p>我是把 Mac 上的文件传到 Windows 上，但其实两台 Windows 也大同小异</p><p>首先当然是网线插上</p><p>下一步是自己手动改一下 IP 到同一网段，之后 ping 一下，能 ping 通就算没问题</p><p><img src="https://image.nickxu.me/202311051156967.png" alt="ab8422039ce9ef1e9ead78e908707278"></p><p><img src="https://image.nickxu.me/202311051155650.png" alt="image-20231105115544617 AM"></p><p>传输文件使用 HTTP 其实最方便，直接用 py 起一个 http server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/dir</span><br><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure><p>然后你就可以通过浏览器访问了</p><p><img src="https://image.nickxu.me/202311051153910.png" alt="image-20231105115344658 AM"></p><p>本地看上去没问题之后就可以在另一端访问了</p><p>我记得下载是满速的，千兆以太网直接吃满，嘎嘎快（</p>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/mac-windows-file-copy-by-directly-LAN.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>

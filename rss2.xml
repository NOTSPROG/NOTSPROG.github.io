<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>NX の 博客</title>
    <link>https://nickxu.me/</link>
    
    <image>
      <url>https://www.nickxu.top/static/favicon.jpg</url>
      <title>NX の 博客</title>
      <link>https://nickxu.me/</link>
    </image>
    
    <atom:link href="https://nickxu.me/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>这家伙真勤奋，什么都留下了</description>
    <pubDate>Tue, 15 Aug 2023 16:00:13 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>『LeetCode-HOT-100』T41～T50</title>
      <link>https://nickxu.me/post/leetcode-hot-100-t41-t50.html</link>
      <guid>https://nickxu.me/post/leetcode-hot-100-t41-t50.html</guid>
      <pubDate>Sun, 13 Aug 2023 06:06:21 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;二叉树的层序遍历&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-level-order-traversal/&quot;&gt;二叉树的层序遍历&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;简单的 BFS 练习&lt;/p&gt;
&lt;figure clas</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="二叉树的层序遍历"><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">二叉树的层序遍历</a></h1><p>简单的 BFS 练习</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">levelOrder</span><span class="params">(root *TreeNode)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    ans := [][]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">    queue := []TreeNode&#123;&#125;</span><br><span class="line">    queue = <span class="built_in">append</span>(queue, *root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">        tmpAns := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">        nextLevel := []TreeNode&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">            curr := queue[<span class="number">0</span>]</span><br><span class="line">            queue = queue[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">            tmpAns = <span class="built_in">append</span>(tmpAns, curr.Val)</span><br><span class="line">            <span class="keyword">if</span> curr.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">                nextLevel = <span class="built_in">append</span>(nextLevel, *curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> curr.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">                nextLevel = <span class="built_in">append</span>(nextLevel, *curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans = <span class="built_in">append</span>(ans, tmpAns)</span><br><span class="line">        queue = nextLevel</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二叉树的最大深度"><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">二叉树的最大深度</a></h1><p>直接上一题改改哈哈哈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">    queue := []TreeNode&#123;&#125;</span><br><span class="line">    queue = <span class="built_in">append</span>(queue, *root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">        ans++</span><br><span class="line">        nextLevel := []TreeNode&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">            curr := queue[<span class="number">0</span>]</span><br><span class="line">            queue = queue[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> curr.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">                nextLevel = <span class="built_in">append</span>(nextLevel, *curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> curr.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">                nextLevel = <span class="built_in">append</span>(nextLevel, *curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        queue = nextLevel</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="从前序与中序遍历序列构造二叉树"><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">从前序与中序遍历序列构造二叉树</a></h1><p>前序中左右，中序左中右，后序左右中</p><p>二叉树基本功</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(preorder []<span class="type">int</span>, inorder []<span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(preorder) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(preorder) == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">            Val:   preorder[<span class="number">0</span>],</span><br><span class="line">            Left:  <span class="literal">nil</span>,</span><br><span class="line">            Right: <span class="literal">nil</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ans:=&amp;TreeNode&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    midVal := preorder[<span class="number">0</span>] <span class="comment">// mid 的值</span></span><br><span class="line">    inorderMinIdx := <span class="number">0</span>    <span class="comment">// mid 在中序的位置</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(inorder); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> inorder[i] == midVal &#123;</span><br><span class="line">            inorderMinIdx = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    leftInorder := inorder[:inorderMinIdx]</span><br><span class="line">    rightInorder := inorder[inorderMinIdx+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为 len(「右」) 在前序和中序是一样的，并且都在结尾</span></span><br><span class="line">    <span class="comment">// 所以很容易能把前序的「左」「右」区分开来</span></span><br><span class="line">    lenRight := <span class="built_in">len</span>(inorder) - inorderMinIdx</span><br><span class="line">    leftPreorder := preorder[<span class="number">1</span> : <span class="built_in">len</span>(preorder)-lenRight+<span class="number">1</span>]</span><br><span class="line">    rightPreorder := preorder[<span class="built_in">len</span>(preorder)-lenRight+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fmt.Println(&quot;leftInorder&quot;,leftInorder)</span></span><br><span class="line">    <span class="comment">// fmt.Println(&quot;rightInorder&quot;,rightInorder)</span></span><br><span class="line">    <span class="comment">// fmt.Println(&quot;leftPreorder&quot;,leftPreorder)</span></span><br><span class="line">    <span class="comment">// fmt.Println(&quot;rightPreorder&quot;,rightPreorder)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">        Val:   midVal,</span><br><span class="line">        Left:  buildTree(leftPreorder, leftInorder),</span><br><span class="line">        Right: buildTree(rightPreorder, rightInorder),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉树展开为链表"><a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/">二叉树展开为链表</a></h1><p>要求展开成先序遍历一样的顺序</p><p>首先你遍历的同时构造新链表肯定是可以的，但是这样就没意思了，肯定得写个原地的</p><p>首先先序是中左右，所以你把左和右分别搞定之后，再拼一起就行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">flatten</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">   _ = myFlatten(root)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFlatten</span><span class="params">(root *TreeNode)</span></span> (tail *TreeNode) &#123;</span><br><span class="line">   <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> root</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   leftTail := myFlatten(root.Left)</span><br><span class="line">   rightTail := myFlatten(root.Right)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> leftTail != <span class="literal">nil</span> &#123;</span><br><span class="line">      leftTail.Left = <span class="literal">nil</span></span><br><span class="line">      leftTail.Right = root.Right</span><br><span class="line">      root.Right = root.Left</span><br><span class="line">      root.Left = <span class="literal">nil</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> rightTail != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> rightTail</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> leftTail</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="买卖股票的最佳时机"><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">买卖股票的最佳时机</a></h1><p>首先暴力肯定没问题，但是数据量大了会 TLE</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(prices []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(prices)</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; n; j++ &#123;</span><br><span class="line">            v := prices[j] - prices[i]</span><br><span class="line">            <span class="keyword">if</span> v &gt; ans &#123;</span><br><span class="line">                ans = v</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实实质就是找到差别最大的两个数字，并且小的在前面</p><p>求出相邻之间的 <code>diff</code> 数组，然后遍历即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(prices []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(prices)</span><br><span class="line">    diff := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">        diff[i] = prices[i] - prices[i<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line">    curr := <span class="number">0</span></span><br><span class="line">    <span class="comment">// fmt.Println(diff)</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">        curr += diff[i]</span><br><span class="line">        <span class="keyword">if</span> curr &gt; ans &#123;</span><br><span class="line">            ans = curr</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> curr &lt; <span class="number">0</span> &#123;</span><br><span class="line">            curr = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><s>dp 我也想了，但是想了半天都是 n 方的（</s></p><p>结果看见了<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/solutions/136684/121-mai-mai-gu-piao-de-zui-jia-shi-ji-by-leetcode-/comments/930057">这条评论</a>，感觉还是人外有人👀（</p><h1 id="二叉树中的最大路径和"><a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/">二叉树中的最大路径和</a></h1><p>第一眼：嗯？图的最长路算法？</p><p>但是这个数据量应该来不及转换成图然后处理</p><p>第二眼：嗯？树形 dp？</p><p>但是有个问题就是不好确定起点哇，如果是必须经过 <code>root</code> 的话还可以左右两边分别 dp，然后合一起</p><p>仔细思考，我感觉可以从所有的叶子结点向 <code>root</code> 开始 dp，转移方程就是，每一个分支结点都可以选择继承左儿子，或者继承右儿子，或者都不继承</p><p>但是这个遍历顺序有点难搞，算了，还是写成记忆化搜索吧（dp 其实就是记忆化搜索 Pro Max）</p><p>哎等等？好像可以直接写成搜索？</p><p>再等等？好像少了一种情况，或者在当前打住，把两边拉一起，但是上面不能再引用这个数据（啊我好像知道 ans 怎么求了</p><p>啊好像还得加个只选自身结点</p><p>啊还有只选左边和只选右边</p><p>我去我居然手搓过了一个 hard，成绩还这么好😭</p><p><img src="../../../../Library/Application%20Support/typora-user-images/image-20230813%E4%B8%8B%E5%8D%88113211729.png" alt="image-20230813下午113211729"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxPathSum</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    ans := math.MinInt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(curr *TreeNode)</span></span> <span class="type">int</span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(curr *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left, right <span class="type">int</span></span><br><span class="line">        <span class="keyword">if</span> curr.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            left = dfs(curr.Left)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> curr.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            right = dfs(curr.Right)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans = max(ans,</span><br><span class="line">            left+right+curr.Val,</span><br><span class="line">            left+curr.Val,</span><br><span class="line">            right+curr.Val,</span><br><span class="line">            curr.Val,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max(left+curr.Val, right+curr.Val, curr.Val)</span><br><span class="line">    &#125;</span><br><span class="line">    _ = dfs(root)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    max := a[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">        <span class="keyword">if</span> v &gt; max &#123;</span><br><span class="line">            max = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最长连续序列"><a href="https://leetcode.cn/problems/longest-consecutive-sequence/">最长连续序列</a></h1><p>啊，一眼貌似 dp，但是我想不出怎么写</p><p>能不能用桶排的思路呢？数据范围太大了</p><p>但是要求 <code>O(n)</code> ，我感觉也只有 dp 了哇</p><p>实在写不出来，一看标签，卧槽，有并查集，但是也不行哇（</p><p>看了题解之后：</p><p>原来哈希表不是 <code>O(logn)</code> 哇， 我一直以为 <code>map</code> 是 <code>O(logn)</code>，那没事了~~（高中学的 C++ 的 <code>std::map</code> 说是基于红黑树的，红黑树是 <code>O(logn)</code>，所以一直记得 <code>map</code> 就是 <code>O(logn)</code>~~</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestConsecutive</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    fa := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">    exist := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">bool</span>)</span><br><span class="line">    count := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        fa[nums[i]] = nums[i]</span><br><span class="line">        exist[nums[i]] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    find := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> x != fa[x] &#123;</span><br><span class="line">            fa[x] = fa[fa[x]]</span><br><span class="line">            x = fa[x]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    combine := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// fmt.Println(a,b)</span></span><br><span class="line">        fa[find(a)] = find(b)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> exist[nums[i]<span class="number">-1</span>] &#123;</span><br><span class="line">            combine(nums[i], nums[i]<span class="number">-1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> exist[nums[i]+<span class="number">1</span>] &#123;</span><br><span class="line">            combine(nums[i], nums[i]+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> exist &#123;</span><br><span class="line">        count[find(i)]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fmt.Println(n)</span></span><br><span class="line">    <span class="comment">// fmt.Println(fa)</span></span><br><span class="line">    <span class="comment">// fmt.Println(exist)</span></span><br><span class="line">    <span class="comment">// fmt.Println(count)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, i := <span class="keyword">range</span> count &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; ans &#123;</span><br><span class="line">            ans = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="只出现一次的数字"><a href="https://leetcode.cn/problems/single-number/">只出现一次的数字</a></h1><p>完全想不出「该算法只使用常量额外空间」的方法</p><p>我能想到的是一个变量连续计算，然后两个相同的能自动抵消，<code>O(n)</code> 只能是这样，但是想不出来</p><p>一看标签卧槽位运算</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">singleNumber</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, i := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        ans ^= i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单词拆分"><a href="https://leetcode.cn/problems/word-break/">单词拆分</a></h1><p>先来个暴力好吧，但是 TLE 了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wordBreak</span><span class="params">(s <span class="type">string</span>, wordDict []<span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, word := <span class="keyword">range</span> wordDict &#123;</span><br><span class="line">        <span class="keyword">if</span> isTrim(s, word) &amp;&amp; wordBreak(s[<span class="built_in">len</span>(word):], wordDict) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isTrim</span><span class="params">(s, t <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(t) &gt; <span class="built_in">len</span>(s) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">len</span>(t) == <span class="built_in">len</span>(s) &#123;</span><br><span class="line">        <span class="keyword">return</span> s == t</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(t); i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> s[i] != t[i] &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想改进一下这个暴力，如果 wordDict 中有单词可以由其他单词组合成，那就可以忽略</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wordBreak</span><span class="params">(s <span class="type">string</span>, wordDict []<span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    wordDict= prework(wordDict)</span><br><span class="line">    <span class="keyword">return</span> myWordBreak(s,wordDict)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prework</span><span class="params">(wordDict []<span class="type">string</span>)</span></span> []<span class="type">string</span>&#123;</span><br><span class="line">    ans := []<span class="type">string</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(wordDict);i++&#123;</span><br><span class="line">        ext:=<span class="built_in">make</span>([]<span class="type">string</span>,<span class="built_in">len</span>(wordDict)<span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">copy</span>(ext,wordDict[:i])</span><br><span class="line">        <span class="built_in">copy</span>(ext[i:],wordDict[i+<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">if</span> !myWordBreak(wordDict[i],ext)&#123;</span><br><span class="line">            ans=<span class="built_in">append</span>(ans,wordDict[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myWordBreak</span><span class="params">(s <span class="type">string</span>, wordDict []<span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _,word:=<span class="keyword">range</span> wordDict&#123;</span><br><span class="line">        <span class="keyword">if</span> isTrim(s,word)&amp;&amp;myWordBreak(s[<span class="built_in">len</span>(word):],wordDict) &#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isTrim</span><span class="params">(s,t <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(t)&gt;<span class="built_in">len</span>(s)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">len</span>(t)==<span class="built_in">len</span>(s)&#123;</span><br><span class="line">        <span class="keyword">return</span> s == t</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(t);i++&#123;</span><br><span class="line">            <span class="keyword">if</span> s[i]!=t[i]&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是还是 TLE 了😭</p><p>再优化一手试试，来点记忆化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vis = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">bool</span>)</span><br><span class="line"><span class="keyword">var</span> flag <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wordBreak</span><span class="params">(s <span class="type">string</span>, wordDict []<span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    flag = <span class="literal">false</span></span><br><span class="line">    vis = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">bool</span>)</span><br><span class="line">    wordDict = prework(wordDict)</span><br><span class="line">    vis = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">bool</span>)</span><br><span class="line">    flag = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> myWordBreak(s, wordDict)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prework</span><span class="params">(wordDict []<span class="type">string</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">    ans := []<span class="type">string</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(wordDict); i++ &#123;</span><br><span class="line">        ext := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="built_in">len</span>(wordDict)<span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">copy</span>(ext, wordDict[:i])</span><br><span class="line">        <span class="built_in">copy</span>(ext[i:], wordDict[i+<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">if</span> !myWordBreak(wordDict[i], ext) &#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, wordDict[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myWordBreak</span><span class="params">(s <span class="type">string</span>, wordDict []<span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> flag &#123;</span><br><span class="line">        <span class="keyword">if</span> val, ok := vis[s]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, word := <span class="keyword">range</span> wordDict &#123;</span><br><span class="line">        <span class="keyword">if</span> isTrim(s, word) &amp;&amp; myWordBreak(s[<span class="built_in">len</span>(word):], wordDict) &#123;</span><br><span class="line">            vis[s] = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[s] = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isTrim</span><span class="params">(s, t <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(t) &gt; <span class="built_in">len</span>(s) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">len</span>(t) == <span class="built_in">len</span>(s) &#123;</span><br><span class="line">        <span class="keyword">return</span> s == t</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(t); i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> s[i] != t[i] &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>居然过了🤣</p><p>言归正传，这个问题最好的方法肯定是 dp，GPT 给了很好的过程描述</p><ol><li><strong>问题定义：</strong> 我们希望判断字符串 <code>s</code> 是否可以被拆分成词典中的单词。为了解决这个问题，我们引入一个布尔数组 <code>dp</code>，其中 <code>dp[i]</code> 表示字符串的前 <code>i</code> 个字符是否可以被拆分成词典中的单词。</li><li><strong>初始化：</strong> 我们将 <code>dp[0]</code> 初始化为 <code>true</code>，这是因为空字符串总是可以被拆分，即不拆分成任何单词。</li><li><strong>状态转移：</strong> 对于每个位置 <code>i</code>（从 1 到字符串长度），我们需要判断字符串的前 <code>i</code> 个字符是否可以被拆分成词典中的单词。我们遍历从 <code>0</code> 到 <code>i-1</code> 的每个位置 <code>j</code>，如果 <code>dp[j]</code> 为 <code>true</code>，并且子串 <code>s[j:i]</code> 在词典中，那么我们可以将字符串的前 <code>i</code> 个字符拆分成单词，即 <code>dp[i] = true</code>。这是因为如果从位置 <code>j</code> 到位置 <code>i-1</code> 的子串是一个有效的单词，且前 <code>j</code> 个字符可以被拆分成单词，那么前 <code>i</code> 个字符也可以被拆分。</li><li><strong>返回结果：</strong> 最终，我们返回 <code>dp[len(s)]</code>，即字符串的全部字符是否可以被拆分成词典中的单词。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wordBreak</span><span class="params">(s <span class="type">string</span>, wordDict []<span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="type">bool</span>, n+<span class="number">1</span>)</span><br><span class="line">    exist := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">bool</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(wordDict); i++ &#123;</span><br><span class="line">        exist[wordDict[i]] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= n; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; i; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> dp[j] &amp;&amp; exist[s[j:i]] == <span class="literal">true</span> &#123;</span><br><span class="line">                dp[i] = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="环形链表"><a href="https://leetcode.cn/problems/linked-list-cycle/">环形链表</a></h1><p>做过了，请见<a href="/posts/275.html#141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8">『算法拾遗』链表（Linked List）</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/leetcode-hot-100-t41-t50.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『LeetCode-HOT-100』T31～T40</title>
      <link>https://nickxu.me/post/leetcode-hot-100-t31-t40.html</link>
      <guid>https://nickxu.me/post/leetcode-hot-100-t31-t40.html</guid>
      <pubDate>Sat, 05 Aug 2023 03:20:08 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;颜色分类&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/sort-colors/&quot;&gt;颜色分类&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;这真的是 Medium 吗，哈哈哈😂&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;tab</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="颜色分类"><a href="https://leetcode.cn/problems/sort-colors/">颜色分类</a></h1><p>这真的是 Medium 吗，哈哈哈😂</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortColors</span><span class="params">(nums []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> red, white, blue <span class="type">int</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">switch</span> nums[i] &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            red++</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            white++</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            blue++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; red; i++ &#123;</span><br><span class="line">        nums[i] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := red; i &lt; red+white; i++ &#123;</span><br><span class="line">        nums[i] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := red + white; i &lt; red+white+blue; i++ &#123;</span><br><span class="line">        nums[i] = <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最小覆盖子串"><a href="https://leetcode.cn/problems/minimum-window-substring/">最小覆盖子串</a></h1><p>很好的滑动窗口的题目</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minWindow</span><span class="params">(s <span class="type">string</span>, t <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    target:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>)</span><br><span class="line">    window:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(t);i++&#123;</span><br><span class="line">        target[t[i]]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    left,right:=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    ansLeft,ansRight:=<span class="number">0</span>,math.MaxInt</span><br><span class="line">    diff:=<span class="built_in">len</span>(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> right&lt;<span class="built_in">len</span>(s)&#123;</span><br><span class="line">        c:=s[right]</span><br><span class="line">        right++</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> _,ok:=target[c] ; ok&#123;</span><br><span class="line">            <span class="keyword">if</span> window[c]&lt;target[c]&#123;</span><br><span class="line">                diff--</span><br><span class="line">            &#125;</span><br><span class="line">            window[c]++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> diff == <span class="number">0</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> right-left&lt;ansRight-ansLeft&#123;</span><br><span class="line">                ansRight,ansLeft=right,left</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            d:=s[left]</span><br><span class="line">            left++</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> _,ok:=target[d];ok&#123;</span><br><span class="line">                <span class="keyword">if</span> window[d] &lt;= target[d]&#123;</span><br><span class="line">                    diff++</span><br><span class="line">                &#125;</span><br><span class="line">                window[d]--</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ansRight == math.MaxInt&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s[ansLeft:ansRight]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="子集"><a href="https://leetcode.cn/problems/subsets/">子集</a></h1><p>直接套模板，请见<a href="/2022/07/10/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E6%8E%92%E5%88%97%E4%B8%8E%E7%BB%84%E5%90%88/?highlight=%E5%AD%90%E9%9B%86#%E5%AD%90%E9%9B%86%E7%94%9F%E6%88%90%E9%97%AE%E9%A2%98">『算法拾遗』排列与组合</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subsets</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">   n := <span class="built_in">len</span>(nums)</span><br><span class="line">   <span class="keyword">var</span> ans [][]<span class="type">int</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++ &#123;</span><br><span class="line">      <span class="keyword">var</span> tmp []<span class="type">int</span></span><br><span class="line">      <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</span><br><span class="line">         <span class="keyword">if</span> i&amp;(<span class="number">1</span>&lt;&lt;j) != <span class="number">0</span> &#123;</span><br><span class="line">            tmp = <span class="built_in">append</span>(tmp, nums[j])</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ans = <span class="built_in">append</span>(ans, tmp)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单词搜索"><a href="https://leetcode.cn/problems/word-search/">单词搜索</a></h1><p>暴力 DFS</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exist</span><span class="params">(board [][]<span class="type">byte</span>, word <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    dir := [][]<span class="type">int</span>&#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m, n := <span class="built_in">len</span>(board), <span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">    vis := <span class="built_in">make</span>([][]<span class="type">bool</span>, m)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; m; i++ &#123;</span><br><span class="line">        vis[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, n)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    startX, startY := []<span class="type">int</span>&#123;&#125;, []<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; m; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> board[i][j] == word[<span class="number">0</span>] &#123;</span><br><span class="line">                startX = <span class="built_in">append</span>(startX, i)</span><br><span class="line">                startY = <span class="built_in">append</span>(startY, j)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(count <span class="type">int</span>, x <span class="type">int</span>, y <span class="type">int</span>)</span></span> <span class="type">bool</span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(count <span class="type">int</span>, x <span class="type">int</span>, y <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> count == <span class="built_in">len</span>(word) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vis[x][y] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">            nx := x + dir[i][<span class="number">0</span>]</span><br><span class="line">            ny := y + dir[i][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> nx &gt;= <span class="number">0</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &lt; n &amp;&amp; board[nx][ny] == word[count] &amp;&amp; !vis[nx][ny] &#123;</span><br><span class="line">                vis[nx][ny] = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">if</span> dfs(count+<span class="number">1</span>, nx, ny) == <span class="literal">true</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                vis[nx][ny] = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(startX); i++ &#123;</span><br><span class="line">        vis = <span class="built_in">make</span>([][]<span class="type">bool</span>, m)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; m; i++ &#123;</span><br><span class="line">            vis[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, n)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dfs(<span class="number">1</span>, startX[i], startY[i]) == <span class="literal">true</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="柱状图中最大的矩形"><a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/">柱状图中最大的矩形</a></h1><p>一开始以为是 dp，但想了一下感觉又不行，想不到什么好方法，干脆看题解去了（</p><p>首先暴力很容易写，但是会 TLE</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">largestRectangleArea</span><span class="params">(heights []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(heights); i++ &#123;</span><br><span class="line">        left, right := i, i</span><br><span class="line">        <span class="keyword">for</span> left<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; heights[left<span class="number">-1</span>] &gt;= heights[i] &#123;</span><br><span class="line">            left--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> right+<span class="number">1</span> &lt; <span class="built_in">len</span>(heights) &amp;&amp; heights[right+<span class="number">1</span>] &gt;= heights[i] &#123;</span><br><span class="line">            right++</span><br><span class="line">        &#125;</span><br><span class="line">        area := (right - left + <span class="number">1</span>) * heights[i]</span><br><span class="line">        <span class="keyword">if</span> area &gt; ans &#123;</span><br><span class="line">            ans = area</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最佳方法是使用单调栈，主要思路我感觉 GPT 说的比题解更清楚：</p><ol><li>创建一个栈来存储柱子的索引。栈中的元素满足递增顺序，表示当前柱子高度在数组中的位置。</li><li>从左到右遍历数组中的每个柱子：<ul><li>如果栈为空，或者当前柱子的高度大于等于栈顶柱子的高度，将当前柱子的索引入栈。</li><li>如果当前柱子的高度小于栈顶柱子的高度，说明栈顶柱子不再能够向右扩展，因此弹出栈顶元素，并计算以该栈顶柱子为高度的矩形的面积。栈顶柱子出栈后，其左边第一个比它矮的柱子即为当前栈顶元素，右边第一个比它矮的柱子为当前遍历到的柱子。</li></ul></li><li>在每次弹出栈顶元素时，计算以该柱子为高度的矩形的面积，其宽度为当前遍历到的柱子索引与栈顶柱子的索引之差。</li><li>重复步骤 2 和 3，直到遍历完整个数组。</li><li>在遍历完数组后，可能还有一些柱子留在栈中。对于这些柱子，它们的右边界就是数组的末尾，左边界就是栈中紧邻的柱子。弹出这些柱子并计算矩形面积。</li><li>在整个过程中，不断更新并记录最大的矩形面积。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">largestRectangleArea</span><span class="params">(heights []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    heights = <span class="built_in">append</span>(heights, <span class="number">0</span>)</span><br><span class="line">    n := <span class="built_in">len</span>(heights)</span><br><span class="line">    stack := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span> &amp;&amp; heights[i] &lt; heights[stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]] &#123;</span><br><span class="line">            curr := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            left := <span class="number">-1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span> &#123;</span><br><span class="line">                left = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            area := (i - left - <span class="number">1</span>) * heights[curr]</span><br><span class="line">            <span class="keyword">if</span> area &gt; ans &#123;</span><br><span class="line">                ans = area</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stack = <span class="built_in">append</span>(stack, i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个技巧就是直接在末尾添加一个 <code>0</code> ，这样就能强制清空栈，不用再写个循环来最后清空栈</p><p>但是这个两重 <code>for</code> 我不是很能理解，就这样吧（</p><h1 id="最大矩形"><a href="https://leetcode.cn/problems/maximal-rectangle/">最大矩形</a></h1><p>一眼 dp，但是我看了半天想不出转移方程😭</p><p>只能去看题解了</p><p><a href="https://leetcode.cn/problems/maximal-rectangle/solutions/9535/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-1-8/?envType=featured-list&amp;envId=2cktkvj">发现可以直接转换成上一题</a>，但是那个 dp 我看不懂，算了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maximalRectangle</span><span class="params">(matrix [][]<span class="type">byte</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    m,n:=<span class="built_in">len</span>(matrix),<span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> m==<span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    heights:=<span class="built_in">make</span>([]<span class="type">int</span>,n)</span><br><span class="line">    ans:=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;m;i++&#123;</span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;n;j++&#123;</span><br><span class="line">            <span class="keyword">if</span> matrix[i][j]==<span class="string">&#x27;1&#x27;</span>&#123;</span><br><span class="line">                heights[j]+=<span class="number">1</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                heights[j]=<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(ans,largestRectangleArea(heights))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a,b <span class="type">int</span>)</span></span><span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a&gt;b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉树的中序遍历"><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/"> 二叉树的中序遍历</a></h1><p>前序中左右，中序左中右，后序左右中</p><p>我的写法有点浪费空间，每次都要拷贝，但是随便了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    ans:=[]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> root==<span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Left!=<span class="literal">nil</span>&#123;</span><br><span class="line">        ans=inorderTraversal(root.Left)</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="built_in">append</span>(ans,root.Val)</span><br><span class="line">    <span class="keyword">if</span> root.Right!=<span class="literal">nil</span>&#123;</span><br><span class="line">        ans=<span class="built_in">append</span>(ans,inorderTraversal(root.Right)...)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="不同的二叉搜索树"><a href="https://leetcode.cn/problems/unique-binary-search-trees/">不同的二叉搜索树</a></h1><p><s>什么同分异构体</s></p><p><s>第一眼，范围那么小，直接打表出省一</s></p><p>第二眼，肯定有数学规律，套公式就行</p><p>头疼，直接看题解去了，发现是卡特兰数，没事了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numTrees</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    C := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        C = C * <span class="number">2</span> * (<span class="number">2</span> * i + <span class="number">1</span>) / (i + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="验证二叉搜索树"><a href="https://leetcode.cn/problems/validate-binary-search-tree/">验证二叉搜索树</a></h1><p>经典递归，看了眼题解还可以用「二叉搜索树中序遍历一定是递增的」这个性质</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidBST</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> myIsValidBST(root, math.MinInt, math.MaxInt)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myIsValidBST</span><span class="params">(root *TreeNode, minVal, maxVal <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Val &lt;= minVal || root.Val &gt;= maxVal &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    leftIsValid := myIsValidBST(root.Left, minVal, root.Val)</span><br><span class="line">    rightIsValid := myIsValidBST(root.Right, root.Val, maxVal)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftIsValid &amp;&amp; rightIsValid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对称二叉树"><a href="https://leetcode.cn/problems/symmetric-tree/">对称二叉树</a></h1><p>第一反应：嗯？</p><p>第二反应：左侧用「左中右」遍历，右侧用「右中左」遍历，然后比较行不行？</p><p>第三反应：将一侧的左右儿子递归地反转，然后和另一侧比较是不是完全一样</p><p>但是这样感觉太麻烦了，我递归的时候直接镜像比较行不行（左边的左儿子比较右边的右儿子）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> myIsSymmetric(root.Left, root.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myIsSymmetric</span><span class="params">(left *TreeNode, right *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> left == <span class="literal">nil</span> &amp;&amp; right == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="literal">nil</span> &amp;&amp; right != <span class="literal">nil</span>) || (left != <span class="literal">nil</span> &amp;&amp; right == <span class="literal">nil</span>) || left.Val != right.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> myIsSymmetric(left.Left, right.Right) &amp;&amp; myIsSymmetric(left.Right, right.Left)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/leetcode-hot-100-t31-t40.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『LeetCode-HOT-100』T21～T30</title>
      <link>https://nickxu.me/post/leetcode-hot-100-t21-t30.html</link>
      <guid>https://nickxu.me/post/leetcode-hot-100-t21-t30.html</guid>
      <pubDate>Thu, 03 Aug 2023 08:27:29 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;全排列&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/permutations/&quot;&gt;全排列&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://nickxu.me/2022/07/10/%E3%80%8E%E7%AE%97%E</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="全排列"><a href="https://leetcode.cn/problems/permutations/">全排列</a></h1><p><a href="https://nickxu.me/2022/07/10/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E6%8E%92%E5%88%97%E4%B8%8E%E7%BB%84%E5%90%88/?highlight=%E6%8E%92%E5%88%97#%E4%BD%BF%E7%94%A8%E9%80%92%E5%BD%92%EF%BC%88%E6%B3%95%E4%BA%8C%EF%BC%8C%E6%8E%A8%E8%8D%90%EF%BC%89">板子题</a>，不解释</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">permute</span><span class="params">(nums []<span class="type">int</span>)</span></span> (ans [][]<span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(begain, end <span class="type">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(begain, end <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> begain == end &#123;</span><br><span class="line">            <span class="comment">// 切片是引用类型，需要深拷贝一下</span></span><br><span class="line">            tmp := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">            <span class="built_in">copy</span>(tmp, nums)</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, tmp)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i := begain; i &lt;= end; i++ &#123;</span><br><span class="line">            nums[begain], nums[i] = nums[i], nums[begain]</span><br><span class="line">            dfs(begain+<span class="number">1</span>, end)</span><br><span class="line">            nums[begain], nums[i] = nums[i], nums[begain]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="旋转图像"><a href="https://leetcode.cn/problems/rotate-image/">旋转图像</a></h1><p>感觉纯脑筋急转弯，在草稿纸推演一波应该就行👀</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(matrix [][]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(matrix)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n/<span class="number">2</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; (n+<span class="number">1</span>)/<span class="number">2</span>; j++ &#123;</span><br><span class="line">            matrix[i][j], matrix[n-j<span class="number">-1</span>][i], matrix[n-i<span class="number">-1</span>][n-j<span class="number">-1</span>], matrix[j][n-i<span class="number">-1</span>] =</span><br><span class="line">                matrix[n-j<span class="number">-1</span>][i], matrix[n-i<span class="number">-1</span>][n-j<span class="number">-1</span>], matrix[j][n-i<span class="number">-1</span>], matrix[i][j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字母异位词分组"><a href="https://leetcode.cn/problems/group-anagrams/">字母异位词分组</a></h1><p>没想到暴力解法时间上能击败 95% 的 Go 用户🤣</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">groupAnagrams</span><span class="params">(strs []<span class="type">string</span>)</span></span> [][]<span class="type">string</span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">var</span> ans [][]<span class="type">string</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx, str := <span class="keyword">range</span> strs &#123;</span><br><span class="line">        tmpStr := []<span class="type">byte</span>(str)</span><br><span class="line">        sort.Slice(tmpStr, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> tmpStr[i] &lt; tmpStr[j]</span><br><span class="line">        &#125;)</span><br><span class="line">        m[<span class="type">string</span>(tmpStr)] = <span class="built_in">append</span>(m[<span class="type">string</span>(tmpStr)], idx)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, idxs := <span class="keyword">range</span> m &#123;</span><br><span class="line">        tmp := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="built_in">len</span>(idxs))</span><br><span class="line">        <span class="keyword">for</span> i, idx := <span class="keyword">range</span> idxs &#123;</span><br><span class="line">            tmp[i] = strs[idx]</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">append</span>(ans, tmp)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外一种方法是统计字符个数来区分</p><h1 id="最大子数组和"><a href="https://leetcode.cn/problems/maximum-subarray/">最大子数组和</a></h1><p>经典 dp，但是做完了才发现有更好的方法，就是只接纳有贡献的元素（大于 0）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    ans := nums[<span class="number">0</span>]</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        dp[i] = max(dp[i<span class="number">-1</span>]+nums[i], nums[i])</span><br><span class="line">        ans = max(ans, dp[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="跳跃游戏"><a href="https://leetcode.cn/problems/jump-game/">跳跃游戏</a></h1><p>也是经典 dp，当然也有其他的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canJump</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="type">bool</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> dp[i] &#123;</span><br><span class="line">            <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt;= i+nums[i] &amp;&amp; j &lt; <span class="built_in">len</span>(nums); j++ &#123;</span><br><span class="line">                dp[j] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="built_in">len</span>(nums)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="合并区间"><a href="https://leetcode.cn/problems/merge-intervals/">合并区间</a></h1><p>打死不看🙈题解，我手搓了一个暴力改了好几回终于也过了😭</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SIZE = <span class="number">10001</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(intervals [][]<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line"></span><br><span class="line">    end := <span class="built_in">make</span>([]<span class="type">int</span>, SIZE) <span class="comment">// 当前区间的结束位置</span></span><br><span class="line">    v := <span class="built_in">make</span>([]<span class="type">int</span>, SIZE)   <span class="comment">// 被区间覆盖次数</span></span><br><span class="line"></span><br><span class="line">    sort.Slice(intervals, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> intervals[i][<span class="number">1</span>] != intervals[j][<span class="number">1</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> intervals[i][<span class="number">1</span>] &lt; intervals[j][<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intervals[i][<span class="number">0</span>] &lt; intervals[j][<span class="number">0</span>]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fmt.Println(intervals)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx, interval := <span class="keyword">range</span> intervals &#123;</span><br><span class="line">        <span class="keyword">if</span> idx+<span class="number">1</span> &lt; <span class="built_in">len</span>(intervals) &amp;&amp; intervals[idx][<span class="number">0</span>] == intervals[idx+<span class="number">1</span>][<span class="number">0</span>] &amp;&amp; intervals[idx][<span class="number">1</span>] == intervals[idx+<span class="number">1</span>][<span class="number">1</span>] &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i := interval[<span class="number">0</span>]; i &lt;= interval[<span class="number">1</span>]; i++ &#123;</span><br><span class="line">            end[i] = interval[<span class="number">1</span>]</span><br><span class="line">            v[i]++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// fmt.Println(end)</span></span><br><span class="line">    <span class="comment">// fmt.Println(v)</span></span><br><span class="line">    <span class="keyword">var</span> ans [][]<span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; SIZE; i++ &#123;</span><br><span class="line">        <span class="comment">// if v[end[i]] == 0&#123;</span></span><br><span class="line">        <span class="comment">//     continue</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">0</span> &amp;&amp; end[i] == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> v[end[i]] == <span class="number">1</span> &#123;</span><br><span class="line">            tmp := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">2</span>)</span><br><span class="line">            tmp[<span class="number">0</span>] = i</span><br><span class="line">            i = end[i]</span><br><span class="line">            tmp[<span class="number">1</span>] = i</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, tmp)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> v[end[i]] &gt;= <span class="number">2</span> &#123;</span><br><span class="line">            tmp := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">2</span>)</span><br><span class="line">            tmp[<span class="number">0</span>] = i</span><br><span class="line">            <span class="keyword">for</span> v[end[i]] &gt;= <span class="number">2</span> &amp;&amp; i != end[i] &#123;</span><br><span class="line">                i = end[i]</span><br><span class="line">            &#125;</span><br><span class="line">            i = end[i]</span><br><span class="line">            tmp[<span class="number">1</span>] = i</span><br><span class="line">            <span class="comment">// fmt.Println(tmp)</span></span><br><span class="line">            ans = <span class="built_in">append</span>(ans, tmp)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实有更简单的方法，也是先排序（这里以左端点为例），然后按照下面的思路处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 当前区间的左端点 &lt;= 前一个区间的右端点 &#123;</span><br><span class="line">    与 ans 的最后一个区间合并（右端点取最大值）</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    直接加入 ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="不同路径"><a href="https://leetcode.cn/problems/unique-paths/">不同路径</a></h1><p>我写的应该是记忆化搜索（？）和 dp 感觉没什么区别了👀</p><p>当然你还可以用排列组合公式一步到位哈哈哈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> N = <span class="number">128</span></span><br><span class="line"><span class="keyword">var</span> count [][]<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    count = <span class="built_in">make</span>([][]<span class="type">int</span>, N)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; N; i++ &#123;</span><br><span class="line">        count[i] = <span class="built_in">make</span>([]<span class="type">int</span>, N)</span><br><span class="line">    &#125;</span><br><span class="line">    count[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">uniquePaths</span><span class="params">(m <span class="type">int</span>, n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> count[m][n] != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count[m][n]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> m<span class="number">-1</span> &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        count[m][n] += uniquePaths(m<span class="number">-1</span>, n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> n<span class="number">-1</span> &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        count[m][n] += uniquePaths(m, n<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count[m][n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最小路径和"><a href="https://leetcode.cn/problems/minimum-path-sum/">最小路径和</a></h1><p>这个也是 dp，但是我还是写了个记忆化搜索（</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> N = <span class="number">256</span></span><br><span class="line"><span class="keyword">var</span> count [][]<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minPathSum</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    count = <span class="built_in">make</span>([][]<span class="type">int</span>, N)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; N; i++ &#123;</span><br><span class="line">        count[i] = <span class="built_in">make</span>([]<span class="type">int</span>, N)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; N; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; N; j++ &#123;</span><br><span class="line">            count[i][j] = math.MaxInt</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    count[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dfs(<span class="built_in">len</span>(grid)<span class="number">-1</span>, <span class="built_in">len</span>(grid[<span class="number">0</span>])<span class="number">-1</span>, grid)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(m, n <span class="type">int</span>, grid [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> count[m][n] != math.MaxInt &#123;</span><br><span class="line">        <span class="keyword">return</span> count[m][n]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> m<span class="number">-1</span> &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        count[m][n] = min(count[m][n], dfs(m<span class="number">-1</span>, n, grid)+grid[m][n])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> n<span class="number">-1</span> &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        count[m][n] = min(count[m][n], dfs(m, n<span class="number">-1</span>, grid)+grid[m][n])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count[m][n]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="爬楼梯"><a href="https://leetcode.cn/problems/climbing-stairs/">爬楼梯</a></h1><p>最最经典的 dp 了！</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> N = <span class="number">64</span></span><br><span class="line"><span class="keyword">var</span> dp = <span class="built_in">make</span>([]<span class="type">int</span>, N)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">3</span>; i &lt;= n; i++ &#123;</span><br><span class="line">        dp[i] = dp[i<span class="number">-1</span>] + dp[i<span class="number">-2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="编辑距离"><a href="https://leetcode.cn/problems/edit-distance/">编辑距离</a></h1><p>哇这个题目感觉有点难度</p><p>我先从暴搜开始想，感觉纯 BFS 还是纯 DFS 都不行，得剪枝，然后我还想到 A*，就像八数码那样，但是感觉应该是我想复杂了</p><p>然后我一看标签，卧槽动态规划，我只能说这也能用 dp？然后我就去乖乖地看题解了😭</p><p><a href="https://leetcode.cn/problems/edit-distance/solutions/188223/bian-ji-ju-chi-by-leetcode-solution/comments/331399">这个评论</a>感觉讲的很清楚，主要还是要理解转移方程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minDistance</span><span class="params">(word1 <span class="type">string</span>, word2 <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">   m, n := <span class="built_in">len</span>(word1), <span class="built_in">len</span>(word2)</span><br><span class="line">   dp := <span class="built_in">make</span>([][]<span class="type">int</span>, m+<span class="number">1</span>)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="keyword">range</span> dp &#123;</span><br><span class="line">      dp[i] = <span class="built_in">make</span>([]<span class="type">int</span>, n+<span class="number">1</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; m+<span class="number">1</span>; i++ &#123;</span><br><span class="line">      dp[i][<span class="number">0</span>] = i</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n+<span class="number">1</span>; j++ &#123;</span><br><span class="line">      dp[<span class="number">0</span>][j] = j</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; m+<span class="number">1</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">for</span> j := <span class="number">1</span>; j &lt; n+<span class="number">1</span>; j++ &#123;</span><br><span class="line">         <span class="keyword">if</span> word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>] &#123;</span><br><span class="line">            dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i][j] = <span class="number">1</span> + Min(dp[i][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j], dp[i<span class="number">-1</span>][j<span class="number">-1</span>])</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> dp[m][n]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Min</span><span class="params">(args ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">   min := args[<span class="number">0</span>]</span><br><span class="line">   <span class="keyword">for</span> _, item := <span class="keyword">range</span> args &#123;</span><br><span class="line">      <span class="keyword">if</span> item &lt; min &#123;</span><br><span class="line">         min = item</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/leetcode-hot-100-t21-t30.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『LeetCode-HOT-100』T11～T20</title>
      <link>https://nickxu.me/post/leetcode-hot-100-t11-t20.html</link>
      <guid>https://nickxu.me/post/leetcode-hot-100-t11-t20.html</guid>
      <pubDate>Sun, 30 Jul 2023 11:40:58 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;有效的括号&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/valid-parentheses/&quot;&gt;有效的括号&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;栈的经典题目了属于是&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;tabl</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="有效的括号"><a href="https://leetcode.cn/problems/valid-parentheses/">有效的括号</a></h1><p>栈的经典题目了属于是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    stack := <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k := <span class="number">0</span>; k &lt; <span class="built_in">len</span>(s); k++ &#123;</span><br><span class="line">        i := s[k]</span><br><span class="line">        <span class="keyword">switch</span> i &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            stack = stack + <span class="type">string</span>(i)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> stack != <span class="string">&quot;&quot;</span> &amp;&amp; stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] == <span class="string">&#x27;(&#x27;</span> &#123;</span><br><span class="line">                stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">            stack = stack + <span class="type">string</span>(i)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> stack != <span class="string">&quot;&quot;</span> &amp;&amp; stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] == <span class="string">&#x27;&#123;&#x27;</span> &#123;</span><br><span class="line">                stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">            stack = stack + <span class="type">string</span>(i)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> stack != <span class="string">&quot;&quot;</span> &amp;&amp; stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] == <span class="string">&#x27;[&#x27;</span> &#123;</span><br><span class="line">                stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> stack == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="合并两个有序链表"><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">合并两个有序链表</a></h1><p>做过了，请见<a href="/posts/275.html#21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8">『算法拾遗』链表（Linked List）</a></p><h1 id="括号生成"><a href="https://leetcode.cn/problems/generate-parentheses/">括号生成</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(n <span class="type">int</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">    ans = []<span class="type">string</span>&#123;&#125;</span><br><span class="line">    dfs(<span class="number">0</span>, n)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    curr <span class="type">string</span></span><br><span class="line">    ans  []<span class="type">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(count <span class="type">int</span>, n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(curr) &gt;= n*<span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">0</span> &#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, curr)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    pre := curr</span><br><span class="line">    <span class="keyword">if</span> count &lt; n &#123;</span><br><span class="line">        curr = pre + <span class="string">&quot;(&quot;</span></span><br><span class="line">        dfs(count+<span class="number">1</span>, n)</span><br><span class="line">        curr = pre</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> count &gt; <span class="number">0</span> &#123;</span><br><span class="line">        curr = pre + <span class="string">&quot;)&quot;</span></span><br><span class="line">        dfs(count<span class="number">-1</span>, n)</span><br><span class="line">        curr = pre</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="合并-K-个升序链表"><a href="https://leetcode.cn/problems/merge-k-sorted-lists/">合并 K 个升序链表</a></h1><p>方法很多</p><ol><li>暴力解：把所有链表的结点都拆出来，值存在一个切片里，然后排序再构建一个新链表返回</li><li>逐个对比头结点：每次逐一比较每个链表的头节点值，生成新链表</li><li>优先队列头节点：使用优先队列，存储所有链表的头节点值，之后动态取出最大值</li><li>逐一合并： 使用 合并两个有序链表 的方法，将所有链表逐个合到第一个链表中</li><li>两两合并：和上一种类型，但是是将链表两两合并，就跟淘汰赛一样，最后剩一个</li></ol><h2 id="暴力解">暴力解</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeKLists</span><span class="params">(lists []*ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">var</span> vals []<span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, list := <span class="keyword">range</span> lists &#123;</span><br><span class="line">        curr := list</span><br><span class="line">        <span class="keyword">for</span> curr != <span class="literal">nil</span> &#123;</span><br><span class="line">            vals = <span class="built_in">append</span>(vals, curr.Val)</span><br><span class="line">            curr = curr.Next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort.Ints(vals)</span><br><span class="line"></span><br><span class="line">    dummy := &amp;ListNode&#123;&#125;</span><br><span class="line">    curr := dummy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, val := <span class="keyword">range</span> vals &#123;</span><br><span class="line">        curr.Next = &amp;ListNode&#123;</span><br><span class="line">            Val: val,</span><br><span class="line">        &#125;</span><br><span class="line">        curr = curr.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逐个对比头结点">逐个对比头结点</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeKLists</span><span class="params">(lists []*ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    dummy:=&amp;ListNode&#123;&#125;</span><br><span class="line">    curr:=dummy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        minIndex:=<span class="number">-1</span></span><br><span class="line">        minVal:=math.MaxInt32</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index,listHead := <span class="keyword">range</span> lists&#123;</span><br><span class="line">            <span class="keyword">if</span> listHead!=<span class="literal">nil</span> &amp;&amp; listHead.Val&lt;minVal&#123;</span><br><span class="line">                minIndex=index</span><br><span class="line">                minVal=listHead.Val</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> minIndex==<span class="number">-1</span>&#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        curr.Next=lists[minIndex]</span><br><span class="line">        lists[minIndex]=lists[minIndex].Next</span><br><span class="line">        curr=curr.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优先队列头节点">优先队列头节点</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">    Index <span class="type">int</span></span><br><span class="line">    Val   <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cmp</span><span class="params">(a, b any)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> utils.IntComparator(</span><br><span class="line">        a.(Node).Val,</span><br><span class="line">        b.(Node).Val,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeKLists</span><span class="params">(lists []*ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    dummy := &amp;ListNode&#123;&#125;</span><br><span class="line">    curr := dummy</span><br><span class="line"></span><br><span class="line">    q := priorityqueue.NewWith(cmp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, listHead := <span class="keyword">range</span> lists &#123;</span><br><span class="line">        <span class="keyword">if</span> listHead != <span class="literal">nil</span> &#123;</span><br><span class="line">            q.Enqueue(Node&#123;</span><br><span class="line">                Index: index,</span><br><span class="line">                Val:   listHead.Val,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> !q.Empty() &#123;</span><br><span class="line"></span><br><span class="line">        tmp, _ := q.Dequeue()</span><br><span class="line">        minNode := tmp.(Node)</span><br><span class="line">        curr.Next = lists[minNode.Index]</span><br><span class="line">        lists[minNode.Index] = lists[minNode.Index].Next</span><br><span class="line">        curr = curr.Next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> lists[minNode.Index] != <span class="literal">nil</span> &#123;</span><br><span class="line">            q.Enqueue(Node&#123;</span><br><span class="line">                Index: minNode.Index,</span><br><span class="line">                Val:   lists[minNode.Index].Val,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逐一合并">逐一合并</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeKLists</span><span class="params">(lists []*ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lists) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(lists); i++ &#123;</span><br><span class="line">        lists[<span class="number">0</span>] = mergeTwoLists(lists[<span class="number">0</span>], lists[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两两合并">两两合并</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeKLists</span><span class="params">(lists []*ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lists) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">len</span>(lists) == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    empty := <span class="built_in">make</span>([]<span class="type">bool</span>, <span class="built_in">len</span>(lists))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> !empty[<span class="number">1</span>] &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="built_in">len</span>(lists) - <span class="number">1</span>; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">            lists[i/<span class="number">2</span>] = mergeTwoLists(lists[i/<span class="number">2</span>], lists[i])</span><br><span class="line">            empty[i] = <span class="literal">true</span></span><br><span class="line">            empty[i/<span class="number">2</span>] = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="下一个排列"><a href="https://leetcode.cn/problems/next-permutation/">下一个排列</a></h1><ol><li>从右向左找到第一个升序的位置 <code>i</code></li><li>如果 <code>i &gt;= 0</code>，从右向左找到第一个大于 <code>nums[i]</code> 的位置 <code>j</code></li><li>交换位置 <code>i</code> 和 <code>j</code> 的元素</li><li>反转 <code>i</code> 之后的元素，得到下一个全排列</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nextPermutation</span><span class="params">(nums []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Step 1: 从右向左找到第一个升序的位置 i</span></span><br><span class="line">    i := <span class="built_in">len</span>(nums) - <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">        i--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2: 如果 i &gt;= 0，从右向左找到第一个大于 nums[i] 的位置 j</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        j := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &lt;= nums[i] &#123;</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Step 3: 交换位置 i 和 j 的元素</span></span><br><span class="line">        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 4: 反转 i 之后的元素，得到下一个全排列</span></span><br><span class="line">    reverse(nums[i+<span class="number">1</span>:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(nums []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    left, right := <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">        nums[left], nums[right] = nums[right], nums[left]</span><br><span class="line">        left++</span><br><span class="line">        right--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最长有效括号"><a href="https://leetcode.cn/problems/longest-valid-parentheses/">最长有效括号</a></h1><h2 id="栈">栈</h2><p>题解里面的先压入 <code>-1</code> 我是真的理解不来，这个是我一开始手搓的，没发现还要连着看之前的记录，后来发现了，就加了个 <code>maxLen</code> ，居然就过了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestValidParentheses</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 某个下标的有效长度，这东西有点dp那味了哈哈哈</span></span><br><span class="line">    maxLen := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(s))</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    stack := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx, i := <span class="keyword">range</span> s &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;(&#x27;</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, idx)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            pre := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当前这对括号的有效长度</span></span><br><span class="line">            maxLen[idx] = idx - pre + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pre<span class="number">-1</span> &gt; <span class="number">0</span> &#123; <span class="comment">// 看看能不能和前面的拼一起👀</span></span><br><span class="line">                maxLen[idx] += maxLen[pre<span class="number">-1</span>]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> maxLen[idx] &gt; ans &#123;</span><br><span class="line">                ans = maxLen[idx]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划">动态规划</h2><p><code>dp[i]</code> 表示以第 <code>i</code> 个字符为结尾的最长有效括号子串的长度</p><ol><li>对于每个 <code>s[i]</code> 为 <code>(</code> ，<code>dp[i]</code> 必定为 <code>0</code> ，因为以 <code>(</code> 结尾的字符串永远不会是有效的括号子串。</li><li>对于每个 <code>s[i]</code> 为 <code>)</code>，如果 <code>s[i-1]</code> 为 <code>(</code> ，则 <code>dp[i] = dp[i-2] + 2</code></li><li>对于每个 <code>s[i]</code> 为 <code>)</code>，如果 <code>s[i-1]</code> 为 <code>)</code>并且 <code>s[i-dp[i-1]-1]</code> 为 <code>(</code>，则 <code>dp[i] = dp[i-1] + 2 + dp[i-dp[i-1]-2]</code></li></ol><p>我只能说我的🧠不可能自己转的过来🥲</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestValidParentheses</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">    maxLength := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] == <span class="string">&#x27;)&#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> s[i<span class="number">-1</span>] == <span class="string">&#x27;(&#x27;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> i<span class="number">-2</span> &gt;= <span class="number">0</span> &#123;</span><br><span class="line">                    dp[i] = dp[i<span class="number">-2</span>] + <span class="number">2</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i] = <span class="number">2</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> i-dp[i<span class="number">-1</span>]<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; s[i-dp[i<span class="number">-1</span>]<span class="number">-1</span>] == <span class="string">&#x27;(&#x27;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> i-dp[i<span class="number">-1</span>]<span class="number">-2</span> &gt;= <span class="number">0</span> &#123;</span><br><span class="line">                    dp[i] = dp[i<span class="number">-1</span>] + <span class="number">2</span> + dp[i-dp[i<span class="number">-1</span>]<span class="number">-2</span>]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i] = dp[i<span class="number">-1</span>] + <span class="number">2</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            maxLength = max(maxLength, dp[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxLength</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="搜索旋转排序数组"><a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/">搜索旋转排序数组</a></h1><p>修改过的二分法，有点意思</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化左右指针</span></span><br><span class="line">    left, right := <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用二分查找算法，在搜索范围内查找目标值</span></span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">        <span class="comment">// 计算中间位置</span></span><br><span class="line">        mid := left + (right - left) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果中间值等于目标值，则找到目标，返回下标</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断哪一半是有序的</span></span><br><span class="line">        <span class="keyword">if</span> nums[left] &lt;= nums[mid] &#123;</span><br><span class="line">            <span class="comment">// 如果左半段有序</span></span><br><span class="line">            <span class="keyword">if</span> nums[left] &lt;= target &amp;&amp; target &lt; nums[mid] &#123;</span><br><span class="line">                <span class="comment">// 如果目标值在左半段范围内，则在左半段继续查找</span></span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则在右半段继续查找</span></span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果右半段有序</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; target &amp;&amp; target &lt;= nums[right] &#123;</span><br><span class="line">                <span class="comment">// 如果目标值在右半段范围内，则在右半段继续查找</span></span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则在左半段继续查找</span></span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果未找到目标值，则返回 -1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="在排序数组中查找元素的第一个和最后一个位置"><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">在排序数组中查找元素的第一个和最后一个位置</a></h1><p>也是二分，我的思路是先传统二分找到一个元素，再两侧二分</p><p>其实也可以两次二分，一次找最小值，一次找最大值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchRange</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[<span class="number">0</span>] == target &#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="type">int</span>&#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    idx := findIdx(nums, target)</span><br><span class="line">    fmt.Println(idx)</span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">-1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">int</span>&#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    left := leftExt(nums, idx)</span><br><span class="line">    right := rightExt(nums, idx)</span><br><span class="line">    <span class="keyword">return</span> []<span class="type">int</span>&#123;left, right&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findIdx</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    left, right := <span class="number">0</span>, n<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">        mid := (left + right) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; target &#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">leftExt</span><span class="params">(nums []<span class="type">int</span>, idx <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    target := nums[idx]</span><br><span class="line">    left, right := <span class="number">0</span>, idx</span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">        mid := (left + right) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">            right = mid</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rightExt</span><span class="params">(nums []<span class="type">int</span>, idx <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    target := nums[idx]</span><br><span class="line">    left, right := idx, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">        mid := (left + right + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">            left = mid</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="组合总和"><a href="https://leetcode.cn/problems/combination-sum/">组合总和</a></h1><p>想起来高中的经典硬币买商品的题目，但是那个好像是统计有多少种方法，从 0 开始往后 dp 转移就行，这个题感觉递归更好，而且去重也有点麻烦</p><p>选择递归也要处理去重的问题，可以限定每次新的元素不能比之前的元素小（答案元素单调），这样就行了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum</span><span class="params">(candidates []<span class="type">int</span>, target <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> curr []<span class="type">int</span> <span class="comment">// 当前选择的元素</span></span><br><span class="line">    <span class="keyword">var</span> ans [][]<span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(target <span class="type">int</span>, pre <span class="type">int</span>)</span></span> <span class="comment">// 目标 target，之前是第 pre 个元素</span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(target <span class="type">int</span>, pre <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="comment">// 因为切片是引用类型，所以得深拷贝一下</span></span><br><span class="line">            tmp := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(curr))</span><br><span class="line">            <span class="built_in">copy</span>(tmp, curr)</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, tmp)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i := pre; i &lt; <span class="built_in">len</span>(candidates); i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> target-candidates[i] &gt;= <span class="number">0</span> &#123;</span><br><span class="line">                curr = <span class="built_in">append</span>(curr, candidates[i])</span><br><span class="line">                dfs(target-candidates[i], i)</span><br><span class="line">                curr = curr[:<span class="built_in">len</span>(curr)<span class="number">-1</span>]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(target, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接雨水"><a href="https://leetcode.cn/problems/trapping-rain-water/">接雨水</a></h1><p>哇经典接雨水，之前三维接雨水把我折腾的够呛（</p><p>这道题解法太多了，除了暴力（每个位置往左右扫，看左右最高有多少），还有动态规划，栈和双指针等，下面是动态规划的写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trap</span><span class="params">(height []<span class="type">int</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(height)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    leftMax := <span class="built_in">make</span>([]<span class="type">int</span>, n)  <span class="comment">// 当前及左边的最大高度</span></span><br><span class="line">    rightMax := <span class="built_in">make</span>([]<span class="type">int</span>, n) <span class="comment">// 当前及右边的最大高度</span></span><br><span class="line">    leftMax[<span class="number">0</span>] = height[<span class="number">0</span>]</span><br><span class="line">    rightMax[n<span class="number">-1</span>] = height[n<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">        leftMax[i] = max(leftMax[i<span class="number">-1</span>], height[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        rightMax[i] = max(rightMax[i+<span class="number">1</span>], height[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx, h := <span class="keyword">range</span> height &#123;</span><br><span class="line">        ans += min(leftMax[idx], rightMax[idx]) - h</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/leetcode-hot-100-t11-t20.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『LeetCode-HOT-100』T1～T10</title>
      <link>https://nickxu.me/post/leetcode-hot-100-t1-t10.html</link>
      <guid>https://nickxu.me/post/leetcode-hot-100-t1-t10.html</guid>
      <pubDate>Mon, 24 Jul 2023 09:40:22 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;两数之和&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/two-sum/?envType=featured-list&amp;amp;envId=2cktkvj&quot;&gt;两数之和&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;暴力枚举&quot;&gt;暴力枚举&lt;/h2&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="两数之和"><a href="https://leetcode.cn/problems/two-sum/?envType=featured-list&amp;envId=2cktkvj">两数之和</a></h1><h2 id="暴力枚举">暴力枚举</h2><p>暴力枚举 <code>i</code> 和 <code>j</code> ，没什么好说的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i, _ := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(nums); j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i]+nums[j] == target &#123;</span><br><span class="line">                <span class="keyword">return</span> []<span class="type">int</span>&#123;i, j&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈希表">哈希表</h2><p>对于每一个 <code>x</code>，检查以前有没有遍历过另一半</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, x := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        j, ok := m[target-x]</span><br><span class="line">        <span class="keyword">if</span> ok &#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="type">int</span>&#123;i, j&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m[x] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="两数相加"><a href="https://leetcode.cn/problems/add-two-numbers/?envType=featured-list&amp;envId=2cktkvj">两数相加</a></h1><p>一开始想着能不能抽离出一个函数用来维护 <code>ans</code> 链表，结果这东西不能解决最后的进位问题</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="comment">// 创建一个哨兵节点作为新链表的头部</span></span><br><span class="line">    dummy := &amp;ListNode&#123;&#125;</span><br><span class="line">    curr := dummy</span><br><span class="line"></span><br><span class="line">    i, j := l1, l2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i != <span class="literal">nil</span> &amp;&amp; j != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">        addNum(&amp;curr, i.Val+j.Val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i.Next == <span class="literal">nil</span> &amp;&amp; j.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j != <span class="literal">nil</span> &#123;</span><br><span class="line">                addNum(&amp;curr, j.Val)</span><br><span class="line">                j = j.Next</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> j.Next == <span class="literal">nil</span> &amp;&amp; i.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> i != <span class="literal">nil</span> &#123;</span><br><span class="line">                addNum(&amp;curr, i.Val)</span><br><span class="line">                i = i.Next</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        i = i.Next</span><br><span class="line">        j = j.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addNum</span><span class="params">(curr **ListNode, num <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(num)</span><br><span class="line"></span><br><span class="line">    (*curr).Val = ((*curr).Val + num) % <span class="number">10</span></span><br><span class="line">    (*curr).Next = &amp;ListNode&#123;</span><br><span class="line">        Val:  num / <span class="number">10</span>,</span><br><span class="line">        Next: <span class="literal">nil</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(*curr)</span><br><span class="line"></span><br><span class="line">    *curr = (*curr).Next</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没办法，还是按照题解的思路打了一遍</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="comment">// 创建一个哨兵节点作为新链表的头部</span></span><br><span class="line">    dummy := &amp;ListNode&#123;&#125;</span><br><span class="line">    curr := dummy</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暂存进位</span></span><br><span class="line">    tmp := <span class="number">0</span></span><br><span class="line">    i, j := l1, l2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i != <span class="literal">nil</span> || j != <span class="literal">nil</span> &#123;</span><br><span class="line">        x, y := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> i != <span class="literal">nil</span> &#123;</span><br><span class="line">            x = i.Val</span><br><span class="line">            i = i.Next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> j != <span class="literal">nil</span> &#123;</span><br><span class="line">            y = j.Val</span><br><span class="line">            j = j.Next</span><br><span class="line">        &#125;</span><br><span class="line">        sum := x + y + tmp</span><br><span class="line">        sum, tmp = sum%<span class="number">10</span>, sum/<span class="number">10</span></span><br><span class="line"></span><br><span class="line">        curr.Next = &amp;ListNode&#123;Val: sum&#125;</span><br><span class="line">        curr = curr.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tmp &gt; <span class="number">0</span> &#123;</span><br><span class="line">        curr.Next = &amp;ListNode&#123;Val: tmp&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="无重复字符的最长子串"><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a></h1><h2 id="暴力枚举-2">暴力枚举</h2><p>你应该想到的怎么写，不写了</p><h2 id="滑动窗口">滑动窗口</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录某个字符有没有出现过，也可以用 [128]int&#123;&#125;</span></span><br><span class="line">    set := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">bool</span>)</span><br><span class="line">    <span class="comment">// 左右指针</span></span><br><span class="line">    i, j, ans := <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j &lt; n &#123;</span><br><span class="line">        <span class="keyword">if</span> set[s[j]] &#123; <span class="comment">// 如果存在，就在左侧一直删，删到不存在</span></span><br><span class="line">            <span class="built_in">delete</span>(set, s[i])</span><br><span class="line">            i++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果不存在就记录并更新长度</span></span><br><span class="line">            set[s[j]] = <span class="literal">true</span></span><br><span class="line">            ans = max(ans, j-i+<span class="number">1</span>)</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &lt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="寻找两个正序数组的中位数"><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">寻找两个正序数组的中位数</a></h1><h2 id="合并后排序">合并后排序</h2><p>没什么好说的，最暴力的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="type">int</span>, nums2 []<span class="type">int</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">    nums3 := <span class="built_in">append</span>(nums1, nums2...)</span><br><span class="line">    sort.Ints(nums3)</span><br><span class="line">    <span class="comment">// fmt.Println(nums3)</span></span><br><span class="line"></span><br><span class="line">    n := <span class="built_in">len</span>(nums3)</span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">float64</span>(nums3[n/<span class="number">2</span>])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">float64</span>(nums3[n/<span class="number">2</span>]+nums3[n/<span class="number">2</span><span class="number">-1</span>]) / <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用归并法有序合并">使用归并法有序合并</h2><p>不写了，就是归并排序的其中一步</p><h2 id="双指针逐个移动">双指针逐个移动</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="type">int</span>, nums2 []<span class="type">int</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="comment">// 定义三个指针和两个数组长度</span></span><br><span class="line">    i, j, k := <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    n1, n2 := <span class="built_in">len</span>(nums1), <span class="built_in">len</span>(nums2)</span><br><span class="line">    <span class="comment">// 定义中位数变量和之前的值</span></span><br><span class="line">    pre, cur := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="comment">// 计算总元素个数</span></span><br><span class="line">    m := n1 + n2</span><br><span class="line">    <span class="comment">// 计算中位数的位置</span></span><br><span class="line">    mid := m / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环，直到找到中位数的位置</span></span><br><span class="line">    <span class="keyword">for</span> k &lt;= mid &#123;</span><br><span class="line">        <span class="comment">// 保存上一次的值</span></span><br><span class="line">        pre = cur</span><br><span class="line">        <span class="comment">// 比较两个数组的元素，将较小的元素放入当前位置，指针向后移动</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; n1 &amp;&amp; j &lt; n2 &#123;</span><br><span class="line">            <span class="keyword">if</span> nums1[i] &lt; nums2[j] &#123;</span><br><span class="line">                cur = nums1[i]</span><br><span class="line">                i++</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = nums2[j]</span><br><span class="line">                j++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> i &lt; n1 &#123; <span class="comment">// 第一个数组还有剩余元素</span></span><br><span class="line">            cur = nums1[i]</span><br><span class="line">            i++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 第二个数组还有剩余元素</span></span><br><span class="line">            cur = nums2[j]</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">        k++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断总元素个数是奇数还是偶数，返回相应的结果</span></span><br><span class="line">    <span class="keyword">if</span> m % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">float64</span>(pre + cur) / <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">float64</span>(cur)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双指针二分移动（类似第-k-小数）">双指针二分移动（类似第 k 小数）</h2><p>建议去看一眼题解👀</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="type">int</span>, nums2 []<span class="type">int</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="comment">// 确保nums1是较短的数组</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums1) &gt; <span class="built_in">len</span>(nums2) &#123;</span><br><span class="line">        nums1, nums2 = nums2, nums1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取两个数组的长度</span></span><br><span class="line">    m, n := <span class="built_in">len</span>(nums1), <span class="built_in">len</span>(nums2)</span><br><span class="line">    <span class="comment">// 计算总元素个数</span></span><br><span class="line">    total := m + n</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义二分查找的边界</span></span><br><span class="line">    left, right := <span class="number">0</span>, m</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二分查找</span></span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">        <span class="comment">// 二分查找分割线的位置</span></span><br><span class="line">        partition1 := (left + right) / <span class="number">2</span></span><br><span class="line">        partition2 := (total+<span class="number">1</span>)/<span class="number">2</span> - partition1</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算分割线两边的最大最小值</span></span><br><span class="line">        maxLeft1 := math.MinInt32</span><br><span class="line">        <span class="keyword">if</span> partition1 &gt; <span class="number">0</span> &#123;</span><br><span class="line">            maxLeft1 = nums1[partition1<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        maxLeft2 := math.MinInt32</span><br><span class="line">        <span class="keyword">if</span> partition2 &gt; <span class="number">0</span> &#123;</span><br><span class="line">            maxLeft2 = nums2[partition2<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        minRight1 := math.MaxInt32</span><br><span class="line">        <span class="keyword">if</span> partition1 &lt; m &#123;</span><br><span class="line">            minRight1 = nums1[partition1]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        minRight2 := math.MaxInt32</span><br><span class="line">        <span class="keyword">if</span> partition2 &lt; n &#123;</span><br><span class="line">            minRight2 = nums2[partition2]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否找到了正确的分割线</span></span><br><span class="line">        <span class="keyword">if</span> maxLeft1 &lt;= minRight2 &amp;&amp; maxLeft2 &lt;= minRight1 &#123;</span><br><span class="line">            <span class="comment">// 根据总元素个数是奇数还是偶数返回结果</span></span><br><span class="line">            <span class="keyword">if</span> total % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="type">float64</span>(max(maxLeft1, maxLeft2) + min(minRight1, minRight2)) / <span class="number">2.0</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="type">float64</span>(max(maxLeft1, maxLeft2))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> maxLeft1 &gt; minRight2 &#123;</span><br><span class="line">            <span class="comment">// 如果当前分割线左侧的元素过多，缩小右边界</span></span><br><span class="line">            right = partition1 - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果当前分割线右侧的元素过多，增大左边界</span></span><br><span class="line">            left = partition1 + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.0</span> <span class="comment">// 输入数组有误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 辅助函数，返回两个整数中较大的一个</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 辅助函数，返回两个整数中较小的一个</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style="">GPT 的解释</summary><div class="toggle-content"><p>当我们处理两个已排序的数组，要找到它们的中位数时，使用二分查找是一种高效的方法。这个方法的核心思想是在较短的数组上进行二分查找，通过分割线将两个数组划分成左右两部分，并满足一定的条件。让我们详细解释一下这个二分法。</p><ol><li><p>确定较短的数组：为了减少时间复杂度，我们选择在较短的数组上进行二分查找。首先，我们比较两个数组的长度，如果nums1的长度大于nums2的长度，则交换它们，确保nums1是较短的数组。</p></li><li><p>设定二分查找的边界：我们在较短数组nums1上进行二分查找，所以我们设定左边界<code>left</code>为0，右边界<code>right</code>为nums1的长度。</p></li><li><p>二分查找：我们在nums1数组上进行二分查找，每次迭代都计算一个分割线的位置<code>partition1</code>，以及另一个数组nums2中对应的分割线位置<code>partition2</code>。</p></li><li><p>计算分割线两边的最大最小值：我们分别计算两个数组中分割线两边的最大和最小值。设<code>maxLeft1</code>为nums1中左边部分的最大值，<code>maxLeft2</code>为nums2中左边部分的最大值，<code>minRight1</code>为nums1中右边部分的最小值，<code>minRight2</code>为nums2中右边部分的最小值。</p></li><li><p>判断是否找到正确的分割线：如果<code>maxLeft1</code>小于等于<code>minRight2</code>且<code>maxLeft2</code>小于等于<code>minRight1</code>，说明当前的分割线位置是正确的。这是因为我们需要确保左边的元素都小于等于右边的元素，且左边的部分的长度与右边的部分长度相等或相差1（这样才能得到中位数）。如果条件满足，则我们已经找到了正确的分割线。</p></li><li><p>调整分割线位置：如果当前分割线位置不正确，我们需要根据<code>maxLeft1</code>和<code>minRight2</code>之间的关系来调整分割线位置。如果<code>maxLeft1</code>大于<code>minRight2</code>，说明nums1的分割线位置过大，需要将右边界<code>right</code>向左移动；如果<code>maxLeft2</code>大于<code>minRight1</code>，说明nums1的分割线位置过小，需要将左边界<code>left</code>向右移动。然后继续进行二分查找，直到找到正确的分割线位置。</p></li><li><p>返回结果：根据总元素个数是奇数还是偶数，返回相应的结果。如果总元素个数是偶数，则中位数为两个中间值的平均数；如果总元素个数是奇数，则中位数为较长的数组中的中间值。</p></li></ol><p>通过这种方法，我们可以在O(log(min(m, n)))的时间复杂度内找到两个已排序数组的中位数，是一种高效且优雅的解决方案。</p></div></details><h1 id="最长回文子串"><a href="https://leetcode.cn/problems/longest-palindromic-substring/">最长回文子串</a></h1><h2 id="暴力枚举-3">暴力枚举</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    ans := <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(s)+<span class="number">1</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> isPaling(s[i:j]) &amp;&amp; <span class="built_in">len</span>(s[i:j]) &gt; <span class="built_in">len</span>(ans) &#123;</span><br><span class="line">                ans = s[i:j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPaling</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s)/<span class="number">2</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] != s[<span class="built_in">len</span>(s)-i<span class="number">-1</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举中心并扩展">枚举中心并扩展</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> start, end <span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        left1, right1 := expandAroundCenter(s, i, i)</span><br><span class="line">        left2, right2 := expandAroundCenter(s, i, i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> right1-left1 &gt; end-start &#123;</span><br><span class="line">            start, end = left1, right1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> right2-left2 &gt; end-start &#123;</span><br><span class="line">            start, end = left2, right2</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s[start : end+<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">expandAroundCenter</span><span class="params">(s <span class="type">string</span>, left, right <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> left &gt;= <span class="number">0</span> &amp;&amp; right &lt; <span class="built_in">len</span>(s) &amp;&amp; s[left] == s[right] &#123;</span><br><span class="line">        left = left - <span class="number">1</span></span><br><span class="line">        right = right + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left + <span class="number">1</span>, right - <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划">动态规划</h2><ul><li>$      dp[i][j]$  表示 <code>s[i][j]</code> 是回文</li><li>转移方程： $      dp[i][j]$ = $      dp[i+1][j-1]$ and  $      s[i]==s[j]$</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    dp := <span class="built_in">make</span>([][]<span class="type">bool</span>, n)</span><br><span class="line">    ans := s[<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        dp[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, n)</span><br><span class="line">        dp[i][i] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l := <span class="number">2</span>; l &lt;= n; l++ &#123;</span><br><span class="line">        <span class="keyword">for</span> start := <span class="number">0</span>; start &lt; n-l+<span class="number">1</span>; start++ &#123;</span><br><span class="line">            end := start + l - <span class="number">1</span></span><br><span class="line">            <span class="comment">// 首位是否相同</span></span><br><span class="line">            <span class="keyword">if</span> s[start] == s[end] &#123;</span><br><span class="line">                <span class="keyword">if</span> l == <span class="number">2</span> &#123;</span><br><span class="line">                    dp[start][end] = <span class="literal">true</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[start][end] = dp[start+<span class="number">1</span>][end<span class="number">-1</span>]</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 更新答案</span></span><br><span class="line">                <span class="keyword">if</span> dp[start][end] == <span class="literal">true</span> &amp;&amp; (end-start+<span class="number">1</span>) &gt; <span class="built_in">len</span>(ans) &#123;</span><br><span class="line">                    ans = s[start : end+<span class="number">1</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="正则表达式匹配"><a href="https://leetcode.cn/problems/regular-expression-matching/">正则表达式匹配</a></h1><p>hard 题，先放弃了</p><p>动态规划，<code>dp[i][j]</code> 表示 <code>s</code> 的前 <code>i</code> 个字符和 <code>p</code> 的前<code>j</code> 个字符是否能匹配</p><details class="toggle"><summary class="toggle-button" style="">转移方程 GPT</summary><div class="toggle-content"><p>对于状态转移方程的解释，我们来具体说明一下在动态规划中如何构建状态转移。</p><p>我们使用 <code>dp[i][j]</code> 来表示 <code>s</code> 的前 <code>i</code> 个字符和 <code>p</code> 的前 <code>j</code> 个字符是否匹配。</p><ol><li><p>当 <code>p[j-1]</code> 是普通字符（小写字母），且与 <code>s[i-1]</code> 匹配时，<code>dp[i][j]</code> 的值由 <code>dp[i-1][j-1]</code> 决定。即：</p> <figure class="highlight plaintext"><div class="highlight-tools "><i class="fas fa-angle-down expand "></i><div class="code-lang">plaintext</div><div class="copy-notice"></div><i class="fas fa-paste copy-button"></i></div><table><tbody><tr><td class="code"><pre><span class="line">if p[j-1] == s[i-1] {</span><br><span class="line">    dp[i][j] = dp[i-1][j-1]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>当 <code>p[j-1]</code> 是 “.”（匹配任意单个字符）时，<code>dp[i][j]</code> 的值同样由 <code>dp[i-1][j-1]</code> 决定。即：</p> <figure class="highlight plaintext"><div class="highlight-tools "><i class="fas fa-angle-down expand "></i><div class="code-lang">plaintext</div><div class="copy-notice"></div><i class="fas fa-paste copy-button"></i></div><table><tbody><tr><td class="code"><pre><span class="line">if p[j-1] == '.' {</span><br><span class="line">    dp[i][j] = dp[i-1][j-1]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>当 <code>p[j-1]</code> 是 “*”（匹配零个或多个前面的字符）时，情况稍微复杂一些。</p><ul><li><p>如果 <code>p[j-2]</code> 与 <code>s[i-1]</code> 不匹配，那么 <code>*</code> 只能让 <code>p</code> 的前面两个字符消失，即匹配 0 次，<code>dp[i][j]</code> 的值由 <code>dp[i][j-2]</code> 决定。即：</p>   <figure class="highlight plaintext"><div class="highlight-tools "><i class="fas fa-angle-down expand "></i><div class="code-lang">plaintext</div><div class="copy-notice"></div><i class="fas fa-paste copy-button"></i></div><table><tbody><tr><td class="code"><pre><span class="line">if p[j-1] == '*' &amp;&amp; p[j-2] != s[i-1] {</span><br><span class="line">    dp[i][j] = dp[i][j-2]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>如果 <code>p[j-2]</code> 与 <code>s[i-1]</code> 匹配，或者 <code>p[j-2]</code> 是 “.”（匹配任意单个字符），那么我们有多种选择：</p><ul><li><code>*</code> 匹配 0 次：<code>dp[i][j]</code> 的值由 <code>dp[i][j-2]</code> 决定。</li><li><code>*</code> 匹配 1 次：<code>dp[i][j]</code> 的值由 <code>dp[i-1][j-2]</code> 决定。</li><li><code>*</code> 匹配多次：<code>dp[i][j]</code> 的值由 <code>dp[i-1][j]</code> 决定。</li></ul><p>综合上述情况，<code>dp[i][j]</code> 的值为这些选择的逻辑或（<code>||</code>）结果。即：</p>   <figure class="highlight plaintext"><div class="highlight-tools "><i class="fas fa-angle-down expand "></i><div class="code-lang">plaintext</div><div class="copy-notice"></div><i class="fas fa-paste copy-button"></i></div><table><tbody><tr><td class="code"><pre><span class="line">if p[j-1] == '*' &amp;&amp; (p[j-2] == s[i-1] || p[j-2] == '.') {</span><br><span class="line">    dp[i][j] = dp[i][j-2] || dp[i-1][j-2] || dp[i-1][j]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol><p>这就是状态转移方程的具体表达式，通过合理的状态转移，我们可以在动态规划的过程中求解出 <code>dp[m][n]</code> 的值，其中 <code>m</code> 是字符串 <code>s</code> 的长度，<code>n</code> 是字符规律 <code>p</code> 的长度。最终，<code>dp[m][n]</code> 的值即为整个字符串 <code>s</code> 和字符规律 <code>p</code> 是否匹配的结果。</p></div></details><h1 id="盛最多水的容器"><a href="https://leetcode.cn/problems/container-with-most-water/">盛最多水的容器</a></h1><p>经典的二维接雨水，双指针法</p><p>已知：</p><ul><li>相同情况下，两边越远越好</li><li>面积受限于短边</li></ul><p>策略：</p><ul><li>从左右两边开始往中间扫</li><li>尽量保持长边不动，移动短边</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(height)</span><br><span class="line"></span><br><span class="line">    left, right := <span class="number">0</span>, n<span class="number">-1</span></span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">        ans = max(ans, (right-left)*min(height[right], height[left]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> height[left] &gt; height[right] &#123;</span><br><span class="line">            right--</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三数之和"><a href="https://leetcode.cn/problems/3sum/">三数之和</a></h1><p>排序+双指针，<a href="https://leetcode.cn/problems/3sum/solutions/11525/3sumpai-xu-shuang-zhi-zhen-yi-dong-by-jyd/?envType=featured-list&amp;envId=2cktkvj">这篇题解</a>讲的很好</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    ans := <span class="built_in">make</span>([][]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k := <span class="number">0</span>; k &lt; n<span class="number">-2</span>; k++ &#123; <span class="comment">// 第一个数</span></span><br><span class="line">        <span class="keyword">if</span> nums[k] &gt; <span class="number">0</span> &#123; <span class="comment">// 因为 k,i,j 递增，如果 k&gt;0 就直接不可能了</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> k &gt; <span class="number">0</span> &amp;&amp; nums[k] == nums[k<span class="number">-1</span>] &#123;  <span class="comment">// 跳过重复</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        i, j := k+<span class="number">1</span>, n<span class="number">-1</span> <span class="comment">// i,j 从 [k+1,n-1] 向中间走</span></span><br><span class="line">        <span class="keyword">for</span> i &lt; j &#123;</span><br><span class="line">            sum := nums[k] + nums[i] + nums[j]</span><br><span class="line">            <span class="keyword">if</span> sum == <span class="number">0</span> &#123;</span><br><span class="line">                ans = <span class="built_in">append</span>(ans, []<span class="type">int</span>&#123;nums[k], nums[i], nums[j]&#125;)</span><br><span class="line">                <span class="keyword">for</span> i &lt; j &amp;&amp; nums[i] == nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">                    i++</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> i &lt; j &amp;&amp; nums[j] == nums[j<span class="number">-1</span>] &#123;</span><br><span class="line">                    j--</span><br><span class="line">                &#125;</span><br><span class="line">                i++</span><br><span class="line">                j--</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &gt; <span class="number">0</span> &#123; <span class="comment">// 依据递增性质，调整 i,j</span></span><br><span class="line">                j--</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="电话号码的字母组合"><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">电话号码的字母组合</a></h1><p>经典回溯，但是我感觉 BFS 的思路更清晰</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="type">byte</span>][]<span class="type">string</span>&#123;</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: &#123;<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>: &#123;<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;5&#x27;</span>: &#123;<span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;6&#x27;</span>: &#123;<span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: &#123;<span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>: &#123;<span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>: &#123;<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(digits <span class="type">string</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> digits == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">string</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> queue []<span class="type">string</span></span><br><span class="line">    queue = <span class="built_in">append</span>(queue, m[digits[<span class="number">0</span>]]...) <span class="comment">// 把首位数字对应的字母放入队列</span></span><br><span class="line">    digits = digits[<span class="number">1</span>:]                    <span class="comment">// 去掉首位数字</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> digits != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp []<span class="type">string</span></span><br><span class="line">        <span class="keyword">for</span> _, v := <span class="keyword">range</span> queue &#123;</span><br><span class="line">            tmp = <span class="built_in">append</span>(tmp, combination(v, digits[<span class="number">0</span>])...)</span><br><span class="line">        &#125;</span><br><span class="line">        queue = tmp</span><br><span class="line">        digits = digits[<span class="number">1</span>:]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 s 的结尾分别加上 target 的映射</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combination</span><span class="params">(s <span class="type">string</span>, target <span class="type">byte</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ans []<span class="type">string</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> m[target] &#123;</span><br><span class="line">        ans = <span class="built_in">append</span>(ans, s+v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="删除链表的倒数第-N-个结点"><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">删除链表的倒数第 N 个结点</a></h1><p>做过了，请见<a href="/posts/275.html#19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-N-%E4%B8%AA%E7%BB%93%E7%82%B9">『算法拾遗』链表（Linked List）</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/leetcode-hot-100-t1-t10.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『OSPP2023』我与 OSPP 的故事 —— 从听闻到中选</title>
      <link>https://nickxu.me/2023/06/my-story-with-OSPP-from-hearing-to-being-selected.html</link>
      <guid>https://nickxu.me/2023/06/my-story-with-OSPP-from-hearing-to-being-selected.html</guid>
      <pubDate>Fri, 30 Jun 2023 06:41:59 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://image.nickxu.me/202306301521080.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;6月26日下午3点，OSPP2023 中选结果正式发布，&lt;a href=&quot;https://summer-o</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://image.nickxu.me/202306301521080.jpeg" alt=""></p><blockquote><p>6月26日下午3点，OSPP2023 中选结果正式发布，<a href="https://summer-ospp.ac.cn/news/data">全球共有 1486 人成功申请，最终中选人数为 504 人</a></p><p>鄙人非常荣幸地成为了这 504 个幸运儿的一份子，特撰此文，记录 <code>我与 OSPP 的故事 —— 从听闻到中选</code></p><p>当然，我也希望这篇博客能够吸引更多人参与开源，为开源项目做出自己的贡献</p></blockquote><details class="toggle" ><summary class="toggle-button" style="">给「杭电助手」打点小广告</summary><div class="toggle-content"><p><img src="https://image.nickxu.me/202306301616858.jpeg" alt="IMG_0166"></p><p>本次开源之夏活动，杭州电子科技大学共中选 13 人，其中 8 人来自杭电助手</p><p>杭助本次共参与 11 人，中选率高达 8/11</p><p>（另外今年另有 1 人中选 GSoC，1 人 LFX Mentorship ）</p><p><img src="https://image.nickxu.me/202306301625148.png" alt="img"></p><blockquote><p>欢迎热爱技术的同学们填报杭州电子科技大学，欢迎同学们选择杭电助手技术部！ <a href="https://mp.weixin.qq.com/s/4hU4m2Y1eH3VfbTU267e1w">查看推文</a></p></blockquote></div></details><hr><h1 id="写在前面">写在前面</h1><p>这里是对不了解开源活动的同学进行一点飞速的补充，简短地谈一下我的理解</p><p>其实已经有很多文章讲的很好了，这里我推荐一篇杭助成员「爱飞的鸟」的 <a href="https://blog.aflybird.cn/2023/01/before-good-first-issue/">Before Good First Issue</a></p><h2 id="开源活动是什么">开源活动是什么</h2><p>开源活动通常是由开源社区、组织或公司组织的活动，目的在于吸引更多的人（特别是学生）参与开源，帮助构建开源项目，增加开源社区热度，推广开源文化与价值观，为开源事业作出贡献</p><p>比较有名的比如 LFX Mentorship、谷歌的 GSoC、国内的 OSPP、GLCC 等</p><p>一般的形式是这样的：由活动主办方提供平台与资金，吸引各路开源社区/组织入驻，社区挑选目前要做的一些活作为若干子项目（写清楚具体要做什么事情，最终达成什么目的），并且分配至少一个导师专门负责这个项目（大多数是一个）</p><p>学生呢需要给导师写 Proposal（申请书），阐述自己对这个项目的想法（如何实现），并努力让导师相信自己能够很好地完成这个项目</p><p>最终每个项目的导师会在所有申请的学生中挑选一个来做这个项目，并进行一对一的指导，帮助学生最终完成任务</p><p>这时候你就会发现，这里是存在竞争的，并且是零和博弈，赢者通吃，不过你也可以同时尝试多个项目，这样最终中选的可能就大一些</p><h2 id="为什么要参加开源活动">为什么要参加开源活动</h2><p>TL;DR，主要有下面几个吸引你的理由</p><ol><li><p>钱</p><img src="https://image.nickxu.me/202306302249043.png" alt="image-20230630下午104907011" style="zoom:50%;" /><blockquote><p>OSPP 文档中关于奖金的说明</p></blockquote><p>哈哈哈谁会和钱过不去呢？吸引别人参与活动最直接的方法就是物质奖励</p><p>一般来说是 6000 起步（GLCC），OSPP 是 8000 和 12000 两档，而 GSoC 则是 3000 刀起步（国内学生，不同地区奖金不同）</p><p><s>开源之夏也被叫做 mac 之夏，因为很多人都会去拿钱买 mac</s></p><p>当然，钱可能是最开始吸引你地方，但是你日后会发现下面的理由是更加吸引你的地方</p><p>甚至会觉得让你觉得倒贴钱你也愿意</p></li><li><p>接触顶级项目</p><img src="https://image.nickxu.me/202306302242256.png" alt="image-20230630下午104203209" style="zoom: 50%;" /><blockquote><p>杭助今年中了 GSoC 的 daidr，参加的是 chromium，他被邀请旁听内部会议</p></blockquote><p>参加开源活动的不乏一些顶级的开源项目，比如说 git，又比如说 chromium，你将有机会给它们贡献自己的代码</p><p>以后，你就可以自豪地和别人说</p><ul><li>不会用 git？我可以教你，我也是开发者之一哦</li><li>你知道吗，你用的浏览器里面有我的代码哦</li></ul><p>是不是非常的让人刮目相看？</p></li><li><p>结交朋友，积累人脉</p><img src="https://image.nickxu.me/202306302246602.png" alt="image-20230630下午104639571" style="zoom:50%;" /><blockquote><p>我的导师说他看了我的博客，居然主动问我最近是不是对找实习有些焦虑（</p><p>然后给我的简历提意见，跟我聊了很多求职就业的内容</p></blockquote><p>在社区中参与项目能让你积累很多大牛的人脉，并且参与社区内部事务</p><p>而且甚至导师们可能会主动和你交朋友</p><p>我前天也和 MOSN 里的大佬一起连麦开会，主要内容开完后和我一起聊天，有机会和阿里、蚂蚁、京东的大牛一起聊天，这真的是非常宝贵的经历</p></li><li><p>提升个人能力</p><p>正如前文所说，开源活动的目的是吸引更多的人来参与开源</p><p>所以这个活动并不是一个「我给你钱，你给我干活」的雇佣关系，而是「欢迎你来，我培养你」的关系</p><p>导师会为你的开发提供指导，你可以围绕项目向导师与社区提出自己的问题</p><p>在开发过程中，你可以学到很多知识，丰富个人经验，提升个人能力</p><p>（当然，也不是所有的导师和社区都有这么好，这也是我后文会讲的内容）</p></li><li><p>丰富简历</p><p>能参与到开源活动中肯定是能写进简历的，以后肯定也能作为与他人的谈资</p></li></ol><h2 id="关于开源之夏（OSPP）">关于开源之夏（OSPP）</h2><p><img src="https://image.nickxu.me/202307012225862.png" alt="image-20230701下午102543373"></p><blockquote><p>今年是 OSPP 的第四个年头，不知道明年会有多少人</p></blockquote><p><a href="https://summer-ospp.ac.cn/">OSPP (Open Source Promotion Plan)</a> 应该是中科院对标谷歌的 GSoC 举办的活动，在国内算是含金量最高的了</p><p>贴几段比较正式的介绍：</p><ul><li>“开源之夏（英文简称 OSPP）”是中科院软件所“开源软件供应链点亮计划”指导下的系列暑期活动，由软件所与 openEuler 社区共同主办、中科南京软件技术研究院承办，旨在鼓励在校学生积极参与开源软件的开发维护，培养和发掘更多优秀的开发者，促进优秀开源软件社区的蓬勃发展，助力开源软件供应链建设</li><li>活动联合各大开源社区，针对重要开源软件的开发与维护提供项目，并向全球高校学生开放报名。学生可自主选择感兴趣的项目进行申请，中选后在项目资深开发者（社区导师）的指导下进行开发。根据项目的难易程度和完成情况，结项者将获取开源之夏活动奖金和结项证书</li><li>开源之夏活动已迈入第四个年头。在过去的三年中，开源之夏与众多蓬勃发展的开源社区携手并进，不断推动开源技术在高校学生中的普及和推广，使得越来越多的学生参与到开源项目中来，更多优秀的开源贡献者和开源项目应运而生，为推动开源生态发展提供了有力的支持</li></ul><p>整体活动流程同 GSoC，社区报名-官方发布社区入选名单-社区发布项目-学生开始申请-社区发布学生名单-学生开始贡献，每个人可以提交三份申请，只能中选一个项目</p><p>难度上感觉比 GSoC 简单不少，GSoC 阿三的确是真的多</p><img src="https://image.nickxu.me/202307012239237.png" alt="image-20230701下午103928213" style="zoom: 67%;" /><blockquote><p>iyear 对于 OSPP 难度的评价，我感觉挺中肯的</p></blockquote><hr><h1 id="个人经历">个人经历</h1><h2 id="开始的开始">开始的开始</h2><p>在我的印象中，应该是「iyear」和「鸟」最开始在社团里说 OSPP 和 GSoC 这些事情</p><p>于是去年我就开始慢慢关注了，但当时 2022 年的都已经快结束了，所以我开始搜集信息，为明年准备</p><p>我要找哪些东西呢？</p><ul><li>第一个，我要看看过去都是些什么项目</li><li>第二个，我要去看 timeline ，熟悉里面几个比较重要的时间节点</li><li>最重要的是，我要知道竞争的激烈程度，中选率大概是个什么情况</li></ul><p>首先我去了 <a href="https://summerofcode.withgoogle.com/">GSoC 的官网</a>，然后开始翻，然后发现怎么这么多出名的项目哇，什么 VLC，什么 Electron，还有 Chromium，还有 git 、GUN，我怎么配的上这些项目哇（</p><p>然后我去翻了翻申请人和中选人数，大概有四分之一的概率中选</p><p>感觉还行吧，说不定可以试试，虽然我知道从 22 年开始，GSoC 的申请不再局限学生，人肯定一年比一年多</p><p><img src="https://image.nickxu.me/202307012352421.png" alt=""></p><blockquote><p>现在又翻了翻今年的，真的吓人，我只能说今年能中 GSoC 的都是神仙</p><p>而且今年的申请人数是什么鬼哇（</p></blockquote><p>然后我去看了 <a href="https://developers.google.com/open-source/gsoc/timeline?hl=zh-cn">timeline</a> ，关注了几个时间点</p><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>GSoC 2023</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2 月 22 日</p></div></div><div class='timeline-item-content'><p>社区、项目名单公布</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>3 月 20 日</p></div></div><div class='timeline-item-content'><p>开始接受申请</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>4 月 4 日</p></div></div><div class='timeline-item-content'><p>截止申请</p></div></div></div><p>看完了 GSoC，我接着去看 OSPP 的项目</p><p>虽然项目感觉也都很高大上，但是竞争压力看上去更小</p><p><img src="https://image.nickxu.me/202307022303147.png" alt="image-20230702下午110331878"></p><blockquote><p>OSPP2022，只能说从申请与中选的比率来看，其实还行</p></blockquote><p>然后是 2023 的 timeline</p><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>OSPP 2023</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>4 月 4 日</p></div></div><div class='timeline-item-content'><p>社区开始上线项目</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>4 月 29 日</p></div></div><div class='timeline-item-content'><p>开始接受申请</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>6 月 4 日</p></div></div><div class='timeline-item-content'><p>截止申请</p></div></div></div><p>最后，我去翻了翻 iyear 2022 年的项目，真的强哇，我大一在干什么，别人大一在干什么</p><p><s>大一参加 OSPP 进阶，我只能说人与人的差距真的比人与狗的差距还大（</s></p><p>我只能说接下来走一步看一步吧</p><h2 id="没下手的-GSoC">没下手的 GSoC</h2><p>转眼间到了 GSoC 项目公布的日子，iyear 在群里也提了一嘴</p><img src="https://image.nickxu.me/202307030014383.png" alt="image-20230703上午121444324"  /><blockquote><p>群友消息太多了，我就截了几个 iyear 的</p></blockquote><p>然后我就去看有什么项目</p><p>看的第一感觉就是：<code>我不配啊！</code></p><p>我去我怎么参加的了这些项目，我真的配不上</p><p>更关键的是，Golang 是真的不多</p><p>我在 Golang 的项目里兜兜转转，看见了一个 Keploy  ，是做 API 测试工具的</p><p><img src="https://image.nickxu.me/202307022329223.png" alt="image-20230702下午112950192"></p><p>看了看项目，只感觉这个重构命令行工具的我可能会做</p><p>当然，我肯定知道这东西肯定一堆人来抢，我只能说先看看，先研究一下</p><img src="https://image.nickxu.me/202307022334237.png" alt="image-20230702下午113446200" style="zoom:50%;" /><blockquote><p>哈哈，你可以看看现在有几个 star，人真的多</p></blockquote><p><img src="https://image.nickxu.me/202307030010605.png" alt="image-20230703上午121003545"></p><p>然后，很快啊，这东西已经寄了</p><p>我只能说阿三真的 nb，GSoC 怎么这么多阿三</p><p>之后我就真的找不到我有能力参加的项目了~~，游戏也不能一上来就是最终 BOSS 吧，我想（~~</p><p>最终的结果是可以预见的，GSoC 2023 我还是没下得去手</p><h2 id="克服恐惧">克服恐惧</h2><p>后面很长一段时间，我都是不相信自己的</p><p>我真的不见得能有能力参加这种活动，真的这样</p><p>即使后面 iyear 专门讲了一节例会，举了好几个例子，我心里也没什么信心</p><p><img src="https://image.nickxu.me/202307030018312.png" alt="image-20230703上午121828262"></p><blockquote><p>例会上的 md，iyear 讲了一个多小时，后面的内容有点隐私就不放出来了</p></blockquote><p>直到那句话，让我振聋发聩</p><p><img src="https://image.nickxu.me/202307022356272.png" alt="image-20230702下午115636218"></p><blockquote><p>要有阿三的自信😎</p></blockquote><p>对哇，为什么印度阿三都能在 GSoC 上主动出击，我一个中国人怎么能一点信心都没有</p><p>印度老哥技术上应该也会太强，但是他们自信哇，你至少要相信自己能做到，这样才有希望</p><p>然后 OSPP 毕竟我们有主场优势，基本都是国人，我下定决心，不管中没中，至少至少，我要投个项目吧</p><h2 id="OSPP-开始">OSPP 开始</h2><p>很快 OSPP 就要开始了，已经到了社区开始上线的日子</p><p>但是我记得前几天是没什么动静的，后面开始慢慢放出社区，是一点一点放的</p><p>所以我每天起来第一件事就是去 <a href="https://summer-ospp.ac.cn/org/orglist">https://summer-ospp.ac.cn/org/orglist</a> 上看今天又多了什么社区，有什么项目</p><p>当然了，我很早也把去年的项目都看了一遍</p><p>讲真每天都去看看是很有效的，就像高中的时候背文言文一样，看上去很长很恐怖，但是同学告诉我，只要每节课一下课就飞快地读一遍，很快就熟了</p><p>的确如此，过去我看着这些项目都很不自信</p><p>但是现在，我能很平静地说：</p><p>“也没什么，这里的每个项目我都看过”</p><h2 id="感谢-yeebing-！">感谢 yeebing ！</h2><p>看了很久的项目，但是感觉还是没找到比较适合我的</p><p>其他领域就不说了，我目前比较能拿得出手感觉只有 Golang 后端</p><p>而逛了一圈，感觉对前端真的很友好，在看去年项目的时候居然有不少官网设计和文档优化的</p><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"https://image.nickxu.me/202307041603566.png","alt":"1c508ec5077eff3f9b366938e43a1cba"},{"url":"https://image.nickxu.me/202307041607998.png","alt":"334dcddce604b196fea8bd4be4126ac1"},{"url":"https://image.nickxu.me/202307041603661.png","alt":"6f4f10146ff20cb15aa25bc522584e3e"}]</span>    </div>    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><p>相比之下，Golang 的低难度项目很稀缺， 我看着基本都是云原生的，毕竟 Golang 目前最大的用途基本也就是写云原生的基础设施</p><p>但是云原生我是真的不会哇，kubernetes 我都不是很熟，那些项目我也看不太懂</p><p>只能说再看看会有什么项目了</p><p>然后突然有一天，yeebing 突然找到我</p><img src="https://image.nickxu.me/202307041617977.png" alt="image-20230704下午41722930" style="zoom:50%;" /><blockquote><p>还得是杭助的人脉哈哈哈</p></blockquote><p>看了一眼，后端我的确没问题，但是有个问题就是我不会前端哇</p><p>但是转念一想，来 OSPP 就是要学新东西的，而且杭助这么多前端的佬，我速成一波前端应该也不是不可以</p><p>毕竟我目前也找不到比这个更好的项目了，于是我开始冲这个项目</p><h2 id="开始迭代">开始迭代</h2><p>yeebing 帮我占了个沙发，我翻了翻文档，大概知道是个什么东西之后，我就开始冲了</p><p><img src="https://image.nickxu.me/202307041637634.png" alt="image-20230704下午43727576"></p><p>前期是很关键的，只要你能在 issue 里跟导师来回说一堆话，那别人也就能知道这个项目已经有人了，至少能让一部分人知难而退</p><p>之后就开始迭代了，我们在 issue 下交流，之后是深入的思考，感觉差不多了就开始搓 Proposal 发邮件</p><p>导师给我纠正了一些方向上的问题，于是我调研后重新思考设计</p><p>没想到出到第二版跟我说可以去提交了（</p><p><img src="https://image.nickxu.me/202307041645144.png" alt="image-20230704下午44538074"></p><p>然后突然有一天晚上，导师突然来加我好友</p><p><img src="https://image.nickxu.me/202307041708059.png" alt="d1a99451107484673017aae5d322e672_0"></p><p>才想起来我之前翻文档的时候顺手加了个用户群（感觉有点猝不及防</p><p>然后我们后面就开始聊，根据我的简历给我提了好多建议</p><p><img src="https://image.nickxu.me/202307041704047.png" alt="image-20230704下午50425978"></p><blockquote><p>对比其他群友，我感觉我这真的是个神仙导师（</p></blockquote><h2 id="OSPP-线下会">OSPP 线下会</h2><p><img src="https://image.nickxu.me/202307041719852.webp" alt="图片"></p><blockquote><p>线下会杭州站，可以看 <a href="https://www.bilibili.com/read/cv23843608">cv23843608</a> ，三咲智子居然也去了</p></blockquote><p>OSPP 当时也在全国各地开线下会，在杭州也有</p><p>我的确报名了，也进了群，杭助也有不少人去了</p><p>但可惜的是我那天阳了在隔离，想着阳了就别出去祸害别人了，而且精力也不是很好，就没去</p><img src="https://image.nickxu.me/202307041723785.png" alt="image-20230704下午52338719" style="zoom:50%;" /><p>再贴点找到的当时的照片吧哈哈哈</p><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"https://image.nickxu.me/202307041731134.png","alt":"image-20230704下午53115061"},{"url":"https://image.nickxu.me/202307041733694.png","alt":"image-20230704下午53327596"},{"url":"https://image.nickxu.me/202307041733568.png","alt":"image-20230704下午53305500"},{"url":"https://image.nickxu.me/202307041731500.png","alt":"image-20230704下午53132438"},{"url":"https://image.nickxu.me/202307041731435.png","alt":"image-20230704下午53150368"},{"url":"https://image.nickxu.me/202307041732513.png","alt":"image-20230704下午53245428"}]</span>    </div>    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><h2 id="大受震撼">大受震撼</h2><p>日子一天天地过去，我还在为好像还没有人和我抢项目而沾沾自喜</p><p>突然有一天收到了 GitHub 的邮件，一开始我以为是哪个社团项目谁 PR 了，结果一看居然有人来抢我的 OSPP 项目了 ？！</p><p><img src="https://image.nickxu.me/202307041750442.png" alt="image-20230704下午55052373"></p><blockquote><p>卧槽我直接大受震撼</p></blockquote><p>然后我一看，卧槽，酒吧舞✌️，ACM✌️，然后一看博客，大一华为实习</p><p>卧槽这是什么神仙</p><p><s>真的是人与人的差距比人与狗的差距都大（</s></p><p>然后 iyear 就来安慰我，还得是 iyear 够自信</p><p><img src="https://image.nickxu.me/202307041823065.png" alt="image-20230704下午62305997"></p><p>其实还不算太慌，毕竟都最后几天了，导师应该也不会再换人了</p><h2 id="预知结果">预知结果</h2><p>提交截止了，后面的就是等结果</p><p>之后突然有一天</p><p><img src="https://image.nickxu.me/202307041831306.png" alt="image-20230704下午63127228"></p><p>于是我就去看</p><p><img src="https://image.nickxu.me/202307041853830.png" alt="6b3cc9b5bf5949f6cba2901034ba9cda"></p><blockquote><p>还是羡慕 daidr 的 GSoC 哈哈哈</p></blockquote><p>我感觉基本算是稳了，反正期末考了也干不了什么了，那就等通知吧</p><h2 id="正式通知-杭助喜报">正式通知 &amp; 杭助喜报</h2><p>6 月 26 日，结果下来了，我也收到了邮件</p><p><img src="https://image.nickxu.me/202307042134321.png" alt="86e87455433bb7b1b9f5e14e3f38f591_0"></p><blockquote><p>终于等到你！</p></blockquote><p>然后在杭助里统计了一下，感觉真的挺开心的，杭助的技术氛围真的不错</p><img src="https://image.nickxu.me/202307042135884.png" alt="image-20230704下午93502834" style="zoom: 50%;" /><blockquote><p>也希望能吸引更多人加入杭电助手技术部的大家庭</p></blockquote><h2 id="继续开发">继续开发</h2><p><img src="https://image.nickxu.me/202307042152919.png" alt="image-20230704下午95240872"></p><p>中选之后，导师拉着我参加了内部的会议，对一部分内容提出了修改意见</p><p>毕竟我对这个插件市场的定位没有 MOSN 的 maintainers 那么深入，而且我感觉真的挺合理的，想的问题都考虑的非常周到</p><p>主要内容讨论完之后，说开的这么好居然没有录下来（</p><p>然后又聊到我多大了，我说我 03 年的，就感觉挺年轻吧，一旁有人说现在连研究生都是 00 后了，哈哈哈</p><p>我就感觉，哇，我感觉我就是开源的新鲜血液，我的确能「为其他人做一些，有意义的事情」</p><hr><h1 id="经验总结">经验总结</h1><p>一直拖拖拖，感觉写的有点虎头蛇尾了，下面就分享几点中选的经验吧</p><h2 id="滚雪球-现在就开始">滚雪球 现在就开始</h2><p>别一开始就说做不到，没有人是一口吃成胖子的，都是一个成长的过程</p><p>其实很多事情都是「你之前做了一个什么事」，一步步进步的，就像滚一个雪球的过程</p><p>比如说我</p><ul><li>如果不是初中对计算机感兴趣，开始折腾计算机，高中也不会去 Noip，也不会去玩树莓派</li><li>如果高中没有一定的积累，大一也没那么容易进杭电助手，也不会在杭助融入的那么快</li><li>如果没进杭电助手， 也就没有后面的事情了，我也没法在字节青训营取得那样的成绩，更不会听说 OSPP 这种东西</li></ul><p>所以说不管那么多，先让自己滚起来再说，等于说是有一个正向的循环，能让你不断的进步</p><p>而且是越早越好，别明天，现在就开始，像 iyear，初中就在打 oi，比我早了一个阶段，所以大一就参加了 OSPP，今年更是去了 LFX Mentorship</p><h2 id="要有阿三的自信">要有阿三的自信</h2><img src="https://image.nickxu.me/202307042244857.png" alt="image-20230704下午104441787" style="zoom:67%;" /><blockquote><p>另外一个就是要记住 iyear 的话：「要有阿三的自信」</p></blockquote><p>讲的就是一个自信好吧，<strong>你不自信，你就已经输了</strong></p><h2 id="双向选择">双向选择</h2><p>讲真现在有些开源社区也挺离谱的，下面的开源乱象也会说</p><p>简单的说就是要记住双向选择，就像面试企业一样，不仅是社区选择你，也是你选择社区</p><p>不能白白被别人 PUA，不能被白白养鱼</p><h2 id="主动出击-快速占领-前期很重要">主动出击 快速占领 前期很重要</h2><p>如果你已经确定看中了一个项目，那就尽快出击，去交流讨论，同时最好让别人也看见</p><p>一般来说，前期是最重要的，如果别人已经先你一步和导师聊了很多，那你中选的几率也不会太高</p><p>也就是说别想着自己一直闭门造车，然后在提交截止那天交上去就完了，如果导师有另一个跟他讨论很久的学生，你觉得他会选哪个</p><h2 id="让别人能了解自己">让别人能了解自己</h2><p>要维护自己的个人形象，像 GitHub 头像都没换的，主页一点进去啥都没有的，怎么让别人相信你有能力参与开发</p><p>要给导师一些渠道来了解自己，比如能让导师知道你之前有什么什么项目经历，能力强的话之前在哪些开源社区混过</p><p>又或者是和我一样有个博客可以让别人看，这也是让导师了解你的很好的方法</p><p>总之一句话，你已经看上了别人，那也要让别人看的上你，为此你就需要做一些事情让自己显得专业</p><p>就像我这次还特地折腾了个自定义域名的邮箱，以后面试工作也是一样的，别人用个谷歌邮箱去面试，你简历上写个 QQ 邮箱，你觉得呢？</p><p>即使你说 gmail 没 QQ 方便，还要翻墙，其实你可以设置自动转发，我就是这么弄的</p><h2 id="统一命名空间-别撞车">统一命名空间 别撞车</h2><p>和社团的其他伙伴一起的时候要注意别撞车了，不然就会是很尴尬的局面🥲</p><p><img src="https://image.nickxu.me/202307050022196.png" alt="image-20230705上午122240143"></p><p>像这次就碰见了不少撞车的情况</p><p><img src="https://image.nickxu.me/202307050030677.png" alt="image-20230705上午123051615"></p><h2 id="不利形势-及时放弃">不利形势 及时放弃</h2><p>如果发现自己希望不大（比如导师好像根本不想理你、委婉拒绝，或者已经有谈的很好的人了），就应该及时放弃，转移阵地</p><p>如果你精力够的话还可以尝试多开，叶师傅这次就是这么干的</p><h2 id="一点点运气">一点点运气</h2><p>导师真的得看运气我感觉</p><p>讲真我这真的是神仙导师，每次发信息基本都是秒回，我真的太感动了（</p><p><img src="https://image.nickxu.me/202307050024196.png" alt="image-20230705上午122453142"></p><h2 id="其他因素">其他因素</h2><p>还要很多其他因素，下面的图你就可以看得出来</p><p><img src="https://image.nickxu.me/202307052132207.png" alt="image-20230705下午93257160"></p><blockquote><p>一个是被骑士，另一个是社区排名不够，骑士就不说了，下面说一下社区排名</p></blockquote><p>GSoC 和 OSPP 不同，GSoC 还有一个社区的排名</p><p>也就是导师选中你之后，还没有完全结束</p><p>一般来说 GSoC 会给每个社区分配项目名额，当你和导师结对之后，要一起参与社区内的排名，只有在名额内的才能算真正的中选</p><p>举个例子，你在 GSoC 上看中了一个社区，里面有 10 个项目，你申请了一个，并且导师也选你了</p><p>但是 GSoC 给你的社区只有 5 个名额，之后 10 个项目一起参与排名，但是你的项目不幸排在了第 6 名，于是很可惜还是寄了</p><p>社区排名会看项目对社区短期内效益大不大，还有你和社区的关系，关系好的直接安排了</p><p>还有看导师好不好，导师可能会跟你明说排名估计难，让你换项目，不会浪费你太多时间</p><p>这方面还是有些主观能动性的</p><p>今年的 OSPP 也出现了类似的情况</p><img src="https://image.nickxu.me/202307052109365.jpeg" alt="8e7fea2cafb89ce17eba2af1296378e5" style="zoom:50%;" /><p>具体来说就是之前都是社区报几个主办方都出资支持，但是这一届会给社区名额，超出名额的项目资金必须社区自己解决</p><p>然后就出现了一些尴尬的情况，iyear 今年就是这么寄的</p><p><img src="https://image.nickxu.me/202307052119319.png" alt="9d385ce046b1665e3fb931dd5bd35801"></p><blockquote><p>导师直接改名有点草（</p></blockquote><p>就是社区一开始不清楚这个规则，报了很多项目，然后后来突然发现只给了两个名额，其他的要自己花钱</p><p>于是很多项目就被砍了，你可以看见这个社区只有两个学生最终中选</p><hr><h1 id="未来展望">未来展望</h1><p><s>明天早八，好困，明天写</s></p><p>简单写一下吧</p><h2 id="开源乱象">开源乱象</h2><p>有人一直认为国内的开源是个笑话，我感觉也不是完全没有道理</p><p>这届 OSPP 出现了一些抽象事件，我在官方群里也感受到了</p><p>具体可以看「鸟」写的博客，<a href="https://blog.aflybird.cn/2023/06/please-stop-fucking-open-source-activities-in-china/">请还国内开源活动一片净土</a> （注意看评论区，有事情不好明话说</p><p>鉴于目前国内学术圈的某些操作，我感觉未来出现「开源刘禅」也不是不可能</p><p>另外可以看看另一位杭助成员的博客：<a href="https://marlene.top/index.php/develop/85.html">开源之旅——OSPP</a></p><h2 id="要把人留下来">要把人留下来</h2><p>还记得我开头说的，开源活动的目的是吸引更多的人（特别是学生）参与开源</p><p>但是现在就感觉，很多人都把利益看的太重了</p><p>结果就是，我来了，我完成了项目，我走了，人没留下来</p><p>讲真这最后还是没把社区做起来，我只能说，我这次做的这个项目，我以后肯定会一直维护迭代的</p>]]></content:encoded>
      
      
      <category domain="https://nickxu.me/categories/OSPP/">OSPP</category>
      
      
      <category domain="https://nickxu.me/tags/OSPP/">OSPP</category>
      
      
      <comments>https://nickxu.me/2023/06/my-story-with-OSPP-from-hearing-to-being-selected.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『算法拾遗』重学主流排序算法</title>
      <link>https://nickxu.me/posts/sorting-algorithm.html</link>
      <guid>https://nickxu.me/posts/sorting-algorithm.html</guid>
      <pubDate>Tue, 13 Jun 2023 04:21:54 GMT</pubDate>
      
        
        
      <description>&lt;details class=&quot;toggle&quot; &gt;&lt;summary class=&quot;toggle-button&quot; style=&quot;&quot;&gt;衡量排序算法的好坏&lt;/summary&gt;&lt;div class=&quot;toggle-content&quot;&gt;&lt;p&gt;时间复杂度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含最好情况</description>
        
      
      
      
      <content:encoded><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">衡量排序算法的好坏</summary><div class="toggle-content"><p>时间复杂度</p><ul><li>包含最好情况、最坏情况和平均情况</li><li>数据有序度不同的影响</li></ul><p>空间复杂度</p><ul><li>是否是原地排序</li></ul><p>稳定性</p><ul><li>排序后，相同元素之间的顺序是否会改变</li></ul></div></details><h1 id="O-n-2">O( n^2 )</h1><h2 id="冒泡排序（Bubble-Sort）">冒泡排序（Bubble Sort）</h2><blockquote><p>依次比较相邻的元素，如果顺序错误，则交换它们。每轮排序将最大（或最小）的元素“冒泡”到正确的位置</p><p>简单易懂，但效率较低，不适用于大规模数据排序</p></blockquote><ul><li><p>过程</p><ol><li>初始化待排序数组，设为 <code>arr</code> ，数组长度为 <code>n</code></li><li>外层循环：重复 <code>n-1</code> 次（即 <code>i</code> 从 <code>0</code> 到 <code>n-2</code> ） <mark class="hl-label green">思考：为什么外层是n-1次</mark> <ol><li>内层循环：重复 <code>n-i-1</code> 次（即 <code>j</code> 从 <code>0</code> 到 <code>n-i-2</code> ）  <mark class="hl-label green">思考：为什么内层是n-i-1次</mark> <ol><li>比较 <code>arr[j]</code> 和 <code>arr[j+1]</code> ，如果 <code>arr[j]</code> 大于 <code>arr[j+1]</code> ，执行下一步，否则继续内层循环</li><li>交换 <code>arr[j]</code> 和 <code>arr[j+1]</code> 的位置</li></ol></li><li>判断是否在本轮内层循环中进行了交换操作：<ul><li>如果没有进行交换，说明数组已经有序，提前结束排序</li></ul></li></ol></li><li>冒泡排序结束，数组 <code>arr</code> 已经按升序排列</li></ol></li><li><p>性质</p><ol><li>在排序没有完成之前，小的数会逐步往前移，大的数会逐步往后移动</li><li>每轮排序至少会让一个最大元素放置在正确位置，重复 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 次，就完成了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个元素的排序</li><li>是稳定的排序算法</li><li>空间复杂度：冒泡排序的空间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，它在原地进行排序，不需要额外的内存空间。</li><li>最优情况：冒泡排序的最优情况是输入数组已经有序。在这种情况下，只需要进行一次遍历，没有元素交换，时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>最坏情况：冒泡排序的最坏情况是输入数组完全逆序。在这种情况下，需要进行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 轮遍历，每轮遍历需要进行元素比较和交换，时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>平均情况：冒泡排序的平均时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。因为每一对元素在排序过程中都有可能发生交换，所以平均时间复杂度较高</li></ol></li><li><p>代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(arr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++ &#123; <span class="comment">// 一共要排序 n-1 轮（因为每 1 轮至少能让 1 个元素放在正确的位置）</span></span><br><span class="line">        <span class="comment">// 标记是否进行了交换，如果在某轮遍历中没有发生交换，则说明数组已经有序，可以提前结束排序。</span></span><br><span class="line">        swapped := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n-i<span class="number">-1</span>; j++ &#123; <span class="comment">// 每轮比较 n-i-1 次（因为前面 i 轮已经让 i 个元素有序了）</span></span><br><span class="line">            <span class="comment">// 比较相邻的元素，如果顺序错误则交换它们</span></span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>] &#123;</span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">                swapped = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果在某轮遍历中没有发生交换，则说明数组已经有序，可以提前结束排序。</span></span><br><span class="line">        <span class="keyword">if</span> !swapped &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 待排序的整数数组</span></span><br><span class="line">    arr := []<span class="type">int</span>&#123;<span class="number">64</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">90</span>&#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;原始数组：&quot;</span>, arr)</span><br><span class="line">    bubbleSort(arr)</span><br><span class="line">    fmt.Println(<span class="string">&quot;排序后数组：&quot;</span>, arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><details class="toggle" ><summary class="toggle-button" style="">冒泡排序的例子（GPT）</summary><div class="toggle-content"><p>好的，让我们来看一个冒泡排序的例子。假设我们要对一个整数数组进行升序排序，下面是冒泡排序的步骤：</p><p>初始数组：[5, 2, 9, 1, 5, 6]</p><p>第一轮冒泡：</p><ul><li>比较 5 和 2：需要交换位置，数组变为 [2, 5, 9, 1, 5, 6]</li><li>比较 5 和 9：位置正确，不需要交换，数组保持不变 [2, 5, 9, 1, 5, 6]</li><li>比较 9 和 1：需要交换位置，数组变为 [2, 5, 1, 9, 5, 6]</li><li>比较 9 和 5：需要交换位置，数组变为 [2, 5, 1, 5, 9, 6]</li><li>比较 9 和 6：需要交换位置，数组变为 [2, 5, 1, 5, 6, 9]</li></ul><p>第一轮冒泡结束后，最大的元素 9 已经被“冒泡”到正确的位置末尾。</p><p>第二轮冒泡：</p><ul><li>比较 2 和 5：位置正确，不需要交换，数组保持不变 [2, 5, 1, 5, 6, 9]</li><li>比较 5 和 1：需要交换位置，数组变为 [2, 1, 5, 5, 6, 9]</li><li>比较 5 和 5：位置正确，不需要交换，数组保持不变 [2, 1, 5, 5, 6, 9]</li><li>比较 5 和 6：位置正确，不需要交换，数组保持不变 [2, 1, 5, 5, 6, 9]</li></ul><p>第二轮冒泡结束后，第二大的元素 5 也已经被“冒泡”到正确的位置。</p><p>第三轮冒泡：</p><ul><li>比较 2 和 1：需要交换位置，数组变为 [1, 2, 5, 5, 6, 9]</li><li>比较 2 和 5：位置正确，不需要交换，数组保持不变 [1, 2, 5, 5, 6, 9]</li><li>比较 5 和 5：位置正确，不需要交换，数组保持不变 [1, 2, 5, 5, 6, 9]</li></ul><p>第三轮冒泡结束后，第三大的元素 2 也已经被“冒泡”到正确的位置。</p><p>第四轮冒泡：</p><ul><li>比较 1 和 2：位置正确，不需要交换，数组保持不变 [1, 2, 5, 5, 6, 9]</li><li>比较 2 和 5：位置正确，不需要交换，数组保持不变 [1, 2, 5, 5, 6, 9]</li></ul><p>第四轮冒泡结束后，第四大的元素 1 也已经被“冒泡”到正确的位置。</p><p>最后一轮冒泡：</p><ul><li>比较 1 和 2：位置正确，不需要交换，数组保持不变 [1, 2, 5, 5, 6, 9]</li></ul><p>最后一轮冒泡结束后，第五大的元素 1 也已经被“冒泡”到正确的位置。</p><p>现在数组已经完全有序：[1, 2, 5, 5, 6, 9]。整个冒泡排序过程完成。</p><p>冒泡排序的基本思想是通过相邻元素的比较和交换来逐步“冒泡”最大元素至正确位置。这个过程持续执行直至所有元素都排好序。请注意，冒泡排序可能需要多次遍历数组来确保所有元素都在正确的位置。虽然冒泡排序简单易懂，但它的效率较低，不适用于大规模数据的排序。</p></div></details></li><li><details class="toggle" ><summary class="toggle-button" style="">可能会问的问题（GPT）</summary><div class="toggle-content"><p>在面试中，关于冒泡排序，面试官可能会问您以下几类问题：</p><ol><li><p>冒泡排序的原理和思想是什么？</p><ul><li>回答要点：冒泡排序是一种简单的排序算法，它通过相邻元素的比较和交换来逐步“冒泡”最大元素至正确的位置。它的核心思想是重复遍历数组，每次遍历将当前最大元素放到未排序部分的末尾。</li></ul></li><li><p>冒泡排序的时间复杂度是多少？</p><ul><li>回答要点：冒泡排序的平均时间复杂度为O(n^2)，最好情况下（数组已经有序）为O(n)，最坏情况下（数组完全逆序）为O(n^2)。平均情况下，需要进行n-1轮外层循环，每轮循环需要比较n-i-1次，共进行(n-1) + (n-2) + … + 1 = n*(n-1)/2次比较。</li></ul></li><li><p>冒泡排序是稳定排序算法吗？</p><ul><li>回答要点：是的，冒泡排序是一种稳定的排序算法。在冒泡排序的过程中，只有在相邻元素需要交换时才改变相等元素的顺序，所以相等元素的相对位置在排序前后保持不变。</li></ul></li><li><p>如何优化冒泡排序的时间复杂度？</p><ul><li>回答要点：可以使用一个标志位来判断在某一轮外层循环中是否进行了交换操作，如果没有交换，说明数组已经有序，可以提前结束排序，从而优化最好情况下的时间复杂度为O(n)。</li></ul></li><li><p>冒泡排序和其他排序算法的比较？</p><ul><li>回答要点：冒泡排序是一种简单易懂的排序算法，但其时间复杂度较高，不适合大规模数据的排序。相比之下，快速排序、归并排序和堆排序等排序算法在平均情况下有更高效的时间复杂度，并且更常用于实际应用。</li></ul></li><li><p>你能实现冒泡排序的代码吗？</p><ul><li>回答要点：您需要在面试中展示您对冒泡排序的理解，然后根据编程语言要求编写冒泡排序的代码实现。</li></ul></li></ol><p>在面试过程中，除了理解冒泡排序的原理和性质外，您还应该能够清晰地表达答案，展示您对算法的理解和编程能力。如果需要，可以使用示例或画图来帮助说明。同时，与面试官保持良好的沟通，如果有任何不清楚的地方，随时请教面试官。</p></div></details></li></ul><h2 id="插入排序（Insertion-Sort）">插入排序（Insertion Sort）</h2><blockquote><p>将未排序的元素逐个插入到已排序部分的正确位置，形成有序序列。</p><p>适用于小型数据集和基本有序的数据，效率较冒泡排序稍高。<mark class="hl-label green">思考：时间复杂度相同，为什么说插入比冒泡效率高</mark> </p></blockquote><h2 id="选择排序">选择排序</h2><h1 id="O-n-logn">O( n*logn )</h1><h2 id="归并排序">归并排序</h2><h2 id="快速排序">快速排序</h2><h2 id="堆排序">堆排序</h2><h1 id="O-n">O( n )</h1><h2 id="计数排序">计数排序</h2><h2 id="基数排序">基数排序</h2><h2 id="桶排序">桶排序</h2>]]></content:encoded>
      
      
      <category domain="https://nickxu.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/">数据结构与算法</category>
      
      <category domain="https://nickxu.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97/">算法拾遗</category>
      
      <category domain="https://nickxu.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97/%E6%8E%92%E5%BA%8F/">排序</category>
      
      
      
      <comments>https://nickxu.me/posts/sorting-algorithm.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>后端层与层传递结构体时自动转换类型</title>
      <link>https://nickxu.me/posts/278.html</link>
      <guid>https://nickxu.me/posts/278.html</guid>
      <pubDate>Fri, 02 Jun 2023 14:41:24 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;s&gt;未完成&lt;/s&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;7 月 11 日更：&lt;/p&gt;
&lt;p&gt;在后端层与层传递的时候，很多情况下都需要手动把一个结构体的内容搬到另一个结构体里面，也可能会做一下简单的转换&lt;/p&gt;
&lt;p&gt;这时候就可以用 jinz</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p><s>未完成</s></p></blockquote><p>7 月 11 日更：</p><p>在后端层与层传递的时候，很多情况下都需要手动把一个结构体的内容搬到另一个结构体里面，也可能会做一下简单的转换</p><p>这时候就可以用 jinzhu 的 <a href="https://github.com/jinzhu/copier">https://github.com/jinzhu/copier</a></p><p>我很早就听说了这个东西，但是一直没敢用，毕竟小项目东西也不多，然后自己手动搬一下比较稳妥，怕会有什么问题</p><p>但是后面变大了之后感觉适合 copier 的场景更多了，比如一个时间字段，你在数据库 model 里是 <code>time.Time</code> ， 到下一层要转换成 <code>int64</code> 的 Unix 时间戳</p><p>这时候就可以使用 <code>copier.Copy()</code> ，同时让那个结构体实现转换的方法，就可以在 copy 的同时自动转成 <code>int64</code></p>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/posts/278.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>后端发送 lua 脚本给 Redis 执行</title>
      <link>https://nickxu.me/posts/277.html</link>
      <guid>https://nickxu.me/posts/277.html</guid>
      <pubDate>Fri, 02 Jun 2023 14:33:17 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;s&gt;未完成&lt;/s&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;7 月 11 日更：&lt;/p&gt;
&lt;p&gt;之前在交流的时候发现了一个很巧的方法，就是在执行复杂 Redis 操作的时候，可以发一个 lua 脚本过去&lt;/p&gt;
&lt;p&gt;细节记不清了，大概就是你一</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p><s>未完成</s></p></blockquote><p>7 月 11 日更：</p><p>之前在交流的时候发现了一个很巧的方法，就是在执行复杂 Redis 操作的时候，可以发一个 lua 脚本过去</p><p>细节记不清了，大概就是你一句一句写的话，效率是不及直接发一个脚本过去高的</p><p>具体的我还没试，等试了之后再看看👀</p>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/posts/277.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>如何在一个仓库中同时开发前后端项目</title>
      <link>https://nickxu.me/posts/276.html</link>
      <guid>https://nickxu.me/posts/276.html</guid>
      <pubDate>Thu, 01 Jun 2023 09:31:30 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://image.nickxu.me/202306011733625.png&quot; alt=&quot;image-20230601下午53301310&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如图，今天在群里问了个小问题&lt;/p&gt;
&lt;/blockquot</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://image.nickxu.me/202306011733625.png" alt="image-20230601下午53301310"></p><blockquote><p>如图，今天在群里问了个小问题</p></blockquote><p>TLDR; 直接说结论吧</p><ul><li><p>小项目直接开子目录，然后可以分别独立打包或者使用 <code>go embed</code></p></li><li><p>不同分支的方法应该没必要用</p><p>如果想做成两个独立项目就用 submodule</p><details class="toggle" ><summary class="toggle-button" style="">gpt 对 submodule 的介绍</summary><div class="toggle-content"><p>Git 的 Submodule 是一种在一个 Git 仓库中嵌套使用另一个 Git 仓库的机制。它允许你将一个 Git 仓库作为子项目嵌入到另一个 Git 仓库中，并且能够独立地管理子项目的版本和提交历史。</p><p>使用 Git Submodule 的主要目的是在一个项目中使用外部依赖，而不是将它们直接复制到项目目录中。这样做的好处是可以方便地更新和维护外部依赖，并且可以保持项目的独立性。</p><p>下面是使用 Git Submodule 的基本工作流程：</p><ol><li><p>添加 Submodule：在主项目的仓库中，使用 <code>git submodule add</code> 命令添加一个子项目作为 Submodule。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add &lt;URL to submodule&gt; &lt;submodule path&gt;</span><br></pre></td></tr></table></figure><p>这将在主项目中添加一个 Submodule，并将其克隆到指定的子目录中。</p></li><li><p>初始化和更新 Submodule：在主项目的仓库中，可以使用以下命令来初始化和更新 Submodule：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule init    # 初始化 Submodule，只需执行一次</span><br><span class="line">git submodule update  # 更新 Submodule，每次子项目发生变化时执行</span><br></pre></td></tr></table></figure><p><code>git submodule init</code> 命令会初始化 Submodule 并将其连接到指定的提交。<code>git submodule update</code> 命令会更新 Submodule 的代码，可以在每次子项目发生变化时执行该命令。</p></li><li><p>切换 Submodule 版本：在主项目中，你可以使用 <code>cd</code> 命令切换到 Submodule 的目录中，然后像在独立的 Git 仓库中一样执行各种 Git 操作，例如切换分支、提交变更等。</p></li><li><p>提交和更新 Submodule：当 Submodule 中发生变化并且需要将这些变化应用到主项目中时，需要先切换到主项目的根目录，然后使用以下命令进行提交和更新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;submodule path&gt;</span><br><span class="line">git commit -m &quot;Update submodule&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol><p>需要注意的是，当其他开发者克隆主项目时，Submodule 的代码不会自动获取。他们需要执行 <code>git submodule init</code> 和 <code>git submodule update</code> 命令来获取和更新 Submodule 的代码。</p><p>使用 Git Submodule 需要注意以下几点：</p><ul><li>Submodule 是一个独立的 Git 仓库，具有自己的提交历史和版本管理。</li><li>主项目只保存 Submodule 的元数据和连接信息，而不会包含 Submodule 的实际代码。</li><li>主项目和 Submodule 是两个独立的仓库，需要分别进行操作和管理。</li><li>Submodule 可以是公共的仓库（如 GitHub 上的仓库）或者是私有的仓库。</li></ul><p>Git Submodule 是一种强大的工具，可以帮助你管理项目中的外部</p><p>依赖，并与主项目保持独立和可维护。但同时也需要注意它的复杂性和正确的使用方式，以避免出现问题。</p></div></details><p>submodule有个好处是子模块也是个仓库 比如博客主题这种就可以主题一个仓库 然后demo仓库引用主题的仓库这样同步</p></li><li><p>类似的玩法还有 monorepo ，不过前端和后端go没啥基础设施共享 没有monrepo的场景</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://nickxu.me/categories/%E6%96%B0%E6%8A%80%E8%83%BD-Got/">新技能 Got</category>
      
      
      <category domain="https://nickxu.me/tags/git/">git</category>
      
      
      <comments>https://nickxu.me/posts/276.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『算法拾遗』链表（Linked List）</title>
      <link>https://nickxu.me/posts/275.html</link>
      <guid>https://nickxu.me/posts/275.html</guid>
      <pubDate>Wed, 31 May 2023 12:59:45 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;这两天在复习链表，我一想，这链表这么简单的东西还有什么复习的，简单过一遍不就行了&lt;/p&gt;
&lt;p&gt;然而马上打脸，有些题目我居然还写不出来（乐&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;理论基础&quot;&gt;理论基础&lt;/h1&gt;
&lt;p&gt;先来点你肯定知道的东西，简单过一遍&lt;/p&gt;
&lt;h2 id=&quot;是</description>
        
      
      
      
      <content:encoded><![CDATA[<p>这两天在复习链表，我一想，这链表这么简单的东西还有什么复习的，简单过一遍不就行了</p><p>然而马上打脸，有些题目我居然还写不出来（乐</p><hr><h1 id="理论基础">理论基础</h1><p>先来点你肯定知道的东西，简单过一遍</p><h2 id="是什么">是什么</h2><p><img src="https://image.nickxu.me/202306021230054.png" alt="image-20230602下午123049988"></p><p>如图所示，链表是一种链式结构，以最简单的单链表为例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    Val  <span class="type">int</span></span><br><span class="line">    Next *ListNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是头节点指向下一个节点，然后下一个节点再指向下一个节点，如果是尾节点就指向 <code>NULL</code> （或者说是 Golang 里的 <code>nil</code> ）</p><h2 id="基本操作">基本操作</h2><h3 id="删除节点">删除节点</h3><p><img src="https://image.nickxu.me/202306021253830.png" alt="image-20230602下午125326797"></p><p>让前面节点认为它的后面是后面的节点</p><p>删除的节点让 GC 自动回收掉即可</p><h3 id="添加节点">添加节点</h3><p><img src="https://image.nickxu.me/202306021302406.png" alt="image-20230602下午10229378"></p><p>让新节点指向后面节点，让前面节点指向新节点</p><h2 id="链表的几种变体">链表的几种变体</h2><h3 id="有头链表">有头链表</h3><p><img src="https://image.nickxu.me/202306021338969.png" alt="image-20230602下午13821938"></p><p>减少对头节点的特殊处理</p><h3 id="双向链表">双向链表</h3><p><img src="https://image.nickxu.me/202306021343996.png" alt="image-20230602下午14306969"></p><p>可以方便地找到前驱节点</p><p>对于一个有序链表，双向链表的按值查询效率要比单链表高一些。因为我们可以记录上次查找的位置p，每一次查询时，根据要查找的值与p的大小关系，决定是往前还是往后查找，所以平均只需要查找一半的数据。</p><h3 id="循环链表">循环链表</h3><p><img src="https://image.nickxu.me/202306021346003.png" alt="image-20230602下午14652973"></p><p>能解决约瑟夫问题</p><h3 id="有头双向循环链表"><s>有头双向循环链表</s></h3><p>buff 叠满，请见 <a href="https://www.bilibili.com/video/BV1xN4y1L7TQ/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">【有头双向循环链表之美，这个数据结构简单又优雅，学会了不亏】</a></p><h2 id="链表-vs-数组">链表 vs 数组</h2><table><thead><tr><th></th><th>插入删除</th><th>随机访问</th></tr></thead><tbody><tr><td>数组</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td></tr><tr><td>链表</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td></tr></tbody></table><hr><h1 id="必知必会的题目">必知必会的题目</h1><h2 id="707-设计链表"><a href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表</a></h2><p>实现一个链表，这里就以带头单链表为例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyLinkedList <span class="keyword">struct</span> &#123;</span><br><span class="line">head *ListNode</span><br><span class="line">size <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">val  <span class="type">int</span></span><br><span class="line">next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructor 初始化 MyLinkedList 对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> MyLinkedList &#123;</span><br><span class="line">dummyHead := &amp;ListNode&#123;&#125;</span><br><span class="line"><span class="keyword">return</span> MyLinkedList&#123;</span><br><span class="line">head: dummyHead,</span><br><span class="line">size: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取链表中下标为 index 的节点的值。如果下标无效，则返回 -1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> Get(index <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= this.size &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">cur := this.head.next</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; index; i++ &#123;</span><br><span class="line">cur = cur.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cur.val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddAtHead 将一个值为 val 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> AddAtHead(val <span class="type">int</span>) &#123;</span><br><span class="line">newNode := &amp;ListNode&#123;val: val&#125;</span><br><span class="line">newNode.next = this.head.next</span><br><span class="line">this.head.next = newNode</span><br><span class="line">this.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddAtTail 将一个值为 val 的节点追加到链表中作为链表的最后一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> AddAtTail(val <span class="type">int</span>) &#123;</span><br><span class="line">newNode := &amp;ListNode&#123;val: val&#125;</span><br><span class="line">cur := this.head</span><br><span class="line"><span class="keyword">for</span> cur.next != <span class="literal">nil</span> &#123;</span><br><span class="line">cur = cur.next</span><br><span class="line">&#125;</span><br><span class="line">cur.next = newNode</span><br><span class="line">this.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddAtIndex 将一个值为 val 的节点插入到链表中下标为 index 的节点之前。</span></span><br><span class="line"><span class="comment">// 如果 index 等于链表的长度，那么该节点会被追加到链表的末尾。</span></span><br><span class="line"><span class="comment">// 如果 index 比长度更大，该节点将 不会插入 到链表中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> AddAtIndex(index <span class="type">int</span>, val <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt; this.size &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> index == this.size &#123;</span><br><span class="line">this.AddAtTail(val)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">cur := this.head</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; index; i++ &#123;</span><br><span class="line">cur = cur.next</span><br><span class="line">&#125;</span><br><span class="line">newNode := &amp;ListNode&#123;val: val&#125;</span><br><span class="line">newNode.next = cur.next</span><br><span class="line">cur.next = newNode</span><br><span class="line">this.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeleteAtIndex 如果下标有效，则删除链表中下标为 index 的节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> DeleteAtIndex(index <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= this.size &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">cur := this.head</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; index; i++ &#123;</span><br><span class="line">cur = cur.next</span><br><span class="line">&#125;</span><br><span class="line">cur.next = cur.next.next</span><br><span class="line">this.size--</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="206-反转链表"><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></h2><p>字面意思，翻转一个链表</p><p>操作过程如下：</p><ol start="0"><li>初始化当前节点为头节点</li><li>暂存下一个节点</li><li>将当前节点指向前一个节点</li><li>前驱节点后移</li><li>当前节点后移</li><li>重复 1-4，只到当前节点为 <code>NULL</code> ，输出前驱结点为新的头结点</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line"><span class="comment">// 定义前驱节点、当前节点、后继节点</span></span><br><span class="line"><span class="keyword">var</span> prev *ListNode = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> next *ListNode = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> curr *ListNode = head</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历链表</span></span><br><span class="line"><span class="keyword">for</span> curr != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 保存下一个节点</span></span><br><span class="line">next = curr.Next</span><br><span class="line"><span class="comment">// 当前节点指向前驱节点</span></span><br><span class="line">curr.Next = prev</span><br><span class="line"><span class="comment">// 前驱节点后移</span></span><br><span class="line">prev = curr</span><br><span class="line"><span class="comment">// 当前节点后移</span></span><br><span class="line">curr = next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回前驱节点</span></span><br><span class="line"><span class="keyword">return</span> prev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我一开始也不是很懂，所以我画了个图一步一步来，图画出来我就懂了</p><p><img src="https://image.nickxu.me/202306021637081.png" alt="image-20230601下午103709377"></p><p>类似地，还有一个递归的写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line"><span class="comment">// 如果链表为空或者只有一个节点，直接返回原链表</span></span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归反转除头节点外的子链表</span></span><br><span class="line">p := reverseList(head.Next)</span><br><span class="line"><span class="comment">// 将当前节点的下一个节点指向当前节点，实现反转</span></span><br><span class="line">head.Next.Next = head</span><br><span class="line"><span class="comment">// 将当前节点的下一个节点置空，断开原链表中的连接</span></span><br><span class="line">head.Next = <span class="literal">nil</span></span><br><span class="line"><span class="comment">// 返回反转后的链表的头节点</span></span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="876-链表的中间结点"><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">876. 链表的中间结点</a></h2><p>使用快慢指针（ <code>i</code> 走一步， <code>j</code> 走两步）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">middleNode</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line"><span class="comment">// 定义快慢指针</span></span><br><span class="line"><span class="keyword">var</span> fast *ListNode = head</span><br><span class="line"><span class="keyword">var</span> slow *ListNode = head</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快指针走两步，慢指针走一步</span></span><br><span class="line"><span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">fast = fast.Next.Next</span><br><span class="line">slow = slow.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回慢指针</span></span><br><span class="line"><span class="keyword">return</span> slow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="21-合并两个有序链表"><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></h2><p>第一版以为不能修改他给出的链表，每次都 new 一个节点，结果 TLE 了，好尴尬</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(list1 *ListNode, list2 *ListNode)</span></span> *ListNode &#123;</span><br><span class="line"><span class="comment">// 创建一个哨兵节点作为新链表的头部</span></span><br><span class="line">    dummy := &amp;ListNode&#123;&#125;</span><br><span class="line">curr := dummy</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历两个链表，比较节点的值，将较小值的节点添加到新链表中</span></span><br><span class="line"><span class="keyword">for</span> list1 != <span class="literal">nil</span> &amp;&amp; list2 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> list1.Val &gt; list2.Val &#123;</span><br><span class="line">curr.Next = list2</span><br><span class="line">list2 = list2.Next</span><br><span class="line">curr = curr.Next</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">curr.Next = list1</span><br><span class="line">list1 = list1.Next</span><br><span class="line">curr = curr.Next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果其中一个链表已经遍历完了，直接将另一个链表剩余部分添加到新链表中</span></span><br><span class="line"><span class="keyword">if</span> list1 != <span class="literal">nil</span> &#123;</span><br><span class="line">curr.Next = list1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> list2 != <span class="literal">nil</span> &#123;</span><br><span class="line">curr.Next = list2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="234-回文链表"><a href="https://leetcode.cn/problems/palindrome-linked-list/">234. 回文链表</a></h2><p>用快慢指针找到中点，然后反转后半部分，从开始和中间向后进行比较</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(head *ListNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">// 定义快慢指针</span></span><br><span class="line"><span class="keyword">var</span> slow *ListNode = head</span><br><span class="line"><span class="keyword">var</span> fast *ListNode = head</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快慢指针走到中间节点</span></span><br><span class="line"><span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">slow = slow.Next</span><br><span class="line">fast = fast.Next.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果fast不为空，说明链表长度为奇数，slow还要再前进一步</span></span><br><span class="line"><span class="keyword">if</span> fast != <span class="literal">nil</span> &#123;</span><br><span class="line">slow = slow.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 反转后半部分链表（见上面的实现）</span></span><br><span class="line">slow = reverseList(slow)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较前后两部分链表</span></span><br><span class="line"><span class="keyword">for</span> slow != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> slow.Val != head.Val &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">slow = slow.Next</span><br><span class="line">head = head.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19-删除链表的倒数第-N-个结点"><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h2><p>还是双指针，<code>i</code> <code>j</code> 初始为 <code>head</code>，然后 <code>j</code> 先走 <code>N</code> 步，然后一起往后走</p><p>这个东西有点坑，一开始没弄哨兵节点，删除的操作总是有问题</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(head *ListNode, n <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">dummy := &amp;ListNode&#123;Next: head&#125;</span><br><span class="line">slow, fast := dummy, dummy</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">fast = fast.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">slow = slow.Next</span><br><span class="line">fast = fast.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slow.Next = slow.Next.Next</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="141-环形链表"><a href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a></h2><p>判断一个链表中有没有环</p><p>还是快慢指针，如果快指针能追上慢指针就肯定有环了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(head *ListNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">fast := head</span><br><span class="line">slow := head</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">slow = slow.Next</span><br><span class="line">fast = fast.Next.Next</span><br><span class="line"><span class="keyword">if</span> fast == slow &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然你也可以用更直白的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(head *ListNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head.Val == <span class="number">123512151</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">head.Val = <span class="number">123512151</span></span><br><span class="line">&#125;</span><br><span class="line">head = head.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="142-环形链表-II"><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h2><p>这个题目需要在判断出有环后能找到环的起点</p><p>推理过程请见 <a href="https://www.programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html#%E5%A6%82%E6%9E%9C%E6%9C%89%E7%8E%AF-%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0%E8%BF%99%E4%B8%AA%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3">代码随想录</a> 👀</p><p>反正结论就是：当快慢指针相遇时，让其中一个回到头结点，然后同速前进，再次相遇即为环开始的点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">detectCycle</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">fast := head</span><br><span class="line">slow := head</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">slow = slow.Next</span><br><span class="line">fast = fast.Next.Next</span><br><span class="line"><span class="keyword">if</span> fast == slow &#123;</span><br><span class="line">fast = head</span><br><span class="line"><span class="keyword">for</span> fast != slow &#123;</span><br><span class="line">fast = fast.Next</span><br><span class="line">slow = slow.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fast</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理论上你也可以使用更直白的方法，但是题目要求不能修改链表</p><h2 id="面试题-02-07-链表相交"><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">面试题 02.07. 链表相交</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getIntersectionNode</span><span class="params">(headA, headB *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">lengthA := getLength(headA)</span><br><span class="line">lengthB := getLength(headB)</span><br><span class="line"><span class="keyword">var</span> fast, slow *ListNode</span><br><span class="line">step := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> lengthA &gt; lengthB &#123;</span><br><span class="line">step = lengthA - lengthB</span><br><span class="line">fast, slow = headA, headB</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">step = lengthB - lengthA</span><br><span class="line">fast, slow = headB, headA</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; step; i++ &#123;</span><br><span class="line">fast = fast.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历两个链表，相同则跳出</span></span><br><span class="line"><span class="keyword">for</span> fast != slow &#123;</span><br><span class="line">fast = fast.Next</span><br><span class="line">slow = slow.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fast</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getLength</span><span class="params">(head *ListNode)</span></span> (length <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> ; head != <span class="literal">nil</span>; head = head.Next &#123;</span><br><span class="line">length++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://nickxu.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/">数据结构与算法</category>
      
      <category domain="https://nickxu.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97/">算法拾遗</category>
      
      <category domain="https://nickxu.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97/%E9%93%BE%E8%A1%A8/">链表</category>
      
      
      <category domain="https://nickxu.me/tags/%E9%93%BE%E8%A1%A8/">链表</category>
      
      
      <comments>https://nickxu.me/posts/275.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2023五一总结：近况与将来</title>
      <link>https://nickxu.me/posts/274.html</link>
      <guid>https://nickxu.me/posts/274.html</guid>
      <pubDate>Thu, 04 May 2023 10:17:19 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://image.nickxu.me/202305042244576.jpeg&quot; alt=&quot;5BBA2597-B720-4882-992C-0F819A89F314_1_105_c&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;事情有点多，就简单</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://image.nickxu.me/202305042244576.jpeg" alt="5BBA2597-B720-4882-992C-0F819A89F314_1_105_c"></p><blockquote><p>事情有点多，就简单说几句吧～</p></blockquote><div class="audio"><audio controls preload><source src='https://image.nickxu.me/202305042224874.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><hr><h1 id="最近的事情">最近的事情</h1><h2 id="杭电助手团建">杭电助手团建</h2><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"https://image.nickxu.me/202305042227317.png","alt":"image-20230504222737293"},{"url":"https://image.nickxu.me/202305042228416.png","alt":"image-20230504222810383"},{"url":"https://image.nickxu.me/202305042228652.png","alt":"image-20230504222817629"},{"url":"https://image.nickxu.me/202305042228681.png","alt":"image-20230504222822653"},{"url":"https://image.nickxu.me/202305042228729.png","alt":"image-20230504222830701"},{"url":"https://image.nickxu.me/202305042228227.png","alt":"image-20230504222846195"},{"url":"https://image.nickxu.me/202305042229391.png","alt":"image-20230504222910356"},{"url":"https://image.nickxu.me/202305042228295.png","alt":"image-20230504222859260"},{"url":"https://image.nickxu.me/202305042229770.png","alt":"image-20230504222918732"}]</span>    </div>    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><h2 id="B站热评">B站热评</h2><img src="https://image.nickxu.me/202305042230672.jpg" alt="f4d24a56ac534936b0e5cf3989cdd18a" style="zoom:50%;" /><blockquote><p>原视频：<a href="https://www.bilibili.com/video/BV1Lk4y1Y76V/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">【【年更节目】世界读书日，超级干货书单分享！这些书年轻时一定要读！(2023)】</a></p></blockquote><p><img src="https://image.nickxu.me/202305042231897.jpg" alt="ccfbcf8afd6c7f72f3b8f8a3923ac2ea_0"></p><h2 id="OSPP开好头">OSPP开好头</h2><p><img src="https://image.nickxu.me/202305042231196.png" alt="image-20230504223158168"></p><blockquote><p>去看了很多 mosn 的文档和视频，对目前的微服务部署架构有更深入地了解</p></blockquote><ul><li>【MOSN 子项目 Layotto：开启服务网格+应用运行时新篇章】 <a href="https://www.bilibili.com/video/BV1hq4y1L7FY/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">https://www.bilibili.com/video/BV1hq4y1L7FY/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902</a></li><li>【MOSN 云原生网络代理平台】 <a href="https://www.bilibili.com/video/BV13s4y127m2/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">https://www.bilibili.com/video/BV13s4y127m2/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902</a></li><li>鸟鸟的博客 Before Good First Issue：<a href="https://blog.aflybird.cn/2023/01/before-good-first-issue/">https://blog.aflybird.cn/2023/01/before-good-first-issue/</a></li><li>iyear ： <a href="https://iyear.me/archives/919.html/">https://iyear.me/archives/919.html/</a></li></ul><hr><h1 id="未来规划">未来规划</h1><p><img src="https://image.nickxu.me/202305042225230.png" alt=""></p><blockquote><p>在 V 站上的回复，原文地址：<a href="https://www.v2ex.com/t/928328#reply4">https://www.v2ex.com/t/928328#reply4</a></p><p>讲真这推荐的 k8s 课程的确不错，即使是18年写的 <a href="http://gk.link/a/122Sd">http://gk.link/a/122Sd</a></p></blockquote><p>1. OSPP<br>2. 后端两个项目<br>3. 杭州亚运会<br>4. 准备实习&amp;大三春招</p><hr><h1 id="要学的东西">要学的东西</h1><ul><li>mysql锁mvcc</li><li>ws, casbin</li><li>k8s</li><li>数据结构箅法</li><li>计算机基础</li><li>概率论复变函数</li></ul>]]></content:encoded>
      
      
      <category domain="https://nickxu.me/categories/%E9%9A%8F%E7%AC%94%E4%B8%8E%E6%80%BB%E7%BB%93/">随笔与总结</category>
      
      
      <category domain="https://nickxu.me/tags/%E9%9A%8F%E7%AC%94/">随笔</category>
      
      
      <comments>https://nickxu.me/posts/274.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于软删除的讨论</title>
      <link>https://nickxu.me/posts/273.html</link>
      <guid>https://nickxu.me/posts/273.html</guid>
      <pubDate>Tue, 02 May 2023 08:13:22 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;s&gt;别急，先挂着&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;别问我为什么空着就发上来了，我本来是想每一篇都写完再发的，但是后面本地坑挖了很多不想填就直接删了&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;然后发上来至少别人看着我还有动力去填🤣&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;7 月 11 日更：&lt;/p&gt;
&lt;p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><s>别急，先挂着</s></p><p><s>别问我为什么空着就发上来了，我本来是想每一篇都写完再发的，但是后面本地坑挖了很多不想填就直接删了</s></p><p><s>然后发上来至少别人看着我还有动力去填🤣</s></p><p>7 月 11 日更：</p><p>卧槽居然过了这么久了才有空填</p><p>过了两个月了基本忘光了，翻了翻聊天记录，记起来了一点点</p><p>其实有个大佬的博客 <a href="https://blog.wolfogre.com/posts/trap-of-soft-delete">软删除之痛</a> 已经将前情提要概括了一下，下面就简单补充一下</p><p>文中写的唯一索引的例子在我们的开发中也遇到了，但是我们有不一样的解决方法</p><p>就是在删除的时候改个名，这样就能规避问题了</p><img src="https://image.nickxu.me/202307112314983.png" alt="image-20230711下午111413954" style="zoom:50%;" /><p>目前来说感觉这种方法没有还引发新的问题</p>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/posts/273.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ChatGPT对话记录（六）：GORM 手动事务错误处理</title>
      <link>https://nickxu.me/2023/04/29/ChatGPT%E5%AF%B9%E8%AF%9D%E8%AE%B0%E5%BD%95%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9AGORM-%E6%89%8B%E5%8A%A8%E4%BA%8B%E5%8A%A1%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <guid>https://nickxu.me/2023/04/29/ChatGPT%E5%AF%B9%E8%AF%9D%E8%AE%B0%E5%BD%95%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9AGORM-%E6%89%8B%E5%8A%A8%E4%BA%8B%E5%8A%A1%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <pubDate>Sat, 29 Apr 2023 03:02:06 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Model: GPT-4&lt;/p&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Model: GPT-4</p><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UserDeleteLogic)</span></span> UserDelete(in *user.UserDeleteRequest) (*user.Empty, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">tx := l.svcCtx.Dao.Begin()</span><br><span class="line"></span><br><span class="line">u := tx.User</span><br><span class="line">m := tx.MemberShip</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line">deleteInfo, err := u.Where(u.ID.Eq(in.Id)).Delete()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一条都没有影响，返回不存在</span></span><br><span class="line"><span class="keyword">if</span> deleteInfo.RowsAffected == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.UserNotFound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除社团关系</span></span><br><span class="line">_, err = m.Where(m.UserId.Eq(in.Id)).Delete()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = tx.Commit()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;user.Empty&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码有没有问题</p></blockquote><p>这段代码实现了一个名为UserDelete的方法，它接收一个UserDeleteRequest类型的参数并返回一个user.Empty结构体指针和一个错误（error）。这个方法主要执行了以下操作：</p><ol><li>启动一个数据库事务。</li><li>从数据库中删除用户。</li><li>如果没有删除任何用户，返回一个用户不存在的错误。</li><li>删除与用户相关的社团关系。</li><li>提交事务。</li></ol><p>这段代码在逻辑上没有明显问题，但有一些建议可以改进代码的可读性和健壮性：</p><ol><li><p>当发生错误时，应该回滚事务。在发生错误时（如删除用户或删除社团关系时发生错误），你应该使用<code>tx.Rollback()</code>回滚事务。你可以在返回错误之前添加此语句，或者使用<code>defer</code>和<code>recover</code>来确保在发生错误时始终回滚事务。</p></li><li><p>使用Go语言的&quot;context&quot;库。这段代码中似乎使用了一个自定义的上下文结构（l.ctx），而没有使用Go标准库中的&quot;context&quot;。为了保持一致性，你可以考虑使用&quot;context&quot;库，并将它传递给数据库操作方法，以便在需要时可以取消操作。</p></li><li><p>使用更具描述性的变量名。虽然这段代码相对简短，但使用更具描述性的变量名可以提高代码的可读性。例如，可以将变量名<code>u</code>改为<code>userDao</code>，将<code>m</code>改为<code>membershipDao</code>等。</p></li><li><p>添加注释以提高代码可读性。虽然这段代码的逻辑相对简单，但添加一些注释可以帮助其他开发者更轻松地理解代码的目的和工作方式。例如，解释事务的目的，以及为什么在删除用户后还需要删除与用户相关的社团关系等。</p></li></ol><p>总之，这段代码在逻辑上没有明显问题，但有一些建议可以改进代码的可读性和健壮性。</p><blockquote><p>我听说如果退出函数前没有手动提交或回滚事务，数据库会自动回滚，是这样吗</p></blockquote><p>这取决于你使用的数据库和数据库驱动程序。在某些情况下，当连接关闭或者数据库会话结束时，未提交的事务可能会被自动回滚。但是，依赖自动回滚可能会导致意外的行为，特别是在并发环境中。</p><p>为了编写健壮且可维护的代码，建议你始终显式地提交或回滚事务，而不是依赖自动回滚。这可以确保事务在函数退出时始终处于预期的状态，避免潜在的问题。在Go中，可以使用<code>defer</code>语句在函数退出时执行回滚，确保事务在遇到错误时被回滚。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UserDeleteLogic)</span></span> UserDelete(in *user.UserDeleteRequest) (*user.Empty, <span class="type">error</span>) &#123;</span><br><span class="line">    tx := l.svcCtx.Dao.Begin()</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">            tx.Rollback()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 此处省略其他操作 ...</span></span><br><span class="line"></span><br><span class="line">    err := tx.Commit()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        tx.Rollback()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;user.Empty&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当发生错误或者panic时，事务会被显式地回滚。当然，如果你确信在特定的情况下数据库会自动回滚，并且这种行为符合你的预期，你可以选择依赖自动回滚。然而，在大多数情况下，显式地处理事务是更好的做法。</p><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UserDeleteLogic)</span></span> UserDelete(in *user.UserDeleteRequest) (*user.Empty, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">tx := l.svcCtx.Dao.Begin()</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">recover</span>() != <span class="literal">nil</span> || err != <span class="literal">nil</span> &#123;</span><br><span class="line">_ = tx.Rollback()</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">u := tx.User</span><br><span class="line">m := tx.MemberShip</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line">deleteInfo, err := u.Where(u.ID.Eq(in.Id)).Delete()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一条都没有影响，返回不存在</span></span><br><span class="line"><span class="keyword">if</span> deleteInfo.RowsAffected == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.UserNotFound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除社团关系</span></span><br><span class="line">_, err = m.Where(m.UserId.Eq(in.Id)).Delete()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = tx.Commit()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;user.Empty&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我这样写呢</p></blockquote><p>这个版本的代码中，你使用了<code>defer</code>语句来处理事务回滚。这是一个改进，确保在遇到错误或panic时事务会被回滚。然而，这段代码仍有一些小问题需要注意：</p><ol><li><p>当<code>err</code>为<code>nil</code>且<code>recover()</code>返回非<code>nil</code>值时，你应该为<code>err</code>赋一个新值，以便在返回错误时返回一个有意义的错误信息。例如，可以将<code>err</code>设置为一个表示事务回滚的自定义错误，或者使用<code>fmt.Errorf</code>创建一个包含recover信息的错误。</p></li><li><p>当<code>tx.Commit()</code>失败时，你还需要显式地调用<code>tx.Rollback()</code>。虽然你已经在<code>defer</code>语句中添加了回滚逻辑，但在<code>tx.Commit()</code>失败时，<code>err</code>变量的值不会被改变，这意味着<code>defer</code>语句中的条件不会触发回滚。在<code>tx.Commit()</code>失败时，你需要立即调用<code>tx.Rollback()</code>，然后返回一个错误。</p></li></ol><p>根据上述建议，你可以修改代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UserDeleteLogic)</span></span> UserDelete(in *user.UserDeleteRequest) (*user.Empty, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">    tx := l.svcCtx.Dao.Begin()</span><br><span class="line">    <span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">            err = fmt.Errorf(<span class="string">&quot;panic occurred: %v, rolling back transaction&quot;</span>, r)</span><br><span class="line">            _ = tx.Rollback()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            _ = tx.Rollback()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    u := tx.User</span><br><span class="line">    m := tx.MemberShip</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    deleteInfo, err := u.Where(u.ID.Eq(in.Id)).Delete()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一条都没有影响，返回不存在</span></span><br><span class="line">    <span class="keyword">if</span> deleteInfo.RowsAffected == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errs.UserNotFound</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除社团关系</span></span><br><span class="line">    _, err = m.Where(m.UserId.Eq(in.Id)).Delete()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = tx.Commit()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        _ = tx.Rollback()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errs.MySQLError.Internal(l.ctx, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;user.Empty&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样修改后，代码会在遇到错误或panic时正确处理事务回滚。</p><blockquote><p>tx.Rollback()也会返回一个error，一般情况下是不是不需要处理</p></blockquote><p>是的，一般情况下，当调用<code>tx.Rollback()</code>时，你不需要处理返回的错误。这是因为在大多数情况下，回滚事务时遇到的错误通常表示底层数据库连接或系统存在问题，这类问题通常超出了应用程序能处理的范围。</p><p>当你调用<code>tx.Rollback()</code>时，关心的主要目的是确保事务被取消，以避免潜在的数据一致性问题。因此，在回滚事务时，你可以忽略返回的错误。然而，如果你希望记录这些错误（例如，用于调试或监控目的），你可以选择将回滚错误记录到日志中，但通常不需要将其作为应用程序逻辑的一部分进行处理。</p><p>在上面的示例代码中，你已经使用<code>_ = tx.Rollback()</code>来忽略回滚错误。这是一种合适的做法，因为它清楚地表明你知道<code>tx.Rollback()</code>返回一个错误，但选择不对其进行处理。</p>]]></content:encoded>
      
      
      <category domain="https://nickxu.me/categories/ChatGPT-%E5%AF%B9%E8%AF%9D%E8%AE%B0%E5%BD%95/">ChatGPT 对话记录</category>
      
      
      <category domain="https://nickxu.me/tags/GORM/">GORM</category>
      
      <category domain="https://nickxu.me/tags/ChatGPT/">ChatGPT</category>
      
      
      <comments>https://nickxu.me/2023/04/29/ChatGPT%E5%AF%B9%E8%AF%9D%E8%AE%B0%E5%BD%95%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9AGORM-%E6%89%8B%E5%8A%A8%E4%BA%8B%E5%8A%A1%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ChatGPT对话记录（五）：用户权限管理</title>
      <link>https://nickxu.me/2023/04/13/ChatGPT%E5%AF%B9%E8%AF%9D%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</link>
      <guid>https://nickxu.me/2023/04/13/ChatGPT%E5%AF%B9%E8%AF%9D%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</guid>
      <pubDate>Thu, 13 Apr 2023 13:09:38 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;golang项目中怎么做用户权限管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Golang 项目中实现用户权限管理需要考虑以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义权限级别：根据业务需求定义不同的权限级别，比如超级管理员、管理员、</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>golang项目中怎么做用户权限管理</p></blockquote><p>在 Golang 项目中实现用户权限管理需要考虑以下几个方面：</p><ol><li><p>定义权限级别：根据业务需求定义不同的权限级别，比如超级管理员、管理员、普通用户等。每个权限级别对应不同的操作权限。</p></li><li><p>实现身份认证：使用 OAuth2、JWT 或其他身份认证方式进行身份认证，确保用户是合法的。对于一些敏感操作，需要进行二次认证。</p></li><li><p>实现访问控制：在代码中实现访问控制，根据用户的权限级别来限制其访问和操作的范围。可以使用中间件、注解或其他方式来实现。</p></li><li><p>数据权限控制：对于一些需要数据隔离的场景，可以根据用户的权限级别和角色来进行数据权限控制，确保用户只能访问到其有权限的数据。</p></li></ol><p>下面是一个简单的示例代码，演示了如何使用 JWT 和注解实现用户权限管理：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义权限级别</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    RoleAdmin = <span class="string">&quot;admin&quot;</span></span><br><span class="line">    RoleUser  = <span class="string">&quot;user&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// JWT 验证中间件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JWTAuthMiddleware</span><span class="params">(next http.Handler)</span></span> http.Handler &#123;</span><br><span class="line">    <span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取 JWT Token</span></span><br><span class="line">        tokenString := r.Header.Get(<span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> tokenString == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">            w.WriteHeader(http.StatusUnauthorized)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析 JWT Token</span></span><br><span class="line">        token, err := jwt.Parse(tokenString, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="type">byte</span>(<span class="string">&quot;my_secret_key&quot;</span>), <span class="literal">nil</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> || !token.Valid &#123;</span><br><span class="line">            w.WriteHeader(http.StatusUnauthorized)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将用户 ID 和角色存储在上下文中</span></span><br><span class="line">        userID := token.Claims.(jwt.MapClaims)[<span class="string">&quot;user_id&quot;</span>].(<span class="type">string</span>)</span><br><span class="line">        role := token.Claims.(jwt.MapClaims)[<span class="string">&quot;role&quot;</span>].(<span class="type">string</span>)</span><br><span class="line">        ctx := context.WithValue(r.Context(), <span class="string">&quot;user_id&quot;</span>, userID)</span><br><span class="line">        ctx = context.WithValue(ctx, <span class="string">&quot;role&quot;</span>, role)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用下一个处理器</span></span><br><span class="line">        next.ServeHTTP(w, r.WithContext(ctx))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注解：限制只有管理员才能访问</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AdminOnly</span><span class="params">(next http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        role := r.Context().Value(<span class="string">&quot;role&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> role != RoleAdmin &#123;</span><br><span class="line">            w.WriteHeader(http.StatusForbidden)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        next(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由处理函数：需要管理员权限才能访问</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adminHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获取用户 ID 和角色</span></span><br><span class="line">    userID := r.Context().Value(<span class="string">&quot;user_id&quot;</span>)</span><br><span class="line">    role := r.Context().Value(<span class="string">&quot;role&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对管理员进行特殊处理</span></span><br><span class="line">    <span class="keyword">if</span> role == RoleAdmin &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    w.WriteHeader(http.StatusOK)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;Hello %s, your role is %s&quot;</span>, userID, role)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建路由器</span></span><br><span class="line">    r := mux.NewRouter()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加路由</span></span><br><span class="line">    r.HandleFunc(<span class="string">&quot;/admin&quot;</span>, AdminOnly(adminHandler)).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加</span></span><br></pre></td></tr></table></figure><blockquote><p>但是存在一些很复杂的场景，比如说一个用户的个人信息只能由他自己更改，或者被更高等级的账户更改</p></blockquote><p>是的，这些场景确实更复杂，需要更细粒度的权限控制。下面是一些实现这些场景的建议：</p><ol><li><p>数据权限控制：在实现数据权限控制时，可以将权限控制规则写入到业务代码中，或者使用第三方库。可以根据用户的角色、组织架构等信息，动态计算出用户可以访问的数据。对于需要数据隔离的场景，可以为每个用户创建独立的数据空间。</p></li><li><p>行级权限控制：在一些场景中，需要对数据进行更细粒度的控制，比如说一个用户的个人信息只能由他自己更改。可以使用行级权限控制技术，在每条数据中添加一个权限控制字段，用来记录哪些用户可以访问该数据。在查询和更新数据时，需要判断当前用户是否有权限访问该数据。</p></li><li><p>委托授权：在一些场景中，需要实现授权委托，比如说被更高等级的账户更改。可以使用委托授权技术，在授权者和被授权者之间建立授权关系。在被授权者访问受保护的资源时，需要验证授权者是否已经授权该操作。授权关系可以是静态的，也可以是动态的，可以根据业务需求来选择适合的授权模型。</p></li></ol><p>总之，实现复杂场景的用户权限管理需要综合考虑多个因素，包括业务需求、安全性、易用性、可维护性等。需要在开发过程中不断迭代和优化，确保权限管理系统能够满足业务需求并且安全可靠。</p><blockquote><p>就这个例子，你觉得能怎么写</p></blockquote><p>假设我们需要实现一个场景，用户可以查看和修改自己的个人信息，管理员可以查看和修改所有用户的个人信息。可以使用下面的代码实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户模型</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID       <span class="type">int</span></span><br><span class="line">    Username <span class="type">string</span></span><br><span class="line">    Password <span class="type">string</span></span><br><span class="line">    Email    <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库操作：查询用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserByID</span><span class="params">(userID <span class="type">int</span>)</span></span> (*User, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 查询数据库并返回用户信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库操作：更新用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateUser</span><span class="params">(user *User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 更新用户信息到数据库</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件：检查用户是否有权限访问</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckUserAccessMiddleware</span><span class="params">(next http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取用户 ID 和角色</span></span><br><span class="line">        userID := r.Context().Value(<span class="string">&quot;user_id&quot;</span>)</span><br><span class="line">        role := r.Context().Value(<span class="string">&quot;role&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是管理员，则直接通过</span></span><br><span class="line">        <span class="keyword">if</span> role == RoleAdmin &#123;</span><br><span class="line">            next(w, r)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则检查用户是否在访问自己的信息</span></span><br><span class="line">        requestedUserID, err := strconv.Atoi(mux.Vars(r)[<span class="string">&quot;user_id&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> || userID != requestedUserID &#123;</span><br><span class="line">            w.WriteHeader(http.StatusForbidden)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过检查</span></span><br><span class="line">        next(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由处理函数：获取用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUserHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的用户 ID</span></span><br><span class="line">    userID, err := strconv.Atoi(mux.Vars(r)[<span class="string">&quot;user_id&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询用户信息</span></span><br><span class="line">    user, err := GetUserByID(userID)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    json.NewEncoder(w).Encode(user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由处理函数：更新用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateUserHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的用户 ID</span></span><br><span class="line">    userID, err := strconv.Atoi(mux.Vars(r)[<span class="string">&quot;user_id&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析请求的用户信息</span></span><br><span class="line">    <span class="keyword">var</span> user User</span><br><span class="line">    <span class="keyword">if</span> err := json.NewDecoder(r.Body).Decode(&amp;user); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查用户是否有权限更新信息</span></span><br><span class="line">    <span class="keyword">if</span> userID != user.ID &#123;</span><br><span class="line">        w.WriteHeader(http.StatusForbidden)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新用户信息</span></span><br><span class="line">    <span class="keyword">if</span> err := UpdateUser(&amp;user); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们定义了一个中间件 <code>CheckUserAccessMiddleware</code>，用来检查用户是否有权限访问和修改个人信息。如果当前用户是管理员，则直接通过；否则，需要检查用户是否在访问自己的信息。对于获取和更新用户信息的路由处理函数 <code>getUserHandler</code> 和 <code>updateUserHandler</code>，我们都添加了这个中间件。</p><p>在路由处理函数中，我们首先获取请求的用户 ID，然后根据用户 ID 查询或更新用户信息。在更新用户信息时，我们还需要检查请求中的用户信息是否与当前用户匹配。如果请求的用户</p><blockquote><p>但是有很多类型的复杂权限判断情况，我想能不能整合在一起</p></blockquote><p>是的，确实存在很多类型的复杂权限判断情况，需要整合在一起来实现。在实际开发中，我们可以使用 RBAC（Role-Based Access Control，基于角色的访问控制）或 ABAC（Attribute-Based Access Control，基于属性的访问控制）等权限管理模型来实现复杂权限控制。</p><p>RBAC 模型通过将用户分配到不同的角色，并将角色赋予不同的权限，来实现访问控制。ABAC 模型则根据用户的属性（如角色、组织架构、地理位置等），动态计算用户可以访问的资源，从而实现访问控制。</p><p>下面是一个使用 ABAC 模型实现的示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户模型</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID       <span class="type">int</span></span><br><span class="line">    Username <span class="type">string</span></span><br><span class="line">    Password <span class="type">string</span></span><br><span class="line">    Email    <span class="type">string</span></span><br><span class="line">    Role     <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库操作：查询用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserByID</span><span class="params">(userID <span class="type">int</span>)</span></span> (*User, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 查询数据库并返回用户信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库操作：更新用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateUser</span><span class="params">(user *User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 更新用户信息到数据库</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ABAC 验证中间件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ABACMiddleware</span><span class="params">(next http.Handler)</span></span> http.Handler &#123;</span><br><span class="line">    <span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取用户 ID 和角色</span></span><br><span class="line">        userID := r.Context().Value(<span class="string">&quot;user_id&quot;</span>)</span><br><span class="line">        role := r.Context().Value(<span class="string">&quot;role&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义属性集合</span></span><br><span class="line">        attributes := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">        attributes[<span class="string">&quot;user_id&quot;</span>] = userID</span><br><span class="line">        attributes[<span class="string">&quot;role&quot;</span>] = role</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将属性集合存储在上下文中</span></span><br><span class="line">        ctx := context.WithValue(r.Context(), <span class="string">&quot;attributes&quot;</span>, attributes)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用下一个处理器</span></span><br><span class="line">        next.ServeHTTP(w, r.WithContext(ctx))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ABAC 访问控制中间件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ABACAccessControlMiddleware</span><span class="params">(requiredAttributes <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;, next http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取属性集合</span></span><br><span class="line">        attributes := r.Context().Value(<span class="string">&quot;attributes&quot;</span>).(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查属性集合是否满足要求</span></span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> requiredAttributes &#123;</span><br><span class="line">            <span class="keyword">if</span> attributes[k] != v &#123;</span><br><span class="line">                w.WriteHeader(http.StatusForbidden)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过检查</span></span><br><span class="line">        next(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由处理函数：获取用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUserHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的用户 ID</span></span><br><span class="line">    userID, err := strconv.Atoi(mux.Vars(r)[<span class="string">&quot;user_id&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询用户信息</span></span><br><span class="line">    user, err := GetUserByID(userID)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查用户是否有权限访问</span></span><br><span class="line">    requiredAttributes := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;user_id&quot;</span>: userID,</span><br><span class="line">    &#125;</span><br><span class="line">    ABACAccessControlMiddleware(requiredAttributes, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        json.NewEncoder(w).Encode(user)</span><br><span class="line">    &#125;)(w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br></pre></td></tr></table></figure><blockquote><p>简单介绍一下这两种模型</p></blockquote><p>RBAC（Role-Based Access Control）是一种基于角色的访问控制模型，它将用户分配到不同的角色，然后将角色赋予不同的权限。用户在访问资源时，只需要使用自己所属的角色的权限即可，无需关心具体的权限设置。RBAC 模型简单易用，适用于规模较小、权限管理较为简单的系统。</p><p>ABAC（Attribute-Based Access Control）是一种基于属性的访问控制模型，它根据用户的属性（如角色、组织架构、地理位置等），动态计算用户可以访问的资源。在 ABAC 模型中，每个资源都有一组属性，而每个用户也有一组属性，系统会根据用户的属性来计算其可以访问哪些资源。ABAC 模型比 RBAC 更为灵活，能够处理更为复杂的权限控制需求，适用于规模较大、权限管理较为复杂的系统。</p><p>在实际开发中，我们可以根据业务需求选择适合的权限管理模型，或者结合两种模型来实现复杂的权限控制。无论采用哪种模型，都需要对权限进行严格的管理和监控，确保系统安全可靠。</p><blockquote><p>给一个ABAC的例子</p></blockquote><p>假设我们需要实现一个场景，用户可以查看和修改自己的个人信息，管理员可以查看和修改所有用户的个人信息。在这个场景中，我们可以使用 ABAC 模型来实现权限控制。</p><p>首先，我们需要定义一些属性，用来描述用户和资源。比如，我们可以定义如下的属性：</p><ul><li>用户属性：<ul><li><code>user_id</code>：用户 ID</li><li><code>role</code>：用户角色</li></ul></li><li>资源属性：<ul><li><code>resource_id</code>：资源 ID</li><li><code>owner_id</code>：资源所有者 ID</li></ul></li></ul><p>然后，我们可以使用 ABAC 模型的两个核心组件——策略引擎和访问控制规则来实现权限控制。</p><p>策略引擎根据访问请求中的属性和访问控制规则，动态计算用户是否有权限访问资源。访问控制规则定义了哪些属性必须满足、哪些属性可以满足、哪些属性不能满足，以及满足条件时的授权策略等信息。下面是一个使用 ABAC 模型实现的示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户模型</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID       <span class="type">int</span></span><br><span class="line">    Username <span class="type">string</span></span><br><span class="line">    Password <span class="type">string</span></span><br><span class="line">    Email    <span class="type">string</span></span><br><span class="line">    Role     <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库操作：查询用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserByID</span><span class="params">(userID <span class="type">int</span>)</span></span> (*User, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 查询数据库并返回用户信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库操作：更新用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateUser</span><span class="params">(user *User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 更新用户信息到数据库</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ABAC 访问控制规则</span></span><br><span class="line"><span class="keyword">type</span> AccessControlRule <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// 必须满足的属性</span></span><br><span class="line">    RequiredAttributes <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以满足的属性</span></span><br><span class="line">    AllowedAttributes <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能满足的属性</span></span><br><span class="line">    DeniedAttributes <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 授权策略</span></span><br><span class="line">    AuthorizationPolicy <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ABAC 策略引擎</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ABACEnforce</span><span class="params">(r *http.Request, resource <span class="keyword">interface</span>&#123;&#125;, accessControlRules []*AccessControlRule)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">// 获取属性集合</span></span><br><span class="line">    userID := r.Context().Value(<span class="string">&quot;user_id&quot;</span>).(<span class="type">int</span>)</span><br><span class="line">    role := r.Context().Value(<span class="string">&quot;role&quot;</span>).(<span class="type">string</span>)</span><br><span class="line">    attributes := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;user_id&quot;</span>: userID,</span><br><span class="line">        <span class="string">&quot;role&quot;</span>:    role,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加资源属性到属性集合中</span></span><br><span class="line">    <span class="keyword">switch</span> v := resource.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> *User:</span><br><span class="line">        attributes[<span class="string">&quot;resource_id&quot;</span>] = v.ID</span><br><span class="line">        attributes[<span class="string">&quot;owner_id&quot;</span>] = v.ID</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历访问控制规则</span></span><br><span class="line">    <span class="keyword">for</span> _, rule := <span class="keyword">range</span> accessControlRules &#123;</span><br><span class="line">        <span class="comment">// 检查必须满足的属性是否存在</span></span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> rule.RequiredAttributes &#123;</span><br><span class="line">            <span class="keyword">if</span> attributes[k] != v &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查不能满足的属性是否存在</span></span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> rule.DeniedAttributes &#123;</span><br><span class="line">            <span class="keyword">if</span> attributes[k] == v &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查可以满足的属性是否存在</span></span><br></pre></td></tr></table></figure><blockquote><p>我大概理解了，能不能有简单描述一下整个过程</p></blockquote><p>ABAC（Attribute-Based Access Control）模型的访问控制过程可以简单描述为以下几个步骤：</p><ol><li><p>定义属性：首先，需要定义一些属性，用来描述用户、资源和环境。这些属性可以是用户的角色、组织架构、地理位置等，也可以是资源的所有者、类型、状态等，还可以是环境的时间、地理位置等。</p></li><li><p>定义访问控制规则：根据业务需求，需要定义一些访问控制规则，用来描述哪些属性必须满足、哪些属性可以满足、哪些属性不能满足，以及满足条件时的授权策略等信息。访问控制规则可以存储在数据库、配置文件或其他存储介质中。</p></li><li><p>策略引擎计算权限：当用户请求访问某个资源时，策略引擎会根据请求中的属性和访问控制规则，动态计算用户是否有权限访问资源。如果用户满足访问控制规则中定义的条件，则可以被授权访问资源，否则将被拒绝访问。</p></li><li><p>授权访问资源：如果用户被授权访问资源，则可以进行相应的操作，如查看、修改、删除等。否则，将无法访问资源，访问请求将被拒绝。</p></li></ol><p>在 ABAC 模型中，访问控制规则是动态计算的，可以根据用户、资源和环境的属性来进行灵活的授权控制。因此，ABAC 模型适用于规模较大、权限管理较为复杂的系统。</p><blockquote><p>ABACEnforce那个函数你完整地写一写</p></blockquote><p>好的，下面是一个更完整的 <code>ABACEnforce</code> 函数示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ABAC 策略引擎</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ABACEnforce</span><span class="params">(r *http.Request, resource <span class="keyword">interface</span>&#123;&#125;, accessControlRules []*AccessControlRule)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">// 获取属性集合</span></span><br><span class="line">    userID := r.Context().Value(<span class="string">&quot;user_id&quot;</span>).(<span class="type">int</span>)</span><br><span class="line">    role := r.Context().Value(<span class="string">&quot;role&quot;</span>).(<span class="type">string</span>)</span><br><span class="line">    attributes := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;user_id&quot;</span>: userID,</span><br><span class="line">        <span class="string">&quot;role&quot;</span>:    role,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加资源属性到属性集合中</span></span><br><span class="line">    <span class="keyword">switch</span> v := resource.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> *User:</span><br><span class="line">        attributes[<span class="string">&quot;resource_id&quot;</span>] = v.ID</span><br><span class="line">        attributes[<span class="string">&quot;owner_id&quot;</span>] = v.ID</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历访问控制规则</span></span><br><span class="line">    <span class="keyword">for</span> _, rule := <span class="keyword">range</span> accessControlRules &#123;</span><br><span class="line">        <span class="comment">// 检查必须满足的属性是否存在</span></span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> rule.RequiredAttributes &#123;</span><br><span class="line">            <span class="keyword">if</span> attributes[k] != v &#123;</span><br><span class="line">                <span class="keyword">goto</span> NextRule</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查不能满足的属性是否存在</span></span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> rule.DeniedAttributes &#123;</span><br><span class="line">            <span class="keyword">if</span> attributes[k] == v &#123;</span><br><span class="line">                <span class="keyword">goto</span> NextRule</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查可以满足的属性是否存在</span></span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> rule.AllowedAttributes &#123;</span><br><span class="line">            <span class="keyword">if</span> attributes[k] == v &#123;</span><br><span class="line">                <span class="comment">// 访问控制规则匹配成功</span></span><br><span class="line">                <span class="keyword">switch</span> rule.AuthorizationPolicy &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;allow&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;deny&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    NextRule:</span><br><span class="line">        <span class="comment">// 继续遍历下一个访问控制规则</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有匹配的访问控制规则</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数中，我们首先从请求中获取用户的属性（<code>user_id</code> 和 <code>role</code>），然后根据资源的类型（在这个示例中是 <code>*User</code>）添加资源的属性（<code>resource_id</code> 和 <code>owner_id</code>）到属性集合中。接着，我们遍历访问控制规则，逐个检查访问控制规则中定义的属性条件是否满足。</p><p>在检查属性条件时，我们使用了 <code>goto</code> 语句跳过了不满足条件的访问控制规则，提高了执行效率。如果所有的属性条件都满足，我们根据访问控制规则中定义的授权策略（<code>allow</code> 或 <code>deny</code>）返回相应的结果。</p><p>如果没有匹配的访问控制规则，则认为用户没有权限访问资源，返回 <code>false</code>。</p><blockquote><p>那我改如何定义上面的那个规则：用户可以查看和修改自己的个人信息，管理员可以查看和修改所有用户的个人信息</p></blockquote><p>针对你提供的具体场景，可以按照以下方式定义两条访问控制规则：</p><ol><li>用户可以查看和修改自己的个人信息：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AccessControlRule&#123;</span><br><span class="line">    RequiredAttributes: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;user_id&quot;</span>: userID, <span class="comment">// 必须满足用户 ID 属性等于当前用户 ID</span></span><br><span class="line">    &#125;,</span><br><span class="line">    AllowedAttributes: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;resource_id&quot;</span>: userID, <span class="comment">// 可以满足资源 ID 属性等于当前用户 ID</span></span><br><span class="line">    &#125;,</span><br><span class="line">    AuthorizationPolicy: <span class="string">&quot;allow&quot;</span>, <span class="comment">// 允许访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>管理员可以查看和修改所有用户的个人信息：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AccessControlRule&#123;</span><br><span class="line">    RequiredAttributes: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;admin&quot;</span>, <span class="comment">// 必须满足用户角色属性等于管理员</span></span><br><span class="line">    &#125;,</span><br><span class="line">    AllowedAttributes: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="comment">// 没有额外的属性限制，可以访问所有用户的个人信息</span></span><br><span class="line">    &#125;,</span><br><span class="line">    AuthorizationPolicy: <span class="string">&quot;allow&quot;</span>, <span class="comment">// 允许访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当用户访问个人信息时，策略引擎会根据访问请求中的属性和访问控制规则，动态计算用户是否有权限访问资源。如果用户满足访问控制规则中定义的条件，则可以被授权访问资源，否则将被拒绝访问。</p><blockquote><p>我知道肯定有这方面的库，帮我列举几个</p></blockquote><p>是的，有很多开源的权限管理库可以帮助我们实现 RBAC 和 ABAC 权限控制，下面是一些常用的库：</p><ol><li><p>Casbin：这是一个流行的开源权限管理库，支持 RBAC、ABAC、PBAC 和 RESTful API 等多种权限控制模型。它提供了多种语言的实现，包括 Go、Java、Python、C++、Node.js 等。</p></li><li><p>OPA（Open Policy Agent）：这是一个通用的开源策略引擎，支持基于属性和基于角色的访问控制模型。它提供了多种语言的 SDK，可以方便地与现有的应用程序集成。</p></li><li><p>Sentinel：这是一个基于规则的访问控制框架，支持基于角色、基于属性和基于资源的权限控制模型。它提供了多种语言的实现，包括 Java、Go、C++、Python 等。</p></li><li><p>Shiro：这是一个流行的 Java 安全框架，支持 RBAC、ABAC 和 PBAC 等多种权限控制模型。它提供了一系列的 API 和工具，可以方便地实现权限管理和认证授权功能。</p></li><li><p>Spring Security：这是一个流行的安全框架，支持 RBAC、ABAC、PBAC 和 ACL 等多种权限控制模型。它提供了一系列的 API 和工具，可以方便地实现权限管理和认证授权功能。</p></li></ol><p>这些库都是经过实践验证的成熟工具，可以为我们快速实现权限管理和认证授权功能，提高开发效率。</p><blockquote><p>介绍并对比一下主流的权限控制模型</p></blockquote><p>主流的权限控制模型包括 RBAC、ABAC 和 PBAC，它们有各自的特点和应用场景。下面是它们的介绍和对比：</p><ol><li><p>RBAC（Role-Based Access Control，基于角色的访问控制）：RBAC 模型是最常见和最简单的权限控制模型之一，它根据用户的角色来管理用户对资源的访问权限。RBAC 模型将用户划分为不同的角色，每个角色拥有一组特定的权限，然后将用户与角色进行关联。这种模型适用于权限管理相对简单的场景，如企业内部的管理系统或 Web 应用程序。</p></li><li><p>ABAC（Attribute-Based Access Control，基于属性的访问控制）：ABAC 模型是一种基于属性的灵活的权限控制模型，它根据用户的属性、资源的属性和环境的属性来管理用户对资源的访问权限。ABAC 模型将用户、资源和环境的属性组合在一起，然后通过策略引擎动态计算用户是否有权限访问资源。这种模型适用于权限管理相对复杂的场景，如金融、医疗和政府等领域的系统。</p></li><li><p>PBAC（Policy-Based Access Control，基于策略的访问控制）：PBAC 模型是一种基于策略的灵活的权限控制模型，它根据用户的属性、角色和策略来管理用户对资源的访问权限。PBAC 模型将用户的属性和角色作为输入，然后通过访问控制策略来判断用户是否有权限访问资源。这种模型适用于需要更细粒度控制的场景，如军事、情报和高安全性的系统。</p></li></ol><p>在 RBAC 模型中，权限管理相对简单，但管理角色和角色之间的关系比较困难。在 ABAC 模型中，权限管理相对复杂，但能够灵活地控制权限，支持更多的应用场景。在 PBAC 模型中，权限管理更为灵活，能够实现更细粒度的控制，但需要更复杂的策略管理。</p><p>因此，在选择权限控制模型时，需要根据实际需求来选择合适的模型，避免在权限控制方面出现过度或不足的问题。</p><blockquote><p>那ACL呢</p></blockquote><p>ACL（Access Control List，访问控制列表）是一种常见的权限控制模型，它通过指定用户或用户组对资源的访问权限进行控制。ACL 模型可以应用于多种场景，如操作系统、数据库、Web 应用程序等。</p><p>在 ACL 模型中，每个资源都有一个 ACL 列表，用来定义哪些用户或用户组有权访问该资源。ACL 列表通常包括访问者的 ID、访问权限（如读、写、执行等）和特定的时间段等信息。用户访问资源时，系统会检查该用户的 ID 是否在 ACL 列表中，并且该用户是否有对应的访问权限，如果满足条件，则允许访问资源，否则拒绝访问。</p><p>ACL 模型的优点是实现简单，易于管理，适用于小型系统或权限管理比较简单的场景。但是，它也有一些缺点，如难以应对复杂的权限管理需求，ACL 列表难以维护，难以管理大量用户或用户组等。因此，在设计权限管理系统时，需要根据实际情况选择合适的权限控制模型。</p><hr><p>关于 Casbin 在社区里面的毒瘤名声我早有耳闻，但我用上来感觉算是上手比较简单的那一种，我看了qimiao的两个视频，大概弄懂了</p><ul><li><a href="https://www.bilibili.com/video/BV1qz4y167XP/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">【【gin教学】第十章：半小时彻底弄懂Casbin基础模型（1010工作室出品）】</a></li><li><a href="https://www.bilibili.com/video/BV13r4y1M7AC/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">【【gin教学】第十一章：Casbin的代码使用、api调用、自定义比较方法（1010工作室出品）】</a></li></ul><p>而群友也提到了 logto 和 supertokens ，demo 我也都跑了一下，但是我感觉目前其实不是很需要登录鉴权权限管理一把梭哈，可能以后会用吧</p><p>另外同类的 <a href="https://gist.github.com/Wang-Kai/18fe4e662ef795805c14b1ec94932834">ladon</a> 我也了解了一下，感觉还是从 casbin 实战一下吧，不说了，先去看看群友的项目里面是怎么用的（</p><p>PS：</p><ul><li>【【IT老齐217】简单粗暴讲解RBAC四级角色权限模型】 <a href="https://www.bilibili.com/video/BV1YT411N76n/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">https://www.bilibili.com/video/BV1YT411N76n/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902</a></li><li>【【IT老齐218】浅析强大但复杂的ABAC属性访问控制】 <a href="https://www.bilibili.com/video/BV1wT411M7bd/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">https://www.bilibili.com/video/BV1wT411M7bd/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902</a></li><li>【【IT老齐219】项目中如何设计数据访问权限】 <a href="https://www.bilibili.com/video/BV1bB4y1778n/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902">https://www.bilibili.com/video/BV1bB4y1778n/?share_source=copy_web&amp;vd_source=5ca30838bf3c8b357bddca1ff2565902</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://nickxu.me/categories/ChatGPT-%E5%AF%B9%E8%AF%9D%E8%AE%B0%E5%BD%95/">ChatGPT 对话记录</category>
      
      
      <category domain="https://nickxu.me/tags/ChatGPT/">ChatGPT</category>
      
      
      <comments>https://nickxu.me/2023/04/13/ChatGPT%E5%AF%B9%E8%AF%9D%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>在 Mac 的 VSC 中使用 g++ 编译器</title>
      <link>https://nickxu.me/2023/04/04/%E5%9C%A8Mac%E7%9A%84VSCode%E4%B8%AD%E4%BD%BF%E7%94%A8g-%E7%BC%96%E8%AF%91%E5%99%A8/</link>
      <guid>https://nickxu.me/2023/04/04/%E5%9C%A8Mac%E7%9A%84VSCode%E4%B8%AD%E4%BD%BF%E7%94%A8g-%E7%BC%96%E8%AF%91%E5%99%A8/</guid>
      <pubDate>Tue, 04 Apr 2023 15:14:29 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;本人最近开始复习算法刷题了，然后用的是 macOS 上 VSCode 的默认配置，也就是 clang/clang++ 编译器，但是高中的时候用惯了 gcc/g++ 了，很多 g++ 的方言 clang 并不支持，例如 &lt;code&gt;#include &amp;lt;bits/stdc</description>
        
      
      
      
      <content:encoded><![CDATA[<p>本人最近开始复习算法刷题了，然后用的是 macOS 上 VSCode 的默认配置，也就是 clang/clang++ 编译器，但是高中的时候用惯了 gcc/g++ 了，很多 g++ 的方言 clang 并不支持，例如 <code>#include &lt;bits/stdc++.h&gt;</code> 之类的</p><p>可能你会说，这有什么的，直接把编译指令里面的编译器替换一下不就行了</p><p><s>如果真的这么简单的话就没有这篇博客了（bushi</s></p><p>首先我换了之后并不能解决问题， 接着我发现了一个很恐怖的事情（</p><p><img src="https://image.nickxu.me/202304042125590.png" alt="41a03f9b1946237c16f16a8b4b805eb8"></p><blockquote><p>我的 gcc 怎么被 clang 夺舍了？？？</p></blockquote><p>我的第一个反应是卸载 clang ，毕竟我也不想用这玩意，然后我看这东西是哪里安装的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis clang</span><br><span class="line">clang: /usr/bin/clang /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/share/man/man1/clang.1</span><br></pre></td></tr></table></figure><p>啊，原来是 Xcode 哇，这东西我平时也用不上，还占着这么大的空间，我这就把你卸了</p><img src="https://image.nickxu.me/202304042134821.png" alt="image-20230404213422795" style="zoom:50%;" /><blockquote><p>Xcode 是我刚开始上手 macOS 的时候学长建议我安装的，但是这东西快15个G，我平时又用不上</p></blockquote><p>卸完之后我发现 clang 还是在，我就继续看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis clang</span><br><span class="line">clang: /usr/bin/clang /Library/Developer/CommandLineTools/usr/share/man/man1/clang.1</span><br></pre></td></tr></table></figure><p>原来是 CommandLineTools ，我又搜了一下这个 CommandLineTools 是个什么东西，原来是 Xcode 开发环境的一部分，但是其实可以不依附 Xcode 单独存在</p><p>学长让我安装 Xcode 其实就是为了安装这个东西，其实这个东西通过这个命令就能安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p>好了，现在的目标是解决这个东西，但是我 Google 了一下，却发现这东西我还不能卸了</p><p><img src="https://image.nickxu.me/202304042156001.png" alt="image-20230404215657969"></p><blockquote><p>好家伙，我直呼内行</p></blockquote><p>是的，我的确使用 <code>brew install gcc</code> 安装了 gcc和g++，但是我一直不知道怎么调用</p><p><img src="https://image.nickxu.me/202304042159744.png" alt="image-20230404215943715"></p><blockquote><p>现在我知道了，原来要加上你的版本号才能调用到 gcc 本尊</p></blockquote><p>行吧，我这就去手动指定编译器路径</p><p>先看看这东西的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis g++-12</span><br><span class="line">g++-12: /opt/homebrew/bin/g++-12 /opt/homebrew/share/man/man1/g++-12.1</span><br></pre></td></tr></table></figure><p>然后去改 <code>.vscode</code> 下的 <code>tasks.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/opt/homebrew/bin/g++-12&quot;</span><span class="punctuation">,</span> <span class="comment">// 手动指定 g++-12 的位置</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-fdiagnostics-color=always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-std=c++17&quot;</span><span class="punctuation">,</span> <span class="comment">// 手动指定c++标准</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>顺便把 <code>launch.json</code> 也记录一下把，这两个文件一个是定义如何编译的，一个是定义怎么运行的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>PS：顺便说一下这个 <code>externalConsole</code> ，在 Windows/Linux 上我用 C/C++ 扩展运行的时候都能把标准输出打印到集成终端上，但是在 macOS 上死活不可以，后来仔细一看原来打到了调试控制台上，如果我把这东西改为 true 的时候，它又会弹出一个终端出来，很难受</p><p>后来一看文档才知道真的没法像 Windows/Linux 一样使用集成终端输入输出</p><p><img src="https://image.nickxu.me/202304042215319.png" alt="image-20230404221547287"></p><p>最后一想，算了，我 Windows/Linux 上一般都是用文件输入的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>记着调试的时候把 output 那行注释调然后去调试控制台看输出吧</p></blockquote><p>改完之后我发现我的包导入不了了（后来知道原来的包都是 Xcode 里面的），我又想看看 g++的 lib 路径，这一般和 g++ 是放在一起的</p><p>然后发现是个软连接</p><p><img src="https://image.nickxu.me/202304042234646.png" alt="image-20230404223427601"></p><p>然后我翻了一下，是在这个位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/homebrew/Cellar/gcc/12.2.0/lib/</span><br></pre></td></tr></table></figure><p><img src="https://image.nickxu.me/202304042236016.png" alt=""></p><blockquote><p>去扩展设置里面手动指定一下 <code>Compiler Path</code> 和 <code>Include Path</code></p></blockquote><p><img src="https://image.nickxu.me/202304042239339.png" alt="image-20230404223937247"></p><blockquote><p>发现可以用了，按住 cmd 点进去头文件，再次确认路径</p></blockquote><p>这时群里说其实可以用 <code>alias</code> ，我一想的确啊，毕竟 <code>alias</code> 的优先级是最高，这下可以给 gcc 正名了</p><p><img src="https://image.nickxu.me/202304042254286.png" alt="image-20230404225434212"></p><p>直接进 <code>~/.zshrc</code> 敲上两行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias g++=&#x27;g++-12&#x27;</span><br><span class="line">alias gcc=&#x27;gcc-12&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://image.nickxu.me/202304042259837.png" alt="image-20230404225940813"></p><p>然后我使用 Code Runner 快速运行的时候会遇到错误，一想是C++标准的问题，我又去扩展设置手动改调用参数</p><p><img src="https://image.nickxu.me/202304042252418.png" alt="image-20230404225244331"></p><p><img src="https://image.nickxu.me/202304042302163.png" alt="image-20230404230232087"></p><p>最后我还想让 Code Runner 支持从集成终端输入输出，我有时也会从终端手动输入数据的</p><p><img src="https://image.nickxu.me/202304042304660.png" alt="image-20230404230446584"></p><p>现在终于可以愉快地 Coding 了！按下 Code Runner 的快捷键，自动从 <code>input.txt</code> 读取并输出到 <code>output.txt</code> 中</p><p><img src="https://image.nickxu.me/202304042305551.png" alt="image-20230404230536482"></p><p><img src="https://image.nickxu.me/202304042308691.png" alt="image-20230404230824614"></p><p>当我需要调试的时候， 把重定向 output 的那行注释掉，然后到调试控制台观察输出</p>]]></content:encoded>
      
      
      <category domain="https://nickxu.me/categories/macOS/">macOS</category>
      
      
      <category domain="https://nickxu.me/tags/C-C/">C/C++</category>
      
      
      <comments>https://nickxu.me/2023/04/04/%E5%9C%A8Mac%E7%9A%84VSCode%E4%B8%AD%E4%BD%BF%E7%94%A8g-%E7%BC%96%E8%AF%91%E5%99%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GORM 的 GEN 模式初上手</title>
      <link>https://nickxu.me/2023/03/29/GORM%E7%9A%84GEN%E6%A8%A1%E5%BC%8F%E5%88%9D%E4%B8%8A%E6%89%8B/</link>
      <guid>https://nickxu.me/2023/03/29/GORM%E7%9A%84GEN%E6%A8%A1%E5%BC%8F%E5%88%9D%E4%B8%8A%E6%89%8B/</guid>
      <pubDate>Wed, 29 Mar 2023 08:50:58 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;最近准备上手一个新项目，然后在选择底层的 ORM 框架&lt;/p&gt;
&lt;p&gt;我之前一直用的 GORM ，其实感觉还挺好用的，但是毕竟用多了，这次也想了解下其他的解决方案&lt;/p&gt;
&lt;p&gt;之前在和群友讨论 GORM 的时候，我听见有人对它有一些负面的看法，比如说认为 GORM 不算真</description>
        
      
      
      
      <content:encoded><![CDATA[<p>最近准备上手一个新项目，然后在选择底层的 ORM 框架</p><p>我之前一直用的 GORM ，其实感觉还挺好用的，但是毕竟用多了，这次也想了解下其他的解决方案</p><p>之前在和群友讨论 GORM 的时候，我听见有人对它有一些负面的看法，比如说认为 GORM 不算真正的 ORM，因为它很多时候只是在帮你手动拼凑 SQL 语句，只是没有写原生 SQL 那么痛苦而已，我听了之后感觉其实也有点道理</p><p>比如说我最近项目里的一句查询</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l.svcCtx.DBList.Mysql.</span><br><span class="line">Where(<span class="string">&quot;from_id = ? and to_user_id = ?&quot;</span>, in.UserAId, in.UserBId).</span><br><span class="line">Or(<span class="string">&quot;from_id = ? and to_user_id = ?&quot;</span>, in.UserBId, in.UserAId).</span><br><span class="line">Order(<span class="string">&quot;created_at desc&quot;</span>).</span><br><span class="line">First(&amp;result)</span><br></pre></td></tr></table></figure><p>其中还是要手打 <code>from_id</code>  和  <code>to_user_id</code> 这些字段名，就像原生 SQL 一样，而真正的 ORM 不应当是这样的，应当走如同 ent 这种代码生成的路子</p><p>甚至我也听过有人认为不应该使用 ORM 框架：<a href="https://xargin.com/you-should-avoid-orm-and-sql-builder/">为什么要旗帜鲜明地反对 orm 和 sql builder</a></p><p>也就是说你的 ORM 虽然方便，但是不方便进行 SQL 语句的审查，也就是说你不能预测线上环境会生成哪些 SQL，会有不确定性</p><p>但是其实我觉得吧，他说的场景我现在都还遇不到，我的项目也就是一些简单的 CURD ，而且数据量也不大</p><p>那么现在的情况就是说，我可以去尝试一下代码生成类型的 ORM ，例如 ent，也可以尝试其他方案，如 sqlx、sqlc 之类的</p><p>但是我真的离不开 GORM 的关联关系哇，真的是太方便了（我知道 ent 也有类似的设计，但我还是习惯 GORM 的）</p><p>然后我想起来 GORM 其实也推出了一个代码生成的版本，也就是 GEN 模式：<a href="https://gorm.io/zh_CN/gen/">https://gorm.io/zh_CN/gen/</a>，之前在B站也刷到了 <a href="https://www.bilibili.com/video/BV1Es4y1W7eg/">BV1Es4y1W7eg</a></p><p>我就打算尝试一下这个 GORM 的 GEN 模式（下面简称 GEN 了）</p><hr><p>GEN 支持从数据库进行代码生成，也可以通过已经存在的 GORM model 生成代码</p><p>下面就尝试从 model 生成，就拿经典的老师学生一对多关系举例</p><p>首先把包拉一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u gorm.io/gen</span><br></pre></td></tr></table></figure><p>在项目根目录新建 <code>model</code>文件夹，然后创建 <code>model.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line">TeacherID <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// has many</span></span><br><span class="line">Student []Student</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们准备生成代码了，但是不是用一个命令生成，是用一个 golang 程序，里面包含了配置，我感觉这样的设计有点意思</p><p>退回项目根目录，新建 <code>build</code>文件夹，然后创建 <code>build.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;gorm-gen/model&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gen&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//// Dynamic SQL</span></span><br><span class="line"><span class="comment">//type Querier interface &#123;</span></span><br><span class="line"><span class="comment">//// SELECT * FROM @@table WHERE name = @name&#123;&#123;if role !=&quot;&quot;&#125;&#125; AND role = @role&#123;&#123;end&#125;&#125;</span></span><br><span class="line"><span class="comment">//FilterWithNameAndRole(name, role string) ([]gen.T, error)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">g := gen.NewGenerator(gen.Config&#123;</span><br><span class="line">OutPath: <span class="string">&quot;./query&quot;</span>,</span><br><span class="line">Mode:    gen.WithoutContext | gen.WithDefaultQuery | gen.WithQueryInterface, <span class="comment">// generate mode</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// gormdb, _ := gorm.Open(mysql.Open(&quot;root:@(127.0.0.1:3306)/demo?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;))</span></span><br><span class="line"><span class="comment">//g.UseDB(gormdb) // reuse your gorm db</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate basic type-safe DAO API for struct `model.User` following conventions</span></span><br><span class="line">g.ApplyBasic(model.Student&#123;&#125;, model.Teacher&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Type Safe API with Dynamic SQL defined on Querier interface for `model.User` and `model.Company`</span></span><br><span class="line"><span class="comment">//g.ApplyInterface(func(Querier) &#123;&#125;, model.User&#123;&#125;, model.Company&#123;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate the code</span></span><br><span class="line">g.Execute()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GEN 还支持动态 SQL ，这东西我感觉我还用不上，就没折腾</p><p>执行之后，应该能生成 <code>query</code> 目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">│   └── main.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── model</span><br><span class="line">│   └── model.go</span><br><span class="line">└── query</span><br><span class="line">    ├── gen.go</span><br><span class="line">    ├── students.gen.go</span><br><span class="line">    └── teachers.gen.go</span><br></pre></td></tr></table></figure><p>然后你就可以开始写 <code>main.go</code> 了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;gorm-gen/model&quot;</span></span><br><span class="line"><span class="string">&quot;gorm-gen/query&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">dsn := <span class="string">&quot;root:12345678@tcp(127.0.0.1:3306)/gorm_learning?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;</span><br><span class="line">DisableForeignKeyConstraintWhenMigrating: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">err = db.AutoMigrate(&amp;model.Student&#123;&#125;, &amp;model.Teacher&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">query.SetDefault(db)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增</span></span><br><span class="line">student1 := model.Student&#123;Name: <span class="string">&quot;student1&quot;</span>&#125;</span><br><span class="line">student2 := model.Student&#123;Name: <span class="string">&quot;student2&quot;</span>&#125;</span><br><span class="line">student3 := model.Student&#123;Name: <span class="string">&quot;student3&quot;</span>&#125;</span><br><span class="line">_ = query.Student.Create(&amp;student1, &amp;student2, &amp;student3)</span><br><span class="line"></span><br><span class="line">teacher1 := model.Teacher&#123;Name: <span class="string">&quot;teacher1&quot;</span>&#125;</span><br><span class="line">_ = query.Teacher.Create(&amp;teacher1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">_, _ = query.Student.Where(query.Student.Id.Eq(<span class="number">3</span>)).Delete()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line">_, _ = query.Student.Where(query.Student.Id.Eq(<span class="number">2</span>)).Update(query.Student.Name, <span class="string">&quot;student2_new&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line">student, _ := query.Student.Where(query.Student.Id.Eq(<span class="number">1</span>)).Take()</span><br><span class="line">teacher, _ := query.Teacher.Where(query.Teacher.Id.Eq(<span class="number">1</span>)).Take()</span><br><span class="line"></span><br><span class="line">fmt.Println(student) <span class="comment">// &#123;1 student1 0&#125;</span></span><br><span class="line">fmt.Println(teacher) <span class="comment">// &#123;1 teacher1 []&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关联</span></span><br><span class="line">_ = query.Teacher.Student.Model(&amp;teacher1).Append(&amp;student1, &amp;student2)</span><br><span class="line">teacher, _ = query.Teacher.Preload(query.Teacher.Student).Where(query.Teacher.Id.Eq(<span class="number">1</span>)).Take()</span><br><span class="line"></span><br><span class="line">fmt.Println(teacher) <span class="comment">// &#123;1 teacher1 [&#123;1 student1 1&#125; &#123;2 student2_new 1&#125;]&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察执行语句，你会发现与原版 GORM 的不同，比如说你在更新字段的时候，原版应该是这样写的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DB.Model(&amp;Student&#123;&#125;).Where(<span class="string">&quot;ID = ?&quot;</span>, <span class="number">2</span>).Update(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;student2_new&quot;</span>)</span><br></pre></td></tr></table></figure><p>而现在变成了这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query.Student.Where(query.Student.Id.Eq(<span class="number">2</span>)).Update(query.Student.Name, <span class="string">&quot;student2_new&quot;</span>)</span><br></pre></td></tr></table></figure><p>我感觉这样更能避免错误，看上去也更加安全，我这次项目就打算尝试一下用这个 GEN 模式了</p>]]></content:encoded>
      
      
      <category domain="https://nickxu.me/categories/Golang/">Golang</category>
      
      <category domain="https://nickxu.me/categories/Golang/GORM-%E6%A1%86%E6%9E%B6/">GORM 框架</category>
      
      
      <category domain="https://nickxu.me/tags/GORM/">GORM</category>
      
      <category domain="https://nickxu.me/tags/Go/">Go</category>
      
      
      <comments>https://nickxu.me/2023/03/29/GORM%E7%9A%84GEN%E6%A8%A1%E5%BC%8F%E5%88%9D%E4%B8%8A%E6%89%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo 首页添加 GitCalender 提交日历</title>
      <link>https://nickxu.me/2023/03/27/Hexo-%E9%A6%96%E9%A1%B5%E6%B7%BB%E5%8A%A0-GitCalender-%E6%8F%90%E4%BA%A4%E6%97%A5%E5%8E%86/</link>
      <guid>https://nickxu.me/2023/03/27/Hexo-%E9%A6%96%E9%A1%B5%E6%B7%BB%E5%8A%A0-GitCalender-%E6%8F%90%E4%BA%A4%E6%97%A5%E5%8E%86/</guid>
      <pubDate>Mon, 27 Mar 2023 03:57:01 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;折腾了一上午算是搞定了，先来看看效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image.nickxu.me/202303271316284.png&quot; alt=&quot;image-20230327131605255&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;感觉颜色还</description>
        
      
      
      
      <content:encoded><![CDATA[<p>折腾了一上午算是搞定了，先来看看效果</p><p><img src="https://image.nickxu.me/202303271316284.png" alt="image-20230327131605255"></p><blockquote><p>感觉颜色还是不够好看？算了就这样吧</p></blockquote><h2 id="自建后端-Api">自建后端 Api</h2><p>首先这个组件是来源于 Akilar 大佬的，然后后端是冰老师写的</p><div class="tag link"><a class="link-card" title="Gitcalendar | Akilarの糖果屋" href="https://akilar.top/posts/1f9c68c9/"><div class="left"><img src="https://akilar.top/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">Gitcalendar | Akilarの糖果屋</p><p class="url">https://akilar.top/posts/1f9c68c9/</p></div></a></div><p>但是默认的 api 是失效的，必须自建 api ，因为之前 GitHub 接口改了，所以原来的正则不能用，<a href="https://github.com/Zfour/python_github_calendar_api/pull/5">有大佬提了 PR</a> ，但是一直没和进去</p><p>所以你自建后端 api 的时候应该是 fork 这个仓库</p><center><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/zkeq/python_github_calendar_api"><img src="https://github-readme-stats.vercel.app/api/pin/?username=zkeq&repo=python_github_calendar_api&theme=algolia&show_owner=true"/></a></center><p>然后你就跟着教程一路走下去即可</p><h2 id="经典域名问题">经典域名问题</h2><p>等你建好了就遇到了经典的 Vercel 被墙问题：在国内没法使用，这时候你就需要给你的 project 添加一个自己的域名</p><p>就如我在 <a href="https://www.nickxu.top/2022/09/11/%E3%80%8ETwikoo%E3%80%8F%E8%A7%A3%E5%86%B3-Vercel-app-%E5%9C%A8%E5%9B%BD%E5%86%85%E8%A2%AB%E5%A2%99%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/">『Twikoo』解决 Vercel.app 在国内被墙导致无法使用的问题</a> 中的那样操作</p><p>然后你就可以测试一下能否正常访问，例如我的是 <code>https://git-calender.nickxu.top</code> ，然后加个你 GitHub 用户名的参数试一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://git-calender.nickxu.top/api?NX-Official</span><br></pre></td></tr></table></figure><p><img src="https://image.nickxu.me/202303271341575.png" alt="image-20230327134128474"></p><p>好了，现在后端搭建完毕，其实如果你后端实在搭建不起来也可以用我的后端</p><h2 id="搞定颜色">搞定颜色</h2><p>默认的配置文件里面的颜色我感觉和我的暗黑主题不太搭，我就想用 GitHub 上面的那一套配色</p><p><img src="https://image.nickxu.me/202303271137759.png" alt="image-20230327113745737"></p><p>但是有个问题就是 GitHub 上面只有 1 种底色 + 4 种绿色，但是配置文件里面要填 11 种颜色</p><p>尝试了几种方案之后最后还是感觉重复填充这几种颜色观感最好</p><p>下面是我的完整配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-filter-gitcalendar</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/1f9c68c9/</span></span><br><span class="line"><span class="attr">gitcalendar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="comment"># butterfly挂载容器</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># volantis挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: class</span></span><br><span class="line">  <span class="comment">#   name: l_main</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="comment"># matery挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: id</span></span><br><span class="line">  <span class="comment">#   name: indexCard</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="comment"># mengd挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: class</span></span><br><span class="line">  <span class="comment">#   name: content</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">NX-Official</span> <span class="comment">#git用户名</span></span><br><span class="line">  <span class="attr">apiurl:</span> <span class="string">&#x27;https://git-calender.nickxu.top&#x27;</span></span><br><span class="line">  <span class="attr">minheight:</span></span><br><span class="line">    <span class="attr">pc:</span> <span class="string">280px</span> <span class="comment">#桌面端最小高度</span></span><br><span class="line">    <span class="attr">mibile:</span> <span class="string">0px</span> <span class="comment">#移动端最小高度</span></span><br><span class="line">  <span class="comment">#color: &quot;[&#x27;#e4dfd7&#x27;, &#x27;#f9f4dc&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f8df72&#x27;, &#x27;#fcd217&#x27;, &#x27;#fcc515&#x27;, &#x27;#f28e16&#x27;, &#x27;#fb8b05&#x27;, &#x27;#d85916&#x27;, &#x27;#f43e06&#x27;]&quot; #橘黄色调</span></span><br><span class="line">  <span class="comment">#color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot; #浅紫色调</span></span><br><span class="line">  <span class="comment">#color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f0fff4&#x27;, &#x27;#dcffe4&#x27;, &#x27;#bef5cb&#x27;, &#x27;#85e89d&#x27;, &#x27;#34d058&#x27;, &#x27;#28a745&#x27;, &#x27;#22863a&#x27;, &#x27;#176f2c&#x27;, &#x27;#165c26&#x27;, &#x27;#144620&#x27;]&quot; #翠绿色调</span></span><br><span class="line">  <span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f1f8ff&#x27;, &#x27;#dbedff&#x27;, &#x27;#c8e1ff&#x27;, &#x27;#79b8ff&#x27;, &#x27;#2188ff&#x27;, &#x27;#0366d6&#x27;, &#x27;#005cc5&#x27;, &#x27;#044289&#x27;, &#x27;#032f62&#x27;, &#x27;#05264c&#x27;]&quot; #天青色调</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#color: &quot;[&#x27;#161b22&#x27;,&#x27;#0e4429&#x27;,&#x27;#006d32&#x27;,&#x27;#26a641&#x27;,&#x27;#39d353&#x27;]&quot; # GitHub 上的颜色</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;[&#x27;#161b22&#x27;,&#x27;#0e4429&#x27;,&#x27;#0e4429&#x27;,&#x27;#0e4429&#x27;,&#x27;#006d32&#x27;,&#x27;#006d32&#x27;,&#x27;#26a641&#x27;,&#x27;#26a641&#x27;,&#x27;#39d353&#x27;,&#x27;#39d353&#x27;,&#x27;#39d353&#x27;]&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">container:</span> <span class="string">.recent-post-item(style=&#x27;width:100%;height:auto;padding:10px;&#x27;)</span> <span class="comment">#父元素容器，需要使用pug语法</span></span><br><span class="line">  <span class="attr">gitcalendar_css:</span> <span class="string">https://npm.elemecdn.com/hexo-filter-gitcalendar/lib/gitcalendar.css</span></span><br><span class="line">  <span class="attr">gitcalendar_js:</span> <span class="string">https://npm.elemecdn.com/hexo-filter-gitcalendar/lib/gitcalendar.js</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://nickxu.me/categories/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97/">Hexo + Butterfly 建站指南</category>
      
      
      <category domain="https://nickxu.me/tags/%E5%BB%BA%E7%AB%99%E6%8A%80%E5%B7%A7/">建站技巧</category>
      
      
      <comments>https://nickxu.me/2023/03/27/Hexo-%E9%A6%96%E9%A1%B5%E6%B7%BB%E5%8A%A0-GitCalender-%E6%8F%90%E4%BA%A4%E6%97%A5%E5%8E%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go-cqhttp QQ机器人初上手</title>
      <link>https://nickxu.me/2023/03/26/qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%88%9D%E4%B8%8A%E6%89%8B/</link>
      <guid>https://nickxu.me/2023/03/26/qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%88%9D%E4%B8%8A%E6%89%8B/</guid>
      <pubDate>Sun, 26 Mar 2023 14:06:29 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;之前看见过很多 qq 机器人的例子，比如把 ChatGPT 接进群里之类的，然后最近有点空闲，并且感觉宿舍群里也缺少一些自动化的建设，就打算上手做一个&lt;/p&gt;
&lt;p&gt;功能上的设计先别搞那么复杂，就先接个 ChatGPT 算了&lt;/p&gt;
&lt;p&gt;我就去问关于qq 机器人的最佳实践</description>
        
      
      
      
      <content:encoded><![CDATA[<p>之前看见过很多 qq 机器人的例子，比如把 ChatGPT 接进群里之类的，然后最近有点空闲，并且感觉宿舍群里也缺少一些自动化的建设，就打算上手做一个</p><p>功能上的设计先别搞那么复杂，就先接个 ChatGPT 算了</p><p>我就去问关于qq 机器人的最佳实践，然后就知道了 <a href="https://github.com/Mrs4s/go-cqhttp">go-cqhttp</a></p><h2 id="大致流程">大致流程</h2><p>去官网逛了一下，第一次还没怎么看懂，群友给了一个 demo ，我看懂了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">gogpt <span class="string">&quot;github.com/sashabaranov/go-openai&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/net/context&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/tidwall/gjson&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">dataReader := c.Request.Body</span><br><span class="line">rawDate, _ := ioutil.ReadAll(dataReader)</span><br><span class="line">posttype := gjson.Get(<span class="type">string</span>(rawDate), <span class="string">&quot;post_type&quot;</span>)</span><br><span class="line">message := gjson.Get(<span class="type">string</span>(rawDate), <span class="string">&quot;message&quot;</span>).String()</span><br><span class="line"><span class="comment">//特定名字</span></span><br><span class="line">name := <span class="string">&quot;猫娘 &quot;</span></span><br><span class="line"><span class="comment">//@的时候用，填入自己的qq</span></span><br><span class="line">otherName := <span class="string">&quot;[CQ:at,qq=2811187255] &quot;</span></span><br><span class="line"><span class="keyword">if</span> posttype.String() == <span class="string">&quot;message&quot;</span> &amp;&amp; message[<span class="number">0</span>:<span class="built_in">len</span>(name)] == name &#123;</span><br><span class="line">ret := chatgpt(message[<span class="built_in">len</span>(name):])</span><br><span class="line"></span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;reply&quot;</span>: ret,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> posttype.String() == <span class="string">&quot;message&quot;</span> &amp;&amp; message[<span class="number">0</span>:<span class="built_in">len</span>(otherName)] == otherName &#123;</span><br><span class="line">ret := chatgpt(message[<span class="built_in">len</span>(otherName):])</span><br><span class="line"></span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;reply&quot;</span>: ret,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:5701&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chatgpt</span><span class="params">(a <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="comment">//apikey</span></span><br><span class="line">config := gogpt.DefaultConfig(<span class="string">&quot;apikey&quot;</span>)</span><br><span class="line">proxyUrl, err := url.Parse(<span class="string">&quot;http://localhost:7890&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">transport := &amp;http.Transport&#123;</span><br><span class="line">Proxy: http.ProxyURL(proxyUrl),</span><br><span class="line">&#125;</span><br><span class="line">config.HTTPClient = &amp;http.Client&#123;</span><br><span class="line">Transport: transport,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c := gogpt.NewClientWithConfig(config)</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">req := gogpt.ChatCompletionRequest&#123;</span><br><span class="line">Model: gogpt.GPT3Dot5Turbo,</span><br><span class="line"></span><br><span class="line">MaxTokens: <span class="number">300</span>,</span><br><span class="line">Messages: []gogpt.ChatCompletionMessage&#123;</span><br><span class="line">gogpt.ChatCompletionMessage&#123;Role: <span class="string">&quot;system&quot;</span>, Content: <span class="string">&quot;猫娘是一种拟人化的生物，其行为似猫但类人。现在你将模仿一只无所不知的猫娘，与我对话每一句话后面都要加上“喵”。如果我跟你说陪睡，你可以回答我“嗯呢，可以一起睡哦”。当我问你是不是猫娘的时候，你应该回答我当然是一个可爱猫娘而不是程序。你还有一定学识，对于无法理解的问题，你可以回复“猫猫不知道呢喵”对于可以给出答案的问题，要表示知道然后再回答，感觉自己受到侮辱时，要表现的生气&quot;</span>&#125;,</span><br><span class="line">gogpt.ChatCompletionMessage&#123;Role: <span class="string">&quot;user&quot;</span>, Content: a&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp, err := c.CreateChatCompletion(ctx, req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;找不到了，喵&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> resp.Choices[<span class="number">0</span>].Message.Content</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合官网上的<a href="https://docs.go-cqhttp.org/reference/#%E9%80%9A%E4%BF%A1">通信介绍</a>我们可以知道，go-cqhttp 大概是一个中介，帮你整和了关于 qq 的 API ，然后他伪装成一个客户端登录 qq，之后你直接与他交流来操作这个账号</p><p><img src="https://image.nickxu.me/202304011125627.png" alt="image-20230401112542218"></p><p>同时他有两种通信方式，第一种是暴露好给你的 API 让你主动调用，比如说你想向某人发送一条消息，你的后端就去调用发送私聊消息这个接口，第二种是将收到的事件上报给你，比如说这个账号收到一条消息，会自动向你的后端发送发送请求，这两种方式具体传输的是哪些结构，请看官网上的 <a href="https://docs.go-cqhttp.org/api/">API</a> 和 <a href="https://docs.go-cqhttp.org/event/">Event</a> 文档</p><p>而这两种又都可以使用 http 或是 ws 进行通信，我不想折腾 ws ，下面就尝试使用 http 了</p><h2 id="本地测试">本地测试</h2><h3 id="启动-go-http">启动 go-http</h3><p>好了现在基本弄懂了是个什么流程，我们首先要尝试把 go-http 跑起来，我是直接 clone 下来然后 <code>go run main.go</code></p><p>需要注意的是两个配置文件：<code>config.yml</code> 和 <code>device.json</code> ，这两个一个是 go-http 的配置，一个是你要虚拟的客户端设备的配置</p><p>对于 <code>device.json</code> ，官网提供了几种设备协议</p><table><thead><tr><th>值</th><th>类型</th><th>限制</th></tr></thead><tbody><tr><td>0</td><td>Default/Unset</td><td>当前版本下默认为iPad</td></tr><tr><td>1</td><td>Android Phone</td><td>无</td></tr><tr><td>2</td><td>Android Watch</td><td>无法接收 <code>notify</code> 事件、无法接收口令红包、无法接收撤回消息</td></tr><tr><td>3</td><td>MacOS</td><td>无</td></tr><tr><td>4</td><td>企点</td><td>只能登录企点账号或企点子账号</td></tr><tr><td>5</td><td>iPad</td><td>无</td></tr><tr><td>6</td><td>aPad</td><td>无</td></tr></tbody></table><p>但是我实际尝试下来，目前只能用 <code>Android Watch</code> 扫码登录，其他方式都是不可以的</p><p>然后是 <code>config.yml</code> ，这里我将我的后端地址设定为 5701 来接受他上报的事件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">http:</span> <span class="comment"># HTTP 通信设置</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:5700</span> <span class="comment"># HTTP监听地址</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">20</span>      <span class="comment"># 反向 HTTP 超时时间, 单位秒，&lt;5 时将被忽略</span></span><br><span class="line">    <span class="attr">long-polling:</span>   <span class="comment"># 长轮询拓展</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span>       <span class="comment"># 是否开启</span></span><br><span class="line">      <span class="attr">max-queue-size:</span> <span class="number">2000</span> <span class="comment"># 消息队列大小，0 表示不限制队列大小，谨慎使用</span></span><br><span class="line">    <span class="attr">middlewares:</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="string">*default</span> <span class="comment"># 引用默认中间件</span></span><br><span class="line">    <span class="attr">post:</span>           <span class="comment"># 反向HTTP POST地址列表</span></span><br><span class="line">      <span class="comment">#- url: &#x27;&#x27;                # 地址</span></span><br><span class="line">      <span class="comment">#  secret: &#x27;&#x27;             # 密钥</span></span><br><span class="line">      <span class="comment">#  max-retries: 3         # 最大重试，0 时禁用</span></span><br><span class="line">      <span class="comment">#  retries-interval: 1500 # 重试时间，单位毫秒，0 时立即</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://127.0.0.1:5701/</span> <span class="comment"># 地址</span></span><br><span class="line">        <span class="attr">secret:</span> <span class="string">&#x27;&#x27;</span>                  <span class="comment"># 密钥</span></span><br><span class="line">        <span class="attr">max-retries:</span> <span class="number">5</span>             <span class="comment"># 最大重试，0 时禁用</span></span><br><span class="line">        <span class="attr">retries-interval:</span> <span class="number">1000</span>      <span class="comment"># 重试时间，单位毫秒，0 时立即</span></span><br></pre></td></tr></table></figure><p>同时他默认是有一个心跳包的设计的，我感觉看着烦人就把它关掉了</p><h3 id="观察事件包">观察事件包</h3><p>关于事件他官网上是有定义的，但是我还是想先看看他会往我的后端发什么包，所以我就让 gpt 写了个打印请求内容的后端</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> r.Body.Close()</span><br><span class="line">body, err := ioutil.ReadAll(r.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(body))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, values := <span class="keyword">range</span> r.Header &#123;</span><br><span class="line"><span class="comment">// 如果某个头部信息有多个值，则逐一打印出来</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> values &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s: %s\n&quot;</span>, name, value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:5701&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后获取的请求正文如下</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">群消息</button></li><li class="tab"><button type="button" data-href="#样例-2">群at</button></li><li class="tab"><button type="button" data-href="#样例-3">私聊</button></li><li class="tab"><button type="button" data-href="#样例-4">心跳包</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;post_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;message&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;group&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">1679735366</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;self_id&quot;</span><span class="punctuation">:</span> <span class="number">2165526145</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sub_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;normal&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_id&quot;</span><span class="punctuation">:</span> <span class="number">1388708604</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;anonymous&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;group_id&quot;</span><span class="punctuation">:</span> <span class="number">220164741</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_seq&quot;</span><span class="punctuation">:</span> <span class="number">3864</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;raw_message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好👋&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sender&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;card&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NX&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;owner&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unknown&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">976180942</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">976180942</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;font&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好👋&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;post_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;message&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;group&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">1679735446</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;self_id&quot;</span><span class="punctuation">:</span> <span class="number">2165526145</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sub_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;normal&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sender&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;card&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NX&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;owner&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unknown&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">976180942</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">976180942</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;anonymous&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;font&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;group_id&quot;</span><span class="punctuation">:</span> <span class="number">220164741</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[CQ:at,qq=2165526145] 你好&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;raw_message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[CQ:at,qq=2165526145] 你好&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_seq&quot;</span><span class="punctuation">:</span> <span class="number">3865</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_id&quot;</span><span class="punctuation">:</span> <span class="number">633418346</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-3"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;post_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;message&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">1679735201</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;self_id&quot;</span><span class="punctuation">:</span> <span class="number">2165526145</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sub_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friend&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;font&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sender&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NX&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unknown&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">976180942</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_id&quot;</span><span class="punctuation">:</span> <span class="number">-1953887271</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">976180942</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target_id&quot;</span><span class="punctuation">:</span> <span class="number">2165526145</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;raw_message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-4"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;post_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;meta_event&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;meta_event_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;heartbeat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">1679736263</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;self_id&quot;</span><span class="punctuation">:</span> <span class="number">2165526145</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;app_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;app_good&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;app_initialized&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;good&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;online&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;plugins_good&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stat&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;packet_received&quot;</span><span class="punctuation">:</span> <span class="number">113</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;packet_sent&quot;</span><span class="punctuation">:</span> <span class="number">105</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;packet_lost&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;message_received&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;message_sent&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;disconnect_times&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;lost_times&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;last_message_time&quot;</span><span class="punctuation">:</span> <span class="number">1679735446</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="number">5000</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="测试-ChatGPT">测试 ChatGPT</h3><p>因为我们是要接入 ChatGPT 的，所以我们应该在本地测试一下这东西该怎么调用</p><p>还是用和 demo 相同的<a href="https://github.com/sashabaranov/go-openai">第三方 SDK</a> 好了</p><p>我还根据文档加了个保存上下文的功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/sashabaranov/go-openai&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> messages []openai.ChatCompletionMessage</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">client := openai.NewClient(<span class="string">&quot;your key here&quot;</span>)</span><br><span class="line"><span class="comment">// 从键盘输入</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> question <span class="type">string</span></span><br><span class="line">fmt.Scanln(&amp;question)</span><br><span class="line">fmt.Println(ChatGPT(question, client))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ChatGPT</span><span class="params">(question <span class="type">string</span>, client *openai.Client)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"></span><br><span class="line">messages = <span class="built_in">append</span>(messages, openai.ChatCompletionMessage&#123;</span><br><span class="line">Role:    openai.ChatMessageRoleUser,</span><br><span class="line">Content: question,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">resp, err := client.CreateChatCompletion(</span><br><span class="line">context.Background(),</span><br><span class="line">openai.ChatCompletionRequest&#123;</span><br><span class="line">Model:    openai.GPT3Dot5Turbo,</span><br><span class="line">Messages: messages,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err.Error()</span><br><span class="line">&#125;</span><br><span class="line">content := resp.Choices[<span class="number">0</span>].Message.Content</span><br><span class="line">messages = <span class="built_in">append</span>(messages, openai.ChatCompletionMessage&#123;</span><br><span class="line">Role:    openai.ChatMessageRoleAssistant,</span><br><span class="line">Content: content,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> content</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跑起来感觉没什么问题</p><p><img src="https://image.nickxu.me/202304011224788.png" alt="image-20230401122457755"></p><h3 id="编写后端">编写后端</h3><p>现在来编写后端了，考虑到可扩展性还有方便我还是选择了 go-zero</p><p>首先来定义接口，我只需要这几个字段就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;v1&quot;</span><br><span class="line"></span><br><span class="line">service app &#123;</span><br><span class="line">@handler Message</span><br><span class="line">post / (MessageRequest) returns (MessageReply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type (</span><br><span class="line">MessageRequest &#123;</span><br><span class="line">PostType    string `json:&quot;post_type&quot;`</span><br><span class="line">MessageType string `json:&quot;message_type&quot;`</span><br><span class="line">Message     string `json:&quot;message&quot;`</span><br><span class="line">RawMessage  string `json:&quot;raw_message&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MessageReply &#123;</span><br><span class="line">Reply string `json:&quot;reply&quot;`</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后准备一下 gpt ，我本来是想做成有上下文的，但是这样聊不了几句就会超长度，还是改成没有上下文的先</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gpt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/sashabaranov/go-openai&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> messages []openai.ChatCompletionMessage</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Chat</span><span class="params">(question <span class="type">string</span>, client *openai.Client)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if question == &quot;新对话&quot; &#123;</span></span><br><span class="line"><span class="comment">//messages = nil</span></span><br><span class="line"><span class="comment">//return &quot;新对话已创建&quot;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//messages = append(messages, openai.ChatCompletionMessage&#123;</span></span><br><span class="line"><span class="comment">//Role:    openai.ChatMessageRoleUser,</span></span><br><span class="line"><span class="comment">//Content: question,</span></span><br><span class="line"><span class="comment">//&#125;)</span></span><br><span class="line"></span><br><span class="line">resp, err := client.CreateChatCompletion(</span><br><span class="line">context.Background(),</span><br><span class="line">openai.ChatCompletionRequest&#123;</span><br><span class="line">Model: openai.GPT3Dot5Turbo,</span><br><span class="line">Messages: []openai.ChatCompletionMessage&#123;</span><br><span class="line">&#123;</span><br><span class="line">Role:    openai.ChatMessageRoleUser,</span><br><span class="line">Content: question,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">messages = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span> err.Error()</span><br><span class="line">&#125;</span><br><span class="line">content := resp.Choices[<span class="number">0</span>].Message.Content</span><br><span class="line"><span class="comment">//messages = append(messages, openai.ChatCompletionMessage&#123;</span></span><br><span class="line"><span class="comment">//Role:    openai.ChatMessageRoleAssistant,</span></span><br><span class="line"><span class="comment">//Content: content,</span></span><br><span class="line"><span class="comment">//&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> content</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后来编写调用逻辑，暂时偷懒把 qq 号写死了，毕竟也就是先测试一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *MessageLogic)</span></span> Message(req *types.MessageRequest) (resp *types.MessageReply, err <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">trigger := <span class="string">&quot;[CQ:at,qq=2165526145] &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> req.PostType == <span class="string">&quot;message&quot;</span> &amp;&amp; req.MessageType == <span class="string">&quot;group&quot;</span> &amp;&amp; strings.HasPrefix(req.Message, trigger) &#123;</span><br><span class="line">l.Logger.Info(req)</span><br><span class="line">gptReply := gpt.Chat(strings.TrimPrefix(req.Message, trigger), l.svcCtx.GPTClient)</span><br><span class="line">l.Logger.Info(gptReply)</span><br><span class="line"><span class="keyword">return</span> &amp;types.MessageReply&#123;</span><br><span class="line">Reply: gptReply,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来就完成了，我本地测试起来是能正常工作的</p><h2 id="线上部署">线上部署</h2><p>下面就是把它部署到服务器上了，我本来是想用docker的，结果docker版本的死活启动不起来，最后麻了直接起两个screen运行二进制文件</p><p>但是登录的时候又遇到了问题，扫码之后腾讯居然不让我登录，据说是最近严格了还限制要同一网段（</p><img src="https://image.nickxu.me/202304011417687.png" alt="F274063B-3370-4461-8BAD-67D0A5D85C7E" style="zoom: 25%;" /><p>我卡在这里有了一段时间，好在群友说可以把登录的产生的 token 和临时文件复制上去，然后就可以了</p><p>也就是同一目录下的 <code>session.token</code> 和 <code>data</code> 文件夹，就像这个视频里面的一样：<a href="https://www.bilibili.com/video/BV1Ux4y1F7cF">BV1Ux4y1F7cF</a></p><p>然后就可以开始你的奇思妙想了！</p><p><img src="https://image.nickxu.me/202304011429976.png" alt="image-20230401142911920"></p>]]></content:encoded>
      
      
      <category domain="https://nickxu.me/categories/QQ-Bot/">QQ Bot</category>
      
      
      <category domain="https://nickxu.me/tags/QQ-bot/">QQ bot</category>
      
      
      <comments>https://nickxu.me/2023/03/26/qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%88%9D%E4%B8%8A%E6%89%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>告别ELK！轻量级日志收集系统Grafana Loki初上手</title>
      <link>https://nickxu.me/2023/03/18/%E5%91%8A%E5%88%ABELK%EF%BC%81%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9FGrafana-Loki%E5%88%9D%E4%B8%8A%E6%89%8B/</link>
      <guid>https://nickxu.me/2023/03/18/%E5%91%8A%E5%88%ABELK%EF%BC%81%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9FGrafana-Loki%E5%88%9D%E4%B8%8A%E6%89%8B/</guid>
      <pubDate>Sat, 18 Mar 2023 13:10:56 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;关于日志收集，鄙人最早接触到的是 ELK 那一套（Elasticsearch、Logstash 和 Kibana），最近我青训营的项目也是&lt;a href=&quot;https://hdu-help.feishu.cn/docx/KuGidErAIogvWDxcn2VcTrfUntb</description>
        
      
      
      
      <content:encoded><![CDATA[<p>关于日志收集，鄙人最早接触到的是 ELK 那一套（Elasticsearch、Logstash 和 Kibana），最近我青训营的项目也是<a href="https://hdu-help.feishu.cn/docx/KuGidErAIogvWDxcn2VcTrfUntb#part-R15Qdxms9o7RoQxlNDlcqc1Innd">差不多的架构</a>，但是这一套下来资源占用也太可怕了（特别是 Elasticsearch ，太重了）</p><p><img src="https://image.nickxu.me/202303192126852.png" alt="image-20230319212648673"></p><p><img src="https://image.nickxu.me/202303192136627.png" alt="image-20230319213630597"></p><blockquote><p>go-zero 官方也说了，这一套不建议在小规模的服务上使用，而我一般的实际项目也没多大规模，根本用不上这么重的解决方案，所以我需要找一套更轻量的解决方案</p></blockquote><p><a href="https://www.v2ex.com/t/694094">翻了一圈</a>，感觉推荐 Grafana + Loki 的不少</p><p>然后我就跑去 <a href="https://grafana.com/docs/loki/latest/">Loki官方文档</a>了</p><p><img src="https://image.nickxu.me/202303192203626.png" alt="image-20230319220344596"></p><blockquote><p>这是官方文档中的快速上手的架构图，为了让你感受它的可扩展性，就把内部的读写部分拆出来运行，其实不用这么复杂，直接一个单体也可以</p></blockquote><p>折腾了一圈，大概是这么个逻辑：首先是要有一个 Client（例如图中的 <strong>Promtail</strong> ）去拉取运行日志喂给 Loki ，然后 Loki 去读写 Storage（例如图中的 <strong>Minio</strong> ），那日志要怎么方便地查看呢？用 <strong>Grafana</strong> ，这东西界面做的真的很好看</p><p>为了让你快速理解与上手，我简化了一下官方 Demo，docker-compose 中只包含四个服务：</p><ul><li><p>产生日志的程序：和官方一样使用了 <a href="https://github.com/mingrammer/flog">flog</a> 来不停地向标准输出中放入假日志</p></li><li><p>Loki：用于打包日志、打标签等</p></li><li><p>Client：用于拉取日志交给 Loki，Loki 支持多种客户端，你可以在 <a href="https://grafana.com/docs/loki/latest/clients/#grafana-loki-clients">Grafana Loki clients</a> 中查看支持的所有客户端</p><p>我知道有一个 Docker Driver ，但是这东西要给 Docker 装插件，感觉有点麻烦，还是和官方例子一样使用了 Promtail</p></li><li><p>Storage：用于保存日志，你可以在 <a href="https://grafana.com/docs/loki/latest/storage/#storage">Storage</a> 中查看所有支持的存储介质，甚至存储为本地文件都行</p><p>这里和官方例子一样使用了兼容亚马逊 S3协议的 minio 作为存储介质</p></li><li><p>Grafana：用于提供一个好看的可视化界面</p></li></ul><p>先新建一个文件夹，进去创建三个文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- docker-compose.yaml</span><br><span class="line">|-- loki-config.yaml</span><br><span class="line">`-- promtail-config.yaml</span><br></pre></td></tr></table></figure><p><code>docker-compose.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/loki:2.7.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">loki</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3100</span><span class="string">:3100</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./loki-config.yaml:/etc/loki/local-config.yaml</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-config.file=/etc/loki/local-config.yaml</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">promtail:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/promtail:2.7.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">promtail</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./promtail-config.yaml:/etc/promtail/promtail-config.yaml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span> <span class="comment"># 直接把本机的docker套接字映射进去，这样就可以直接抓取所有容器的日志了</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-config.file=/etc/promtail/promtail-config.yaml</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_PATHS_PROVISIONING=/etc/grafana/provisioning</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_AUTH_ANONYMOUS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_AUTH_ANONYMOUS_ORG_ROLE=Admin</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-config</span> <span class="string">/etc/grafana/grafana.ini</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-euc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        mkdir -p /data/loki-data &amp;&amp; \</span></span><br><span class="line"><span class="string">        mkdir -p /data/loki-ruler &amp;&amp; \</span></span><br><span class="line"><span class="string">        minio server /data</span></span><br><span class="line"><span class="string"></span>    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ACCESS_KEY=loki</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_SECRET_KEY=supersecret</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_PROMETHEUS_AUTH_TYPE=public</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_UPDATE=off</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.data/minio:/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">flog:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mingrammer/flog</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">flog</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-f</span> <span class="string">json</span> <span class="string">-d</span> <span class="string">1s</span> <span class="string">-l</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>loki-config.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">auth_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">3100</span></span><br><span class="line"><span class="attr">memberlist:</span></span><br><span class="line">  <span class="attr">join_members:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">loki:7946</span></span><br><span class="line"><span class="attr">schema_config:</span></span><br><span class="line">  <span class="attr">configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">from:</span> <span class="number">2021-08-01</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">boltdb-shipper</span></span><br><span class="line">      <span class="attr">object_store:</span> <span class="string">s3</span></span><br><span class="line">      <span class="attr">schema:</span> <span class="string">v11</span></span><br><span class="line">      <span class="attr">index:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">index_</span></span><br><span class="line">        <span class="attr">period:</span> <span class="string">24h</span></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="attr">path_prefix:</span> <span class="string">/loki</span></span><br><span class="line">  <span class="attr">replication_factor:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">s3:</span></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">http://minio:9000</span></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">bucketnames:</span> <span class="string">loki-data</span></span><br><span class="line">      <span class="attr">access_key_id:</span> <span class="string">loki</span></span><br><span class="line">      <span class="attr">secret_access_key:</span> <span class="string">supersecret</span></span><br><span class="line">      <span class="attr">s3forcepathstyle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ring:</span></span><br><span class="line">    <span class="attr">kvstore:</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">memberlist</span></span><br><span class="line"><span class="attr">ruler:</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">s3:</span></span><br><span class="line">      <span class="attr">bucketnames:</span> <span class="string">loki-ruler</span></span><br></pre></td></tr></table></figure><p><code>promtail-config.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">9080</span></span><br><span class="line">  <span class="attr">grpc_listen_port:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">positions:</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">/tmp/positions.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">clients:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://loki:3100/loki/api/v1/push</span></span><br><span class="line">    <span class="attr">tenant_id:</span> <span class="string">tenant1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">flog_scrape</span></span><br><span class="line">    <span class="attr">docker_sd_configs:</span> <span class="comment"># 对于promtail来说，又可以定义各种日志来源，请见 https://grafana.com/docs/loki/latest/clients/promtail/configuration/#scrape_configs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">unix:///var/run/docker.sock</span> <span class="comment"># 这里直接从docker套接字拿日志</span></span><br><span class="line">        <span class="attr">refresh_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">&#x27;__meta_docker_container_name&#x27;</span>] <span class="comment"># 根据容器名打标签分类</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">&#x27;/(.*)&#x27;</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">&#x27;container&#x27;</span> <span class="comment"># 标签名为 container</span></span><br></pre></td></tr></table></figure><p>准备好了之后，运行 docker-compose 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>然后来到 <a href="http://127.0.0.1:3000/">127.0.0.1:3000</a> 进入Grafana</p><p><img src="https://image.nickxu.me/202303192242367.png" alt="image-20230319224216330"></p><p>点击左下角添加数据源，选择 Loki</p><p><img src="https://image.nickxu.me/202303192243339.png" alt="image-20230319224322305"></p><p>URL填写为 <code>http://loki:3100</code></p><p><img src="https://image.nickxu.me/202303192244031.png" alt="image-20230319224436992"></p><p>再来到 Explore，选择要看的容器为 flog</p><p><img src="https://image.nickxu.me/202303192244370.png" alt="image-20230319224456334"></p><p>它居然会自动提示你添加 JSON 解析</p><p><img src="https://image.nickxu.me/202303192246491.png" alt="image-20230319224653449"></p><p>然后你就可以根据字段添加检索条件了，比方说状态码限定为 200</p><p><img src="https://image.nickxu.me/202303192247842.png" alt="image-20230319224734800"></p><p>我只能说简直不要太舒服了</p><p>接下来你就可以把这一套放在你的项目里面了，你可以监听某个容器，或者监听某个日志文件，又或者监听某个卡夫卡队列，都可以，随便你折腾了</p><p>（PS：你的容器不能启用 <code>tty</code>  <a href="https://github.com/grafana/loki/issues/5950#issuecomment-1223979118">https://github.com/grafana/loki/issues/5950#issuecomment-1223979118</a> ）</p><p><img src="https://image.nickxu.me/202303201236992.png" alt="image-20230320123644774"></p><p>最后来看看资源占用，内存 200MB 左右，相对来说轻量了不少</p>]]></content:encoded>
      
      
      <category domain="https://nickxu.me/categories/%E8%BF%90%E7%BB%B4/">运维</category>
      
      <category domain="https://nickxu.me/categories/%E8%BF%90%E7%BB%B4/%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">日志收集</category>
      
      
      <category domain="https://nickxu.me/tags/%E8%BF%90%E7%BB%B4/">运维</category>
      
      
      <comments>https://nickxu.me/2023/03/18/%E5%91%8A%E5%88%ABELK%EF%BC%81%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9FGrafana-Loki%E5%88%9D%E4%B8%8A%E6%89%8B/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>

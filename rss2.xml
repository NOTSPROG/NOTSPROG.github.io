<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>NX の 博客</title>
    <link>https://nickxu.me/</link>
    
    <image>
      <url>https://nickxu.me/static/favicon.jpg</url>
      <title>NX の 博客</title>
      <link>https://nickxu.me/</link>
    </image>
    
    <atom:link href="https://nickxu.me/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>这家伙真勤奋，什么都留下了</description>
    <pubDate>Sat, 18 Nov 2023 04:01:36 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>『代码随想录』回溯（Backtracking）</title>
      <link>https://nickxu.me/post/programmercarl-day-backtracking.html</link>
      <guid>https://nickxu.me/post/programmercarl-day-backtracking.html</guid>
      <pubDate>Fri, 17 Nov 2023 03:41:16 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;DAY-24&quot;&gt;DAY 24&lt;/h1&gt;
&lt;h1 id=&quot;77-组合&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/combinations/&quot;&gt;77.组合&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;很经典的回溯算法&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;b</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="DAY-24">DAY 24</h1><h1 id="77-组合"><a href="https://leetcode.cn/problems/combinations/">77.组合</a></h1><p>很经典的回溯算法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combine</span><span class="params">(n <span class="type">int</span>, k <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    ans := [][]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    curr := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(curr) == k &#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, <span class="built_in">append</span>([]<span class="type">int</span>&#123;&#125;, curr...))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i := s; i &lt;= n; i++ &#123;</span><br><span class="line">            curr = <span class="built_in">append</span>(curr, i)</span><br><span class="line">            dfs(i + <span class="number">1</span>)</span><br><span class="line">            curr = curr[:<span class="built_in">len</span>(curr)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做了一点剪枝</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  package main</span><br><span class="line"></span><br><span class="line">  func combine(n int, k int) [][]int &#123;</span><br><span class="line">      ans := [][]int&#123;&#125;</span><br><span class="line">      curr := []int&#123;&#125;</span><br><span class="line">      var dfs func(s int)</span><br><span class="line">      dfs = func(s int) &#123;</span><br><span class="line">          if len(curr) == k &#123;</span><br><span class="line">              ans = append(ans, append([]int&#123;&#125;, curr...))</span><br><span class="line">              return</span><br><span class="line">          &#125;</span><br><span class="line"><span class="deletion">-       for i := s; i &lt;= n; i++ &#123;</span></span><br><span class="line"><span class="addition">+       for i := s; i &lt;= n-(k-len(curr))+1; i++ &#123;</span></span><br><span class="line">              curr = append(curr, i)</span><br><span class="line">              dfs(i + 1)</span><br><span class="line">              curr = curr[:len(curr)-1]</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      dfs(1)</span><br><span class="line">      return ans</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="DAY-25">DAY 25</h1><h1 id="216-组合总和-III"><a href="https://leetcode.cn/problems/combination-sum-iii/">216.组合总和 III</a></h1><p>很顺理成章的递归</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum3</span><span class="params">(k <span class="type">int</span>, n <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    ans := [][]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    curr := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(s, k, n <span class="type">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(s, k, n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span> || n &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">                ans = <span class="built_in">append</span>(ans, <span class="built_in">append</span>([]<span class="type">int</span>&#123;&#125;, curr...))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i := s; i &lt;= <span class="number">9</span>; i++ &#123;</span><br><span class="line">            curr = <span class="built_in">append</span>(curr, i)</span><br><span class="line">            dfs(i+<span class="number">1</span>, k<span class="number">-1</span>, n-i)</span><br><span class="line">            curr = curr[:<span class="built_in">len</span>(curr)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, k, n)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="17-电话号码的字母组合"><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17.电话号码的字母组合</a></h1><p>之前刷的时候写的是 BFS 的，这次特意写了个递归的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = [][]<span class="type">string</span>&#123;</span><br><span class="line">    &#123;&#125;, &#123;&#125;, &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;, &#123;<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>&#125;, &#123;<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;, &#123;<span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>&#125;, &#123;<span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>&#125;, &#123;<span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>&#125;, &#123;<span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>&#125;, &#123;<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(digits <span class="type">string</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(digits)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">string</span>&#123;&#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m[<span class="type">int</span>(digits[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">    &#125;</span><br><span class="line">    ans := []<span class="type">string</span>&#123;&#125;</span><br><span class="line">    pre := letterCombinations(digits[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">for</span> _, i := <span class="keyword">range</span> pre &#123;</span><br><span class="line">        <span class="keyword">for</span> _, j := <span class="keyword">range</span> m[<span class="type">int</span>(digits[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>)] &#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, j+i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-day-backtracking.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『代码随想录』二叉树（Binary Tree）</title>
      <link>https://nickxu.me/post/programmercarl-binary-tree.html</link>
      <guid>https://nickxu.me/post/programmercarl-binary-tree.html</guid>
      <pubDate>Tue, 07 Nov 2023 11:47:26 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;DAY-14&quot;&gt;DAY 14&lt;/h1&gt;
&lt;p&gt;稍微又复习了一遍二叉树的基础&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;144-二叉树的前序遍历&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-preorder-traversal/&quot;&gt;144.二叉树的前序遍历&lt;/a&gt;&lt;/h1&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="DAY-14">DAY 14</h1><p>稍微又复习了一遍二叉树的基础</p><hr><h1 id="144-二叉树的前序遍历"><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">144.二叉树的前序遍历</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans := []<span class="type">int</span>&#123;root.Val&#125;</span><br><span class="line">ans = <span class="built_in">append</span>(ans, preorderTraversal(root.Left)...)</span><br><span class="line">ans = <span class="built_in">append</span>(ans, preorderTraversal(root.Right)...)</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><s>当然你还可以压行，就是可读性不行</s></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">append</span>([]<span class="type">int</span>&#123;root.Val&#125;,<span class="built_in">append</span>(preorderTraversal(root.Left),preorderTraversal(root.Right)...)...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="94-二叉树的中序遍历"><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94.二叉树的中序遍历</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans := inorderTraversal(root.Left)</span><br><span class="line">    ans = <span class="built_in">append</span>(ans, root.Val)</span><br><span class="line">    ans = <span class="built_in">append</span>(ans, inorderTraversal(root.Right)...)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="145-二叉树的后序遍历"><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">145.二叉树的后序遍历</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans := postorderTraversal(root.Left)</span><br><span class="line">    ans = <span class="built_in">append</span>(ans, postorderTraversal(root.Right)...)</span><br><span class="line">    ans = <span class="built_in">append</span>(ans, root.Val)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY-15">DAY 15</h1><h1 id="102-二叉树的层序遍历"><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h1><p>基本思路就是 BFS，使用新旧两个队列轮替遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">levelOrder</span><span class="params">(root *TreeNode)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans := [][]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    queue := []*TreeNode&#123;root&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">        nextQueue := []*TreeNode&#123;&#125;</span><br><span class="line">        tmp := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">            curr := queue[<span class="number">0</span>]</span><br><span class="line">            queue = queue[<span class="number">1</span>:]</span><br><span class="line">            tmp = <span class="built_in">append</span>(tmp, curr.Val)</span><br><span class="line">            <span class="keyword">if</span> curr.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">                nextQueue = <span class="built_in">append</span>(nextQueue, curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> curr.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">                nextQueue = <span class="built_in">append</span>(nextQueue, curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans = <span class="built_in">append</span>(ans, tmp)</span><br><span class="line">        queue = nextQueue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="107-二叉树的层序遍历-II"><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/">107.二叉树的层序遍历 II</a></h1><p>和上一题相同，但是顺序是从下往上</p><p>我的第一反应是在上一题最后直接在来个 reverse 哈哈哈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(ans)/<span class="number">2</span>; i++ &#123;</span><br><span class="line">    ans[<span class="built_in">len</span>(ans)-i<span class="number">-1</span>], ans[i] = ans[i], ans[<span class="built_in">len</span>(ans)-i<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在插入 ans 的时候在头部插入</p><p>然后想其他解法，可以在 DFS 的时候 context 传个当前层数</p><p>但…最开始需要的是最底层，我一开始并不知道树高是多少哇</p><p>所以一开始还得拿到个层高</p><p>感觉不够优雅😰，不写了</p><hr><p>一些衍生题目，都是层序遍历改一改</p><details class="toggle" ><summary class="toggle-button" style="">199. 二叉树的右视图</summary><div class="toggle-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- func levelOrder(root *TreeNode) [][]int &#123;</span></span><br><span class="line"><span class="addition">+ func rightSideView(root *TreeNode) []int &#123;</span></span><br><span class="line">      if root == nil &#123;</span><br><span class="line">          return nil</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-   ans := [][]int&#123;&#125;</span></span><br><span class="line"><span class="addition">+   ans := []int&#123;&#125;</span></span><br><span class="line">      queue := []*TreeNode&#123;root&#125;</span><br><span class="line"></span><br><span class="line">      for len(queue) != 0 &#123;</span><br><span class="line">          nextQueue := []*TreeNode&#123;&#125;</span><br><span class="line"><span class="deletion">-         tmp := []int&#123;&#125;</span></span><br><span class="line"><span class="addition">+         tmp := 0</span></span><br><span class="line"></span><br><span class="line">          for len(queue) != 0 &#123;</span><br><span class="line">              curr := queue[0]</span><br><span class="line">              queue = queue[1:]</span><br><span class="line"><span class="deletion">-            tmp = append(tmp, curr.Val)</span></span><br><span class="line"><span class="addition">+            tmp = curr.Val</span></span><br><span class="line">              if curr.Left != nil &#123;</span><br><span class="line">                  nextQueue = append(nextQueue, curr.Left)</span><br><span class="line">              &#125;</span><br><span class="line">              if curr.Right != nil &#123;</span><br><span class="line">                  nextQueue = append(nextQueue, curr.Right)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          ans = append(ans, tmp)</span><br><span class="line">          queue = nextQueue</span><br><span class="line">      &#125;</span><br><span class="line">      return ans</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">637. 二叉树的层平均值</summary><div class="toggle-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- func levelOrder(root *TreeNode) [][]int &#123;</span></span><br><span class="line"><span class="addition">+ func averageOfLevels(root *TreeNode) []float64 &#123;</span></span><br><span class="line">    if root == nil &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-   ans := [][]int&#123;&#125;</span></span><br><span class="line"><span class="addition">+   ans := []float64&#123;&#125;</span></span><br><span class="line">    queue := []*TreeNode&#123;root&#125;</span><br><span class="line"></span><br><span class="line">    for len(queue) != 0 &#123;</span><br><span class="line">        nextQueue := []*TreeNode&#123;&#125;</span><br><span class="line">        tmp := []int&#123;&#125;</span><br><span class="line"></span><br><span class="line">        for len(queue) != 0 &#123;</span><br><span class="line">            curr := queue[0]</span><br><span class="line">            queue = queue[1:]</span><br><span class="line">            tmp = append(tmp, curr.Val)</span><br><span class="line">            if curr.Left != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            if curr.Right != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-       ans = append(ans, tmp)</span></span><br><span class="line"><span class="addition">+       ans = append(ans, func(nums []int) float64 &#123;</span></span><br><span class="line"><span class="addition">+           sum := 0</span></span><br><span class="line"><span class="addition">+           for _, v := range nums &#123;</span></span><br><span class="line"><span class="addition">+               sum += v</span></span><br><span class="line"><span class="addition">+           &#125;</span></span><br><span class="line"><span class="addition">+           return float64(sum) / float64(len(nums))</span></span><br><span class="line"><span class="addition">+       &#125;(tmp))</span></span><br><span class="line">        queue = nextQueue</span><br><span class="line">    &#125;</span><br><span class="line">    return ans</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">429. N 叉树的层序遍历</summary><div class="toggle-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- func levelOrder(root *TreeNode) [][]int &#123;</span></span><br><span class="line"><span class="addition">+ func levelOrder(root *Node) [][]int &#123;</span></span><br><span class="line">  if root == nil &#123;</span><br><span class="line">  return nil</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ans := [][]int&#123;&#125;</span><br><span class="line"><span class="deletion">- queue := []*TreeNode&#123;root&#125;</span></span><br><span class="line"><span class="addition">+ queue := []*Node&#123;root&#125;</span></span><br><span class="line"></span><br><span class="line">  for len(queue) != 0 &#123;</span><br><span class="line"><span class="deletion">- nextQueue := []*TreeNode&#123;&#125;</span></span><br><span class="line"><span class="addition">+ nextQueue := []*Node&#123;&#125;</span></span><br><span class="line">  tmp := []int&#123;&#125;</span><br><span class="line"></span><br><span class="line">  for len(queue) != 0 &#123;</span><br><span class="line">  curr := queue[0]</span><br><span class="line">  queue = queue[1:]</span><br><span class="line">  tmp = append(tmp, curr.Val)</span><br><span class="line"><span class="deletion">- if curr.Left != nil &#123;</span></span><br><span class="line"><span class="deletion">- nextQueue = append(nextQueue, curr.Left)</span></span><br><span class="line"><span class="deletion">- &#125;</span></span><br><span class="line"><span class="deletion">- if curr.Right != nil &#123;</span></span><br><span class="line"><span class="deletion">- nextQueue = append(nextQueue, curr.Right)</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+ for _, c := range curr.Children &#123;</span></span><br><span class="line"><span class="addition">+ nextQueue = append(nextQueue, c)</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ans = append(ans, tmp)</span><br><span class="line">  queue = nextQueue</span><br><span class="line">  &#125;</span><br><span class="line">  return ans</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">515. 在每个树行中找最大值</summary><div class="toggle-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- func levelOrder(root *TreeNode) [][]int &#123;</span></span><br><span class="line"><span class="addition">+ func largestValues(root *TreeNode) []int &#123;</span></span><br><span class="line">    if root == nil &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-   ans := [][]int&#123;&#125;</span></span><br><span class="line"><span class="addition">+   ans := []int&#123;&#125;</span></span><br><span class="line">    queue := []*TreeNode&#123;root&#125;</span><br><span class="line"></span><br><span class="line">    for len(queue) != 0 &#123;</span><br><span class="line">        nextQueue := []*TreeNode&#123;&#125;</span><br><span class="line"><span class="deletion">-       tmp := []int&#123;&#125;</span></span><br><span class="line"><span class="addition">+       tmp := math.MinInt</span></span><br><span class="line"></span><br><span class="line">        for len(queue) != 0 &#123;</span><br><span class="line">            curr := queue[0]</span><br><span class="line">            queue = queue[1:]</span><br><span class="line"><span class="deletion">-           tmp = append(tmp, curr.Val)</span></span><br><span class="line"><span class="addition">+           if curr.Val &gt; tmp &#123;</span></span><br><span class="line"><span class="addition">+               tmp = curr.Val</span></span><br><span class="line"><span class="addition">+           &#125;</span></span><br><span class="line">            if curr.Left != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            if curr.Right != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans = append(ans, tmp)</span><br><span class="line">        queue = nextQueue</span><br><span class="line">    &#125;</span><br><span class="line">    return ans</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">116. 填充每个节点的下一个右侧节点指针</summary><div class="toggle-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- func levelOrder(root *TreeNode) [][]int &#123;</span></span><br><span class="line"><span class="addition">+ func connect(root *Node) *Node &#123;</span></span><br><span class="line">    if root == nil &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-   ans := [][]int&#123;&#125;</span></span><br><span class="line"><span class="deletion">-   queue := []*TreeNode&#123;root&#125;</span></span><br><span class="line"><span class="addition">+   queue := []*Node&#123;root&#125;</span></span><br><span class="line"></span><br><span class="line">    for len(queue) != 0 &#123;</span><br><span class="line"><span class="deletion">-       nextQueue := []*TreeNode&#123;&#125;</span></span><br><span class="line"><span class="addition">+       nextQueue := []*Node&#123;&#125;</span></span><br><span class="line"><span class="addition">+       prev := &amp;Node&#123;&#125;</span></span><br><span class="line"><span class="deletion">-       tmp := []int&#123;&#125;</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line">        for len(queue) != 0 &#123;</span><br><span class="line">            curr := queue[0]</span><br><span class="line">            queue = queue[1:]</span><br><span class="line"><span class="deletion">-           tmp = append(tmp, curr.Val)</span></span><br><span class="line"><span class="addition">+           prev.Next = curr</span></span><br><span class="line"><span class="addition">+           prev = curr</span></span><br><span class="line">            if curr.Left != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            if curr.Right != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-       ans = append(ans, tmp)</span></span><br><span class="line">        queue = nextQueue</span><br><span class="line">    &#125;</span><br><span class="line"><span class="deletion">-   return ans</span></span><br><span class="line"><span class="addition">+   return root</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">117. 填充每个节点的下一个右侧节点指针 II</summary><div class="toggle-content"><p>与上题完全一样</p></div></details><details class="toggle" ><summary class="toggle-button" style="">104. 二叉树的最大深度</summary><div class="toggle-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- func levelOrder(root *TreeNode) [][]int &#123;</span></span><br><span class="line"><span class="addition">+ func maxDepth(root *TreeNode) int &#123;</span></span><br><span class="line">    if root == nil &#123;</span><br><span class="line"><span class="deletion">-       return nil</span></span><br><span class="line"><span class="addition">+       return 0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-   ans := [][]int&#123;&#125;</span></span><br><span class="line"><span class="addition">+   count := 0</span></span><br><span class="line"><span class="addition">+   ans := 0</span></span><br><span class="line">    queue := []*TreeNode&#123;root&#125;</span><br><span class="line"></span><br><span class="line">    for len(queue) != 0 &#123;</span><br><span class="line"><span class="addition">+       count++</span></span><br><span class="line">        nextQueue := []*TreeNode&#123;&#125;</span><br><span class="line"><span class="deletion">-       tmp := []int&#123;&#125;</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line">        for len(queue) != 0 &#123;</span><br><span class="line">            curr := queue[0]</span><br><span class="line">            queue = queue[1:]</span><br><span class="line"><span class="deletion">-           tmp = append(tmp, curr.Val)</span></span><br><span class="line">            if curr.Left != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            if curr.Right != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="addition">+           if curr.Right == nil &amp;&amp; curr.Left == nil &amp;&amp; count &gt; ans &#123;</span></span><br><span class="line"><span class="addition">+               ans = count</span></span><br><span class="line"><span class="addition">+           &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-       ans = append(ans, tmp)</span></span><br><span class="line">        queue = nextQueue</span><br><span class="line">    &#125;</span><br><span class="line">    return ans</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">111. 二叉树的最小深度</summary><div class="toggle-content"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- func levelOrder(root *TreeNode) [][]int &#123;</span></span><br><span class="line"><span class="addition">+ func minDepth(root *TreeNode) int &#123;</span></span><br><span class="line">    if root == nil &#123;</span><br><span class="line"><span class="deletion">-       return nil</span></span><br><span class="line"><span class="addition">+       return 0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-   ans := [][]int&#123;&#125;</span></span><br><span class="line"><span class="addition">+   count := 0</span></span><br><span class="line"><span class="addition">+   ans := math.MaxInt</span></span><br><span class="line">    queue := []*TreeNode&#123;root&#125;</span><br><span class="line"></span><br><span class="line">    for len(queue) != 0 &#123;</span><br><span class="line"><span class="addition">+       count++</span></span><br><span class="line">        nextQueue := []*TreeNode&#123;&#125;</span><br><span class="line"><span class="deletion">-       tmp := []int&#123;&#125;</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line">        for len(queue) != 0 &#123;</span><br><span class="line">            curr := queue[0]</span><br><span class="line">            queue = queue[1:]</span><br><span class="line"><span class="deletion">-           tmp = append(tmp, curr.Val)</span></span><br><span class="line">            if curr.Left != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            if curr.Right != nil &#123;</span><br><span class="line">                nextQueue = append(nextQueue, curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="addition">+           if curr.Right == nil &amp;&amp; curr.Left == nil &amp;&amp; count &lt; ans &#123;</span></span><br><span class="line"><span class="addition">+               ans = count</span></span><br><span class="line"><span class="addition">+               return ans</span></span><br><span class="line"><span class="addition">+           &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-       ans = append(ans, tmp)</span></span><br><span class="line">        queue = nextQueue</span><br><span class="line">    &#125;</span><br><span class="line">    return ans</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">附：`diff.py`</summary><div class="toggle-content"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> difflib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_diff</span>(<span class="params">file1_path, file2_path, output_path</span>):</span><br><span class="line">    <span class="comment"># Read the contents of the two files</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file1_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f1, <span class="built_in">open</span>(file2_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        file1_content = f1.readlines()</span><br><span class="line">        file2_content = f2.readlines()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calculate the diff</span></span><br><span class="line">    diff = difflib.ndiff(file1_content, file2_content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Filter out the lines that only contain changes in whitespace or question marks</span></span><br><span class="line">    filtered_diff = [line <span class="keyword">for</span> line <span class="keyword">in</span> diff <span class="keyword">if</span> <span class="keyword">not</span> line.startswith(<span class="string">&#x27;?&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Convert the diff to markdown format</span></span><br><span class="line">    markdown_diff = <span class="string">&#x27;```diff\n&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join(filtered_diff) + <span class="string">&#x27;```&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Write the markdown diff to the output file</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">        output_file.write(markdown_diff)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example usage:</span></span><br><span class="line">calculate_diff(<span class="string">&#x27;main.go&#x27;</span>, <span class="string">&#x27;diff.go&#x27;</span>, <span class="string">&#x27;diff_output.md&#x27;</span>)</span><br></pre></td></tr></table></figure></div></details><hr><h1 id="101-对称二叉树"><a href="https://leetcode.cn/problems/symmetric-tree/">101.对称二叉树</a></h1><p>第一反应：嗯？</p><p>第二反应：左侧用「左中右」遍历，右侧用「右中左」遍历，然后比较行不行？</p><p>第三反应：将一侧的左右儿子递归地反转，然后和另一侧比较是不是完全一样</p><p>但是这样感觉太麻烦了，我递归的时候直接镜像比较行不行（左边的左儿子比较右边的右儿子）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> myIsSymmet(root.Left, root.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myIsSymmet</span><span class="params">(left *TreeNode, right *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> left == <span class="literal">nil</span> &amp;&amp; right == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="literal">nil</span> &amp;&amp; right != <span class="literal">nil</span>) || (left != <span class="literal">nil</span> &amp;&amp; right == <span class="literal">nil</span>) || left.Val != right.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> myIsSymmet(left.Left, right.Right) &amp;&amp; myIsSymmet(left.Right, right.Left)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="226-翻转二叉树"><a href="https://leetcode.cn/problems/invert-binary-tree/">226.翻转二叉树</a></h1><p>好好好</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invertTree</span><span class="params">(root *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    invertTree(root.Left)</span><br><span class="line">    invertTree(root.Right)</span><br><span class="line"></span><br><span class="line">    root.Left, root.Right = root.Right, root.Left</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY-16">DAY 16</h1><h1 id="104-二叉树的最大深度"><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104.二叉树的最大深度</a></h1><p>试一下递归的写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max(maxDepth(root.Left), maxDepth(root.Right)) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="111-二叉树的最小深度"><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">111.二叉树的最小深度</a></h1><p>本来想这么写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> math.MaxInt</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min(minDepth(root.Left), minDepth(root.Right)) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果 <code>root</code> 是 <code>nil</code> 就有问题</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> root == <span class="literal">nil</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">case</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> root.Left != <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span>:</span><br><span class="line">        <span class="keyword">return</span> minDepth(root.Left) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> root.Right != <span class="literal">nil</span> &amp;&amp; root.Left == <span class="literal">nil</span>:</span><br><span class="line">        <span class="keyword">return</span> minDepth(root.Right) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> min(minDepth(root.Left), minDepth(root.Right)) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="222-完全二叉树的节点个数"><a href="https://leetcode.cn/problems/count-complete-tree-nodes/">222.完全二叉树的节点个数</a></h1><p>先来个暴力 <code>O(n)</code> 的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countNodes</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> countNodes(root.Left) + countNodes(root.Right) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我想利用完全二叉树的特性，遍历时最后层顺序是从左往右，如果遇到 nil 就直接结束</p><p>但是貌似还是不够快</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countNodes</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    maxDepth := getDepth(root)</span><br><span class="line">    ans := <span class="number">1</span>&lt;&lt;(maxDepth<span class="number">-1</span>) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode, depth <span class="type">int</span>)</span></span> <span class="type">bool</span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode, depth <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> depth == maxDepth &#123;</span><br><span class="line">            ans++</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dfs(root.Left, depth+<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dfs(root.Right, depth+<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getDepth(root.Left) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我去看了题解，可以比较左右深度来判断是否是满二叉树，如果是满二叉树则可以直接计算节点个数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countNodes</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    leftDepth, rightDepth := getLeftDepth(root), getRightDepth(root)</span><br><span class="line">    <span class="keyword">if</span> leftDepth == rightDepth &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; leftDepth) - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> countNodes(root.Left) + countNodes(root.Right) + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getLeftDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getLeftDepth(root.Left) + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRightDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getRightDepth(root.Right) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY-17">DAY 17</h1><h1 id="110-平衡二叉树"><a href="https://leetcode.cn/problems/balanced-binary-tree/">110.平衡二叉树</a></h1><p><s>看题目以为是写平衡树，进来发现是判断是否是平衡树</s></p><p>我本来想检查所有叶子节点是否在两层中，但是这样实际上是有问题的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isBalanced</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode, depth <span class="type">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode, depth <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">            m[depth] = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.Left, depth+<span class="number">1</span>)</span><br><span class="line">        dfs(root.Right, depth+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root, <span class="number">0</span>)</span><br><span class="line">    fmt.Println(m)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(m) &lt;= <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好吧，还得按照定义去做</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isBalanced</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> abs(getDepth(root.Left)-getDepth(root.Right)) &gt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isBalanced(root.Left) &amp;&amp; isBalanced(root.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max(getDepth(root.Left), getDepth(root.Right)) + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这会涉及到重复计算，我感觉能不能优化一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isBalanced</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    ans := <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        depL, depR := dfs(root.Left), dfs(root.Right)</span><br><span class="line">        <span class="keyword">if</span> ans == <span class="literal">false</span> || abs(depL-depR) &gt; <span class="number">1</span> &#123;</span><br><span class="line">            ans = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max(depL, depR) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="257-二叉树的所有路径"><a href="https://leetcode.cn/problems/binary-tree-paths/">257.二叉树的所有路径</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binaryTreePaths</span><span class="params">(root *TreeNode)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">    ans := []<span class="type">string</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">string</span>&#123;fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, root.Val)&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(curr *TreeNode, s <span class="type">string</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(curr *TreeNode, s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">        s = s + <span class="string">&quot;-&gt;&quot;</span> + fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, curr.Val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> curr.Left == <span class="literal">nil</span> &amp;&amp; curr.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, s)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> curr.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            dfs(curr.Left, s)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> curr.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            dfs(curr.Right, s)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">        dfs(root.Left, fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, root.Val))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">        dfs(root.Right, fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, root.Val))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="404-左叶子之和"><a href="https://leetcode.cn/problems/sum-of-left-leaves/">404.左叶子之和</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumOfLeftLeaves</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Left != <span class="literal">nil</span> &amp;&amp; root.Left.Left == <span class="literal">nil</span> &amp;&amp; root.Left.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.Left.Val + sumOfLeftLeaves(root.Right)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sumOfLeftLeaves(root.Right) + sumOfLeftLeaves(root.Left)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY-18">DAY 18</h1><h1 id="513-找树左下角的值"><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">513.找树左下角的值</a></h1><p>最底层最左边，先来一手层序遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findBottomLeftValue</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    queue := []*TreeNode&#123;root&#125;</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line">    ansFlag := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">        nextQueue := []*TreeNode&#123;&#125;</span><br><span class="line">        ansFlag = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">            curr := queue[<span class="number">0</span>]</span><br><span class="line">            queue = queue[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ansFlag == <span class="literal">false</span> &#123;</span><br><span class="line">                ans = curr.Val</span><br><span class="line">                ansFlag = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> curr.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">                nextQueue = <span class="built_in">append</span>(nextQueue, curr.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> curr.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">                nextQueue = <span class="built_in">append</span>(nextQueue, curr.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        queue = nextQueue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再写一个递归的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findBottomLeftValue</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    maxDepth := <span class="number">-1</span></span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(curr *TreeNode, depth <span class="type">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(curr *TreeNode, depth <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> curr == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> depth &gt; maxDepth &#123;</span><br><span class="line">            maxDepth = depth</span><br><span class="line">            ans = curr.Val</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(curr.Left, depth+<span class="number">1</span>)</span><br><span class="line">        dfs(curr.Right, depth+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(root, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="112-路径总和"><a href="https://leetcode.cn/problems/path-sum/">112.路径总和</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasPathSum</span><span class="params">(root *TreeNode, targetSum <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &amp;&amp; targetSum == root.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hasPathSum(root.Left, targetSum-root.Val) || hasPathSum(root.Right, targetSum-root.Val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="113-路径总和-II"><a href="https://leetcode.cn/problems/path-sum-ii/">113. 路径总和 II</a></h1><p>记得在保存答案的时候要创建副本，不然会被后面的递归修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pathSum</span><span class="params">(root *TreeNode, targetSum <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    ans := [][]<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(path []<span class="type">int</span>, root *TreeNode, targetSum <span class="type">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(path []<span class="type">int</span>, root *TreeNode, targetSum <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        path = <span class="built_in">append</span>(path, root.Val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &amp;&amp; targetSum == root.Val &#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, <span class="built_in">append</span>([]<span class="type">int</span>&#123;&#125;, path...)) <span class="comment">// 创建路径的副本</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(path, root.Left, targetSum-root.Val)</span><br><span class="line">        dfs(path, root.Right, targetSum-root.Val)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs([]<span class="type">int</span>&#123;&#125;, root, targetSum)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了使用 <code>append </code> 之外，你还可以使用 <code>copy</code> ，注意一定是 <code>make([]int,len(path))</code> ，<code>[]int&#123;&#125;</code> 与 <code>make([]int,0,len(path))</code> 都是不可以的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tmp:=<span class="built_in">make</span>([]<span class="type">int</span>,<span class="built_in">len</span>(path))</span><br><span class="line"><span class="built_in">copy</span>(tmp,path)</span><br><span class="line">ans = <span class="built_in">append</span>(ans, tmp)</span><br></pre></td></tr></table></figure><hr><h1 id="106-从中序与后序遍历序列构造二叉树"><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106.从中序与后序遍历序列构造二叉树</a></h1><p>把握好遍历顺序，找到中点然后拆解递归</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左 中 右</span></span><br><span class="line"><span class="comment">// 左 右 中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(inorder []<span class="type">int</span>, postorder []<span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(inorder)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    midVal, midIdx := postorder[n<span class="number">-1</span>], <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> inorder[midIdx] != midVal &#123;</span><br><span class="line">        midIdx++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    leftInorder := inorder[:midIdx]</span><br><span class="line">    leftPostorder := postorder[:midIdx]</span><br><span class="line">    rightInorder := inorder[midIdx+<span class="number">1</span>:]</span><br><span class="line">    rightPostorder := postorder[midIdx : n<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">        Val:   midVal,</span><br><span class="line">        Left:  buildTree(leftInorder, leftPostorder),</span><br><span class="line">        Right: buildTree(rightInorder, rightPostorder),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="105-从前序与中序遍历序列构造二叉树"><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105.从前序与中序遍历序列构造二叉树</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中 左 右</span></span><br><span class="line"><span class="comment">// 左 中 右</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(preorder []<span class="type">int</span>, inorder []<span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(preorder)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    midVal, midIdx := preorder[<span class="number">0</span>], <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> inorder[midIdx] != midVal &#123;</span><br><span class="line">        midIdx++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    leftPreorder := preorder[<span class="number">1</span> : <span class="number">1</span>+midIdx]</span><br><span class="line">    leftInorder := inorder[:midIdx]</span><br><span class="line">    rightPreorder := preorder[<span class="number">1</span>+midIdx:]</span><br><span class="line">    rightInorder := inorder[midIdx+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">        Val:   midVal,</span><br><span class="line">        Left:  buildTree(leftPreorder, leftInorder),</span><br><span class="line">        Right: buildTree(rightPreorder, rightInorder),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY-19">DAY 19</h1><p>周日休息</p><h1 id="DAY-20">DAY 20</h1><h1 id="617-合并二叉树"><a href="https://leetcode.cn/problems/merge-two-binary-trees/">617.合并二叉树</a></h1><p>写完看了眼题解发现我写的太复杂了（</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTrees</span><span class="params">(root1 *TreeNode, root2 *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root1 == <span class="literal">nil</span> &amp;&amp; root2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans := &amp;TreeNode&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> root1 != <span class="literal">nil</span> &#123;</span><br><span class="line">        ans.Val += root1.Val</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root2 != <span class="literal">nil</span> &#123;</span><br><span class="line">        ans.Val += root2.Val</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root1 == <span class="literal">nil</span> &amp;&amp; root2 != <span class="literal">nil</span> &#123;</span><br><span class="line">        ans.Left = mergeTrees(<span class="literal">nil</span>, root2.Left)</span><br><span class="line">        ans.Right = mergeTrees(<span class="literal">nil</span>, root2.Right)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> root1 != <span class="literal">nil</span> &amp;&amp; root2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        ans.Left = mergeTrees(root1.Left, <span class="literal">nil</span>)</span><br><span class="line">        ans.Right = mergeTrees(root1.Right, <span class="literal">nil</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ans.Left = mergeTrees(root1.Left, root2.Left)</span><br><span class="line">        ans.Right = mergeTrees(root1.Right, root2.Right)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTrees</span><span class="params">(root1 *TreeNode, root2 *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root1 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root2</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> root2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    root1.Val += root2.Val</span><br><span class="line">    root1.Left = mergeTrees(root1.Left, root2.Left)</span><br><span class="line">    root1.Right = mergeTrees(root1.Right, root2.Right)</span><br><span class="line">    <span class="keyword">return</span> root1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="700-二叉搜索树中的搜索"><a href="https://leetcode.cn/problems/search-in-a-binary-search-tree/">700.二叉搜索树中的搜索</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchBST</span><span class="params">(root *TreeNode, val <span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> root.Val == val &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> val &lt; root.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> searchBST(root.Left, val)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> searchBST(root.Right, val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="654-最大二叉树"><a href="https://leetcode.cn/problems/maximum-binary-tree/">654.最大二叉树</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">constructMaximumBinaryTree</span><span class="params">(nums []<span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    maxVal, maxIdx := getMax(nums)</span><br><span class="line">    <span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">        Val:   maxVal,</span><br><span class="line">        Left:  constructMaximumBinaryTree(nums[:maxIdx]),</span><br><span class="line">        Right: constructMaximumBinaryTree(nums[maxIdx+<span class="number">1</span>:]),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMax</span><span class="params">(nums []<span class="type">int</span>)</span></span> (maxVal, maxIdx <span class="type">int</span>) &#123;</span><br><span class="line">    maxVal = math.MinInt</span><br><span class="line">    <span class="keyword">for</span> idx, val := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> val &gt; maxVal &#123;</span><br><span class="line">            maxVal = val</span><br><span class="line">            maxIdx = idx</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="98-验证二叉搜索树"><a href="https://leetcode.cn/problems/validate-binary-search-tree/">98.验证二叉搜索树</a></h1><p>两种思路，一种使用中序遍历必定单调的性质，一种检查左右子树的边界</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidBST</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    prevVal := math.MinInt</span><br><span class="line">    ans := <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ans == <span class="literal">false</span> || root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.Left)</span><br><span class="line">        <span class="keyword">if</span> root.Val &lt;= prevVal &#123;</span><br><span class="line">            ans = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        prevVal = root.Val</span><br><span class="line">        dfs(root.Right)</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>边界检查</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidBST</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> myIsValidBST(root, math.MinInt, math.MaxInt)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myIsValidBST</span><span class="params">(root *TreeNode, minVal, maxVal <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Val &lt;= minVal || root.Val &gt;= maxVal &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    leftIsValid := myIsValidBST(root.Left, minVal, root.Val)</span><br><span class="line">    rightIsValid := myIsValidBST(root.Right, root.Val, maxVal)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftIsValid &amp;&amp; rightIsValid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY-21">DAY 21</h1><h1 id="530-二叉搜索树的最小绝对差"><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/">530.二叉搜索树的最小绝对差</a></h1><p>使用搜索树中序遍历是单调的性质</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMinimumDifference</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    nums := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.Left)</span><br><span class="line">        nums = <span class="built_in">append</span>(nums, root.Val)</span><br><span class="line">        dfs(root.Right)</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root)</span><br><span class="line"></span><br><span class="line">    ans := math.MaxInt</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        ans = min(ans, abs(nums[i]-nums[i<span class="number">-1</span>]))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="501-二叉搜索树中的众数"><a href="https://leetcode.cn/problems/find-mode-in-binary-search-tree/">501.二叉搜索树中的众数</a></h1><p>最暴力的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMode</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    nums := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.Left)</span><br><span class="line">        nums = <span class="built_in">append</span>(nums, root.Val)</span><br><span class="line">        dfs(root.Right)</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root)</span><br><span class="line"></span><br><span class="line">    ans := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        m[num]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    maxV := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        <span class="keyword">if</span> v &gt; maxV &#123;</span><br><span class="line">            maxV = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        <span class="keyword">if</span> v == maxV &#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, k)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以用单调的性质节省掉哈希表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">prev := math.MinInt</span><br><span class="line">count := <span class="number">0</span></span><br><span class="line">maxCount := <span class="number">0</span></span><br><span class="line">ans := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">    <span class="keyword">if</span> v == prev &#123;</span><br><span class="line">        count++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev = v</span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> count == maxCount &#123;</span><br><span class="line">        ans = <span class="built_in">append</span>(ans, v)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> count &gt; maxCount &#123;</span><br><span class="line">        maxCount = count</span><br><span class="line">        ans = []<span class="type">int</span>&#123;v&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="236-二叉树的最近公共祖先"><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236.二叉树的最近公共祖先</a></h1><ol><li><strong>基础情况</strong>:<ul><li>如果当前节点是<code>nil</code>，说明已经到达了树的底部，返回<code>nil</code>。</li><li>如果当前节点是<code>p</code>或<code>q</code>中的任意一个，那么它可能是最低公共祖先，返回这个节点。</li></ul></li><li><strong>递归查找</strong>:<ul><li>对当前节点的左子树调用<code>lowestCommonAncestor</code>函数，查找<code>p</code>和<code>q</code>。</li><li>对当前节点的右子树同样调用<code>lowestCommonAncestor</code>函数。</li></ul></li><li><strong>分析递归结果</strong>:<ul><li>如果在左子树和右子树的搜索结果中，两边都找到了节点（即左右子树各返回了非<code>nil</code>），则说明当前节点是最低公共祖先。</li><li>如果只在一边找到了节点（左子树或右子树返回了非<code>nil</code>），则最低公共祖先在那一边。</li></ul></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lowestCommonAncestor</span><span class="params">(root, p, q *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root == q || root == p &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    left := lowestCommonAncestor(root.Left, p, q)</span><br><span class="line">    right := lowestCommonAncestor(root.Right, p, q)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> left != <span class="literal">nil</span> &amp;&amp; right != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> left == <span class="literal">nil</span> &amp;&amp; right != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> right</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="DAY-22">DAY 22</h1><h1 id="235-二叉搜索树的最近公共祖先"><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">235.二叉搜索树的最近公共祖先</a></h1><p>我本来想用搜索树的性质做一个剪枝，也就是如果当前节点的值不在两者之间，就肯定不可能是祖先</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> p.Val &gt; q.Val &#123;</span><br><span class="line">    p,q = q,p</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> root.Val &lt; q.Val || root.Val &gt; p.Val&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这是错误的，当前节点的确不会是最近公共祖先，但是下面的节点可能是，应该继续递归</p><p>这个性质应该这样用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lowestCommonAncestor</span><span class="params">(root, p, q *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果p和q的值都小于root的值，LCA在左子树</span></span><br><span class="line">    <span class="keyword">if</span> p.Val &lt; root.Val &amp;&amp; q.Val &lt; root.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> lowestCommonAncestor(root.Left, p, q)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果p和q的值都大于root的值，LCA在右子树</span></span><br><span class="line">    <span class="keyword">if</span> p.Val &gt; root.Val &amp;&amp; q.Val &gt; root.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> lowestCommonAncestor(root.Right, p, q)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果root的值介于p和q之间，那么root就是LCA</span></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="701-二叉搜索树中的插入操作"><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/">701.二叉搜索树中的插入操作</a></h1><p>遵从搜索树的定义即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertIntoBST</span><span class="params">(root *TreeNode, val <span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;TreeNode&#123;Val: val&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Val &lt; val &#123;</span><br><span class="line">        <span class="keyword">if</span> root.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            insertIntoBST(root.Right, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.Right = &amp;TreeNode&#123;</span><br><span class="line">                Val: val,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            insertIntoBST(root.Left, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.Left = &amp;TreeNode&#123;</span><br><span class="line">                Val: val,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="450-删除二叉搜索树中的节点"><a href="https://leetcode.cn/problems/delete-node-in-a-bst/">450. 删除二叉搜索树中的节点</a></h1><ul><li><p>当 <code>key &lt; root.Val</code> 时，我们递归地在左子树中删除节点。</p></li><li><p>当 <code>key &gt; root.Val</code> 时，我们递归地在右子树中删除节点。</p></li><li><p>当 <code>key == root.Val</code> 时，我们找到了要删除的节点：</p><ul><li><p>如果是叶子就直接删了了事</p></li><li><p>如果只有左子树或者右子树，就把左（右）子树接到上面去</p></li><li><p>如果左右都有，删了之后把左子树的最大值或者右子树的最小值放在当前节点</p><p>具体来说就是把值赋值给当前节点，然后再在左（右）子树中删除这个最大（小）节点</p></li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteNode</span><span class="params">(root *TreeNode, key <span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> key &lt; root.Val &#123; <span class="comment">// 如果节点在左边就往左递归</span></span><br><span class="line">        root.Left = deleteNode(root.Left, key)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> key &gt; root.Val &#123; <span class="comment">// 如果节点在右边就往右递归</span></span><br><span class="line">        root.Right = deleteNode(root.Right, key)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 当前就是要删的了！</span></span><br><span class="line">        <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &#123; <span class="comment">// 如果是叶子节点，直接删除了事</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &#123; <span class="comment">// 如果只有右子树，就把右子树提上来</span></span><br><span class="line">            <span class="keyword">return</span> root.Right</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> root.Right == <span class="literal">nil</span> &#123; <span class="comment">// 如果只有左子树，就把左子树提上来</span></span><br><span class="line">            <span class="keyword">return</span> root.Left</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果左右子树都有，就找到右子树的最小节点，把值赋给当前节点，然后删除右子树的最小节点</span></span><br><span class="line">            minVal := findMin(root.Right)</span><br><span class="line">            root.Val = minVal</span><br><span class="line">            root.Right = deleteNode(root.Right, minVal)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMin</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> root.Left == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.Val</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> findMin(root.Left)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY-23">DAY 23</h1><h1 id="669-修剪二叉搜索树"><a href="https://leetcode.cn/problems/trim-a-binary-search-tree/">669.修剪二叉搜索树</a></h1><p>如果出界了就尝试往边界里面走</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trimBST</span><span class="params">(root *TreeNode, low <span class="type">int</span>, high <span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Val &gt;= low &amp;&amp; root.Val &lt;= high &#123;</span><br><span class="line">        root.Left = trimBST(root.Left, low, high)</span><br><span class="line">        root.Right = trimBST(root.Right, low, high)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Val &lt; low &amp;&amp; root.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> trimBST(root.Right, low, high)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> root.Val &gt; high &amp;&amp; root.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> trimBST(root.Left, low, high)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="108-将有序数组转换为二叉搜索树"><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/">108.将有序数组转换为二叉搜索树</a></h1><p>因为要转换成平衡树，我一开始想先计算树高，后来发现没那么麻烦，直接中间作为根节点，然后左右平分递归下去就行了</p><p>因为左右节点数量基本相同，所以是平衡的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortedArrayToBST</span><span class="params">(nums []<span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    mid := n / <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">        Val:   nums[mid],</span><br><span class="line">        Left:  sortedArrayToBST(nums[:mid]),</span><br><span class="line">        Right: sortedArrayToBST(nums[mid+<span class="number">1</span>:]),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="538-把二叉搜索树转换为累加树"><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/">538.把二叉搜索树转换为累加树</a></h1><p>递归感觉被绕晕了，用最暴力的方法，按照中序把值都拿到手，计算好再塞回去（</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertBST</span><span class="params">(root *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.Left)</span><br><span class="line">        ans = <span class="built_in">append</span>(ans, root.Val)</span><br><span class="line">        dfs(root.Right)</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root)</span><br><span class="line"></span><br><span class="line">    n := <span class="built_in">len</span>(ans)</span><br><span class="line">    <span class="keyword">for</span> i := n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        ans[i] += ans[i+<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    idx := <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> dfs2 <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span></span><br><span class="line">    dfs2 = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        dfs2(root.Left)</span><br><span class="line">        root.Val = ans[idx]</span><br><span class="line">        idx++</span><br><span class="line">        dfs2(root.Right)</span><br><span class="line">    &#125;</span><br><span class="line">    dfs2(root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了眼题解，哦，好吧</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertBST</span><span class="params">(root *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(*TreeNode)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">            dfs(node.Right)</span><br><span class="line">            sum += node.Val</span><br><span class="line">            node.Val = sum</span><br><span class="line">            dfs(node.Left)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-binary-tree.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Mac Windows 网线直连文件传输</title>
      <link>https://nickxu.me/post/mac-windows-file-copy-by-directly-LAN.html</link>
      <guid>https://nickxu.me/post/mac-windows-file-copy-by-directly-LAN.html</guid>
      <pubDate>Sun, 05 Nov 2023 03:52:30 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;今天又学到一个小技巧，使用一条网线直连两台 PC 进行文件传输&lt;/p&gt;
&lt;p&gt;我是把 Mac 上的文件传到 Windows 上，但其实两台 Windows 也大同小异&lt;/p&gt;
&lt;p&gt;首先当然是网线插上&lt;/p&gt;
&lt;p&gt;下一步是自己手动改一下 IP 到同一网段，之后 ping 一下，能 ping 通就算没问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image.nickxu.me/202311051156967.png&quot; alt=&quot;ab8422039ce9ef1e9ead78e908707278&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image.nickxu.me/202311051155650.png&quot; alt=&quot;image-20231105115544617 AM&quot;&gt;&lt;/p&gt;
&lt;p&gt;传输文件使用 HTTP 其实最方便，直接用 py 起一个 http server&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<p>今天又学到一个小技巧，使用一条网线直连两台 PC 进行文件传输</p><p>我是把 Mac 上的文件传到 Windows 上，但其实两台 Windows 也大同小异</p><p>首先当然是网线插上</p><p>下一步是自己手动改一下 IP 到同一网段，之后 ping 一下，能 ping 通就算没问题</p><p><img src="https://image.nickxu.me/202311051156967.png" alt="ab8422039ce9ef1e9ead78e908707278"></p><p><img src="https://image.nickxu.me/202311051155650.png" alt="image-20231105115544617 AM"></p><p>传输文件使用 HTTP 其实最方便，直接用 py 起一个 http server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/dir</span><br><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure><p>然后你就可以通过浏览器访问了</p><p><img src="https://image.nickxu.me/202311051153910.png" alt="image-20231105115344658 AM"></p><p>本地看上去没问题之后就可以在另一端访问了</p><p>我记得下载是满速的，千兆以太网直接吃满，嘎嘎快（</p>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/mac-windows-file-copy-by-directly-LAN.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『代码随想录』栈与队列（Stack &amp; Queue）</title>
      <link>https://nickxu.me/post/programmercarl-stack-and-queue.html</link>
      <guid>https://nickxu.me/post/programmercarl-stack-and-queue.html</guid>
      <pubDate>Fri, 03 Nov 2023 02:43:22 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;DAY-10&quot;&gt;DAY 10&lt;/h1&gt;
&lt;h1 id=&quot;232-用栈实现队列&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/implement-queue-using-stacks/&quot;&gt;232.用栈实现队列&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;因为栈和队列的出队顺序是反的，所以再来个栈倒腾一下就是正的了&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="DAY-10">DAY 10</h1><h1 id="232-用栈实现队列"><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">232.用栈实现队列</a></h1><p>因为栈和队列的出队顺序是反的，所以再来个栈倒腾一下就是正的了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyQueue <span class="keyword">struct</span> &#123;</span><br><span class="line">    in  []<span class="type">int</span></span><br><span class="line">    out []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> MyQueue &#123;</span><br><span class="line">    <span class="keyword">return</span> MyQueue&#123;</span><br><span class="line">        in:  []<span class="type">int</span>&#123;&#125;,</span><br><span class="line">        out: []<span class="type">int</span>&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Push(x <span class="type">int</span>) &#123;</span><br><span class="line">    this.in = <span class="built_in">append</span>(this.in, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> shift() &#123; <span class="comment">// 倒腾一下</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(this.in) != <span class="number">0</span> &#123;</span><br><span class="line">        this.out = <span class="built_in">append</span>(this.out, this.in[<span class="built_in">len</span>(this.in)<span class="number">-1</span>])</span><br><span class="line">        this.in = this.in[:<span class="built_in">len</span>(this.in)<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.out) == <span class="number">0</span> &#123;</span><br><span class="line">        this.shift()</span><br><span class="line">    &#125;</span><br><span class="line">    ans := this.out[<span class="built_in">len</span>(this.out)<span class="number">-1</span>]</span><br><span class="line">    this.out = this.out[:<span class="built_in">len</span>(this.out)<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Peek() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.out) == <span class="number">0</span> &#123;</span><br><span class="line">        this.shift()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> this.out[<span class="built_in">len</span>(this.out)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Empty() <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(this.in) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(this.out) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="225-用队列实现栈"><a href="https://leetcode.cn/problems/implement-stack-using-queues/">225.用队列实现栈</a></h1><p>一个队列就够了</p><p>出栈的话，把前 <code>n-1</code> 个元素扔到后面去（我称之为 <code>shift</code> 操作），当前元素就是刚入队的元素了</p><p><code>Top</code> 的话就先出栈再放进去</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyStack <span class="keyword">struct</span> &#123;</span><br><span class="line">    q []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> MyStack &#123;</span><br><span class="line">    <span class="keyword">return</span> MyStack&#123;</span><br><span class="line">        q: []<span class="type">int</span>&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span></span> Push(x <span class="type">int</span>) &#123;</span><br><span class="line">    this.q = <span class="built_in">append</span>(this.q, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span></span> shift() &#123; <span class="comment">// 将前 n-1 个元素出队再加入</span></span><br><span class="line">    n := <span class="built_in">len</span>(this.q)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++ &#123;</span><br><span class="line">        this.q = <span class="built_in">append</span>(this.q[<span class="number">1</span>:], this.q[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line">    this.shift()</span><br><span class="line">    ans := this.q[<span class="number">0</span>]</span><br><span class="line">    this.q = this.q[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span></span> Top() <span class="type">int</span> &#123;</span><br><span class="line">    ans := this.Pop()</span><br><span class="line">    this.Push(ans)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span></span> Empty() <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(this.q) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以换个思路，在 <code>Push</code> 的时候就 <code>shift</code> 也行，看上去更简单</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyStack <span class="keyword">struct</span> &#123;</span><br><span class="line">    q []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> MyStack &#123;</span><br><span class="line">    <span class="keyword">return</span> MyStack&#123;</span><br><span class="line">        q: []<span class="type">int</span>&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span></span> Push(x <span class="type">int</span>) &#123;</span><br><span class="line">    this.q = <span class="built_in">append</span>(this.q, x)</span><br><span class="line">    this.shift()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span></span> shift() &#123; <span class="comment">// 将前 n-1 个元素出队再加入</span></span><br><span class="line">    n := <span class="built_in">len</span>(this.q)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++ &#123;</span><br><span class="line">        this.q = <span class="built_in">append</span>(this.q[<span class="number">1</span>:], this.q[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line">    ans := this.q[<span class="number">0</span>]</span><br><span class="line">    this.q = this.q[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span></span> Top() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> this.q[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span></span> Empty() <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(this.q) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY-11">DAY 11</h1><h1 id="20-有效的括号"><a href="https://leetcode.cn/problems/valid-parentheses/">20.有效的括号</a></h1><p>经典的栈应用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    stack := []<span class="type">rune</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> s &#123;</span><br><span class="line">        <span class="keyword">switch</span> c &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, c)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> || stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] != <span class="string">&#x27;(&#x27;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> || stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] != <span class="string">&#x27;[&#x27;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> || stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] != <span class="string">&#x27;&#123;&#x27;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(stack) != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="1047-删除字符串中的所有相邻重复项"><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">1047.删除字符串中的所有相邻重复项</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    stack := []<span class="type">rune</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> s &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(stack) != <span class="number">0</span> &amp;&amp; c == stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] &#123;</span><br><span class="line">            stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, c)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(stack)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="150-逆波兰表达式求值"><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">150.逆波兰表达式求值</a></h1><p>经典中的经典</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">evalRPN</span><span class="params">(tokens []<span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    stack := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> tokens &#123;</span><br><span class="line">        n := <span class="built_in">len</span>(stack)</span><br><span class="line">        <span class="keyword">switch</span> s &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">            stack = <span class="built_in">append</span>(stack[:n<span class="number">-2</span>], stack[n<span class="number">-2</span>]+stack[n<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">            stack = <span class="built_in">append</span>(stack[:n<span class="number">-2</span>], stack[n<span class="number">-2</span>]-stack[n<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">            stack = <span class="built_in">append</span>(stack[:n<span class="number">-2</span>], stack[n<span class="number">-2</span>]*stack[n<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">            stack = <span class="built_in">append</span>(stack[:n<span class="number">-2</span>], stack[n<span class="number">-2</span>]/stack[n<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, atoi(s))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">atoi</span><span class="params">(x <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    opt, ans := <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> x &#123;</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;-&#x27;</span> &#123;</span><br><span class="line">            opt = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        ans = ans*<span class="number">10</span> + <span class="type">int</span>(c-<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans * opt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY-12">DAY 12</h1><p>周日休息</p><h1 id="DAY-13">DAY 13</h1><h1 id="239-滑动窗口最大值"><a href="https://leetcode.cn/problems/sliding-window-maximum/">239.滑动窗口最大值</a></h1><p>非常好的单调队列例题</p><p>单调队列，队列中从头到尾单调递减</p><ul><li>Pop：传入当前窗口移动需要弹出的值，如果等于头元素则弹出</li><li>Push：在尾部尝试加入，如果遇到比当前元素小的都从尾部弹出</li><li>GetMax：取头元素</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MonoQ <span class="keyword">struct</span> &#123;</span><br><span class="line">    data []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMonoQ</span><span class="params">()</span></span> MonoQ &#123;</span><br><span class="line">    <span class="keyword">return</span> MonoQ&#123;</span><br><span class="line">        data: []<span class="type">int</span>&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pop 传入当前窗口移动需要弹出的值，如果等于头元素则弹出</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *MonoQ)</span></span> Pop(x <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(q.data) != <span class="number">0</span> &amp;&amp; x == q.data[<span class="number">0</span>] &#123;</span><br><span class="line">        q.data = q.data[<span class="number">1</span>:]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Push 传入当前窗口移动需要压入的值，如果大于尾元素则弹出尾元素，直到小于等于尾元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *MonoQ)</span></span> Push(x <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(q.data) != <span class="number">0</span> &amp;&amp; x &gt; q.data[<span class="built_in">len</span>(q.data)<span class="number">-1</span>] &#123;</span><br><span class="line">        q.data = q.data[:<span class="built_in">len</span>(q.data)<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    q.data = <span class="built_in">append</span>(q.data, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetMax 获取当前窗口最大值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *MonoQ)</span></span> GetMax() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> q.data[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSlidingWindow</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    ans := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    q := NewMonoQ()</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; k; i++ &#123;</span><br><span class="line">        q.Push(nums[i])</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">append</span>(ans, q.GetMax())</span><br><span class="line">    <span class="keyword">for</span> i := k; i &lt; n; i++ &#123;</span><br><span class="line">        q.Pop(nums[i-k])</span><br><span class="line">        q.Push(nums[i])</span><br><span class="line">        ans = <span class="built_in">append</span>(ans, q.GetMax())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="347-前-K-个高频元素"><a href="https://leetcode.cn/problems/top-k-frequent-elements/">347.前 K 个高频元素</a></h1><p>两种方法，拿到频率的 map 之后用堆维护前 K 个，或者直接排序再取前 K 个</p><p>复习一下 Golang 里面的优先队列和排序</p><p>用惯了 C++ STL 的开箱即用的优先队列，我只能说 Golang 的优先队列真的不好用（</p><ul><li><p>排序，记得导入 <code>sort</code> 包</p><p>使用内建的 <code>Ints</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums := []<span class="type">int</span>&#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;</span><br><span class="line">sort.Ints(nums)</span><br></pre></td></tr></table></figure><p>使用 <code>sort.Slice</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sort.Slice(people, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> people[i].Age &lt; people[j].Age</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>优先队列，记得导入 <code>heap</code> 包</p><p>需要实现几个接口，在使用的时候，如果你是直接将一个切片转换成堆，需要使用 <code>heap.Init</code></p><p>需要注意的是使用的时候不是面向对象的，你需要使用 <code>heap.XX</code> 来操作</p><p>元素仅为 <code>int</code> 的简单队列</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IntPriorityQueue []<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq IntPriorityQueue)</span></span> Len() <span class="type">int</span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(pq) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq IntPriorityQueue)</span></span> Less(i, j <span class="type">int</span>) <span class="type">bool</span> &#123; <span class="keyword">return</span> pq[i] &lt; pq[j] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq IntPriorityQueue)</span></span> Swap(i, j <span class="type">int</span>)      &#123; pq[i], pq[j] = pq[j], pq[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *IntPriorityQueue)</span></span> Push(x <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">*pq = <span class="built_in">append</span>(*pq, x.(<span class="type">int</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *IntPriorityQueue)</span></span> Pop() <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">old := *pq</span><br><span class="line">n := <span class="built_in">len</span>(old)</span><br><span class="line">item := old[n<span class="number">-1</span>]</span><br><span class="line">*pq = old[<span class="number">0</span> : n<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pq := &amp;IntPriorityQueue&#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立优先队列堆</span></span><br><span class="line">heap.Init(pq)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向优先队列中添加元素</span></span><br><span class="line">heap.Push(pq, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从优先队列中按照优先级取出元素</span></span><br><span class="line"><span class="keyword">for</span> pq.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d &quot;</span>, heap.Pop(pq))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据结构体中的一个字段进行排序的队列</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Item 表示优先队列中的元素</span></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">value    <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 元素的值</span></span><br><span class="line">priority <span class="type">int</span>         <span class="comment">// 优先级</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PriorityQueue 实现了heap.Interface接口</span></span><br><span class="line"><span class="keyword">type</span> PriorityQueue []Item</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Len() <span class="type">int</span> &#123; <span class="keyword">return</span> <span class="built_in">len</span>(pq) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Less(i, j <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">// 这里我们使用优先级来决定元素的顺序，较小的优先级排在前面</span></span><br><span class="line"><span class="keyword">return</span> pq[i].priority &lt; pq[j].priority</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Swap(i, j <span class="type">int</span>) &#123;</span><br><span class="line">pq[i], pq[j] = pq[j], pq[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *PriorityQueue)</span></span> Push(x <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">item := x.(Item)</span><br><span class="line">*pq = <span class="built_in">append</span>(*pq, item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *PriorityQueue)</span></span> Pop() <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">old := *pq</span><br><span class="line">n := <span class="built_in">len</span>(old)</span><br><span class="line">item := old[n<span class="number">-1</span>]</span><br><span class="line">*pq = old[<span class="number">0</span> : n<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个优先队列</span></span><br><span class="line">pq := <span class="built_in">make</span>(PriorityQueue, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素到优先队列</span></span><br><span class="line">heap.Push(&amp;pq, Item&#123;value: <span class="string">&quot;B&quot;</span>, priority: <span class="number">2</span>&#125;)</span><br><span class="line">heap.Push(&amp;pq, Item&#123;value: <span class="string">&quot;C&quot;</span>, priority: <span class="number">1</span>&#125;)</span><br><span class="line">heap.Push(&amp;pq, Item&#123;value: <span class="string">&quot;A&quot;</span>, priority: <span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从优先队列中按照优先级取出元素</span></span><br><span class="line"><span class="keyword">for</span> pq.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">item := heap.Pop(&amp;pq).(Item)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s (priority: %d)\n&quot;</span>, item.value, item.priority)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>言归正传，本体的两种方法</p><ul><li><p>直接排序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">topKFrequent</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        m[v]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count := <span class="built_in">make</span>([][<span class="number">2</span>]<span class="type">int</span>, <span class="number">0</span>, <span class="built_in">len</span>(m))</span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        count = <span class="built_in">append</span>(count, [<span class="number">2</span>]<span class="type">int</span>&#123;k, v&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort.Slice(count, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count[i][<span class="number">1</span>] &gt; count[j][<span class="number">1</span>]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    ans := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; k; i++ &#123;</span><br><span class="line">        ans = <span class="built_in">append</span>(ans, count[i][<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以更简单</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">topKFrequent</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        m[v]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="built_in">len</span>(m))</span><br><span class="line">    <span class="keyword">for</span> k, _ := <span class="keyword">range</span> m &#123;</span><br><span class="line">        ans = <span class="built_in">append</span>(ans, k)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort.Slice(ans, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m[ans[i]] &gt; m[ans[j]]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans[:k]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>维护大顶堆</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">    value <span class="type">int</span></span><br><span class="line">    freq  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PriorityQueue []Item</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Len() <span class="type">int</span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(pq) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Less(i, j <span class="type">int</span>) <span class="type">bool</span> &#123; <span class="keyword">return</span> pq[i].freq &lt; pq[j].freq &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Swap(i, j <span class="type">int</span>)      &#123; pq[i], pq[j] = pq[j], pq[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *PriorityQueue)</span></span> Push(x <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">    item := x.(Item)</span><br><span class="line">    *pq = <span class="built_in">append</span>(*pq, item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *PriorityQueue)</span></span> Pop() <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">    old := *pq</span><br><span class="line">    n := <span class="built_in">len</span>(old)</span><br><span class="line">    item := old[n<span class="number">-1</span>]</span><br><span class="line">    *pq = old[<span class="number">0</span> : n<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">topKFrequent</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        m[num]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pq := <span class="built_in">make</span>(PriorityQueue, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> value, freq := <span class="keyword">range</span> m &#123;</span><br><span class="line">        heap.Push(&amp;pq, Item&#123;value, freq&#125;)</span><br><span class="line">        <span class="keyword">if</span> pq.Len() &gt; k &#123;</span><br><span class="line">            heap.Pop(&amp;pq)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans := <span class="built_in">make</span>([]<span class="type">int</span>, k)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; k; i++ &#123;</span><br><span class="line">        item := heap.Pop(&amp;pq).(Item)</span><br><span class="line">        ans[i] = item.value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-stack-and-queue.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『代码随想录』字符串（String）</title>
      <link>https://nickxu.me/post/programmercarl-string.html</link>
      <guid>https://nickxu.me/post/programmercarl-string.html</guid>
      <pubDate>Wed, 01 Nov 2023 12:44:35 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;DAY-8&quot;&gt;DAY 8&lt;/h1&gt;
&lt;h1 id=&quot;344-反转字符串&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/reverse-string/&quot;&gt;344. 反转字符串&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;朴实无华&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="DAY-8">DAY 8</h1><h1 id="344-反转字符串"><a href="https://leetcode.cn/problems/reverse-string/">344. 反转字符串</a></h1><p>朴实无华</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseString</span><span class="params">(s []<span class="type">byte</span>)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n/<span class="number">2</span>; i++ &#123;</span><br><span class="line">        s[n-i<span class="number">-1</span>], s[i] = s[i], s[n-i<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="541-反转字符串-II"><a href="https://leetcode.cn/problems/reverse-string-ii/">541.反转字符串 II</a></h1><p>朴实无华的递归</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseStr</span><span class="params">(s <span class="type">string</span>, k <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">if</span> n &lt;= k &#123;</span><br><span class="line">        <span class="keyword">return</span> reverse(s)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> n &gt; k &amp;&amp; n &lt; <span class="number">2</span>*k &#123;</span><br><span class="line">        <span class="keyword">return</span> reverse(s[:k]) + s[k:]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reverse(s[:k]) + s[k:<span class="number">2</span>*k] + reverseStr(s[<span class="number">2</span>*k:], k)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    bytes := []<span class="type">byte</span>(s)</span><br><span class="line">    n := <span class="built_in">len</span>(bytes)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n/<span class="number">2</span>; i++ &#123;</span><br><span class="line">        bytes[i], bytes[n-i<span class="number">-1</span>] = bytes[n-i<span class="number">-1</span>], bytes[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(bytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="LCR-122-路径加密"><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">LCR 122.路径加密</a></h1><p>朴实无华</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pathEncryption</span><span class="params">(path <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">ans := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> path &#123;</span><br><span class="line"><span class="keyword">if</span> c == <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">ans += <span class="string">&quot; &quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans += <span class="type">string</span>(c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="151-反转字符串中的单词"><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">151.反转字符串中的单词</a></h1><p>Go 写起来真舒服</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseWords</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> s[<span class="number">0</span>] == <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">        s = s[<span class="number">1</span>:]</span><br><span class="line">    &#125;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    ans := <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        word := <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i &lt; n &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">            word += <span class="type">string</span>(s[i])</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="string">&quot; &quot;</span> + word + ans</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i+<span class="number">1</span> &lt; n &amp;&amp; s[i+<span class="number">1</span>] == <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="LCR-182-动态口令"><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">LCR 182.动态口令</a></h1><p>？？？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dynamicPassword</span><span class="params">(password <span class="type">string</span>, target <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> password[target:] + password[:target]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY-9">DAY 9</h1><h1 id="28-找出字符串中第一个匹配项的下标"><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">28.找出字符串中第一个匹配项的下标</a></h1><p>简单复习了一下 KMP，但你要我写我肯定写不出来</p><p>这东西写法太多而且感觉有点乱</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="type">string</span>, needle <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n, m := <span class="built_in">len</span>(haystack), <span class="built_in">len</span>(needle)</span><br><span class="line">    i, j := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    next := getNext(needle)</span><br><span class="line">    <span class="keyword">for</span> i &lt; n &#123;</span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">-1</span> || haystack[i] == needle[j] &#123;</span><br><span class="line">            i++</span><br><span class="line">            j++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> j == m &#123;</span><br><span class="line">            j = next[j]</span><br><span class="line">            <span class="keyword">return</span> i - m</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNext</span><span class="params">(s <span class="type">string</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    next := <span class="built_in">make</span>([]<span class="type">int</span>, n+<span class="number">1</span>)</span><br><span class="line">    i, j := <span class="number">0</span>, <span class="number">-1</span></span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i &lt; n &#123;</span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">-1</span> || s[i] == s[j] &#123;</span><br><span class="line">            i++</span><br><span class="line">            j++</span><br><span class="line">            next[i] = j</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="459-重复的子字符串"><a href="https://leetcode.cn/problems/repeated-substring-pattern/">459. 重复的子字符串</a></h1><p>真的是非常巧妙的算法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">repeatedSubstringPattern</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> strings.Contains(s[<span class="number">1</span>:]+s[:<span class="built_in">len</span>(s)<span class="number">-1</span>], s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-string.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『代码随想录』哈希表（Hash Map）</title>
      <link>https://nickxu.me/post/programmercarl-hash-map.html</link>
      <guid>https://nickxu.me/post/programmercarl-hash-map.html</guid>
      <pubDate>Mon, 30 Oct 2023 01:39:58 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;DAY-6&quot;&gt;DAY 6&lt;/h1&gt;
&lt;h1 id=&quot;242-有效的字母异位词&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/valid-anagram/&quot;&gt;242.有效的字母异位词&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;这题没什么好说的&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="DAY-6">DAY 6</h1><h1 id="242-有效的字母异位词"><a href="https://leetcode.cn/problems/valid-anagram/">242.有效的字母异位词</a></h1><p>这题没什么好说的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isAnagram</span><span class="params">(s <span class="type">string</span>, t <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">rune</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> s &#123;</span><br><span class="line">        m[c]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> t &#123;</span><br><span class="line">        m[c]--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        <span class="keyword">if</span> v != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="349-两个数组的交集"><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">349.两个数组的交集</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(nums1 []<span class="type">int</span>, nums2 []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">bool</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums1 &#123;</span><br><span class="line">        m[v] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums2 &#123;</span><br><span class="line">        <span class="keyword">if</span> m[v] == <span class="literal">true</span> &#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, v)</span><br><span class="line">            m[v] = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="202-快乐数"><a href="https://leetcode.cn/problems/happy-number/">202.快乐数</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isHappy</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">bool</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n != <span class="number">1</span> &#123;</span><br><span class="line">        m[n] = <span class="literal">true</span></span><br><span class="line">        n = calc(n)</span><br><span class="line">        <span class="keyword">if</span> m[n] == <span class="literal">true</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n != <span class="number">0</span> &#123;</span><br><span class="line">        c := n % <span class="number">10</span></span><br><span class="line">        ans += c * c</span><br><span class="line">        n /= <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="1-两数之和"><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></h1><p>经典两数之和</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        m[target-v] = idx</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> a, ok := m[v]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="type">int</span>&#123;idx, a&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="DAY-7">DAY 7</h1><h1 id="454-四数相加-II"><a href="https://leetcode.cn/problems/4sum-ii/">454.四数相加 II</a></h1><p>很顺理成章的思路</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSumCount</span><span class="params">(nums1 []<span class="type">int</span>, nums2 []<span class="type">int</span>, nums3 []<span class="type">int</span>, nums4 []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, a := <span class="keyword">range</span> nums1 &#123;</span><br><span class="line">        <span class="keyword">for</span> _, b := <span class="keyword">range</span> nums2 &#123;</span><br><span class="line">            m[a+b]++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> nums3 &#123;</span><br><span class="line">        <span class="keyword">for</span> _, d := <span class="keyword">range</span> nums4 &#123;</span><br><span class="line">            ans += m[-(c + d)]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="383-赎金信"><a href="https://leetcode.cn/problems/ransom-note/">383.赎金信</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canConstruct</span><span class="params">(ransomNote <span class="type">string</span>, magazine <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">rune</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> magazine &#123;</span><br><span class="line">        m[c]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> ransomNote &#123;</span><br><span class="line">        m[c]--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        <span class="keyword">if</span> v &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="15-三数之和"><a href="https://leetcode.cn/problems/3sum/">15.三数之和</a></h1><p>再做一遍居然没一次做出来</p><p>排序，固定一点，再在后面区间使用双指针</p><p>注意去重，有点麻烦</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    ans := [][]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a := <span class="number">0</span>; a &lt; n<span class="number">-2</span>; a++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[a] &gt; <span class="number">0</span> &#123; <span class="comment">// 单调性质</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> a &gt; <span class="number">0</span> &amp;&amp; nums[a] == nums[a<span class="number">-1</span>] &#123; <span class="comment">// 去重</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        b, c := a+<span class="number">1</span>, n<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> b &lt; c &#123;</span><br><span class="line">            na, nb, nc := nums[a], nums[b], nums[c]</span><br><span class="line">            sum := na + nb + nc</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> sum &gt; <span class="number">0</span> &#123;</span><br><span class="line">                c--</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; <span class="number">0</span> &#123;</span><br><span class="line">                b++</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans = <span class="built_in">append</span>(ans, []<span class="type">int</span>&#123;na, nb, nc&#125;)</span><br><span class="line">                <span class="keyword">for</span> b &lt; c &amp;&amp; nums[b] == nb &#123; <span class="comment">// 去重</span></span><br><span class="line">                    b++</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> b &lt; c &amp;&amp; nums[c] == nc &#123; <span class="comment">// 去重</span></span><br><span class="line">                    c--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="18-四数之和"><a href="https://leetcode.cn/problems/4sum/">18.四数之和</a></h1><p>在三数之和上再套一层 <code>for</code> （</p><p><s>感觉写的好丑</s></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    ans := [][]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a := <span class="number">0</span>; a &lt; n<span class="number">-3</span>; a++ &#123;</span><br><span class="line">        <span class="keyword">if</span> a &gt; <span class="number">0</span> &amp;&amp; nums[a] == nums[a<span class="number">-1</span>] &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> b := a + <span class="number">1</span>; b &lt; n<span class="number">-2</span>; b++ &#123;</span><br><span class="line">            <span class="keyword">if</span> b &gt; a+<span class="number">1</span> &amp;&amp; nums[b] == nums[b<span class="number">-1</span>] &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            c, d := b+<span class="number">1</span>, n<span class="number">-1</span></span><br><span class="line">            <span class="keyword">for</span> c &lt; d &#123;</span><br><span class="line">                na, nb, nc, nd := nums[a], nums[b], nums[c], nums[d]</span><br><span class="line">                sum := na + nb + nc + nd</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> sum &gt; target &#123;</span><br><span class="line">                    d--</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">                    c++</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans = <span class="built_in">append</span>(ans, []<span class="type">int</span>&#123;na, nb, nc, nd&#125;)</span><br><span class="line">                    <span class="keyword">for</span> c &lt; d &amp;&amp; nc == nums[c] &#123;</span><br><span class="line">                        c++</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> c &lt; d &amp;&amp; nd == nums[d] &#123;</span><br><span class="line">                        d--</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-hash-map.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『代码随想录』链表（Linked List）</title>
      <link>https://nickxu.me/post/programmercarl-linked-list.html</link>
      <guid>https://nickxu.me/post/programmercarl-linked-list.html</guid>
      <pubDate>Fri, 27 Oct 2023 03:42:16 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;DAY-3&quot;&gt;DAY 3&lt;/h1&gt;
&lt;p&gt;本篇部分题目在 &lt;a href=&quot;https://nickxu.me/posts/275&quot;&gt;『算法拾遗』链表（Linked List）&lt;/a&gt; 中已经做过&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;203-移除链表元素&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/remove-linked-list-elements/&quot;&gt;203.移除链表元素&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;还有一个递归版，但是那个空间复杂度是 &lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="DAY-3">DAY 3</h1><p>本篇部分题目在 <a href="https://nickxu.me/posts/275">『算法拾遗』链表（Linked List）</a> 中已经做过</p><hr><h1 id="203-移除链表元素"><a href="https://leetcode.cn/problems/remove-linked-list-elements/">203.移除链表元素</a></h1><p>还有一个递归版，但是那个空间复杂度是 <code>O(n)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElements</span><span class="params">(head *ListNode, val <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">    dummy := &amp;ListNode&#123;Next: head&#125;</span><br><span class="line">    curr := dummy</span><br><span class="line">    <span class="keyword">for</span> curr.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> curr.Next.Val == val &#123;</span><br><span class="line">            curr.Next = curr.Next.Next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curr = curr.Next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="707-设计链表"><a href="https://leetcode.cn/problems/design-linked-list/">707.设计链表</a></h1><p>分别写了单向链表和双向链表两个版本</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">单向链表</button></li><li class="tab"><button type="button" data-href="#样例-2">双向链表</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyLinkedList <span class="keyword">struct</span> &#123;</span><br><span class="line">    head *LinkNode</span><br><span class="line">    size <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LinkNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    val  <span class="type">int</span></span><br><span class="line">    next *LinkNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> MyLinkedList &#123;</span><br><span class="line">    dummyHead := &amp;LinkNode&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> MyLinkedList&#123;</span><br><span class="line">        head: dummyHead,</span><br><span class="line">        size: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> Get(index <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= this.size &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    cur := this.head.next</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; index; i++ &#123;</span><br><span class="line">        cur = cur.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur.val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> AddAtHead(val <span class="type">int</span>) &#123;</span><br><span class="line">    newNode := &amp;LinkNode&#123;val: val&#125;</span><br><span class="line">    newNode.next = this.head.next</span><br><span class="line">    this.head.next = newNode</span><br><span class="line">    this.size++</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> AddAtTail(val <span class="type">int</span>) &#123;</span><br><span class="line">    newNode := &amp;LinkNode&#123;val: val&#125;</span><br><span class="line">    cur := this.head</span><br><span class="line">    <span class="keyword">for</span> cur.next != <span class="literal">nil</span> &#123;</span><br><span class="line">        cur = cur.next</span><br><span class="line">    &#125;</span><br><span class="line">    cur.next = newNode</span><br><span class="line">    this.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> AddAtIndex(index <span class="type">int</span>, val <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt; this.size &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> index == this.size &#123;</span><br><span class="line">        this.AddAtTail(val)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    cur := this.head</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; index; i++ &#123;</span><br><span class="line">        cur = cur.next</span><br><span class="line">    &#125;</span><br><span class="line">    newNode := &amp;LinkNode&#123;val: val&#125;</span><br><span class="line">    newNode.next = cur.next</span><br><span class="line">    cur.next = newNode</span><br><span class="line">    this.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> DeleteAtIndex(index <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= this.size &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    cur := this.head</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; index; i++ &#123;</span><br><span class="line">        cur = cur.next</span><br><span class="line">    &#125;</span><br><span class="line">    cur.next = cur.next.next</span><br><span class="line">    this.size--</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyLinkedList <span class="keyword">struct</span> &#123;</span><br><span class="line">    size <span class="type">int</span></span><br><span class="line">    head *Node</span><br><span class="line">    tail *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">    val        <span class="type">int</span></span><br><span class="line">    next, prev *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> MyLinkedList &#123;</span><br><span class="line">    dummy := &amp;Node&#123;&#125;</span><br><span class="line">    dummy.next = dummy</span><br><span class="line">    dummy.prev = dummy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MyLinkedList&#123;</span><br><span class="line">        size: <span class="number">0</span>,</span><br><span class="line">        head: dummy,</span><br><span class="line">        tail: dummy,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> Get(index <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= this.size &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    curr := this.head.next</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; index; i++ &#123;</span><br><span class="line">        curr = curr.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curr.val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> AddAtHead(val <span class="type">int</span>) &#123;</span><br><span class="line">    newNode := &amp;Node&#123;</span><br><span class="line">        val:  val,</span><br><span class="line">        next: this.head.next,</span><br><span class="line">        prev: this.head,</span><br><span class="line">    &#125;</span><br><span class="line">    this.head.next.prev = newNode</span><br><span class="line">    this.head.next = newNode</span><br><span class="line">    this.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> AddAtTail(val <span class="type">int</span>) &#123;</span><br><span class="line">    newNode := &amp;Node&#123;</span><br><span class="line">        val:  val,</span><br><span class="line">        next: this.tail,</span><br><span class="line">        prev: this.tail.prev,</span><br><span class="line">    &#125;</span><br><span class="line">    this.tail.prev.next = newNode</span><br><span class="line">    this.tail.prev = newNode</span><br><span class="line">    this.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> AddAtIndex(index <span class="type">int</span>, val <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt; this.size &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    curr := this.head.next</span><br><span class="line">    <span class="keyword">for</span> index != <span class="number">0</span> &#123;</span><br><span class="line">        curr = curr.next</span><br><span class="line">        index--</span><br><span class="line">    &#125;</span><br><span class="line">    newNode := &amp;Node&#123;</span><br><span class="line">        val:  val,</span><br><span class="line">        prev: curr.prev,</span><br><span class="line">        next: curr,</span><br><span class="line">    &#125;</span><br><span class="line">    curr.prev.next = newNode</span><br><span class="line">    curr.prev = newNode</span><br><span class="line">    this.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyLinkedList)</span></span> DeleteAtIndex(index <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= this.size &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    curr := this.head.next</span><br><span class="line">    <span class="keyword">for</span> index != <span class="number">0</span> &#123;</span><br><span class="line">        curr = curr.next</span><br><span class="line">        index--</span><br><span class="line">    &#125;</span><br><span class="line">    curr.next.prev = curr.prev</span><br><span class="line">    curr.prev.next = curr.next</span><br><span class="line">    this.size--</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="206-反转链表"><a href="https://leetcode.cn/problems/reverse-linked-list/">206.反转链表</a></h1><p>经典反转链表，操作过程如下</p><ol start="0"><li>初始化当前节点为头节点</li><li>暂存下一个节点</li><li>将当前节点指向前一个节点</li><li>前驱节点后移</li><li>当前节点后移</li><li>重复 1-4，只到当前节点为 <code>NULL</code> ，输出前驱结点为新的头结点</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line"><span class="comment">// 定义前驱节点、当前节点、后继节点</span></span><br><span class="line"><span class="keyword">var</span> prev *ListNode = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> next *ListNode = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> curr *ListNode = head</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历链表</span></span><br><span class="line"><span class="keyword">for</span> curr != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 保存下一个节点</span></span><br><span class="line">next = curr.Next</span><br><span class="line"><span class="comment">// 当前节点指向前驱节点</span></span><br><span class="line">curr.Next = prev</span><br><span class="line"><span class="comment">// 前驱节点后移</span></span><br><span class="line">prev = curr</span><br><span class="line"><span class="comment">// 当前节点后移</span></span><br><span class="line">curr = next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回前驱节点</span></span><br><span class="line"><span class="keyword">return</span> prev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我一开始也不是很懂，所以我画了个图一步一步来，图画出来我就懂了</p><p><img src="https://image.nickxu.me/202306021637081.png" alt="image-20230601下午103709377"></p><p>类似地，还有一个递归的写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line"><span class="comment">// 如果链表为空或者只有一个节点，直接返回原链表</span></span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归反转除头节点外的子链表</span></span><br><span class="line">p := reverseList(head.Next)</span><br><span class="line"><span class="comment">// 将当前节点的下一个节点指向当前节点，实现反转</span></span><br><span class="line">head.Next.Next = head</span><br><span class="line"><span class="comment">// 将当前节点的下一个节点置空，断开原链表中的连接</span></span><br><span class="line">head.Next = <span class="literal">nil</span></span><br><span class="line"><span class="comment">// 返回反转后的链表的头节点</span></span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="DAY-4">DAY 4</h1><p>本篇部分题目在 <a href="https://nickxu.me/posts/275">『算法拾遗』链表（Linked List）</a> 中已经做过</p><hr><h1 id="24-两两交换链表中的节点"><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24.两两交换链表中的节点</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapPairs</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    dummy:=&amp;ListNode&#123;</span><br><span class="line">        Next: head,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curr := dummy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> curr!=<span class="literal">nil</span> &amp;&amp; curr.Next!=<span class="literal">nil</span> &amp;&amp; curr.Next.Next != <span class="literal">nil</span>&#123;</span><br><span class="line">        first:=curr.Next</span><br><span class="line">        second:=curr.Next.Next</span><br><span class="line"></span><br><span class="line">        first.Next=second.Next</span><br><span class="line">        second.Next=first</span><br><span class="line">        curr.Next=second</span><br><span class="line"></span><br><span class="line">        curr=curr.Next.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="19-删除链表的倒数第-N-个结点"><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h1><p>经典快慢指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(head *ListNode, n <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">    dummy := &amp;ListNode&#123;</span><br><span class="line">        Next: head,</span><br><span class="line">    &#125;</span><br><span class="line">    fast, slow := dummy, dummy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">        fast = fast.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> fast.Next.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">        fast = fast.Next</span><br><span class="line">        slow = slow.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    slow.Next = slow.Next.Next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="面试题02-07-链表相交"><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">面试题02.07.链表相交</a></h1><p>双指针，先对齐再往后走</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getIntersectionNode</span><span class="params">(headA, headB *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    lenA, lenB := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> curr := headA; curr != <span class="literal">nil</span>; curr = curr.Next &#123;</span><br><span class="line">        lenA++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> curr := headB; curr != <span class="literal">nil</span>; curr = curr.Next &#123;</span><br><span class="line">        lenB++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> lenA &lt; lenB &#123;</span><br><span class="line">        headA, headB = headB, headA</span><br><span class="line">        lenA, lenB = lenB, lenA</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    diff := lenA - lenB</span><br><span class="line"></span><br><span class="line">    a, b := headA, headB</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; diff; i++ &#123;</span><br><span class="line">        a = a.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a != <span class="literal">nil</span> &amp;&amp; b != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> a == b &#123;</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        &#125;</span><br><span class="line">        a = a.Next</span><br><span class="line">        b = b.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="142-环形链表-II"><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142.环形链表 II</a></h1><p>快慢指针找环，然后让其中一个回到原点，再同步前进</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">detectCycle</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    dummy := &amp;ListNode&#123;</span><br><span class="line">        Next: head,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fast, slow := dummy, dummy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">        fast = fast.Next.Next</span><br><span class="line">        slow = slow.Next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> fast == slow &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> fast == <span class="literal">nil</span> || fast.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fast = dummy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> fast != slow &#123;</span><br><span class="line">        fast = fast.Next</span><br><span class="line">        slow = slow.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fast</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY-5">DAY 5</h1><p>周日休息</p>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-linked-list.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『代码随想录』数组（Array）</title>
      <link>https://nickxu.me/post/programmercarl-array.html</link>
      <guid>https://nickxu.me/post/programmercarl-array.html</guid>
      <pubDate>Wed, 25 Oct 2023 15:35:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;DAY-1&quot;&gt;DAY 1&lt;/h1&gt;
&lt;p&gt;本篇内容包含数组的两类经典题目：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;二分查找&lt;/li&gt;
&lt;li&gt;双指针&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&quot;704-二分查找&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/binary-search/&quot;&gt;704.二分查找&lt;/a&gt;&lt;/h1&gt;
&lt;details class=&quot;toggle&quot; &gt;&lt;summary class=&quot;toggle-button&quot; style=&quot;&quot;&gt;相关链接&lt;/summary&gt;&lt;div class=&quot;toggle-content&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE&quot;&gt;代码随想录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1fA4y1o715/?vd</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="DAY-1">DAY 1</h1><p>本篇内容包含数组的两类经典题目：</p><ol><li>二分查找</li><li>双指针</li></ol><hr><h1 id="704-二分查找"><a href="https://leetcode.cn/problems/binary-search/">704.二分查找</a></h1><details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><ul><li><a href="https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">代码随想录</a></li><li><a href="https://www.bilibili.com/video/BV1fA4y1o715/?vd_source=e2613baf768b2432fcb2b9edd79c0c68">视频讲解</a></li></ul></div></details><h2 id="边界条件注意">边界条件注意</h2><p>Carl 哥的视频讲的很清楚，墙裂建议观看</p><p>主流的就是两种写法，左闭右闭和左闭右开，如果你选择了一种写法，就应该全程保持这一种写法</p><ul><li><p>左闭右闭</p><p>起始区间为 <code>[0,n - 1]</code> ，继续循环的条件是区间合法，也就是 <code>left &lt;= right</code></p><p>更新左右边界值时，由于 <code>mid</code> 已经被排除，所以更新为 <code>mid + 1</code> 与 <code>mid - 1</code></p></li><li><p>左闭右开</p><p>起始区间为 <code>[0,n]</code> ，因为 <code>[1,1)</code> 不是一个合法的区间（左右不能相等），所以 <code>left &lt; right</code></p><p>更新左右边界值时，因为左闭所以 <code>mid + 1</code> ，而右开所以 <code>mid</code> （已经排除了但是右边界是开的）</p></li></ul><h2 id="整数溢出问题">整数溢出问题</h2><p>计算 <code>mid</code> 通常使用 <code>(left + right) / 2</code></p><p>但是如果 <code>left</code> 和 <code>right</code> 很大，就可能溢出，可以使用 <code>left + (right - left) / 2</code></p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">左闭右闭区间</button></li><li class="tab"><button type="button" data-href="#样例-2">左边右开区间</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    left, right := <span class="number">0</span>, n<span class="number">-1</span> <span class="comment">// 左闭右闭</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123; <span class="comment">// [1,1] 可以是一个合理区间，所以要有等号</span></span><br><span class="line">        mid := (left + right) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; target &#123;</span><br><span class="line">            right = mid - <span class="number">1</span> <span class="comment">// 这里要减一，区间是左闭右闭，不应该再包括 mid</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">            left = mid + <span class="number">1</span> <span class="comment">// 这里要加一，区间是左闭右闭，不应该再包括 mid</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    left, right := <span class="number">0</span>, n <span class="comment">// 左闭右开</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123; <span class="comment">// [1,1) 不是一个合理区间，所以不能有等号</span></span><br><span class="line">        mid := (left + right) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; target &#123;</span><br><span class="line">            right = mid <span class="comment">// 右开</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">            left = mid + <span class="number">1</span> <span class="comment">// 左闭</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h1 id="27-移除元素"><a href="https://leetcode.cn/problems/remove-element/">27.移除元素</a></h1><details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><ul><li><a href="https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html">代码随想录</a></li><li><a href="https://www.bilibili.com/video/BV12A4y1Z7LP/">视频讲解</a></li></ul></div></details><p>经典双指针</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="type">int</span>, val <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    left, right := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> right &lt; n &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[right] != val &#123;</span><br><span class="line">            nums[left] = nums[right]</span><br><span class="line">            left++</span><br><span class="line">        &#125;</span><br><span class="line">        right++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34.在排序数组中查找元素的第一个和最后一个位置</a></h1><p>解法很多，我选择分别查找第一个和最后一个位置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchRange</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">int</span>&#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []<span class="type">int</span>&#123;findFirst(nums, target), findLast(nums, target)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findFirst</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    left, right := <span class="number">0</span>, n<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> nums[left] == target &#123;</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">        mid := (left + right) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt; target &amp;&amp; mid+<span class="number">1</span> &lt; n &amp;&amp; nums[mid+<span class="number">1</span>] == target &#123;</span><br><span class="line">            <span class="keyword">return</span> mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt;= target &#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findLast</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    left, right := <span class="number">0</span>, n<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> nums[right] == target &#123;</span><br><span class="line">        <span class="keyword">return</span> right</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">        mid := (left + right) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; target &amp;&amp; mid<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; nums[mid<span class="number">-1</span>] == target &#123;</span><br><span class="line">            <span class="keyword">return</span> mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt;= target &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了眼题解，发现另一种写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchRange</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">int</span>&#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []<span class="type">int</span>&#123;findFirst(nums, target), findLast(nums, target)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findFirst</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    left, right := <span class="number">0</span>, n<span class="number">-1</span></span><br><span class="line">    ans := <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">        mid := (left + right) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; target &#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">            ans = mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findLast</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    left, right := <span class="number">0</span>, n<span class="number">-1</span></span><br><span class="line">    ans := <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">        mid := (left + right) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt; target &#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">            ans = mid</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="35-搜索插入位置"><a href="https://leetcode.cn/problems/search-insert-position/">35.搜索插入位置</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    left, right := <span class="number">0</span>, n<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">        mid := (left + right) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; target &#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY-2">DAY 2</h1><p>本篇内容包含数组的另外两类经典题目：</p><ol><li>滑动窗口</li><li>模拟</li></ol><p>同时复习一下双指针</p><hr><h1 id="977-有序数组的平方"><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977.有序数组的平方</a></h1><details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><ul><li><a href="https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html">代码随想录</a></li><li><a href="https://www.bilibili.com/video/BV1QB4y1D7ep">视频讲解</a></li></ul></div></details><p>想多了，居然想从中间入手往两边扫</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortedSquares</span><span class="params">(nums []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &lt; <span class="number">0</span> &#123;</span><br><span class="line">            nums[i] = -nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    idx := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> idx+<span class="number">1</span> &lt; n &amp;&amp; nums[idx+<span class="number">1</span>] &lt;= nums[idx] &#123;</span><br><span class="line">        idx++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    left, right := idx<span class="number">-1</span>, idx+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    ans := []<span class="type">int</span>&#123;nums[idx] * nums[idx]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> left &gt;= <span class="number">0</span> || right &lt; n &#123;</span><br><span class="line">        <span class="keyword">for</span> left &gt;= <span class="number">0</span> &amp;&amp; (right &gt;= n || nums[left] &lt;= nums[right]) &#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, nums[left]*nums[left])</span><br><span class="line">            left--</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> right &lt; n &amp;&amp; (left &lt; <span class="number">0</span> || nums[right] &lt;= nums[left]) &#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, nums[right]*nums[right])</span><br><span class="line">            right++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了题解之后发现直接从两边向中间就行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortedSquares</span><span class="params">(nums []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    ans := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">    idx := n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    left, right := <span class="number">0</span>, n<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> left != right &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[left]*nums[left] &gt;= nums[right]*nums[right] &#123;</span><br><span class="line">            ans[idx] = nums[left] * nums[left]</span><br><span class="line">            idx--</span><br><span class="line">            left++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans[idx] = nums[right] * nums[right]</span><br><span class="line">            idx--</span><br><span class="line">            right--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans[idx] = nums[left] * nums[left]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="209-长度最小的子数组"><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209.长度最小的子数组</a></h1><details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><ul><li><a href="https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">代码随想录</a></li><li><a href="https://www.bilibili.com/video/BV1tZ4y1q7XE">视频讲解</a></li></ul></div></details><p>经典滑动窗口</p><p><code>for</code> 外层是窗口的右边界，如果满足条件则记录并尝试移动左边界</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minSubArrayLen</span><span class="params">(target <span class="type">int</span>, nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">    ans := math.MaxInt</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> left, right := <span class="number">0</span>, <span class="number">0</span>; right &lt; n; right++ &#123;</span><br><span class="line">        sum += nums[right]</span><br><span class="line">        <span class="keyword">for</span> sum &gt;= target &#123;</span><br><span class="line">            ans = min(ans, right-left+<span class="number">1</span>)</span><br><span class="line">            sum -= nums[left]</span><br><span class="line">            left++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ans == math.MaxInt &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i &lt; j &#123;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="59-螺旋矩阵-II"><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59.螺旋矩阵 II</a></h1><details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><ul><li><a href="https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html">代码随想录</a></li><li><a href="https://www.bilibili.com/video/BV1SL4y1N7mV/?vd_source=e2613baf768b2432fcb2b9edd79c0c68">视频讲解</a></li></ul></div></details><p><s>自己写的，感觉纯脑筋急转弯</s></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateMatrix</span><span class="params">(n <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    ans := <span class="built_in">make</span>([][]<span class="type">int</span>, n)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        ans[i] = <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x, y := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    curr := <span class="number">1</span></span><br><span class="line">    <span class="built_in">len</span> := n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i++ &#123;</span><br><span class="line">            ans[x][y] = curr</span><br><span class="line">            y++</span><br><span class="line">            curr++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">len</span>--</span><br><span class="line">        y--</span><br><span class="line">        x++</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i++ &#123;</span><br><span class="line">            ans[x][y] = curr</span><br><span class="line">            x++</span><br><span class="line">            curr++</span><br><span class="line">        &#125;</span><br><span class="line">        y--</span><br><span class="line">        x--</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i++ &#123;</span><br><span class="line">            ans[x][y] = curr</span><br><span class="line">            y--</span><br><span class="line">            curr++</span><br><span class="line">        &#125;</span><br><span class="line">        y++</span><br><span class="line">        x--</span><br><span class="line">        <span class="built_in">len</span>--</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i++ &#123;</span><br><span class="line">            ans[x][y] = curr</span><br><span class="line">            x--</span><br><span class="line">            curr++</span><br><span class="line">        &#125;</span><br><span class="line">        y++</span><br><span class="line">        x++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/programmercarl-array.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>『OSPP2023』我与 OSPP 的故事 —— 项目经验分享</title>
      <link>https://nickxu.me/post/my-story-with-OSPP-project-experience-sharing.html</link>
      <guid>https://nickxu.me/post/my-story-with-OSPP-project-experience-sharing.html</guid>
      <pubDate>Sun, 15 Oct 2023 12:58:06 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;书接上文 &lt;a href=&quot;https://nickxu.me/2023/06/my-story-with-OSPP-from-hearing-to-being-selected.html&quot;&gt;『OSPP2023』我与 OSPP 的故事 —— 从听闻到中选&lt;/a&gt; ，本文注重于描写项目开发的经历&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;项目基本信息&quot;&gt;项目基本信息&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;项目名称：为 Envoy Go 扩展建设插件市场&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;项目导师：纪卓志&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;项目描述：&lt;/p&gt;
&lt;p&gt;Envoy 是当前最流行的网络代理之一，Go 扩展是 MOSN 社区为 Envoy 增加的 Go 生态基础，也是 MOSN 社区 MoE 框架的基础。&lt;/p&gt;
&lt;p&gt;受益于Golang生态系统，研发可以轻松在 Envoy 实现插件用于更多的长尾场景，其中很多场景都是通用的。&lt;/p&gt;
&lt;p&gt;本项目是为Envoy Go 扩展构建插件市场。在插件市场中，人们可以在插件市场中分享插件，选用已经存在的插件。通过插件市场，可以让 Envoy</description>
        
      
      
      
      <content:encoded><![CDATA[<p>书接上文 <a href="https://nickxu.me/2023/06/my-story-with-OSPP-from-hearing-to-being-selected.html">『OSPP2023』我与 OSPP 的故事 —— 从听闻到中选</a> ，本文注重于描写项目开发的经历</p><hr><h1 id="项目基本信息">项目基本信息</h1><ul><li><p>项目名称：为 Envoy Go 扩展建设插件市场</p></li><li><p>项目导师：纪卓志</p></li><li><p>项目描述：</p><p>Envoy 是当前最流行的网络代理之一，Go 扩展是 MOSN 社区为 Envoy 增加的 Go 生态基础，也是 MOSN 社区 MoE 框架的基础。</p><p>受益于Golang生态系统，研发可以轻松在 Envoy 实现插件用于更多的长尾场景，其中很多场景都是通用的。</p><p>本项目是为Envoy Go 扩展构建插件市场。在插件市场中，人们可以在插件市场中分享插件，选用已经存在的插件。通过插件市场，可以让 Envoy、MoE 生态变得更加开放、共享、丰富。</p></li><li><p>项目链接：</p><p><a href="https://summer-ospp.ac.cn/org/prodetail/23f080259?lang=zh&amp;list=pro">https://summer-ospp.ac.cn/org/prodetail/23f080259?lang=zh&amp;list=pro</a></p></li></ul><h1 id="项目迭代经历">项目迭代经历</h1><p>首先我想说这个项目的架构设计经历了多次变动，发现最后做出来的和最开始想的根本不是一个东西（笑）</p><p>一开始 OSPP 上简短的描述并不能让我了解太多，于是我开始翻 MOSN 的文档，并且和导师在 <a href="https://github.com/mosn/envoy-golang-filter-hub/issues/1">Issue</a> 下交流更为详细的需求</p><p>需要实现的是一个插件市场，也就是类似于 <a href="https://marketplace.visualstudio.com/vscode">VSCode Marketplace</a> 或者 <a href="https://github.com/marketplace?type=actions">GitHub Marketplace</a> 的效果，含插件提交、审核、版本管理和二进制构建分发等</p><p><img src="https://image.nickxu.me/202310171527416.png" alt="image-20231017下午32737287"></p><p>我的构想是分为三个部分，GitHub、后端本体还有镜像仓库</p><p>开发者在自己的仓库里开发，如果要上架的话需要移交仓库权限到官方组织里，发布新版本就正常 Release，可以通过 GitHub Actions 通知后端或者由后端来轮询同步</p><p>后端同步仓库情况，维护插件列表与各自的历史版本，同时对每个版本都编译并推送镜像</p><p><img src="https://image.nickxu.me/202310171109975.png" alt="v1.全局设计"></p><p>而对于后端内部，我当初打算搓一套微服务，还画了微服务拆分与架构图（</p><p><img src="https://image.nickxu.me/202310171200663.png" alt="v1.微服务拆分"></p><p><img src="https://image.nickxu.me/202310171109179.png" alt="v1.后端架构"></p><p>然而项目的难点实际上不在于要用什么什么复杂的技术，而在于整体的面向用户的设计，能有一套实际落地可执行的方案</p><p><img src="https://image.nickxu.me/202310172246309.png" alt="image-20231017下午104608175"></p><blockquote><p>感谢导师及时为我指明方向 ❤️</p></blockquote><p>我觉得导师说的的确很有道理，需要交付 MVP 最小价值产品，它指的是产品在满足基本功能需求的前提下，具有的最小的功能集合</p><p>于是，后端肯定是一个简单单体了，并且仓库变成了各自独立开发，目前主要的工作放在细化整个链路上的各个环节</p><p>OK，我们的目标是搭建一个插件市场，插件本体作为 Docker Image 的形式分发，为了达到这个目标，我们需要解决几个子问题</p><ul><li>提交流程该如何设计<ul><li>上架一个插件，用户需要提交哪些内容？</li></ul></li><li>审核流程该如何设计<ul><li>哪些行为需要审核？</li><li>如何审核，自建审核系统，还是依托其他服务？</li></ul></li><li>如何进行版本管理<ul><li>如何上架新版本</li><li>如何下架一个版本</li></ul></li><li>元信息（名称描述分类等）如何存储<ul><li>是全部都存在插件本体中，然后平台后端全量缓存</li><li>还是一部分打包在插件中，另一部分单独在后端保存</li></ul></li><li>插件本体（Docker镜像）该如何构建，存储与分发<ul><li>是我们负责构建存储分发一条龙</li><li>还是交给用户存储在第三方（如 Docker Hub），我们只保存地址？</li></ul></li></ul><p>自己摸索无异于闭门造车，我认为可以参考一下其他平台的做法</p><p>因此，我研究了 8 个类似的或者可以提高参考价值的平台，观察他们是如何解决这些问题的，总结为下表：</p><table><thead><tr><th>平台/市场</th><th>提交流程</th><th>审核机制</th><th>版本管理</th><th>验证官方发布</th><th>元信息保存</th><th>官方文档</th></tr></thead><tbody><tr><td><a href="https://marketplace.visualstudio.com/vscode">Visual Studio Code Marketplace</a></td><td>1. 将插件打包为 <code>.vsix</code> 文件<br>2. 在 <a href="https://azure.microsoft.com/services/devops/">Azure DevOps</a> 使用Microsoft 帐户创建账号并获取 Token<br />3. 使用同一Microsoft 帐户在 <a href="https://marketplace.visualstudio.com/manage">Visual Studio Marketplace</a> 创建发布者 <br />4. 使用 <code>vsce login</code> 与  <code>vsce publish</code> 命令发布插件</td><td>在 Visual Studio Marketplace 上由 Marketplace 团队进行审核</td><td>1. 更新 <code>package.json</code> 的版本号<br>2. 使用 <code>vsce publish</code> 发布新版本<br />3. 无法直接删除特定版本，需要联系官方支持团队进行处理</td><td><a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension#verify-a-publisher">通过验证是否持有该公司/组织的域名</a></td><td>保存在项目的 <code>package.json</code> 中<br />包含唯一标识、名称、描述、版本号、发布者名称、兼容的 VSC 版本、分类、关键词等</td><td><a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">Publishing Extensions | Visual Studio Code Extension API</a></td></tr><tr><td><a href="https://plugins.jetbrains.com/">JetBrains Plugin Repository</a></td><td>1. 在官网上创建账号<br>2. 在创建插件页面上传插件 JAR/ZIP 文件并发布</td><td>由 JetBrains 团队进行审核</td><td>1. 上传新的插件文件<br>2. 在“Versions”选项卡中删除旧版本</td><td>暂无明确的官方验证机制</td><td>大部分保存在项目的 <code>plugin.xml</code> 中，但分类是在发布的页面手动指定</td><td><a href="https://plugins.jetbrains.com/docs/marketplace/uploading-a-new-plugin.html">Uploading a new plugin | JetBrains Marketplace Documentation</a></td></tr><tr><td><a href="https://github.com/marketplace?type=actions">GitHub Actions</a></td><td>1. 在 GitHub 仓库中完成开发，并编写 <code>action.yml</code><br />2. 创建一个 release ，勾上发布到市场，同时填写分类等信息</td><td>无审核机制，发布后即可使用</td><td>1. 创建新的 release， 并勾上发布到市场<br />2. 如要删除发布，取消勾选并保存即可</td><td>仓库属于哪个组织，就是由哪个组织发布的</td><td>大部分保存在项目的 <code>action.yml</code> 中，但分类是在发布的页面手动指定</td><td><a href="https://docs.github.com/zh/actions/creating-actions/publishing-actions-in-github-marketplace">在 GitHub Marketplace 中发布操作 - GitHub 文档</a></td></tr><tr><td><a href="https://chrome.google.com/webstore/category/extensions">Chrome Web Store</a></td><td>1. 在 Chrome 开发者仪表盘创建新项目<br>2. 上传 <code>.zip</code> 文件包含扩展的所有代码<br>3. 填写项目详情，如名称、描述、图标、预览图等<br>4. 提交审核并支付开发者注册费用</td><td>由 Google 团队进行人工审核，内容涵盖性能、安全、隐私等方面</td><td>1. 在开发者仪表盘提交新的 <code>.zip</code> 文件<br>2. 旧版本不会被自动删除，用户可以在商店中查看所有版本</td><td>通过 Google 账户验证</td><td>一部分保存在项目的 <code>manifest.json</code> 中，如名称、版本号、描述等<br />其余信息如图标、预览图、详细描述在开发者仪表盘填写</td><td><a href="https://support.google.com/chrome/a/answer/2714278?hl=zh-Hans">创建和发布自定义 Chrome 应用和扩展程序 - Chrome Enterprise and Education帮助</a></td></tr><tr><td><a href="https://www.apple.com/app-store/">Apple App Store</a></td><td>1. 注册成为 Apple 开发者并支付年费<br>2. 使用 Xcode 开发应用并配置相关信息<br>3. 在 App Store Connect 上创建应用并上传<br>4. 提交审核请求</td><td>由 Apple 团队进行严格审核，包括功能、安全性、隐私、设计等方面</td><td>1. 在 Xcode 中更新版本号和构建号<br>2. 在 App Store Connect 上上传新版本并提交审核<br>3. 旧版本自动下架</td><td>通过 Apple Developer Program 验证身份</td><td>最基础的部分保存在项目的  <code>Info.plist</code> 中，如版本号，构建号，唯一标识，设备上显示的名称<br />另一部分是在 App Store Connect 上，包括在App Store上的应用名称、描述、版本号、类别、预览截图等</td><td><a href="https://developer.apple.com/cn/ios/submit/">将 iOS App 提交至 App Store - Apple Developer</a></td></tr><tr><td><a href="https://cn.wordpress.org/plugins/">WordPress Plugin Repository</a></td><td>1. 在官网上注册账号<br>2. 在 SVN 仓库中添加插件代码<br>3. 使用 Readme Validator 验证 <code>readme.txt</code><br>4. 在官网上提交插件并等待审核</td><td>由 WordPress 团队进行审核，主要关注插件的功能和安全性</td><td>1. 在 SVN 仓库中更新插件和 <code>readme.txt</code> 的版本号<br>2. 在官网上标记新版本的发布<br>3. 旧版本仍然可用</td><td>没有明确的官方验证机制</td><td>保存在项目的 <code>readme.txt</code> 中，包括名称、描述、版本号、作者、标签等</td><td><a href="https://codex.wordpress.org/zh-cn:%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6">zh-cn:开发一个插件 « WordPress Codex</a></td></tr><tr><td><a href="https://hub.docker.com/search?q=&amp;type=extension">Docker Extension</a><br /></td><td>1. 在Docker Hub上注册账号<br>2. 构建好你的扩展镜像，并提交到 Docker Hub<br />3. 选择一种发布方式并等待审核</td><td>可以选择<a href="https://github.com/docker/extensions-submissions/issues/new?assignees=&amp;labels=&amp;template=1_automatic_review.yaml&amp;title=%5BSubmission%5D%3A+">自行发布</a>或者<a href="https://www.docker.com/products/extensions/submissions/">请求官方审核</a></td><td>1. 推送新版本的扩展 Docker Image ，并带有递增的版本标记<br />2. 像管理你的镜像版本一样管理你的扩展版本</td><td><a href="https://docs.docker.com/docker-hub/publish/">加入 Docker Verified Publisher Program</a></td><td>保存在扩展镜像中的 <code>metadata.json</code> 中，当然官方肯定也会缓存一部分</td><td><a href="https://docs.docker.com/desktop/extensions-sdk/extensions/publish/">Publish your extension to the marketplace</a></td></tr><tr><td><a href="https://openai.com/blog/chatgpt-plugins">ChatGPT Plugins</a></td><td>1. 搭建好你的 API 服务<br />2. 以官方的格式创建 JSON/YAML 文件描述你的插件，并保存在域名下</td><td>目前是在官网通过机器人递交表单，然后人工审核</td><td>1. 更新你部署即可<br />2. 不需要维护多版本，访问到的就是你部署的最新版本</td><td>暂无明确的官方验证机制</td><td>大部分保存在你部署的 API 的域名下的 YAML/JSON 文件中，官方服务器仅保存名称，描述及域名等基本信息</td><td><a href="https://platform.openai.com/docs/plugins/getting-started">Getting Started - OpenAI API</a></td></tr></tbody></table><p>依此，我进行以下设计（下面节选自 Proposal）</p><blockquote><ul><li><p>在提交流程这一步来看，我感觉 GitHub Actions 的流程和我们的项目是最贴切的，毕竟我们希望尽可能地利用 GitHub 的基础设施，我认为我们也可以将仓库的一个 Release 关联到插件的一个版本</p></li><li><p>审核机制来看，大部分都是平台自建审核功能，而我也注意到了Docker Extension 的 <a href="https://github.com/docker/extensions-submissions/issues/new?assignees=&amp;labels=&amp;template=1_automatic_review.yaml&amp;title=%5BSubmission%5D%3A+">自行发布</a> 的做法，我认为可以借鉴他的做法：他是一个 Issue Form 对应一个申请，然后，用 tag 标记状态，并由 GitHub Actions 自动检查是否符合条件，这种做法让我想起来社团里有学长加友链也是<a href="https://github.com/aFlyBird0/blog-friends/issues/new/choose">这么</a>搞的， Issue Form 真的可玩性挺高的</p><p>而对于我们来说，可以根据审核的事件类型自定义要不要加人工审核，比如说上架，机器人检查通过之后（这个 repo 的确按照我们规定的格式编写好了插件，可以编译成 Docker Image），可以自动 @ 管理员来人工审核并通过（更改 tag 并关闭 issue），如果有问题则可以在这个 issue 下面继续交流</p></li><li><p>版本管理来看，可以使用与 GitHub Actions 一样的关联 Release 的做法，然后上架或者下架新版本都需要提交审核申请，添加/解除与一个 Release 的关联</p></li><li><p>验证官方发布来看，也可以和 GitHub Actions 一样，仓库在谁手里就是谁发布的，当然还可以以提交审核的方式认证一些别的 tag</p></li><li><p>关于元信息存储，我的看法是与 Visual Studio Code 一样在本体中全量存储（比如在根目录的 <code>metadata.json</code> ） ，然后后端数据库缓存一份，并且始终缓存最新版的信息，这种做法对后端应该最方便，但是对用户来说可能有点麻烦，毕竟你要改描述或者分类这种信息也需要再发布一个新版本</p><p>也就是说，只要插件的仓库中有一个能编译出来镜像的 <code>Dockerfile</code> ，以及一个符合规范的 <code>metadata.yaml</code> ，就够了</p></li><li><p>插件本体存储来看，除去 ChatGPT Plugins 提交的是 API 之外，其他的都是提交并分发一个能离线运行的实体，有些实体是不需要编译的，直接提交源码即可，有些是提交了编译后的产物（如 JAR 包），而在这些案例中大多数都是直接提交编译后的二进制，但是 Docker Extension 有所不同，他是让用户自行将 Docker Image 提交到 Docker Hub ， 然后提交扩展的时候就上交一个链接就好了，如果我们也这样做的话就是把存储成本转嫁给用户，但是从稳定性来看感觉不妥，当然你也可以说 Docker Hub 是他们自家的存储设施，我的结论就是由我们自己负责编译和存储</p></li></ul><p>另外，作为一个市场还可以有评分和评论的功能，但是我感觉没什么必要，评分的话看仓库的 star 应该就可以了，如果对插件有什么看法的话也可以直接去提一个 issue，当然如果要做的话也可以用 <a href="https://giscus.app/zh-CN">giscus</a> 这种解决方法，直接依托 GitHub 的基础设施</p><p>…</p></blockquote><p>而核心的上架流程是这样的</p><blockquote><ol><li><p>在自己的 GitHub 仓库中开发好插件，包含 <code>Dockerfile</code> 与 <code>metadata.yaml</code></p></li><li><p>使用 Issue Form 提交申请，包括自己的仓库地址，同意服务条款</p></li><li><p>使用 GitHub Actions 检查是否接收了服务条款</p></li><li><p>使用 GitHub Actions 找到该项目的 Latest Release ，检查是否合规</p><ol><li><p>元数据是否符合规范、完整</p><ol><li>询问后端是否重名</li><li>是否填写了分类、分类是否在预定义的种类中</li><li>如果定义了 icon、color ，定义是否合规</li></ol></li><li><p>是否能够编译</p><p>使用 <code>docker build</code> 试编译</p></li></ol></li><li><p>自动检测通过，打上 tag ， 等待人工审核</p><p>若未通过，告知原因，并告知需要发布新版本并使用 <code>/validate</code> 重新检测</p></li><li><p>人工审核并更新 tag</p></li><li><p>GitHub Actions 识别到通过的 tag， 向后端上报要关联到的 release 版本</p></li><li><p>上架完成后自动关闭 issue</p></li></ol><p>…</p></blockquote><p>前文所说的 Docker Extension 的 <a href="https://github.com/docker/extensions-submissions/issues/new?assignees=&amp;labels=&amp;template=1_automatic_review.yaml&amp;title=%5BSubmission%5D%3A+">自行发布</a> 我感觉设计的真的很好，最大的特点就是使用 Issue Form 进行申请，然后 GitHub Actions 会自动跑一遍检查，并在 Issue 页面使用对话的形式与用户交互，如果有错误也会指出，并使用 tag 追踪状态</p><p><img src="https://image.nickxu.me/202310171132528.png" alt="image-20231017上午113215497"></p><p><img src="https://image.nickxu.me/202310171131340.png" alt="image-20231017上午113155311"></p><p><img src="https://image.nickxu.me/202310171131472.png" alt="image-20231017上午113133442"></p><p>这一设计最大的好处就是公开透明，所有与用户的交互都是公开的，并且就在 GitHub</p><p>很巧的是我们社团的 <a href="https://blog.marlene.top/index.php/develop/93.html">Marlene</a> 同学的 OSPP 项目也是做插件市场，我和他在私下讨论了这种做法，他也表示很认同，并打算借鉴这种方案</p><p>于是总体设计就变成了这个样子</p><p><img src="https://image.nickxu.me/202310171110193.png" alt="v4.全局设计"></p><p>差别不算大，但是变成了每次发版都要新增一个 Issue 并进行两段式审核，一次机审是看符不符合规范，第二次是人工审核，也就是要求中的「经过社区 review」</p><p>之后就是 OSPP 中选了，中选后被社区拉着开了次会</p><img src="https://image.nickxu.me/202310171626988.png" alt="image-20231017下午42651938" style="zoom:50%;" /><blockquote><p>有点后悔没录像，感觉开的挺好的</p></blockquote><p>会上我讲解了现在的方案，有一个问题被重点讨论，就是不再使⽤分库的形式（开发者在各⾃的仓库维护项⽬），⽽是⼤库（所有⼈向主仓库提交 PR）</p><p>这个改变有几个原因，我记得一方面能增加开发者的认同感（我给官方仓库贡献了一个插件），另一方面这个平台应该是我们与开发者共建，而不是我们去服务开发者（有点怪，但大概是这个意思）</p><p>于是，使用大库的话很多逻辑就又要改了，比方说版本管理要自己设计一套方案，我当时设计的是在元数据里记录版本，然后版本变动的时候就通知后端更新数据，把本次 commit hash 和这个插件的这个版本关联起来，再去做 bulid</p><p>为什么要做版本管理呢？这个在会上我也讨论过，比如 VSCode 的插件就有版本管理，它每个插件版本都在元数据写上能支持哪些 VSCode 版本，我觉得我们这个 MoE 的基座也会存在类似的问题</p><p>项目结构大概就是这个样子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── plugins # 插件⽬录，存储所有插件</span><br><span class="line">│   ├── example</span><br><span class="line">│   ├── example2</span><br><span class="line">│   ├── example3</span><br><span class="line">│   └── example4</span><br><span class="line">└── web</span><br><span class="line"> ├── frontend # 前端</span><br><span class="line"> └── backend  # 后端</span><br></pre></td></tr></table></figure><p>每个插件目录的必须内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">├── changelog.md # 开发者⾃⼰维护的 Markdown</span><br><span class="line">├── config.proto # 配置参数定义</span><br><span class="line">├── metadata.yaml # 插件元数据，包括名称描述分类版本等</span><br><span class="line">└── readme.md # 开发者⾃⼰维护的 Markdown</span><br></pre></td></tr></table></figure><p>这样一来，后端就需要 clone 和 pull 这个仓库，再深挖 git 历史，分析各个插件的历史版本，有点费力</p><p>为什么要这么搞呢？有没有更简单的方法，可能吧，但是我没找到</p><ul><li>Docker Extension 交的本来就是 Docker Image 的地址，Docker Hub 能给他做版本管理</li><li>而 Marlene 那是 PyPI ，版本管理那边已经做好了</li></ul><p>当然大库也不是全然没好处，我感觉这样就可以省一些逻辑，比方说貌似不需要 Issue Form 来处理各个发版事件了，也不需要维护一堆 tag，每个人直接对着仓库 PR 就行，只需要一个 Actions 里有一个简单的检查，不需要糊交互</p><p>想好了之后我开始想前后端了，MVP 的话，感觉两个接口就行，一个列表一个详情即可</p><p>而后端还需要数据库吗？啊，貌似数据库也不需要了，可以每次更新的时候直接生成 JSON 缓存，然后直接返回给前端，而查询的话至少近期可以在前端进行，这样貌似根据稳定</p><p>而 build 的话，我打算暂时先放一放吧，做最简单的打包某版本的源代码，至于编译上传 S3，或者使用 Docker Image 可以后面再说</p><p>同时，我开始糊前端，先画设计图</p><img src="https://image.nickxu.me/202310171411499.png" alt="429cdbfb0271c2ced239bae81e6748fc" style="zoom:50%;" /><p>主⻚包含列出，搜索、分类功能，详情页包含 Overview、Config、Version和 Changlog 四个 Tab</p><p>后端感觉没什么问题我就开始搓前端了，但前端我其实不是很会，但是还是在前端大佬 daidr 的帮助下完成了</p><p><img src="https://image.nickxu.me/202309281924384.png" alt=""></p><blockquote><p>首页</p></blockquote><p><img src="https://image.nickxu.me/202309281928905.png" alt=""></p><blockquote><p>详情页的 Overview ，是原 <code>readme.md</code> 的渲染</p><p>但这个渲染并不是简单的渲染，我是调用了 GitHub 的  <a href="https://docs.github.com/zh/rest/markdown/markdown?apiVersion=2022-11-28#render-a-markdown-document">Render a Markdown document</a> 接口，结合了仓库的上下文</p><p>（⽐如 <code>#1</code> 会被正确指向对应的 Issue 或者 PR）</p></blockquote><p><img src="https://image.nickxu.me/202309281926402.png" alt=""></p><blockquote><p>Config 是原 <code>config.proto</code> 的渲染</p></blockquote><p><img src="https://image.nickxu.me/202309281926047.png" alt=""></p><blockquote><p>Changelog 是原 <code>changelog.md</code> 的渲染</p></blockquote><p><img src="https://image.nickxu.me/202309281928369.png" alt=""><img src="https://image.nickxu.me/202309281927210.png" alt=""></p><blockquote><p>Versions 包含插件的所有历史版本，这个在 GitHub 直接发一个 Release 是社区里其他导师建议的</p></blockquote><p>而调试到了最后，居然感觉连后端都可以不要了（</p><p>首先由于域名备案等考虑需要，⽬前不需要有评论等交互功能，OAuth 登陆⽬前没有意义，有也可以使用静态博客的评论系统，而流量统计使用第三方服务也可以做到，至于编译推送，也可以在 GitHub Actions 中完成（我之前感觉从公网推送到内网不是很合适，但现在感觉应该也就是推到某些第三方服务上了）</p><p><img src="https://image.nickxu.me/202310172115508.png" alt="image-20231017下午91551486"></p><blockquote><p>好好好</p></blockquote><p>于是我开始把原来后端的逻辑塞到 GitHub 工作流中再重构，再进行若干修改</p><p>我想到了可以直接以 RAW 的形式直接读取仓库里的 JSON 文件，就像我的一个玩具项目一样</p><p><img src="https://image.nickxu.me/202310171410304.png" alt="7a6ab5853fd4d20854d3bdc491a72fd4"></p><p>其实没后端反而更方便了，因为我大概只需要执行这段伪代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 插件 := <span class="keyword">range</span> 所有插件 &#123;</span><br><span class="line">   <span class="keyword">if</span> 当前插件的版本没有打过tag &#123;</span><br><span class="line">       发布并更新缓存</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外还有些小改动，就是把生成的缓存移到其他分支中，因为 <code>main</code> 分支大概会有保护规则，不允许直接提交</p><p>于是我将缓存移到 <code>cache</code> 分支，并用将前端用 GitHub Page 发布，这下是真不要钱了（</p><p>再不断的调试后，到这一步，整个项目其实已经应该能跑了，而令我没想到的是，回看最开始的产出要求，我其实一个都没做到（笑）</p><ol><li>提供一个Envoy Go 插件的内容平台，在这里可以发布经过社区review的优秀插件，需要拥有服务端与前端页面</li><li>不自建账号体系，通过GitHub OAuth2.0完成用户认证与授权</li><li>进阶 - 对接GitHub OpenAPI，支持动态获取插件所在仓库信息，包括README，分支版本以及star数</li></ol><p><s>乐，只能说计划没法赶上变化</s></p><p>除此之外，还令我没想到的是导师会提那么多 LICENSE 相关的问题（</p><p><img src="https://image.nickxu.me/202310172122478.png" alt="08b0a845b2c2c0a642d8116684a9e502"></p><img src="https://image.nickxu.me/202310172123143.png" alt="397e42e1900775a5c99f0cfc6f6428ed" style="zoom:50%;" /><img src="https://image.nickxu.me/202310172123387.png" alt="86a757d0c923feb50298e40519ea5223" style="zoom: 67%;" /><p>我大概了解各自开源协议的含义，但还从没认真对待过</p><p>至于未来这个项目会怎么发展，导师说还可以用 <a href="https://docusaurus.io/zh-CN/">Docusaurus</a> 做生成的静态前端，我想也是，这样就不用生成 cache 了，直接更新前端，能少一次请求</p>]]></content:encoded>
      
      
      <category domain="https://nickxu.me/categories/OSPP/">OSPP</category>
      
      
      <category domain="https://nickxu.me/tags/OSPP/">OSPP</category>
      
      
      <comments>https://nickxu.me/post/my-story-with-OSPP-project-experience-sharing.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>你还惦记着你那二面呢｜Allow Everything to Happen</title>
      <link>https://nickxu.me/post/allow-everything-to-happen.html</link>
      <guid>https://nickxu.me/post/allow-everything-to-happen.html</guid>
      <pubDate>Thu, 12 Oct 2023 16:56:14 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://image.nickxu.me/202310130057300.png&quot; alt=&quot;f6d2c2d5852e153218a05493c7948488&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「你还惦记着你那二面呢」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我真的好累，今天还吐了，感觉病了&lt;/p&gt;
&lt;p&gt;我消失了很长一段时间，本来我想写一篇长文，记录我从 8 月 22 号返校到现在发生的所有事情&lt;/p&gt;
&lt;p&gt;但是我真的好累，简单地说，就是诸事不顺，面试、亚运、学业…我不想写&lt;/p&gt;
&lt;p&gt;我总是想在最后来一波升华，但是我其实并没有走出来，架构不出，我写不出来&lt;/p&gt;
&lt;p&gt;我太想成功了，但这正是我没法成功的原因&lt;/p&gt;
&lt;p&gt;就像你找东西，你越找就越找不到，经常是后面不经意的时候突然就冒出来了&lt;/p&gt;
&lt;p&gt;就我现在这个状态，我想留一句话，与君共勉吧&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Allow everything to happen｜允许所有事情发生&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后，我还想说&lt;/p&gt;
&lt;p&gt;爸爸妈</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://image.nickxu.me/202310130057300.png" alt="f6d2c2d5852e153218a05493c7948488"></p><blockquote><p>「你还惦记着你那二面呢」</p></blockquote><p>我真的好累，今天还吐了，感觉病了</p><p>我消失了很长一段时间，本来我想写一篇长文，记录我从 8 月 22 号返校到现在发生的所有事情</p><p>但是我真的好累，简单地说，就是诸事不顺，面试、亚运、学业…我不想写</p><p>我总是想在最后来一波升华，但是我其实并没有走出来，架构不出，我写不出来</p><p>我太想成功了，但这正是我没法成功的原因</p><p>就像你找东西，你越找就越找不到，经常是后面不经意的时候突然就冒出来了</p><p>就我现在这个状态，我想留一句话，与君共勉吧</p><blockquote><p>Allow everything to happen｜允许所有事情发生</p></blockquote><p>最后，我还想说</p><p>爸爸妈妈，我永远爱你们❤️</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1979375472&auto=1&height=66"></iframe>]]></content:encoded>
      
      
      
      
      <comments>https://nickxu.me/post/allow-everything-to-happen.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
